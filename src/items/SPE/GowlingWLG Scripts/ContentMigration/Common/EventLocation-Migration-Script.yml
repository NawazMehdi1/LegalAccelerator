---
ID: "3b716b02-9945-4d1d-bf1e-beb99f17a48d"
Parent: "ef2cf2f6-d100-4710-8dc2-e993f032d228"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/GowlingWLG Scripts/ContentMigration/Common/EventLocation-Migration-Script"
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    $StartItemPath = '/sitecore/content/GowlingWLG/GowlingWLG/Home'
    $LandingPageItemPath = '/sitecore/content/GowlingWLG/GowlingWLG/Data/Global Objects/Event Location'
    $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Common/EventLocation_CMSTree'
    
    $OfficesTemplateID = '{6D35D469-9E90-4D14-B1A9-B675FE74B532}'
    
    $PageTemplateID = '{494CC863-9985-42FD-A55B-942287CF896C}'
    
    
    $dict=@('key','phrase');
    
    
    function ImportList($csvFilePath){
        $media = Get-Item -Path $csvFilePath
        # get stream and save content to variable $content
        [System.IO.Stream]$body = $media.Fields["Blob"].GetBlobStream()
        try    
        {
            $contents = New-Object byte[] $body.Length
            $body.Read($contents, 0, $body.Length) | Out-Null
        } 
        finally 
        {
            $body.Close()    
        }
        
        # convert to dynamic object
        $importList = [System.Text.Encoding]::Default.GetString($contents) | ConvertFrom-Csv -Delimiter ","
        return $importList;
    }
    
    function CreateItem{
        [cmdletbinding()]
        param ( 
                $name, $id=0, $language, $template, $parentItem, $createItem=$true
            )
            write-host('CreateItem $name=' + $name + ' $id='+$id+' $language='+$language+ ' $template='+$template+' $parentItem='+$parentItem+' $createItem='+$createItem)
            
            if(gci -path $parentItem -language $language | where-object{$_.Name -eq $name -or $_.ID -eq $id} -ErrorAction SilentlyContinue){
                
                $Item = gci -path $parentItem -language $language | where-object{$_.Name -eq $name -or $_.ID -eq $id}
                
            }
            #if the Item is present but not with the particular language
            elseif(gci -path $parentItem | where-object{$_.Name -eq $name -or $_.ID -eq $id} -ErrorAction SilentlyContinue){ 
                
               $languageVersions = gci -path $parentItem -language * | where-object{$_.Name -eq $name -or $_.ID -eq $id}
               $existingLanguage = ''
               foreach($languageVersion in $languageVersions){
                   $existingLanguage = $languageVersion.Language
                   break
               }
               
               $Item = gci -path $parentItem | where-object{$_.Name -eq $name -or $_.ID -eq $id} | Add-ItemLanguage -Language $existingLanguage -TargetLanguage $language
            }
            #if the id is a path and not an GUID
            elseif($createItem){
                if($id -ne 0){ 
                    
                    $Item = ni -Path $parentItem -ItemType $template -Name $name -ForceId $id -language $language
    
                }
                else{
                    
                    $Item = ni -Path $parentItem -Name $name -ItemType $template -language $language 
                    write-host($Item.fullpath)
                }
                
            }
            return $Item
    }
    
    function NullCheck($value){
            $val = if($value -eq 'NULL' -or $value -eq 'null' -or [string]::IsNullOrEmpty($value) -or $value -eq '0' -or $value -eq 0){''}else{$value}
            return $val
    }
    
    function DataItemsMapping{
        [cmdletbinding()]
        param (
            $CurrItem, $ItemName, $ItemTempID, $FieldValue, $fieldName, $ifCurrItem=$false
            )
            if($ifCurrItem){
                $Item = gi -path $CurrItem.ID -language $language
            }
            else{
                $Item = $CurrItem | get-childitem -recurse | where {$_.Name -eq $ItemName -and $_.'TemplateID' -eq $ItemTempID}
            }
            $Item.Editing.BeginEdit()
                $Item[$fieldName] = $FieldValue
            $Item.Editing.EndEdit()
            return $Item
        }
        
    function DataMapping{
            [cmdletbinding()]
        param ( 
                $value, $parentPath, $template
            )
            if($value.contains('GWLG')){
                $valArr = $value.replace('.','').replace('GWLG','').split(';')
            }
            else{
                $valArr = $value.split(';')
            }
            
            if($value.contains('GWLG.')){
                $keyArr = $value.replace('GWLG.','').replace('.','-').replace(',',' ').split(';')
            }
            else{
                $keyArr = $value.replace('.','_').replace(',',' ').split(';')
            }
            
            
            $ids=''
            for ($i = 1; $i -le $valArr.length; $i++) {
                
                
                    $Item = CreateItem -name $keyArr[$i-1] -language $row.DocumentCulture -template $template -parentItem $parentPath
                    
                    $ids += $Item.ID
                    
                    if($i -lt $valArr.length){
                    $ids += '|'
                    }
                    
                    if($template -eq $DictionaryEntryTemplate){
                        $x= DataItemsMapping -CurrItem $Item -fieldName $dict[0] -FieldValue $keyArr[$i-1] -ifCurrItem $true
                        $x= DataItemsMapping -CurrItem $Item -fieldName $dict[1] -FieldValue $valArr[$i-1] -ifCurrItem $true
                    }   
                    if($template -eq $TagTemplateID){
                        $x= DataItemsMapping -CurrItem $Item -fieldName 'Title' -FieldValue $valArr[$i-1] -ifCurrItem $true
                    }
                    write-host($ids)
                    return $ids
                
                
            }
           
        }
    
    function PageDisplayName($pageName){
        
        $normalizationForm = [System.Text.NormalizationForm]::FormD
        $normalizedString = $pageName.Normalize($normalizationForm)
        $normalizedString = $normalizedString -replace '[^\p{L}\s]', ''
        $normalizedString = $normalizedString -replace '\s+', ' '
        return $normalizedString
    }
    
    function ItemMappingWithGuid{
            [cmdletbinding()]
            param (
                $Values, $type
                )
                $fieldValue = ""
                if(NullCheck($Values)){
                    $items = $Values.split(';');
                    
                    for ($i = 1; $i -le $items.length; $i++) {
                        
                        if($type -eq 'Offices'){
                            $fieldValue +=  RelatedOffices -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'Sectors'){
                            $fieldValue +=  RelatedSectors -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'Services'){
                            $fieldValue+=  RelatedServices -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'People'){
                            $fieldValue+=  RelatedContacts -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'Topics'){
                            $fieldValue +=  RelatedTopics -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'MediaContact'){
                            $fieldValue +=  RelatedMediaContacts -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        
                       if($i -lt $items.length){
                            $fieldValue += '|'
                        }
                    }
                    
                }
                return $fieldValue;
        }    
        
    function RelatedOffices{
        [cmdletbinding()]
        param (
            $newItem, $GUID, $language
            )
        
        $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Office/Office_CMS_Tree'
        $importList = ImportList($csvFilePath);
        
        foreach($row in $importList){
            if($row.TreeNodeGUID -eq $GUID){
                foreach($countryRow in $CountryimportList){
                    if($countryRow.Locations -eq $row.Locations){
                        $OfficeName = PageName($row.NodeAliasPath)
            			$CountryName = CountryName($row.NodeAliasPath)
            			$language = $row.DocumentCulture 
                        $CountryPath = GetCountryItem($CountryName)
                        $newItem = CreateItem -name $OfficeName -id $row.TreeNodeGUID -language $language -template $OfficesTemplateID -parentItem $CountryPath -createItem $false
                        return $OfficeItem.ID
                    }
                }
            }
        }
    }
    
    function CountryName($pageName){
        
        $pageName = $pageName.split('/')[2];
        $pageName = $pageName.trim();
        
        return $pageName
    }
    
    function GetCountryItem($CountryName){
        $items = Get-ChildItem -Path $LandingPageItemPath | Where-Object { $_.Name -eq $CountryName -and $_.TemplateID -eq $CountryTemplateID}
        foreach ($item in $items) {
        	return $item.fullpath
        }
    }
    
    function EventLocationData($csvFilePath){
        $importList = ImportList($csvFilePath);
        foreach($row in $importList)
        {
            
                $pageName = PageDisplayName($row.Title)
                $language = 'en'
                $newItem = CreateItem -name $pageName -language $language -template $PageTemplateID -parentItem $LandingPageItemPath
                    #create item with ID expects args (name(string), id(GUID), languageversion(languagecode), templateID(GUID), parentItem (GUID or string))
                    
                #begin edit#
                $newItem.editing.beginedit()
                    $newItem['Title'] = NullCheck($row.Title)
                    $newItem['Building Name'] = NullCheck($row.BuildingName)
                    $newItem['Address1'] = NullCheck($row.Address1)
                    $newItem['Address2'] = NullCheck($row.Address2)
                    $newItem['Address3'] = NullCheck($row.Address3)
                    $newItem['City'] = NullCheck($row.City)
                    $newItem['ProvinceState'] = NullCheck($row.ProvinceState)
                    $newItem['PostalCode'] = NullCheck($row.PostalCode)
                    $newItem['Country'] = NullCheck($row.Country)
                    $newItem['Geographical Latitude'] = NullCheck($row.GeoLatitude)
                    $newItem['Geographical Longitude'] = NullCheck($row.GeoLongitude)
                    $newItem['Map URL'] = NullCheck($row.GoogleMapURL)
                    $newItem['Country'] = NullCheck($row.Country)
                    
                    $newItem['Phone'] = NullCheck($row.Phone)
                    
                    
                    
                $newItem.editing.endedit()
            
        }
    }
    
    
    EventLocationData($csvFilePath)
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20230803T083817Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "15ae5fe8-a03c-4538-b0bd-70af85e49a75"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20230828T183215Z
