---
ID: "ea7c8dd0-d3c0-4995-be81-dcebd1b922e8"
Parent: "6db9f297-f7c8-46dc-a758-8fc9918350a5"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Sectors/SectorLocation_CMSTree
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/EA7C8DD0D3C04995BE81DCEBD1B922E8.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "10fe8a5c-bb9e-4a65-8486-7a446431a7f5"
  Value: ﻿SectorLocationID,NodeAliasPath,DocumentCulture,TreeNodeGUID,PageName,Title,Summary,Image,ImageAltText,MainContent,Location,KeyContacts,SectorNodeGuid,DisplayCondition,Evergreen,KeyIssues,ShowViewAll,PageBackgroundColour,IntroContent,HighlightsTitle,RelatedNewsResources,ButtonText,LeftHeader,LeftContent,RightHeader,RightContent,ButtonURL,ImageSocialMedia,KeyContacts_SitecoreGUID
6,/Sectors/Infrastructure/Global,en-GB,0101075E-12C0-4DD6-BB39-525942DCD950,Global,Global,"When it comes to choosing lawyers to handle large, complex projects anywhere in the world, we offer a winning combination of experience and know-how. We advise on the most challenging and complex infrastructure and PPP projects being undertaken internationally. ",NULL,NULL,"<p>Infrastructure projects are essential to the health of any economy. Your work delivers a smooth-running society, greater mobility for people and a fertile ground for successful businesses. However, such projects are often large, complex and subject to political and legislative restraints.</p>    <p>Increasing concerns related to congested highways, overcrowded hospitals, deteriorating schools and inadequate water and sewage capacity fuel the need for improvements that are as related to the relationships between private and public stakeholders as they are to the buildings and roads themselves.</p>    <p>In many jurisdictions, there is a growing appetite for innovative solutions that support public initiatives with private sector resources and expertise.</p>    <h2>The right choice</h2>    <p>When it comes to choosing lawyers to handle large, complex projects anywhere in the world, Gowling WLG offers a winning combination of experience and know-how.</p>    <p>We advise on the most challenging and complex infrastructure and PPP projects being undertaken internationally. Our lawyers are established advisers to government bodies, contractors, sponsors and funders, and have a strong track record of delivering strategically important and high value projects.</p>    <p>We understand the full range of procurement models and advise on bid tactics and strategic procurement issues. Our team regularly advises on the sale and purchase of equity in PFI/PPP projects, different contracting structures, alliancing and partnering, wider markets initiative, outsourcing, prime contracting and long-term collaboration agreements.</p>    <h2>Areas we cover</h2>    <ul class=""two-columns"">   <li>Contracts, alliancing and outsourcing</li>   <li>Construction of courthouses and detention centres</li>   <li>Design and management of procurement processes</li>   <li>Energy from waste, cleanup and waste-disposal projects</li>   <li>Financing, including placements of debt and equity</li>   <li>Fund formation</li>   <li>Equity structuring</li>   <li>Government relations</li>   <li>Health-care facilities</li>   <li>Exit strategies, such as public financings</li>   <li>Land-use planning and zoning</li>   <li>Operations and management agreements</li>   <li>Planning strategies, approvals and advice</li>   <li>Procurement and governance of public private partnerships (PPPs/P3s)</li>   <li>Real estate developments</li>   <li>Schools and universities</li>   <li>Transport</li>   <li>Water and wastewater projects</li>  </ul>    <h2>PFI/PPP</h2>    <p>We benchmark international best practice from our experience in the UK (which is a world leader in PFI and PPP) and our work in the Middle East and Africa on PPP projects. Team members have acted for the UK Government for nearly 20 years and have successfully closed a number of PPPs for the Department of Health Commercial Directorate, the Ministry of Justice and the Ministry of Defence.</p>    <h2>Transport and ports</h2>    <p>For organisations involved in transport infrastructure projects, our team has a strong track record including ports, highways, bridges, tunnels, rail and light rail projects.</p>    <h2>Waste</h2>    <p>The Gowling WLG team is the ideal choice for cutting-edge advice in this developing area. Skills and experience have been honed in waste management and treatment projects, including energy from waste. Internationally, our team members advised CNM on the Bahrain Solid waste PPP project, the first project financed waste project in the Gulf Cooperation Council.</p>    <h2>Defence</h2>    <p>Clients choose our team for its market-leading knowledge of the defence sector, developed over time on a number of high-profile projects.</p>    <h2>Social infrastructure</h2>    <p>Our health experience&nbsp;is bolstered by an ever-growing client list, which includes the biggest names among private sector healthcare providers, social care providers, life sciences, pharmaceuticals and the NHS.</p>    <h2>Rail</h2>    <p>Gowling WLG&#39;s rail team of more than 25 lawyers works for a range of clients in the industry. We have advised European and international clients, including governments, private sector operators, developers, joint ventures and financiers, on all aspects of rail and transport law for over 20 years.</p>    <h2>Examples of our work</h2>    <ul>   <li>Advisers on three of the largest highways PPP schemes in the UK</li>   <li>Advising the Government of Rwanda on the development and financing of a number of logistics PPP projects</li>   <li>Counsel to RATP in relation to a complex leasing operation intended to fund the acquisition of new trains for the Parisian tramway</li>   <li>Advisers to the Plenary Group on the Colorado Department of Transportation&#39;s High Performance Transportation Enterprise on the US$175 million second phase of the United States&#39; 36 Managed Lanes/Bus Rapid Transit Project</li>   <li>Financing counsel to Macquarie Group as project sponsors on the US$2.1 billion public private partnership on the Downtown Tunnel/Midtown Tunnel/MLK Extension Project in Norfolk and Portsmouth, Virginia</li>  </ul>    <h2>Find out more</h2>    <p>A big team for your big challenges. Get in touch for the advice you need.</p>  ",GWLG.Global,612ac63e-b8e8-4615-beb9-be3097aed2cf;ce26ed51-95b0-44fd-86b0-2667fae0d46e;dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{D56A07D1-3171-48B1-B4C1-D123FC657893}|{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
15,/Sectors/Aviation-Aerospace-Defence/Global,en-GB,11C2D0C0-1D14-414D-B043-493736702CBC,Global,Global,"When you work in the aviation, aerospace and defence sector, you need to think domestically and internationally.",NULL,NULL,"<p>When you work in the aviation, aerospace or defence sector, the challenges you face are numerous: day-to-day operations; financing; regulatory compliance; regulatory environment; customer and supply arrangements; trade and logistics; security; acquisitions; a complex and ever-growing regulatory environment; procurement; infrastructure; protecting and commercialising technology and assets; and complex disputes.</p>    <p>It&#39;s a big list - one that requires lawyers who understand your business and market, with the ability to advise around the world in a highly complex, highly inter-woven and highly regulated industry. It requires professionals who understand the regulatory, cost and other pressures you face, and the complex, cross-border nature of the supply chains involved.</p>    <h2>Comprehensive services</h2>    <p>Gowling WLG offers all of these things. We are highly experienced&nbsp;in aviation, aerospace and defence with a long history of working in the sector.</p>    <p>We strive to provide you with the sophisticated, start-to-finish legal advice you need to achieve your commercial objectives. Multi-jurisdictional knowledge, technical excellence and sector insight&nbsp;combine to deliver fast, cost-effective results.</p>    <p>Whether your products have a civil or military application, or are highly specialised or diverse, we can provide full support. And because we&#39;re so well resourced, we can scale our practice for small to large deals, in your country or around the world.</p>    <p>Our team offers services in crucial areas such as:</p>    <ul class=""o-2-columns is-list-unstyled"">   <li>Acquisition and divestiture</li>   <li>Aircraft maintenance repair and overhaul</li>   <li>Aircraft financing - including lease and loan structures</li>   <li>Airport infrastructure</li>   <li>Air traffic control</li>   <li>Alliancing and outsourcing transactions</li>   <li>Cape Town Convention matters including International Registry</li>   <li>Certification and registration of aircraft</li>   <li>Competition and foreign investment issues</li>   <li>Contentious and non-contentious intellectual property issues</li>   <li>Defence and other procurement contracts</li>   <li>Dispute resolution</li>   <li>Drones (UAVs) regulation and licensing</li>   <li>Government relations</li>   <li>Health and safety</li>   <li>Import/export controls</li>   <li>IP protection and commercialisation of product design and know-how</li>   <li>Insurance</li>   <li>Litigation, including class actions</li>   <li>Manufacturing and supply chain issues</li>   <li>Regulatory compliance</li>   <li>Sanction, bribery and corruption</li>   <li>Satellites</li>   <li>Taxation and transfer pricing issues</li>   <li>Trade Agreements</li>   <li>Trade and export control issues</li>  </ul>    <p>In addition to our sector knowledge, our firm consistently delivers practical insight and advice in all of the &#39;usual&#39; areas of corporate deals, banking and finance, contracts and commercial law, intellectual property rights, and dispute resolution. Truly global, our lawyers have handled disputes in more than 50 jurisdictions under a variety of courts and international arbitration rules, including LCIA, ICC and UNCITRAL.</p>    <p>We are committed to delivering an effective service at a reasonable price. By making use of innovative tools and resources - such as <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"">Practical LPM</a>&trade;, Gowling WLG&#39;s comprehensive legal project management platform - we allocate our resources efficiently and offer you innovative fee models, tailored to your needs, that go beyond the traditional hourly rate.</p>    <h2>Proven track record</h2>    <ul>   <li>Advising Meggitt and UTC Aerospace Systems (Goodrich) on arrangements to supply components and sub-contracted manufacturing for projects such as the A380, the Joint Strike Fighter and Boeing 777.</li>   <li>Advising GKN on the property and environmental aspects of the &pound;1 billion sale of its 50% stake in AgustaWestland.</li>   <li>Advising international airlines, including British Airways, Air Canada, Air China, Air Pacific, Garuda Indonesia, Malaysia Airlines, Norwegian Air, Olympic Air Oman Air, Thai Airways and Turkish Airlines.</li>   <li>Advising the UK Ministry of Defence for 20 years - including on its contracts for its iconic two new aircraft carriers.</li>   <li>Serving as general counsel to NAV Canada (the Canadian Civil Air Traffic Control System), a role Gowling WLG has held since the organization&#39;s inception.</li>   <li>Providing long-term advice to major suppliers of aerospace, electronic and information security systems to commercial, defence and security customers worldwide.</li>   <li>Counsel to an unmanned aerial vehicle company, including providing advice on drone regulation on licensing and operating requirements, exemptions and updating commentary on the Canadian and American drone regulatory framework</li>   <li>Advising a US-based semiconductor design and manufacturing company in three class actions in which the plaintiffs allege price fixing and anti-competitive conduct against producers of static random access to memory (SRAM)</li>   <li>Acting for bond underwriters for redevelopment financings for many Canadian International Airports (all structured under long-term ground leases) including more than $1.5 billion in airport bond financings, construction loans and operating credits</li>   <li>Acted for Cargojet Inc. in a $74 million bought deal offering of 5.50% convertible unsecured subordinated debentures</li>   <li>Advising a major Canadian airline on the maintenance, repair and overhaul of its aircraft.</li>  </ul>    <h2>Learn more</h2>    <p>You can count on Gowling WLG to assist your business in becoming a leaner, more profitable enterprise. To learn more about how we can help you succeed, please contact any member of our team.</p>  ",GWLG.Global,ff6c0bfb-40e4-432b-8b21-fa0689b68388;3a0c975c-ae61-4906-9ee2-b44185806511,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3F5ED8F2-BBE3-4F80-A2B3-6D1332B15AF1}|3a0c975c-ae61-4906-9ee2-b44185806511
18,/Sectors/Construction-Engineering/Global,en-GB,FE666B90-1152-486A-B2FA-07825C5226EA,Global,Global,"Construction is a diverse, complex and multibillion-dollar industry. The rewards can be high - but with correspondingly high risk.",~/getmedia/a2881f7e-ba07-43f8-b047-1d51c8908777/S-S_Construction_desktop.jpg.xml?width=1400&height=541&ext=.jpg,NULL,"<p>Construction is a diverse, complex and multibillion-dollar industry. The rewards can be high - but with correspondingly high risk. To bring any project to completion, you need practical legal advice and representation during all phases of the construction process to increase your chances of delivering a project on time, on budget and with minimal risks.</p>    <p>At Gowling WLG, we want to be an integral part of your team, providing one-stop advice from project conception to completion. As part of your industry, we understand the issues you face, the obstacles to avoid and how to maintain momentum on any project.</p>    <h2>Cradle-to-grave service</h2>    <p>Representing major contractors and leading developers, we enjoy strong and longstanding relationships with some of the sector&#39;s most significant players. Our strong client base also includes employers, funds and end-users.</p>    <p>In working with us, you&#39;ll be engaging a cradle-to-grave team with substantial experience. Our lawyers have worked on all types of projects for all parties in all sectors: infrastructure/P3, energy (hydro-electric, LNG, renewable, nuclear), mining, oil and gas, financial, conventional construction, industrial, residential and commercial. Because we operate globally, we can seamlessly manage your project wherever it&#39;s based.</p>    <h2>A commercial approach</h2>    <p>Technical excellence is a given, but with backgrounds in the construction industry, we also provide a commercial approach. With many years&#39; combined experience, we have in-depth knowledge of all the major standard forms of industry contracts, as well as the ability to draft and negotiate bespoke documentation. You can obtain tailored&nbsp;advice at every stage of the development process - from project conception and choice of procurement, through to the tender process, complex contractual negotiations, contract management, dispute avoidance and resolution.</p>    <p>Our track record in all forms of dispute resolution - including mediation, adjudication, conciliation, litigation and arbitration - means you&#39;re in safe hands. It&#39;s why we can frequently be found advising big-name companies on big-ticket cases.</p>    <p>Effective legal counsel is critically important to increasing the chances of completing your project on time, on budget and with minimal risks. That&#39;s why our goal is to be an integral member of your team.</p>    <h2>Genuine specialists</h2>    <p>As a global law firm, Gowling WLG is home to hundreds of legal professionals - many of whom specialise in areas of law directly related to the construction and engineering industry, including:</p>    <ul>   <li>Disputes</li>   <li>Employment and labour law</li>   <li>Energy</li>   <li>Environmental law</li>   <li>Financial services</li>   <li>Government affairs</li>   <li>Indigenous law</li>   <li>Insurance &amp; professional liability</li>   <li>Intellectual property law</li>   <li>Municipal law</li>   <li>Occupational health and safety</li>   <li>Real estate</li>   <li>Regulatory law</li>   <li>Surety bonds</li>  </ul>    <p>Our contract services involve assistance with the bidding, tendering and RFP/RFQ process, land acquisitions and security issues, regulatory approvals, and the protection of intellectual property and confidentiality requirements. Our litigation services include advancing and defending lien rights and claims, receivership and bankruptcy matters, third party and product liability, and statutory liabilities.</p>    <h2>In tune with your changing reality</h2>    <p>Because we&#39;re embedded in the construction industry, our team is the first to know about the latest changes that could impact your business and your bottom line.</p>    <p>In Canada, these include extensive amendments to Ontario&#39;s <em>Construction Lien Act</em> (CLA). Anticipated in early 2018, the amendments are expected to introduce a new prompt payment regime, the use of adjudication to resolve construction disputes, and changes to lien rights and time periods. To learn more, <a href=""~/en/topics/ontario-bill-142-and-construction-law-reform/"">visit our <abbr title=""Construction Lien Act"">CLA</abbr> resource</a> page.</p>    <h2>Find out more</h2>    <p>If you&#39;re looking for strong experience, top-notch advice and unparalleled service, Gowling WLG is the go-to choice. To learn more about how we can help you succeed, please contact any member of our team.</p>  ",GWLG.Global,fee46864-312d-4663-a0fc-5e30836efd91;1bcef802-e18d-4c52-9203-5d613c802e3f;dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{455ABB31-95A8-44A4-BB66-D1D901A9122B}|{D2D321DE-981F-4805-A2FD-88D01F4EFD96}|{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
21,/Sectors/Energy/Global,en-GB,A95E37FD-B615-449F-B59D-D11205EEE08C,Global,Global,We help clients identify and overcome challenges and take advantage of the opportunities arising in the fast-paced and heavily regulated energy sector.,NULL,NULL,"<p>The global energy sector is experiencing a period of unprecedented change. As the demand for affordable, secure and sustainable energy supplies continues to grow, rapid developments in generation, transmission and distribution technologies are creating vast new opportunities for investors, power consumers, governments, energy workers and industry thought leaders. With the energy market of tomorrow likely to look very different to that of today, you need experienced advisors in energy law who offer in-depth industry knowledge, practical solutions and sound legal advice.</p>    <p>Working across several practice areas, our energy team operates internationally, serving clients in numerous energy technologies, including ag-energy, biogas, capacity markets, energy storage, geothermal, hydro, <a href=""~/en/news/firm-news/2021/gowling-wlg-s-new-hydrogen-group/"">hydrogen</a>, <a href=""~/en/sectors/nuclear/"">nuclear</a>, <a href=""~/en/sectors/oil-gas/global/"">oil and gas</a>, solar, and wind. We advise governments, regulators, project developers, network companies, financial institutions and investors, energy suppliers and traders, technology companies and sector supply chains, among others.</p>    <p>We have a deep knowledge of the energy industry and the requirements for success, meaning we can help our clients identify and overcome challenges and take advantage of the opportunities arising in what is a fast-paced and heavily regulated sector.</p>    <h2>Full-service support</h2>    <p>Our clients look to us for timely, innovative solutions across a wide range of areas, including:</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Corporate Governance</li>   <li><a href=""~/en/services/dispute-resolution/#uk"">Dispute Resolution</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#global"">Employment, Labour &amp; Equalities</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Environmental Law</a></li>   <li><a href=""https://gowlingwlg.com/en/services/environmental-social-and-governance-esg/#overview"">Environmental, Social and Governance (ESG)</a></li>   <li>Government Agency and System Stakeholder Relations</li>   <li>Health and Safety</li>   <li><a href=""~/en/services/indigenous-law/#canada"">Indigenous Law</a></li>   <li><a href=""~/en/services/intellectual-property-law/#global"">Intellectual Property</a></li>   <li>Market Structuring</li>   <li><a href=""~/en/services/mergers-acquisitions/#global"">Mergers, Acquisitions and Divestitures</a></li>   <li><a href=""~/en/services/municipal-law/#canada"">Municipal Law</a></li>   <li><a href=""~/en/services/procurement/#canada"">Procurement</a></li>   <li>Project Development</li>   <li><a href=""~/en/services/project-finance/#global"">Project Finance</a></li>   <li><a href=""~/en/services/real-estate/#global"">Real Estate and Planning</a></li>   <li>Regulatory Approvals, Licensing and Compliance</li>   <li><a href=""~/en/services/tax/#global"">Tax</a></li>  </ul>    <h2>Proven experience</h2>    <p>Whether advising on major energy transactions, the creation of new regulatory frameworks, the development or refurbishment of assets, or the undertaking of commercial activities, we deliver well-informed advice from our extensive experience in the sector. We have played a leading role in major transactions, market transformation programmes and litigation in countries around the world.</p>    <p>{^widget|(name)FourBlockWidget|(Headline1)Cummins+Inc.|(Copy1)Advising+Cummins+Inc.+on+its+cross-border+acquisition+of+fuel+cell+and+hydrogen+production+technologies+provider+Hydrogenics+on+its+acquisition+of+Johnson+Matthey%27s+automotive+battery+systems+business.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)AtmosClear+Investments|(Copy2)Acting+for+AtmosClear+Investments+on+its+acquisition+of+a+residential+solar+photovoltaic+rooftop+portfolio+from+Northleaf+Capital.+The+portfolio+comprised+of+2%2c940+assets+located+throughout+the+UK.|(LinkText2)Read+more|(BgHover2)colour-darkred|(Headline3)Henvey+Inlet+First+Nation|(Copy3)Counsel+to+Henvey+Inlet+First+Nation+on+the+development+of+an+on-reserve+300-megawatt+wind+generation+project+and+transmission+line%2c+located+on+Henvey+lands+and+other+reserve+and+traditional+territory.|(LinkText3)Read+more|(BgHover3)colour-darkblue|(Headline4)E.ON|(Copy4)Representing+E.ON+while+determining+contractual+responsibility+after+it+was+established+that+grouted+connection+problems+were+being+encountered+in+60+wind+turbine+generators+at+an+offshore+wind+farm%2c+as+well+as+across+the+industry.|(LinkText4)Read+more|(BgHover4)colour-grey|(widget_displayname)Four+Block+Widget^}{^widget|(name)FourBlockWidget|(Headline1)Longspur+Energy|(Copy1)Acting+in+relation+to+the+disposal+of+two+operating+onshore+wind+farms+managed+by+Longspur+Capital+to+Octopus+Energy.+A+multi-disciplinary+team+from+corporate%2c+real+estate%2c+commercial+%26+regulatory%2c+tax+and+planning+and+environmental+advised+on+this+transaction.|(LinkText1)Read+more|(BgHover1)colour-grey|(Headline2)Brookfield+Renewable+Trading+and+Marketing+LP+and+Li%c3%a8vre+Power+LP|(Copy2)Advising+the+clients+on+a+point+to+point+transmission+customer%2c+in+various+regulatory+matters+before+the+Qu%c3%a9bec+Energy+Board+(%22R%c3%a9gie%22)+pertaining+to+changes+to+the+Hydro-Qu%c3%a9bec+Open+Access+Transmission+Tariff.|(LinkText2)Read+more|(BgHover2)colour-darkblue|(Headline3)Development+Bank+of+South+Africa%2c+South+African+National+Treasury+and+South+African+Department+of+Energy|(Copy3)Advising+all+three+clients+on+the+development+of+the+country%27s+base+and+mid-load+IPP+programme.|(LinkText3)Read+more|(BgHover3)colour-darkred|(Headline4)Northern+Ireland+Authority+for+Energy+Regulation+and+the+Commission+for+Energy+Regulation|(Copy4)Advising+on+the+introduction+of+a+new+and+unique+cross-border+wholesale+power+trading+market.|(LinkText4)Read+more|(BgHover4)colour-aubergine|(widget_displayname)Four+Block+Widget^}</p>    <h2>Awards and accolades</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The team picks up technically and conceptually difficult matters and<br />  translates them into strategy.<cite>Chambers and Partners</cite></p>  </blockquote>    <p>Our energy lawyers are frequently ranked by some of the world&#39;s top legal guides for their work.</p>    <p>We are consistently ranked by <em>Chambers and Partners</em> and <em>The Legal 500</em> in the energy, oil and gas, and natural resources categories. Ian Mondrow and James Smellie were named &quot;Notable Practitioners&quot; by <em>Chambers and Partners Canada</em>, with James cited among <em>Chambers</em>&#39; &quot;Senior Statespeople&quot;. <em>Clean Energy Pipeline</em> ranked the team ninth for Energy M&amp;A deals by volume in 2021.</p>    <p><a href=""https://www.bestlawyers.com/article/best-lawyers-canada-2021/3104"" target=""_blank""><em>Best Lawyers</em> named Gowling WLG &quot;Law Firm of the Year&quot; in 2021</a> in addition to recognizing multiple individuals. We were also named in <a href=""~/en/news/awards-recognition/2020/gowling-wlg-named-in-the-times-best-law-firms-2021/""><em>The Times Best Law Firms 2021</em></a> for energy and renewables.</p>    <h2>Meet our international team</h2>    <p>Our team has broad experience supporting energy clients in jurisdictions around the world, including in Africa, Asia, Canada, Europe, the Middle East, South America and the UK. <strong>Contact us today to find out how our team can support you with your energy projects.</strong></p>    <p><strong><a href=""~/en/people/thomas-timmins/"">Thomas Timmins</a></strong><br />  Partner, Head of Energy (Canada)</p>    <p><strong><a href=""~/en/people/andreas-woelfle/"">Dr. Andreas Woelfle </a></strong><br />  Partner (Germany)</p>    <p><strong><a href=""~/en/people/jonathan-brufal/"">Jonathan Brufal</a></strong><br />  Partner, Head of International Projects and Co-Head of Africa Group (UAE)</p>    <p><strong><a href=""~/en/people/gareth-baker/"">Gareth Baker</a></strong><br />  Partner (UK)</p>  ",GWLG.Global,4c3c2534-e644-427f-9b61-e7cd1aec53cf;532e53ff-a7e9-451d-ad5d-5dfdfc681712;199becac-9a85-4082-aec2-fd0969f7da84;612ac63e-b8e8-4615-beb9-be3097aed2cf,F1E960F5-8231-4C56-B7BF-9898EBB538C5,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,Stay ahead,"<p>Keep up-to-date with the latest in energy by registering for our updates.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us,"<p>In the energy&nbsp;sector and in need of advice? Contact a member of our team.</p>    <p><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",NULL,NULL,{F046AD45-7012-48EC-8763-50941C4A853A}|{DBEEA1B1-FBD9-41CC-A2EA-39D36CC3DB0E}|{B836F4F7-16A5-4E2A-9907-2341BCC30D29}|{4EEC0607-D478-4592-BEFC-114187A59260}
24,/Sectors/Food-Beverage/Global,en-GB,6FD26C7E-FF79-43E8-B121-D73EE3D7DCFD,Global,Global,"The food and beverage sector is fast moving, fiercely competitive and highly regulated. We will help you achieve your commercial objectives against the backdrop of a challenging business environment.",NULL,NULL,"<p>The food and beverage sector is fast moving, fiercely competitive and highly regulated.</p>    <p>Whether your business is focused on growing crops or the processing, transportation, distribution, brand, promotion or sale of food, alcohol or natural health products, food and beverage law requires a legal team with exceptional insight and hands-on experience with government regulators.</p>    <p>Gowling WLG will help you achieve your commercial objectives against the backdrop of a challenging business environment.</p>    <p>With increasing regulation and compliance requirements, you need to know what changes are around the corner and how they could affect your business. We&#39;re actively engaged with critical regulatory departments and industry organisations across the globe. Gowling WLG professionals regularly work and represent clients and leading trade associations to engage regulators on proposed regulatory amendments.</p>    <h2>Comprehensive solutions</h2>    <p>Working together as an international network of business law professionals, we provide comprehensive solutions in financing, franchising, licensing and distribution, packaging and labelling, risk management and product liability for the food, beverage and natural health products industry.</p>    <p>You can rely on us to provide commercial insight and sensitivity to operational challenges. We understand the pressures associated with evolving supply chain regulation, the need for speed and accuracy of advice and that margins are under pressure - all of which puts pressure on food manufacturers to improve productivity and processes without compromising food safety standards and quality control.</p>    <p>Highlights of our recent work include:</p>    <ul>   <li>Advising <strong>Weetabix</strong>, a global breakfast cereal brand with a presence in more than 80 countries, on its global intellectual property mandate</li>   <li>Advising <strong>United Biscuits</strong>, owner of worldwide brands such as McVitie&#39;s and Carrs, on issues such as the purchase of a West African biscuit manufacturer and distributor</li>   <li>Acting as virtual in-house counsel to <strong>some of the largest multi-national food, beverage and supplement brands in Canada</strong></li>   <li>Advising <strong>Nomad Foods (previously Birds Eye Iglo)</strong> on its multi-million pound logistics contract with DHL, as well as its frozen food warehousing arrangements with Partner Logistics</li>   <li>Serving as counsel to <strong>a global food and confection company</strong> in multiple class actions commenced across Canada alleging price-fixing</li>   <li>Counsel to some of the <strong>world&#39;s leading pet food brands</strong></li>   <li>Counsel to <strong>many leading food and alcohol manufacturers </strong>operating globally in product regulation, advertising, brand protection and recalls</li>   <li>Acting for <strong>leading restaurants and restaurant chains</strong>, giving strategic advice on franchising, advertising, contests, privacy and social media</li>   <li>Counsel to a number of the <strong>leading fitness, sports nutrition and supplements companies </strong>in Canada</li>  </ul>    <h2>Advice where you need it</h2>    <p>Your business doesn&#39;t stop at borders - and neither do we. Around the world, our clients look to us for&nbsp;advice on all of their issues concerning food, beverage and natural health product production and manufacturing, including:</p>    <ul>   <li>Brand promotion and protection, including trademarks and other intellectual property</li>   <li>Clinical trial agreements</li>   <li>Counterfeit and grey market</li>   <li>Distribution and franchising</li>   <li>Employment, labour and health &amp; safety laws</li>   <li>Food and supplement importing</li>   <li>Food safety</li>   <li>Health, nutrient content, and other claims support</li>   <li>Misleading advertising and class action defence</li>   <li>Product formulation and ingredient review</li>   <li>Product labelling, packaging and marketing</li>   <li>Product liability issues and recalls</li>   <li>Regulatory approvals, licensing and reforms</li>   <li>Representation before government departments and agencies</li>   <li>Site licence submissions for natural health products</li>   <li>Social media, contests, and promotions</li>  </ul>    <p>Whether your challenges are on advertising to children, cannabis, front of package labelling, nutrient disclosure requirements, or the self-care framework, we&#39;re always up to speed on market developments, helping you to respond to changing regulations and the latest legislation. With substantial experience, we can provide you with innovative, pragmatic solutions - from field to fork. With Gowling WLG, you&#39;re in safe hands.</p>    <h2>Learn more</h2>    <p>To learn more about how we can help you succeed, please contact any member of our team.</p>  ",GWLG.Global,9b9ae971-5e77-434c-ab69-7192c6cb65b6;897543f6-1036-4499-934c-adf5f5afeaf4,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{823D3EEC-3F86-4890-9633-796B611EB17A}|{202711F6-A4C3-4DC7-97C8-C4A79ED8F207}
27,/Sectors/Life-Sciences/Global,en-GB,12883179-84A7-45F6-B99F-7275348D7F56,Global,Global,"In the rapidly evolving life sciences sector, you need a trusted legal partner to deliver practical, cost-effective legal advice to support you at every stage.",NULL,"Life Sciences law, Life Sciences law firms, Best Life Sciences law firms","<p>In the rapidly evolving life sciences sector, you need a trusted legal partner to deliver practical, cost-effective legal advice to support you at every stage - whether you&#39;re a startup or a multinational company.</p>    <p>With over 150 professionals in the Gowling WLG Life Sciences Group around the world, we have the technical understanding required to advise on the unique challenges you face throughout your life cycle.</p>    <p>We work with your business, intellectual property, human resource and regulatory teams to provide guidance and support in key areas of life sciences - from protecting and enforcing your ideas, clinical trial protocols, the drafting of clinical trial agreements and drug submissions to licensing, financing, employment and labour issues, resolving contractual disputes, research and development (R&amp;D), pricing, reimbursement and more.</p>    <p>Fully immersed in the sector, many of us have life sciences-related degrees and have spent time in our careers as scientists. This means we have the hands-on experience to understand your operating environment, commercial needs and challenges.</p>    <h2>A full service</h2>    <p>The areas we cover include:</p>    <ul>   <li>Clinical trials and drug manufacturing agreements</li>   <li>Contractual disputes relating to everything from material breach and commercially reasonable efforts, to termination and disputes concerning IP and license agreements</li>   <li>Interpretation of contracts and maximising the commercial position while minimising risks of breach</li>   <li>Drug pricing and reimbursement</li>   <li>Freedom to operate opinions</li>   <li>Labelling, advertising and distribution</li>   <li>Licensing, development and commercialisation agreements</li>   <li>Joint ventures</li>   <li>Patent and brand protection and litigation</li>   <li>Risk management, product liability and litigation</li>   <li>Pharmaceutical services and healthcare</li>   <li>Regulatory law</li>   <li>Acquisitions, mergers spin-outs and disposals, fund structures and initial public offerings (IPOs)</li>   <li>Tax</li>   <li>Competition and antitrust</li>   <li>Government relations</li>   <li>Real estate transactions and support on day-to-day real estate management issues for life sciences occupiers.</li>  </ul>    <p>Whether protecting and enforcing your intellectual property rights, structuring transactions to mitigate risk or going through a merger and acquisition, we help life sciences companies - including investors, underwriters, public issuers, innovative startups and global brands - realise their business objectives.</p>    <h2>Looking out for you</h2>    <p>Our team is there for yours when you need help to navigate a heavily regulated global landscape: professionals with the sector experience needed to respond to intellectual property (IP) threats quickly and effectively. We understand the challenge of recouping investment given the increasing costs to develop drugs and difficulty of getting new products to market.</p>    <p>Innovative products are the life-blood of many pharmaceutical companies. Protecting such products requires an intimate knowledge of both the procedural aspects and substantive case-law of patent courts.</p>    <p>Our <abbr title=""Intellectual Property"">IP</abbr> litigators have decades of experience of highly technical patent disputes in the life sciences sector and an impressive record of achieving success. Whether small molecules, biologics, medical devices or a whole range of other patent types, our team has both the technical and legal background and experience to provide advice of the highest quality.</p>    <p>We also leverage our award-winning patent and trademark prosecution expertise in Canada,&nbsp;the Middle East, Singapore and China and work with a global network of firms to help clients manage their <abbr title=""Intellectual Property"">IP</abbr> portfolios.</p>    <p>The combined experience of our life sciences transactions, patent disputes and contractual disputes expertise means we are well-placed to handle all types of contractual disputes for clients in this sector. As circumstances change over time, you may need to re-evaluate your long-term contractual agreements. Our global team of lawyers can advise on the interpretation of contracts and consider all potential angles if a dispute arises in order to work with you to achieve the best outcome.</p>    <p>Our team members are actively involved in bodies such as the Association of the British Pharmaceutical Industry, BIOTECanada and the UK BioIndustry Association. Through this involvement, as well as regular contributions to the key professional publications, we are thought leaders on the latest issues.</p>    <h2>Find out more</h2>    <p>The advice you need when you need it: get in touch with a team that can truly help your business.</p>  ",GWLG.Global,8e016382-a73f-4aba-8339-02f14b8a79bb;870774bf-534e-466c-be9a-e89fb3fb38bf,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B827998C-32D5-4FA2-A800-AE49022CF610}|{A98C2246-8DFB-4F74-8E3F-6ED4A5BA4A75}
33,/Sectors/Mining/Global,en-GB,6CA24219-6B30-40B2-A75C-17030681C92C,Global,Global,"Whether you're an individual, business or government, the right legal advice can be crucial to meeting your resource-related goals. You need trusted lawyers who can handle complexity, manage risk and deal with sensitive political issues. That's where Gowling WLG comes in.",~/getmedia/45996af8-0358-42f9-a811-2c2a8e0cf6cc/natural-resources_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p><strong>As the mining industry transforms to face new challenges, leaders across the sector are redefining their strategic objectives to focus more on net zero and Environmental, Social and Governance (ESG) initiatives. Governed by many domestic and international regulations, mining and mineral exploration companies face legal issues and opportunities that span multiple jurisdictions and practice areas. Success in the global mining marketplace demands expertise from a leading mining law firm with industry knowledge, global connections, and a strong commercial acumen.</strong></p>    <p>Whether you are a junior exploration company or a mid-tier producer, our mining lawyers will apply a multidisciplinary approach to the issues you face. Our experience covers transactions involving all major commodities and precious metals, including gold, copper, cobalt, lithium, silver, vanadium, zinc, iron ore and uranium.</p>    <p>We are here to guide you through every stage of the life cycle of a project from exploration to operations to closure. Our legal practice focuses on understanding the commercial and practical sides of your business to ensure we find the best solution.</p>    <p>Global economic, political and technological developments are constantly changing how the sector operates. The future of the mining industry is likely to be very different to what we see today. <abbr title=""Environmental, Social and Governance"">ESG</abbr>, heightened government protectionism, and the insatiable demand for specialty technology metals will only continue to reshape the mining landscape for years to come. In addition, the increasing use of innovative technology in mining such as automation will accelerate the need for those in the industry to stay one-step ahead. As you look to prepare for this next era, knowledge and experience should be the foundation of every strategic decision.</p>    <h2>Sector-focused advice</h2>    <p>Armed with deep industry knowledge, our mining lawyers deliver sophisticated solutions tailored to the commercial and practical realities of your business. Our sector-focused advice covers all areas of corporate and financial law, commercial law and the various forms of dispute resolution.</p>    <h2>Full-service support</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/banking-finance/#global"">Banking &amp; Finance</a></li>   <li><a href=""~/en/services/capital-markets/#overview"">Capital Markets</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Climate Change and Environmental Law</a></li>   <li><a href=""~/en/services/commercial-litigation/#global"">Commercial Litigation</a></li>   <li><a href=""~/en/services/competition-law-antitrust/#global"">Competition Law &amp; Antitrust</a></li>   <li><a href=""~/en/services/corporate/#overview"">Corporate</a></li>   <li><a href=""~/en/services/governance-risk-and-compliance-grc/#global"">Governance, Risk and Compliance</a></li>   <li>Health and Safety</li>   <li><a href=""~/en/services/indigenous-law/#canada"">Indigenous Law</a></li>   <li><a href=""~/en/services/intellectual-property-law/#global"">Intellectual Property</a></li>   <li><a href=""~/en/services/international-arbitration/#global"">International Arbitration</a></li>   <li><a href=""~/en/services/international-trade-and-customs/#global"">International Trade and Customs</a></li>   <li><a href=""~/en/services/litigation-dispute-resolution/#global"">Litigation &amp; Dispute Resolution</a></li>   <li><a href=""~/en/services/mergers-acquisitions/#overview"">Mergers &amp; Acquisitions</a></li>   <li><a href=""~/en/services/private-equity/#canada"">Private Equity</a></li>   <li><a href=""~/en/services/projects/#global"">Projects</a></li>   <li>Project Finance</li>   <li><a href=""~/en/services/real-estate/#global"">Real Estate</a></li>   <li><a href=""~/en/services/restructuring-insolvency/#global"">Restructuring &amp; Insolvency</a></li>   <li><a href=""~/en/services/tax/#global"">Tax</a></li>  </ul>    <h2>Proven experience</h2>    <p>We have advised both publicly traded and privately held companies as well as investment dealers, buyout funds and brokers, and other non-traditional investors on their domestic and global investments in the mining sector. We routinely act for numerous clients listed on the Toronto Stock Exchange, TSX Venture Exchange, NASDAQ, NYSE, London Stock Exchange, AIM, Australian Securities Exchange and the Johannesburg Stock Exchange. Past projects have included:</p>    <p>{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Bacanora+Lithium+plc|(headline3)Zijin+Mining+Group+Co.+Limited|(headline2)Phoenix+Copper+Limited|(copy1)Advised+on+a+redomicile+from+Canada%2c+as+well+as+a+US%24150m+Eurobond+with+Red+Kite+and+a+US%2465m+equity+capital+raise.|(copy3)Counsel+on+the+acquisition+of+Guyana+Goldfields+Inc.+for+%24323+million.|(copy2)Acted+on+the+admission+to+listing+and+related+fundraising+on+London%27s+AIM+market+of+the+Idaho+based+copper+and+gold+exploration+and+development+company.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-aubergine|(width)|(height)^}{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Bushveld+Minerals+Limited|(headline3)Lucky+Minerals+Inc.|(headline2)Minera+Alamos+Inc.|(copy1)Advised+on+the+acquisition+of+Vametco+and+Vanchem%2c+including+a+US%2465m+secondary+financing+with+Orion+Mine+Finance.+|(copy3)Advised+on+the+negotiation+of+a+Definitive+Option+Agreement%2c+allowing+First+Quantum+Minerals+Ltd+exclusive+rights+to+explore+for+copper+deposits.|(copy2)Advised+on+a+bought+deal+private+placement+of+common+shares+for+aggregate+gross+proceeds+of+approximately+%2415+million.+|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h2>Awards and accolades</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Gowling WLG is a leading firm of lawyers with a good reputation in the mining industry&hellip;Their strength is their many years of experience in dealing with mining projects and cross-border transactions.<cite>Chambers and Partners</cite></p>  </blockquote>    <p>Recognised by a host of legal directories and awards, our team is a well-respected player in the market.</p>    <p>Eight lawyers across our team are &#39;Recommended Lawyers&#39; by <em>Who&#39;s Who Legal: Mining 2021</em>, with Charles Bond and France Tenaille recognised as &#39;Leading Individuals&#39;.</p>    <p>We are also consistently ranked by <em>Chambers and Partners</em> and <em>The Legal 500</em>. Charles Bond is a &#39;Leading Individual&#39; according to <em>Chambers and Partners</em>.</p>    <p><em>Latinvex</em> regularly names France Tenaille in the <em>Latin America: Top 100 Lawyers </em>and<em> Latin America: Top 100 Female Lawyers</em> for her work in international mergers and acquisitions, capital markets and project finance in the mining and energy sectors.</p>    <p>We also regularly top the <em>FTSE AIM 100</em> rankings for our number of AIM clients.</p>    <h2>Meet our international team</h2>    <p>With offices across Canada, the UK, Europe, Asia and the Middle East - as well as an established network of professionals in <a href=""~/en/global-reach/africa/"">South Africa</a>, Australia and South America - we utilize our understanding of local markets to navigate issues across multiple jurisdictions.<strong> Contact us today for further information on how our team can support you with the legal challenges you face.</strong></p>    <p><strong><strong><a href=""~/en/people/charles-bond/"">Charles Bond</a></strong></strong><br />  Partner, Head of Natural Resources (UK)</p>    <p><strong><strong><a href=""~/en/people/r-ian-mitchell/"">R. Ian Mitchell</a></strong></strong><br />  Partner, Head of Mining (Canada)</p>  ",GWLG.Global,6535cd7a-0e8e-447a-bc96-cec1df267dfe;d084ac14-1e2e-4b99-a026-90bb152ae60d,C0B8C1A8-73EB-4122-972F-DC5DF852F68D,NULL,0,NULL,1,t-white,NULL,Featured resources,NULL,NULL,Stay ahead,"<p>Keep up-to-date with the latest in mining by registering for our updates.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us,"<p>In the mining sector and in need of advice? Contact a member of our team.</p>    <p><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",NULL,NULL,{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{A166FCE2-0AEE-402E-A111-134DB5217816}
36,/Sectors/Nuclear/Global,en-GB,8451877C-37C0-4BFF-AFBC-BCC4709FB54A,Global,Global,"Gowling WLG is at the forefront of the nuclear industry's revitalisation, advising on sophisticated new build projects and decommissioning programmes around the world.",NULL,NULL,"<p>Gowling WLG is at the forefront of the nuclear industry&#39;s revitalisation, advising on sophisticated new build projects and decommissioning programmes around the world.</p>    <p>Our global team of experienced legal professionals delivers hands-on legal and strategic guidance in all aspects of nuclear power operations at every stage - from project development and financing to regulatory affairs.</p>    <h2>Full spectrum experience</h2>    <p>We support clients throughout the lifecycle of nuclear projects. Members of our team have helped both public and private-sector organisations implement major nuclear energy initiatives with exemplary results. Our areas of&nbsp;experience include:</p>    <h3>New build and refurbishment project support</h3>    <ul>   <li>Project equity and debt structure</li>   <li>Public-private partnerships</li>   <li>Nuclear project finance, ECA finance, sovereign guarantees and supports</li>   <li>Procurement</li>   <li>Project documentation including EPC, fuel supply agreements, spent fuel, and O&amp;M contracts</li>   <li>Supply chain contracting and management</li>   <li>Nuclear liability risk mitigation and insurance</li>   <li>Nuclear intellectual property protection and intellectual property (IP) licensing agreements</li>   <li>Claims management and dispute resolution, including major project arbitration</li>  </ul>    <h3>Regulatory</h3>    <ul>   <li>Policy and legislative development</li>   <li>Nuclear regulatory development and compliance</li>   <li>Nuclear project, facility and technology licensing</li>   <li>Electricity markets and regulatory approvals</li>   <li>Environmental impact assessments and compliance</li>   <li>Import/export of nuclear information, materials and equipment</li>  </ul>    <h3>Operating support</h3>    <ul>   <li>Nuclear enterprise governance</li>   <li>Strategic planning</li>   <li>Mergers and acquisitions</li>   <li>Restructuring</li>   <li>Nuclear project and enterprise risk management</li>   <li>Board and management compliance oversight</li>   <li>Management systems</li>   <li>Peer reviews, root cause analyses, and corrective action</li>   <li>Power purchase agreements and contracts for difference</li>   <li>Decommissioning and waste management</li>   <li>Uranium mining and processing, fuel fabrication, and fuel supply</li>   <li>Transportation of nuclear materials</li>  </ul>    <p>Our Nuclear Sector team members have project and transaction support experience across multiple jurisdictions, including Argentina, Australia, Canada, China, Egypt, Finland, Germany, Japan, Jordan, Romania, Russia, South Africa, Saudi Arabia, South Korea, Turkey, United Kingdom, United Arab Emirates and the United States. Many of our team members are involved with - and in some cases, founding members of - global industry organisations.</p>    <h2>Nuclear programme and policy development</h2>    <p>Our senior nuclear advisers have developed international guidance on nuclear programme policy and implementation supports, advised governments on nuclear programme and project development, and led nuclear market restructuring and consolidation initiatives. Our team has the bandwidth and experience to advise on nuclear policy and programme development, whether to develop a nuclear programme from the ground up, maximise and manage the risks associated with supply chain localisation, or to leverage indigenous nuclear technology to maximise the national economic benefits of the nuclear sector.</p>    <h2>New-build projects</h2>    <p>Working with governments, financiers, technology vendors, contractors, exporters, owners, operators, and nuclear liability insurers, we&#39;ve advised on some of the largest and most ambitious new-build projects in the world, helping clients navigate risks - always with the objective of ensuring project viability and success.</p>    <h2>Nuclear finance</h2>    <p>Regardless of its size, complexity or location, our nuclear finance lawyers can help you lay a strong financing foundation for your project. We provide international reach through our global offices and have acted on major nuclear financings around the world.</p>    <h2>Nuclear regulation and compliance</h2>    <p>We advise clients on a range of regulatory matters, including the design of regulatory systems, the development of laws and regulations, and the navigation of licensing approvals and compliance matters. We also advise on nuclear organisation governance, including implementation of and compliance with international best practices and guidance.</p>    <h2><abbr title=""Intellectual Property"">IP</abbr> protection and technology transfer</h2>    <p>We provide <abbr title=""Intellectual Property"">IP</abbr> protection services and sophisticated technology licensing support for nuclear island, turbine island, and balance of plant; special tools; fuel design, production and enrichment; and nuclear waste, storage and clean up solutions. We also advise on technology transfer related policies and business models.</p>    <h2>Nuclear technological innovation</h2>    <p>We have advised clients engaged in developing new nuclear technologies and new applications for existing technologies, as well as in commercialising those developments. Our experience includes research reactors, medical and industrial radioisotopes production, contracting, supply, and mergers and acquisitions, and supporting a wide range of small modular reactor (SMR) technology developers and vendors.</p>    <h2>Operating facilities and nuclear utilities</h2>    <p>Over several decades, our team has provided support to operating facilities and nuclear utilities on a wide range of matters, including: structuring nuclear utilities and their financing arrangements, nuclear organisation governance, safety culture and management system compliance, regulatory compliance, operational compliance contingency funding, nuclear licensing and environmental permitting, investigations and prosecutions, procurement and contracting, labour relations, intellectual property management, policy development and advocacy, and claims management and dispute resolution.</p>    <h2>Decommissioning</h2>    <p>Nuclear decommissioning is a complex discipline requiring sophisticated know-how. With significant and diverse experience we provide counsel on contracting models and terms as well as the regulatory requirements for reactor defueling, deconstruction, interim storage and nuclear facility decommissioning.</p>    <p>We also provide operational support to organisations managing legacy facilities and decommissioning programmes. This enables our team to provide a comprehensive, multi-faceted advisory approach that enables our clients to deliver complex, policy-focused, and commercially-oriented solutions to decommissioning challenges.</p>    <h2>Waste management</h2>    <p>We advise on the establishment of new waste storage facilities and the operation and management of existing facilities, including procurement, contracting, regulatory approvals and compliance, licensing and environmental impact assessments. We also advise on long term waste management services contracts.</p>    <h2>Export controls</h2>    <p>We help to manage compliance around the contractual arrangements for the import, export and logistics for nuclear and dual use components and information.</p>    <h2>Advocacy, claims management and dispute resolution</h2>    <p>We provide strategic litigation advice and representation in legislative hearings and committees, administrative tribunals, civil, criminal and administrative judicial proceedings, negotiation and mediation, arbitration, and other modes of alternative dispute resolution situations inside and outside the courtroom. Our team is experienced in helping clients to establish and manage nuclear project claims in real time so as to avoid undue escalation that can delay projects and complicate disputes. We also bring experience and a successful track record in conducting major nuclear project arbitrations and mediations.</p>    <h2>Nuclear liability, insurance and indemnities</h2>    <p>With a comprehensive experience with all nuclear liability conventions and a wide range of nuclear liability and insurance legislative regimes, we&#39;re well-positioned to help our clients undertake comprehensive assessments of nuclear liability risks and to develop and implement balanced and effective risk mitigation tools, including legislative development, the parameters of insurance coverage, and the design and use of nuclear liability indemnities.</p>    <h2>Defence</h2>    <p>We advise defence clients on nuclear licensing and indemnities, within the context of major defence procurements.</p>    <h2>Uranium and nuclear fuel supply</h2>    <p>We have <a href=""~/en/sectors/mining/global/"">a thriving mining practice</a> and advise uranium mining companies on listings, capital raises and contractual matters. We have also advised a number of the largest fuel manufacturers and suppliers in the world, and acted on the acquisition of fuel manufacturing and supply businesses.</p>    <h2>Examples of our nuclear sector team members&#39; work</h2>    <ul>   <li>Counsel to NASA - Nucleoeléctrica Argentina with respect to the contracts for the procurement construction of two nuclear power reactors</li>   <li>Project Counsel for the Sinop Nuclear Power Project, a four unit new-build project in Turkey</li>   <li>Counsel to Bruce Power, the operator of the world&#39;s largest nuclear facility</li>   <li>Advising Canadian Nuclear Laboratories and various consortia on the operation, decommissioning and management of nuclear facilities</li>   <li>Advising an agent of the Government of Romania with respect to the Cernavoda 3 &amp; 4 project</li>   <li>Counsel to AECL with respect to numerous matters including nuclear projects, regulatory compliance, licensing, legislative development, dispute resolution including major nuclear project arbitration, patent drafting and prosecution, and intellectual property licensing.</li>   <li>Advising Korea Hydro and Nuclear Power Co., Ltd. on decommissioning planning</li>   <li>Advising on the structuring of the Saudi Arabia nuclear power procurement program</li>   <li>Advising various parties, including US Exim, Korea Exim and KEPCO with respect to the ENEC Barakah Project</li>   <li>Advising ENEC in relation to operational and intellectual property issues</li>  </ul>    <h2>A virtual team</h2>    <p>Our Virtual In-House Nuclear Advisers service provides you with ongoing, day-to-day legal advice and support from a world-class nuclear team. Whether you&#39;re faced with an urgent or emerging issue requiring immediate action and expert input or are simply looking to discuss a complex issue, you can call upon our trusted advisers for strategic advice.</p>    <h2>Find out more</h2>    <p>To discover out how we can help you with your nuclear project, please get in touch with any member of our team.</p>  ",GWLG.Global,a6ae8169-6aa0-48fd-889e-71550df00866;12aa0eba-741b-4962-afdd-c31c2e88f07d;9380838b-d787-4731-81b6-268044d5251f,DEDE4518-E78C-4B48-A143-A2338BE5D0AC,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{FA3E0F6F-B6C5-461D-8917-D2CF037162D1}|{AAE4729A-0C1A-442F-896B-99834773CBFF}|{FD1EB762-1DE3-4D61-98DB-554660E46FC5}
42,/Sectors/Real-Estate/Global,en-GB,A04234F8-DACA-4934-B9B1-166FE14889FF,Global,Global,"Gowling WLG is home to one of the world's strongest multi-disciplinary real estate legal teams. We're committed to providing you with timely, practical advice to help you meet the demands of customers, partners, regulators and investors.",NULL,NULL,"<p><strong>The global real estate market is dynamic and complex. To navigate this challenging and fast-moving industry, you require responsive legal advisers with an in-depth knowledge of international and local markets: responsive, accessible and able to execute your transactions seamlessly.</strong></p>    <p>Gowling WLG is home to one of the world&#39;s strongest multi-disciplinary real estate legal teams. We&#39;re committed to providing you with timely, practical advice to help you meet the demands of customers, partners, regulators and investors.</p>    <p>We work alongside many of the sector&#39;s most successful companies and have helped to deliver numerous high-profile projects, advising throughout their lifecycle.</p>    <p>Our large, diverse team brings extensive personal experience of a wide range of assets. That means even where you are dealing with an unusual asset, we are likely to have experience&nbsp;in that area. Our services encompass&nbsp;railway stations, air and sea ports, bridges, recycling plants, district heating schemes, exhibition centres, power stations, schools, hospitals and many others.</p>    <p>We also have a strong track-record in the tech sector and so are well placed to respond as digital technologies begin to transform the way we use and manage our buildings, towns and cities.</p>    <p>While advancing your business goals is always our top priority, we know that your budget is finite. With this in mind, we optimise your legal spend by implementing efficient fee strategies, offering competitive rates and anticipating costs as far in advance as possible.</p>    <p>Fully integrated, we offer legal services across our global offices. Whatever the matter, we deliver quality that enables you to derive maximum value from your deals and resolve your transactions quickly and efficiently.</p>    <p>Because every job is different, every team we build is different. Your needs will be matched with the right expert in the right location. At all times, we look to save you money by using our people who work outside higher cost centres and utilising innovative proprietary systems for the delivery of legal services.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fSectors%2fReal-Estate%2fFAQ%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Our+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Examples of our work</h2>    <p>We act for clients involved in all aspects of the Real Estate sector, here is a small selection of examples of recent work, advising:</p>    <ul>   <li>Blackstone on the acquisition of UK student accommodation company IQ from Goldman Sachs for &pound;4.66 billion, this being a portfolio of 76 student accommodation sites across the UK</li>   <li>Rockwell on a &pound;106 million investment deal with Aviva Investors to forward fund the development of a 400-bed Premier Inn hotel in Canary Wharf</li>   <li>Counsel to Fiera Properties Limited in the launch of its diversified open-ended property fund, the Fiera Properties CORE Fund - the largest Canadian open-ended core property fund in more than 20 years - representing $352 million in equity capital from investors</li>   <li>Stamford Land, a Singaporean investment company, on the &pound;260 million acquisition of 8 Finsbury Circus, a &pound;260 million 177,000 sq ft Grade A development from Mitsubishi Estate London Limited</li>   <li>Aldgate Developments on the 15 year lease of the One Braham office development in Aldgate, London to BT for its UK headquarters</li>   <li>Counsel to a new Canadian real estate fund created by Standard Life Investments, which raised $77 million in initial equity</li>   <li>IM Properties on their pre let of 2,940,000 sq ft to Jaguar Land Rover at IM&#39;s site at Junction 11 of the M42</li>   <li>Arden Cross Limited on their proposals for the HS2 Interchange Station in Solihull.&nbsp;</li>   <li>A joint venture between Blackstone and Telelreal Trillium on the acquisition of the &pound;1.4 billion Network Rail commercial estate portfolio of 5,200 properties in England and Wales</li>   <li>Counsel to Brookfield Capital Partners Ltd., the private equity group of Brookfield Asset Management Inc., in the provision of a US$130-million senior-secured term loan to North American Palladium Ltd</li>   <li>Wise Living (part of SDL Group) in putting in place a &pound;36 million facility to fund acquisitions of new homes for the Build to Rent market.</li>  </ul>    <h2>Learn more</h2>    <p>We&#39;re eager to hear about the challenges you face, and to help you seize the next opportunity. Please contact any member of our team to learn more about the legal services we offer.</p>  ",GWLG.Global,28adebbb-5239-4131-b123-eb860852ce0c;157cef8d-3bda-45e7-9dcd-bc32b082fa17,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{78D88FC3-0344-402B-85ED-AF69D1596497}|{BF4EB340-343D-418B-A98B-DB773A3A50D1}
45,/Sectors/Tech/Global,en-GB,D399972D-DC54-48C6-ACF4-EF3B7C5C4A4F,Global,Global,"The global tech sector continues to evolve rapidly, transforming business and behaviour while revealing new opportunities and challenges. In this fast-paced world, you need a law firm that's as forward-thinking and dynamic as you.",~/getmedia/acfdd5da-4d6a-413c-b064-657ed159f6ec/tech_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p class=""has-text-large""><strong>The global tech sector continues to evolve rapidly, transforming business and behaviour while revealing new opportunities and challenges. In this fast-paced world, you need a law firm that&#39;s as forward-thinking and dynamic as you.</strong></p>    <p>Gowling WLG&#39;s Tech team has the insight, experience and entrepreneurial spirit to help you grow your business and protect what makes you unique, whether you&#39;re a start-up, an established tech company or a publicly listed entity. Our 300-strong global tech team is ready to help you capitalise on new opportunities and overcome all obstacles, from navigating the latest advances in blockchain to developing new AI or mitigating cyber risks.</p>    <p>We help some of the biggest tech innovators to develop agile business strategies, enforce and monetise intellectual property (IP), and invest, acquire and divest of corporate interests. With industry-leading knowledge, we help clients take full advantage of the emerging technologies that are changing the way the financial, energy, retail, manufacturing, insurance, mining, automotive and health industries operate around the world.</p>    <p>We can work with you to achieve your commercial objectives in a constantly changing, innovative and increasingly competitive landscape.</p>    <h2>A global service</h2>    <p>With diverse backgrounds in science and engineering, as well as hands-on technology experience, we understand your market and the needs of companies that create and use technology.</p>    <p>Our extensive tech experience can help you make the most of developments by maximising growth and protecting and monetising your assets. We provide clients with a truly joined up, cross-border service by combining knowledge and resources from across our international offices with leading local lawyers in other jurisdictions.</p>    <h2>Commercialisation</h2>    <p>We can help you acquire, develop, finance and commercialise innovative technologies. Our team provides tailored, practical legal advice across all practice areas and service lines.</p>    <h2>Intellectual Property</h2>    <p>Every step on the path to market presents different challenges. We work with you to overcome those challenges by protecting and enforcing your Intellectual Property (IP) assets and helping you maximise their value.</p>    <p>With unmatched expertise in patents, trademarks, brands and designs, copyright, advertising, IP litigation and more, we&#39;ve been winning IP cases for clients around the world for over 125 years, and offer you exceptional representation in a dynamic and competitive market.</p>    <h2>Emerging Technologies</h2>    <p>Heavily involved in the fast-paced world of transformative technology such as blockchain, AI, IoT and smart contracts, our team dominates in this cutting-edge field. Globally our clients include leading digital wallets, crypto-currency exchanges, investment funds seeking to invest in crypto-currencies or crypto-assets, and key blockchain pioneers.</p>    <h2>Telecoms</h2>    <p>Our telecoms team supports the entire ecosystem of the telecoms markets. We have specialist experience in inter carrier arrangements, strategic alliances with suppliers, commercial and strategic support, acquisitions, complex outsourcing, real estate projects, mobile infrastructure and transmission projects, and major multi-jurisdictional telecom contracting, commercial and IP support, including patent litigation.</p>    <h2>Cyber security and data privacy</h2>    <p>With the ability to provide a global perspective, our cyber security and data privacy team provides specialist, rapid-response legal support to mitigate the risks both before and after a cyber-attack. The team can help you engage with authorities, deal with regulators, manage the adverse business impact and trace the perpetrator.</p>    <h2>Cloud/data centres</h2>    <p>Our dedicated cross-sector cloud and data centres team has been writing the law alongside data centre owners, developers and operators since the industry&#39;s inception. We can help owners and operators of data centres, their funders and the enterprises which use them to navigate the issues.</p>    <h2>Digital transformation</h2>    <p>Digital transformation and the disruption it can bring presents a challenge to business leaders running companies of all sizes and from all sectors across the world. Opportunities need to be considered and risks mitigated. In our report &#39;<a href=""~/en/topics/what-is-digital-transformation/"" target=""_blank"">Tides of Disruption: How to navigate business transformation</a>&#39;, we explore the forces driving digitalisation and how they will impact businesses globally. Download the report to discover the emerging business models of the future and how to manage the change that technology will bring to every business.</p>    <h2>Learn more</h2>    <p>To find out how we can help you move your business forward - please get in touch.</p>  ",GWLG.Global,d960a618-a196-404c-b795-b884bc90e603;425a9689-d70c-46ff-b7b6-8994bb782c5f;3eea8a58-b3f2-4e3c-87f4-8853720e2a67,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{AD4D3F97-80D7-4280-9634-F885370C3930}|{680CF4CA-5812-4762-A9E4-D3A93109F739}|{3D891B4E-1F61-437D-9FF8-FADA32E6C073}
54,/Sectors/Health-Care/Global,en-GB,6F782279-37D3-43F1-86A1-C793AA6D92CC,Global,Global,"With a crucial role in society, the health care sector is under constant scrutiny from the public, regulators, clinical practitioners and governments. Our lawyers understand the commercial priorities, regulatory backdrop and challenges facing the sector.",NULL,NULL,"<p>With a crucial role in society, the health care sector is under constant scrutiny from the public, regulators, clinical practitioners and governments. You need lawyers who understand the commercial priorities, regulatory backdrop and challenges facing the sector.</p>    <p>The fast-paced and innovative nature of the industry calls for a legal team that provides sector insight and know-how - new medical advances occur daily. Your lawyers should be operating at the forefront of this dynamic sector, helping you keep abreast of the issues that matter.</p>    <h2>Global service</h2>    <p>Gowling WLG operates on a global scale at a time when health care is becoming increasingly international. Our lawyers understand the interplay between jurisdictions and share best practices. Our comprehensive health care offering includes specialists in commissioning, outsourcing, corporate mergers and acquisitions (M&amp;A), capital markets, regulatory, data protection, commercial, Intellectual Property (IP), employment, banking and procurement law.</p>    <p>We&#39;ll help you navigate the highly regulated landscape when government and regulatory scrutiny is at an all-time high. With increased potential liability relating to your products and services, our high-quality legal advice can be crucial.</p>    <h2>In-depth sector insight</h2>    <p>From strategic projects through to joint ventures, social enterprises, procurement support and employment-related advice, our team is helping governments offer greater choice and flexibility in the provision of health care.</p>    <p>Leading private health care providers and investors also call upon our team&#39;s <abbr title=""mergers and acquisitions"">M&amp;A</abbr>, capital markets, finance and private equity professionals to deliver major transactions. We have extensive experience in advising clients in the care home sector, including those involved in residential care homes, retirement villages and homes for people in need of psychiatric or dementia care.</p>    <p>Our team boasts significant experience of advising borrowers and lenders on care home, LD, domiciliary care and specialist unit acquisition and development financings, as well as on the financing and development of private hospitals.</p>    <h2>Digital health</h2>    <p>Advances in communications and technology have yet to fulfil anything like their full potential in health care. But, in a world in which the number of mobile phones outnumbers people and where genetics can predict which conditions will strike years before they do, the potential for digital health is enormous. We are a global leader in digital health, bringing together sophisticated experience in health care, life sciences and technology to help our clients maximise opportunities.</p>    <h2>Examples of our work</h2>    <ul>   <li>Advising Formation Capital LLC on its acquisition (and related financing) of the of NHP Group/HC One for &pound;477 million</li>   <li>Acting on the sale of Cygnet Health to Universal Health Services</li>   <li>Advising Golden House on its &pound;30 million acquisition of St Cloud Care</li>   <li>Advising on the sale and leaseback to a US Reit of the Circle Hospital in Bath</li>   <li>Acting for Circle Group on a cash placing and subscription to raise &pound;47.5 million and on a group-wide reorganisation and streamlining of its real estate and business operations</li>   <li>Advising St Martin&#39;s Healthcare Limited, a subsidiary of HCA Holdings Inc., on its recommended cash offer for PLUS-quoted General Medical Clinics Plc</li>   <li>Advising Regard Holdings Limited on the &pound;71 million re-financing of existing debt, which involved an intra-group reorganisation</li>   <li>Representing Voyage Care on its &pound;8.5 million plus earn out acquisition of Partners in Specialist Care, a provider of home-based nursing for adults and children with brain and spinal injuries and complex neurological conditions</li>   <li>Acting for Santander on &pound;35 million joint venture development financing for three care homes</li>  </ul>    <h2>Find out more</h2>    <p>When it comes to health care, Gowling WLG is hard to beat. Get in touch and let&#39;s work together to achieve success.</p>  ",GWLG.Global,1ca237c0-eb32-40df-ba06-268230275f34,A929915C-1D1F-4E9C-8C8B-F34A30E2AB4E,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6B557C33-A81E-4EB3-A849-0BC0CECD797A}
55,/Sectors/Government-Contracting-Public-Sector/Global,en-GB,CA959E8D-83CB-4E01-8A06-4374DE157916,Global,Global,"We understand the pressures on the public sector. Our leading professionals have exceptional experience that enables us to provide sophisticated legal, regulatory and public policy advice on virtually any matter.",NULL,NULL,"<p>These are challenging times for the public sector, but there is no decrease in the demand for services or expectation of delivery.</p>    <p>At Gowling WLG, we understand these pressures. Our leading professionals have exceptional experience in both the public and private sectors, with a 360-degree perspective that enables us to provide sophisticated legal, regulatory and public policy advice on virtually any matter.</p>    <p>Our clients include all levels of governments and their agencies, trade and professional associations, non-governmental agencies, Crown corporations, utilities, developers and educational institutions, such as schools and universities.</p>    <p>We represent the interests of our clients before public sector and government committees and investigations, government task forces, and at all levels in the national, federal and provincial courts.</p>    <h2>Crown Commercial Services (CCS)</h2>    <p>Our commitment to the Public Sector, including both Central Government, Public Bodies and Local Government, is reflected in our re-appointment to the <a href=""https://www.crowncommercial.gov.uk/agreements/rm6179"" target=""_blank""><abbr title=""Crown Commercial Services"">CCS</abbr> RM6179 General Legal Advice Services Framework (Lot 1)</a> and existing appointment to the and reappointment to <a href=""~/getmedia/171e28f8-bb1c-4241-bb14-54aba93256b4/ccs-rm6240-public-sector-legal-service-prospectus.pdf.xml"" target=""_blank"">RM6240 Wider Public Sector Legal Panel Lot One, Lot Two and Lot 3 all for General Legal Advice and Services</a>.</p>    <p>We are currently advising a broad range of Government functions including the Ministry of Defence, Department for Health and Social Care, Department for Business, Energy &amp; Industrial Strategy (BEIS), The Insolvency Service, Department for Environment, Food and Rural Affairs (DEFRA), Defence Infrastructure Organisation (DIO), OFQUAL, Foreign, Commonwealth &amp; Development Office and National Highways.</p>    <p>We support the Government and other public sector bodies across a wide range of specialisms including Commercial Contracts, Complex Projects, Corporate Structures, Inquiries and Judicial Review, IT, Outsourcing, Real Estate, Employment and Pensions, Finance, Public Law and Regulation. We also operate in various sectors including Defence, Energy, Natural Resources, Health &amp; Healthcare, Technology and Life Sciences.</p>    <p>We understand that complex legal issues often need a cross-sector and cross-service approach and we pride ourselves on our ability to combine all of these specialisms as and when necessary to offer a &#39;one stop shop&#39;. Our deep experience working with Government ensures we can focus and tailor our advice in a manner sensitive to Government requirements.</p>    <p>A number of our lawyers are security cleared at various levels.</p>    <p>If you would like to learn more you can <a href=""~/getmedia/869d6b6a-5485-4efb-8960-8de663ce3008/ccs-rm6179-general-legal-advice-services-framework.pdf.xml"" target=""_blank"">download a copy of our supplier prospectus</a>.</p>  <!-- <p>If you are an authorised buyer under the <a href=""~/getmedia/0a3dac71-5168-403d-9c0b-d131512c86f0/RM3788-wider-public-sector-legal-services-panal.pdf.xml"" target=""_blank"">RM3788 Wider Public Sector Panel you can download a copy of our supplier prospectus</a>.</p> -->    <h2>Advancing your agenda</h2>    <p>Our extensive network of government contacts is a key advantage for industry stakeholders in presenting their concerns to decision makers.</p>    <p>Many of our professionals have held elected office, senior government positions or have contributed to the development of policy, legislation and regulatory regimes. By leveraging our experience, we can help you understand the parliamentary process and how to conduct your business efficiently at every level of government.</p>    <p>We also advise on lobbying compliance and ethical obligations and provide guidance on issues relating to conflict of interest at the federal, provincial and municipal levels.</p>    <p>We understand that complex legal issues often need a cross-sector and cross-service approach and we pride ourselves on our ability to combine all of these specialisms as and when necessary to offer a &#39;one stop shop&#39;.</p>    <h2>Rising to your challenge</h2>    <p>By establishing your objectives from the outset, we ensure a successful outcome is achieved. It&#39;s how we build lasting relationships with clients.</p>    <p>From reputation management to overhauling service delivery, setting negotiation strategy to project managing deal delivery, defending complex litigation to transferring risk to third parties: we will find the solution.</p>    <p>Sometimes starting with a blank sheet of paper is required. Our original thinking is showcased by award wins for public sector work, ranging from innovative advice on equal pay issues to landmark healthcare transactions.</p>    <h2>A law firm you can trust</h2>    <p>Delivering savings and efficiencies is a key concern for government bodies. We&#39;ve acted on significant programmes that have targeted the delivery of savings and efficiencies by restructuring the delivery of services and renegotiating existing contractual arrangements.</p>    <h2>Results for clients</h2>    <ul>   <li>Advising a large Canadian wireless sector client, an international procurement client and an international investment in an M&amp;A regulatory review by Canadian officials.</li>   <li>Advising Birmingham City Council on the high-profile sale of the NEC Group, supporting around 29,000 jobs and worth more than &pound;2 billion per year to the West Midlands region</li>   <li>Appointed as one of a limited number of Tier 1 suppliers to the Crown Commercial Service which represents central government bodies on major project procurement</li>   <li>Advising the UK Department for Business, Energy &amp; Industrial Strategy on the six-year long &pound;11 billion Smart Metering programme; the largest new technology project of its kind in the UK. It involved advising on the regulatory framework necessary for implementation and operation. Advising the UK Ministry of Defence on various aspects of its aircraft carrier, submarine and multi-role combat vehicle projects, and also NATS on the UK air traffic control network</li>   <li>Advising Sanctuary Housing Association on its &pound;150 million secured bond tap issue, listed on the London Stock Exchange; the largest of its kind, the programme sees the delivery of more than 5,000 affordable new homes across the UK by 2015</li>   <li>Counsel to Simon &amp; Schuster Canada in its successful negotiations with the Department of Canadian Heritage to obtain an exemption from provisions of the Book Publishing Policy issued under the Investment Canada Act</li>   <li>Counsel to members of the Ontario Sports Solution consortium, Fengate Capital Management Ltd. and Kenaidan Contracting Ltd on the project to build the Pan Am Games Hamilton Soccer Stadium for the Toronto 2015 Pan/Parapan American Games</li>   <li>Counsel to Tarion Warranty Corporation, which administers Ontario&#39;s new home warranty program, in a dispute with a home builder before the Ontario Superior Court of Justice</li>   <li>Advising The Government of Kenya and TradeMark East Africa on the development of a new legislative and regulatory regime for the Kenya Ports Authority, and enabling legislation to utilise PPP as a means of developing the ports sector in Kenya</li>  </ul>    <h2>Learn more</h2>    <p>We want to help you succeed. To learn more about our government affairs services, please contact any member of our team.</p>  ",GWLG.Global,1ca237c0-eb32-40df-ba06-268230275f34;4f7f399d-4924-4c9f-aa7c-2fdc3c2c77a3;a9daf1f3-b2ff-43d9-b76e-b815bb73aace;40d2e703-8710-44d5-9b4a-6108d5734e98,5AD41B49-D460-489A-95B9-84C854EDA6F1,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6B557C33-A81E-4EB3-A849-0BC0CECD797A}|{0D3C7782-862F-4764-9191-1AE46F04873C}|{BEE6DB7F-D12A-4E2A-AC9B-2752BD344FC2}|{A09A7A80-1041-4B5E-B156-C023BC66DA86}
56,/Sectors/Retail-Leisure-Hotels/Global,en-GB,4DC41889-5BC1-4437-99C6-3C8205CA8E21,Global,Global,"Retailers, leisure operators and hotel developers, investors and franchisees compete in some of the world's most challenging and fast-changing sectors",NULL,NULL,"<p>Retailers, leisure operators and hotel developers, investors and franchisees compete in some of the world&#39;s most challenging and fast-changing sectors. Now more than ever, you need legal advisers who embrace change and give you the commercial, pragmatic and insightful advice your business needs to thrive.</p>    <p>Gowling WLG&#39;s retail, franchise, leisure and hotels teams work across all disciplines, including advertising and marketing, intellectual property, real estate, finance, franchising, corporate, employment and equalities, commercial contracts and IT, privacy and data protection and dispute resolution.</p>    <p>We work alongside some of the most successful and innovative retail, leisure and hotel businesses and franchises, as well as hotel developers and investors, ranging from FTSE 100 companies to smaller, innovative start-ups. And we use that experience for your benefit.</p>    <p>With over 1,500 legal professionals in offices across Canada, as well as in the UK, Europe, the Middle East and Asia, we offer you&nbsp;counsel on any business issue - from coast to coast and around the world, in a host of languages.</p>    <h2>Retail &amp; leisure</h2>    <ul>   <li>We clear price promotional strategies to manage the risk of regulatory issues, challenge competitors on their comparative advertising, defend retailers against complaints and negotiate local and international contracts with advertising agencies and celebrities.</li>   <li>We advise all types of retailer and leisure operators on their use of data to improve personalisation and customer engagement. Our commercial contracts and IT lawyers have worked on some of the most exciting commercial and technology projects in the retail sector.</li>   <li>Acquiring the right space quickly and on the right terms can help you gain competitive advantage. If you are looking at prime pitches, you need lawyers who can work to the timescales agreed, with the minimum of fuss, while obtaining sensible terms.</li>   <li>Our Corporate team has real in-depth sector knowledge and experience, which is vital in supporting growth through fundraising and/or acquisition or expanding internationally through strategic joint ventures.</li>   <li>Our lawyers can help you raise funds for existing and new chains; we advise investors and founding families on realising their investments often through sale, listing or equity release; and on acquiring existing portfolios.</li>   <li>We handle all aspects and types of construction and engineering projects and can help you quickly secure your objectives and avoid potential pitfalls.</li>   <li>Our employment and equalities lawyers advise retailers on everything from contract and policy reviews, equal pay and TUPE through to assisting with employee investigations and successfully defending Tribunal claims using our award-winning methodology.</li>   <li>If something goes wrong, or a dispute arises, you want the best possible solution for your business. Our first priority in any dispute is always to understand your commercial objectives. After assessing the strengths and weaknesses of your case, we&#39;ll work with you to pick a strategy that gets you to where you want to be.</li>   <li>Regulatory investigations lead to business interruption, adverse publicity, lost management time, cost and potentially fines (or even prison). Our team will invest time getting to know your business operations to help prevent regulatory breaches and hit the ground running if something happens.</li>  </ul>    <h2>Dedicated to your franchise needs</h2>    <p>With a team of professionals dedicated exclusively to franchise and distribution law, we help you launch and expand your businesses through franchising, both nationally and internationally. We work closely with you to ensure the most effective means of expansion including master franchise, area development and multi-unit development, as well as licence and distribution arrangements.</p>    <p>We&#39;re committed to your success across all stages of the franchise process. Whether it&#39;s dealing with complex regulatory and compliance issues, drafting a franchise agreement for use in multiple jurisdictions, protecting your intellectual property, or assisting with the management of the franchisor-franchisee relationship.</p>    <h2>Hotels</h2>    <p>You need lawyers who understand your world, and the many stakeholders involved in hotel acquisition and development projects. As a leading adviser in the hotels industry, our cross-disciplinary hotels team works closely alongside owners, investors, developers, funders and managers on hotel acquisition and development projects around the globe.</p>    <p>Our corporate lawyers advise on: acquisitions and disposals of hotels, luxury resorts and developments; hotel management agreements; franchise agreements and direct agreements/non-disturbance agreements.</p>    <p>Our specialist hotel finance lawyers can advise you on everything from financing facilities for full-service luxury hotels to restructuring debt finance arrangements secured on hotel assets. We also advise on all aspects of property acquisition and disposal.</p>    <h2>Learn more</h2>    <p>To get in touch and discover how we can help business succeed, please contact any member of our team.</p>  ",GWLG.Global,9ff8fd1a-c2f5-4084-b72e-4aa02fdf3312;75a219e7-ea84-4ba2-9990-61b83de62877,0357076D-2635-451A-8D67-EC01F9F3082B,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{ECE09691-7479-40FB-B560-2AA2DF299B85}|{2895F3B4-A117-4E62-AB3C-C05D4A1527B5}
73,/Sectors/Financial-Institutions-Services/Global,en-GB,4DB00D29-6B2D-4E4B-8ACA-A1BB19DF666B,Global,Global,"We offer fresh perspectives, seamless service and an in-depth understanding of the major challenges in the financial services sector.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&height=450&ext=.jpg,NULL,"<p>Trust should always be central to your relationships, particularly in a sector where innovation is introducing new risks. Being aware of global financial regulations, reducing your exposure to risk and receiving practical, dependable solutions is essential.</p>    <h2>A sector leader</h2>    <p>Gowling WLG is a leader in the financial services sector, with a long-established reputation recognised by financial institutions the world over. We offer services in all relevant areas, having acted for some of the world&#39;s largest financial institutions on domestic and cross-border matters.</p>    <p>We tailor our services to meet the unique needs of our clients, staying current with trends and legislative developments. Through client-dedicated teams, our professionals are focused on delivering solutions that meet the demands of the ever-changing financial market.</p>    <p>Working with more than 50 domestic and foreign banks, other financial service providers and insurers, we are the preferred counsel on a wide variety of transactions ranging in size from &pound;1 million to &pound;1 billion. In tune with your requirements, we&#39;re at the leading edge of new and emerging areas as you adapt and look for fresh markets. Our client lists includes credit unions, hedge funds, insurers, lenders, major domestic and international banks, pension and private equity funds, syndicates and venture capitalists.</p>    <h2>In-depth services</h2>    <p>Our broad sector knowledge&nbsp;is balanced by highly specific and innovative service offerings. We have in-depth experience with a variety of non-traditional lenders - such as mezzanine, ABL, sub-debt and DIP uni-tranche - and provide insightful financial regulatory law services to help our clients achieve transaction approvals and ensure compliance with all levels of regulatory requirements.</p>    <p>With a strong understanding of the competitive financial services landscape, extensive experience navigating complex regulatory and legislative environments, and hands-on national and international experience, we offer a comprehensive range of legal services to our financial institutions clients, including:</p>    <ul>   <li>Asset-based lending</li>   <li>Banking and financial regulatory (contentious and non-contentious)</li>   <li>Bond financing/public debt</li>   <li>Consumer finance and cards</li>   <li>Commercial insurance law</li>   <li>Corporate finance and corporate and debt restructurings</li>   <li>Cross-border and domestic transactions</li>   <li>Demand and enforcement proceedings</li>   <li>Derivatives and structured products</li>   <li>Distressed M&amp;A</li>   <li>Employment and labour</li>   <li>Funds</li>   <li>Insolvency and restructurings</li>   <li>Leasing</li>   <li>Litigation</li>   <li>M&amp;A financing</li>   <li>Project and infrastructure finance</li>   <li>Real estate lending</li>   <li>Receiverships, bankruptcy and related enforcement proceedings</li>   <li>Recovery services</li>   <li>Regulatory</li>   <li>Renegotiating loans and security agreements</li>   <li>Senior secured and unsecured lending</li>   <li>Sharia-compliant financing</li>   <li>Sub-debt, mezzanine and second lien lending</li>   <li>Syndicated, club and joint venture transactions</li>   <li>Tax</li>   <li>Trade finance</li>   <li>Transfer pricing</li>   <li>Uni-tranche lending</li>   <li>Venture capital, hedge fund and merchant banking transactions</li>  </ul>    <h2>Pioneering blockchain experience</h2>    <p>Gowling WLG is known throughout the industry for our strength&nbsp;in the area of <a href=""~/en/services/blockchain-smart-contracts/"">blockchain and smart contracts</a>. We&#39;re the only international law firm to be a founding partner and co-founding member of the Blockchain Research Institute, a multi-million dollar knowledge network that studies the strategic implications of blockchain.</p>    <p>From initial coin offerings (ICOs) and digital wallets to crypto currency exchanges and securities compliance, our team can help you overcome the latest challenges and take advantage of new opportunities presented by emerging blockchain technologies.</p>    <h2>Examples of our work</h2>    <ul>   <li>Advising on regulatory requirements in a multi-billion dollar off-shore longevity swap/re-insurance transaction for a large Canadian pension plan</li>   <li>Registering a foreign money service business with FINTRAC</li>   <li>Drafting and negotiating all aspects of a Schedule III bank licence in Canada</li>   <li>Acting as counsel to a privately owned investment manager on the formation and closing of an Income &amp; Growth Fund IV</li>   <li>Advising client STAR Capital Partners on its acquisition of Synergy Health Management Services Limited from Synergy Health (UK) Limited</li>   <li>Conducting an internal investigation into allegations of bribery, smuggling and money laundering for a publicly traded Fortune 500 company</li>   <li>Advising the investment banking arm of a major international bank regarding an investigation by a UK enforcement agency, together with associated litigation</li>   <li>Advising Crowdcube, the UK&#39;s first and leading equity crowdfunding platform, on a successful public offering as it seeks to further invest in its business. It represents the largest public financing secured by an investment crowdfunding platform, as well as the biggest ever UK offering on a crowdfunding platform</li>   <li>Counsel to a US-based provider of global payments solutions to banks in a $1.25-billion cross-border acquisition</li>   <li>Acting for Banque Transatlantique, Credit Mutuel CM-CIC and BMCE Bank in the establishment of foreign bank representative offices</li>   <li>Advice relating to governance and the Senior Managers and Certification Regimes</li>   <li>Extensive advice on the new EU Market Abuse regime and its implementation in the UK</li>   <li>Advising listed investment funds on the regulatory requirements of achieving listing on AIM and the LSE</li>   <li>Advising on compliance with Solvency II, the senior insurance managers&#39; regime, whistleblowing rules and regulatory obligations under the PRA Rulebook</li>   <li>Advising on the regulatory aspects of a business transfer from one regulated entity to another</li>   <li>Advising emission allowance market participants on the implications of, and compliance with, the new EU market abuse regulation</li>  </ul>    <h2>Learn more</h2>    <p>To learn more about how Gowling WLG&#39;s Financial Institutions &amp; Services Group can help you succeed, please contact any member of our team.</p>  ",GWLG.Global,5ae5a269-9c5f-4332-920e-28b31ec9066e;453e01a7-5d2e-4ac3-93d5-96ff46cb4607;18c972b4-6383-49da-8645-30a3b18621a5,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,1,t-white,"<p>To meet the demands of the rapidly changing financial market, industry players need a law firm that offers fresh perspectives, seamless service and an in-depth understanding of the sector&#39;s major challenges.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C0C757A8-E589-459A-B574-1E3C3FF83EBD}|{AE8484C3-6126-4C59-B6D3-ADA8CF11F29D}|{38984250-866F-40B0-B3EB-85AEED73805A}
75,/Sectors/Automotive/Global,en-GB,1C4EBAED-624D-47C9-9B6C-7EFEBF696D2F,Global,Global,"Fast-paced and innovative, the automotive sector demands commercial lawyers who think on their feet and understand the pressures facing the industry.",NULL,NULL,"<p>Fast-paced and innovative, the automotive sector demands commercial lawyers who think on their feet and understand the pressures facing the industry.</p>    <p>The last decade has seen unprecedented change and turmoil. Fluctuating fuel prices, environmental regulations, the introduction of electric and autonomous vehicles and changes in government policy have prompted automakers to make significant changes to the systems that propel, connect and distribute their vehicles.</p>    <p>To remain competitive on the global stage, you need to find new ways to manage your supply chains, replenish your inventories, improve fuel efficiency using new technology, outsource production methods and work within new company structures.</p>    <h2>Leading lawyers</h2>    <p>Gowling WLG is at the forefront of this exhilarating industry, matching our sector depth with the international reach of our clients. We offer you leading technical excellence and a dedicated cross-firm team of lawyers who are passionate about all things automotive. Like you, we&#39;re used to challenging conventional thinking and offering innovative alternatives.</p>    <p>Because we&#39;re part of your landscape, you&#39;ll be working with preeminent lawyers with niche experience. Our automotive industry group brings together technical excellence in regulatory, corporate, employment, dispute resolution, privacy and intellectual property, real estate, M&amp;A, restructuring, commercial and competition. Whether completing disposals and acquisitions or resolving disputes, we head off issues before they affect your bottom line.</p>    <h2>Global service</h2>    <p>Our client base is global and we represent participants at all levels in the industry, including major multinational OEMs, tier-one and tier-two component manufacturers, specialist manufacturers, financing companies, retailers, part suppliers and other organisations in the automotive supply chain. A number of global brands, such as the likes of Mazda, Prodrive, Peugeot, Aston Martin, SMMT and GKN - work closely with us and together we have built a strong, long-term relationship.</p>    <p>The team plays a significant role in the driverless vehicle consortium UK Autodrive, the aim of which is to establish the UK as a global hub for the development of <a href=""~/en/topics/connected-and-autonomous-vehicles/"">autonomous vehicle technologies</a> and to integrate driverless vehicles into urban environments.</p>    <h2>Examples of our work</h2>    <ul>   <li>Advised Cummins on the acquisition of Johnson Matthey&#39;s UK automotive battery systems business, a subsidiary of Johnson Matthey that specializes in high-voltage automotive grade battery systems for electric and hybrid vehicles.</li>   <li>Counsel to Magna on the acquisition of Stadco Automotive Ltd</li>   <li>Representing Ford Motor Company on the sale of the Formula 1 team that became Red Bull Racing</li>   <li>Counsel to a number of companies for autonomous and semi-autonomous systems in both airborne and/or ground based vehicles</li>   <li>Advising Jaguar Land Rover on the development of its &pound;500 million UK advance engine manufacturing facility</li>   <li>Counsel to General Motors (Vauxhall) on the sale of one of its largest urban brownfield sites</li>   <li>Advising brands such as Audi, FCA, Jeep, Seat, Skoda, Volkswagen and Volvo on advertising</li>   <li>Counsel to Mitsubishi Heavy Industries on various intellectual property matters</li>  </ul>    <h2>Looking out for you</h2>    <p>We&#39;ve built a law firm to cover just about all of the needs that arise in this complex and evolving market. We scan the horizon for developments relevant to the industry and stay close to the major influencers.</p>    <p>All of our advice is delivered through the lens of our deep background and understanding of the themes influencing industry participants at all levels. When disputes arise, the industry&#39;s biggest players call upon our team.</p>    <h2>Find out more</h2>    <p>Lawyers who lead and drive success: we&#39;re your ideal partner in an exciting new world. To find out how we can help you do business, please get in touch with any member of our team.</p>  ",GWLG.Global,44e4aa31-07d9-4e3f-a88e-b3398f315e4b;334a7f26-44f4-4a26-9d0d-0ddd5e499b12;4c3c2534-e644-427f-9b61-e7cd1aec53cf,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{EE9DC267-2EEE-4530-8CC4-D132CAD79675}|{509B877A-7C43-4EB2-B646-43EFBAA46FA0}|{F046AD45-7012-48EC-8763-50941C4A853A}
78,/Sectors/Life-Sciences/China,en-GB,B3EB1296-0C36-4C13-9AC8-9462BEFA7F83,China,China,-,NULL,NULL,<p>-</p>  ,GWLG.China,bb6e4e98-2d11-42a4-a949-3c3e7a8225f0;4bcdddc1-a500-4dd4-ac52-fd05abee5ef7,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E15A097F-C847-448B-9878-1702A07540D4}|{9CE439C1-2253-4714-81A2-A2EB6B9064A2}
79,/Sectors/Tech/China,en-GB,99B5FFBC-44A5-4AAD-91E2-AB848FDEF0D8,China,China,-,NULL,NULL,<p>-</p>  ,GWLG.China,9207f6c6-40a1-4fba-994e-c96d4a7ab4da,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F2D7A09E-F80D-49F5-B654-1E826CDE674A}
80,/Sectors/Automotive/China,en-GB,286DA517-5CF8-4ABB-BF3E-CFB2AF7F9AD7,China,China,-,NULL,NULL,<p>-</p>  ,GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013
81,/Sectors/Aviation-Aerospace-Defence/China,en-GB,D0F71518-1914-42E3-BD82-F66887A4EDCD,China,China,-,NULL,NULL,<p>-</p>  ,GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013
82,/Sectors/Automotive/France,en-GB,92380F24-6C86-4533-A298-487F358AC006,France,France,-,NULL,NULL,<p>-</p>  ,GWLG.France,ee86af6e-e106-4e72-8f7b-f812bed8d711,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{06B40793-0442-4531-AD63-1BE29FF66358}
83,/Sectors/Construction-Engineering/France,en-GB,4E936BB6-EF73-45A5-B75B-C45FD96A911A,France,France,-,NULL,NULL,<p>-</p>  ,GWLG.France,a3428c73-6626-4da7-9048-1294e325b432,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,a3428c73-6626-4da7-9048-1294e325b432
84,/Sectors/Retail-Leisure-Hotels/France,en-GB,0AF1828F-93EC-4877-8193-D46A6EC7DED8,France,France,-,NULL,NULL,<p>-</p>  ,GWLG.France,7f4c8899-f1c8-45be-8dda-8a97ad5e21bc,0357076D-2635-451A-8D67-EC01F9F3082B,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,7f4c8899-f1c8-45be-8dda-8a97ad5e21bc
85,/Sectors/Infrastructure/France,en-GB,EC822AFF-9E70-4D19-A3A0-4FB2C7EF04E1,France,France,-,NULL,NULL,<p>-</p>  ,GWLG.France,a1b0cd26-4d64-4ff5-9932-c95e2a1e8a51,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6C605183-41D8-4795-84D2-96B89CF31531}
86,/Sectors/Tech/France,en-GB,91C2539A-2DD0-42CC-B99F-692DB1C4AB10,France,France,- ,NULL,NULL,<p>-&nbsp;</p>  ,GWLG.France,b0a7b3fc-4cb7-4be6-926c-4b5e385f1bb1,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{DE8EAE4B-1D4C-4084-B1C9-A00852B8C205}
87,/Sectors/Automotive/Germany,en-GB,8407E780-FEF6-48B6-8DE5-2E85D270A901,Germany,Germany,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
88,/Sectors/Life-Sciences/Germany,en-GB,DB69A381-CE3D-4A13-BF72-666577FBFC13,Germany,Germany,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,4fd47d35-1640-4f91-b0ef-15ad1fa16f95,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4fd47d35-1640-4f91-b0ef-15ad1fa16f95
89,/Sectors/Tech/Germany,en-GB,9D205B3B-C5B7-4EDE-950A-B4C4AE752E1E,Germany,Germany,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,bc89113e-4507-4a3d-812a-d8d8a9d9573e,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,bc89113e-4507-4a3d-812a-d8d8a9d9573e
90,/Sectors/Energy/Germany,en-GB,57136343-A7FD-49B5-AB58-6C1FF49DFF6A,Germany,Germany,-,NULL,NULL,<p>-</p>  ,GWLG.France,199becac-9a85-4082-aec2-fd0969f7da84,F1E960F5-8231-4C56-B7BF-9898EBB538C5,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
91,/Sectors/Financial-Institutions-Services/Germany,en-GB,E577C5EA-8159-4FD1-8AB5-C398B0266087,Germany,Germany,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
92,/Sectors/Life-Sciences/Russia,en-GB,6B77E97C-CF53-4343-B39C-09C8F48E11FA,Russia,Russia,-,NULL,NULL,<p>-</p>  ,GWLG.Russia,afdd0917-8c31-4023-b2b8-3a046e0ea3fc,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,afdd0917-8c31-4023-b2b8-3a046e0ea3fc
93,/Sectors/Food-Beverage/Russia,en-GB,10B5A42B-F196-4A7C-A881-50ADA0A91737,Russia,Russia,-,NULL,NULL,<p>-&nbsp;</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
94,/Sectors/Automotive/Russia,en-GB,CEE4B643-FF99-4436-8980-6AC7ED0225F3,Russia,Russia,-,NULL,NULL,<p>-</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
95,/Sectors/Construction-Engineering/Russia,en-GB,117C0DD8-DAAE-48BE-855E-95DE28A3F909,Russia,Russia,-,NULL,-,<p>-</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
96,/Sectors/Tech/UAE,en-GB,B1F0F815-8E3C-405F-81C0-6FE4DF265C7F,UAE,UAE,-,NULL,NULL,<p>-</p>  ,GWLG.UAEDubai,34e4f40d-a7d6-4a3c-80e5-a3aa69943fa7,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e4f40d-a7d6-4a3c-80e5-a3aa69943fa7
97,/Sectors/Tech/Russia,en-GB,B41C5993-6C3E-48FA-8BCA-EF02F6C6AF49,Russia,Russia,-,NULL,NULL,<p>-</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
99,/Sectors/Tech/Canada,en-GB,A4878F34-057E-468B-AE32-E7BF1ED4DA8C,Canada,Canada,-,NULL,NULL,<p>-</p>  ,GWLG.Canada,425a9689-d70c-46ff-b7b6-8994bb782c5f,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{680CF4CA-5812-4762-A9E4-D3A93109F739}
100,/Sectors/Tech/UK,en-GB,B198D2FC-9635-4A35-8ECD-B3299BECBFFC,UK,UK,-,NULL,NULL,<p>-</p>  ,GWLG.UK,d960a618-a196-404c-b795-b884bc90e603;3eea8a58-b3f2-4e3c-87f4-8853720e2a67,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{AD4D3F97-80D7-4280-9634-F885370C3930}|{3D891B4E-1F61-437D-9FF8-FADA32E6C073}
102,/Sectors/Food-Beverage/Germany,en-GB,6295E402-2277-4160-984A-A4D6D3CD7CD6,Germany,Germany,-,NULL,-,<p>-</p>  ,GWLG.Germany,4fd47d35-1640-4f91-b0ef-15ad1fa16f95,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4fd47d35-1640-4f91-b0ef-15ad1fa16f95
103,/Sectors/Real-Estate/UK,en-GB,F1D64213-AB92-4884-B01F-ABF018B5A465,UK,UK,-,NULL,NULL,<p>-</p>  ,GWLG.UK,157cef8d-3bda-45e7-9dcd-bc32b082fa17,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{BF4EB340-343D-418B-A98B-DB773A3A50D1}
104,/Sectors/Real-Estate/Canada,en-GB,26837E23-77E7-4C07-8A29-085648292E3E,Canada,Canada,-,NULL,NULL,<p>-</p>  ,GWLG.Canada,28adebbb-5239-4131-b123-eb860852ce0c,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{78D88FC3-0344-402B-85ED-AF69D1596497}
105,/Sectors/Real-Estate/UAE,en-GB,0591C5F5-03BE-4092-8C87-9E5E6FE4D76B,UAE,UAE,-,NULL,NULL,<p>-</p>  ,GWLG.UAEDubai,cf2e1452-122b-41a6-b6a9-7d4d4c03b630,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,cf2e1452-122b-41a6-b6a9-7d4d4c03b630
106,/Sectors/Real-Estate/France,en-GB,0A511674-833E-40A8-A8EE-359294582FD3,France,France,-,NULL,NULL,<p>-</p>  ,GWLG.France,7f4c8899-f1c8-45be-8dda-8a97ad5e21bc;b67baf16-f6fa-43f7-a10a-47f1b848ca12,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,7f4c8899-f1c8-45be-8dda-8a97ad5e21bc|b67baf16-f6fa-43f7-a10a-47f1b848ca12
108,/Sectors/Financial-Institutions-Services/Canada,en-GB,014E93CE-975A-4711-BFC8-160570CA5E61,Canada,Canada,,NULL,NULL,<p>-</p>  ,GWLG.Canada,5ae5a269-9c5f-4332-920e-28b31ec9066e,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C0C757A8-E589-459A-B574-1E3C3FF83EBD}
109,/Sectors/Financial-Institutions-Services/UK,en-GB,C9D7A4E0-A6E5-4D08-9C05-AB5C50234F24,UK,UK,,NULL,NULL,<p>-</p>  ,GWLG.UK,af5005a2-4ec9-49ba-b7bd-262bb191b111;18c972b4-6383-49da-8645-30a3b18621a5,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,af5005a2-4ec9-49ba-b7bd-262bb191b111|{38984250-866F-40B0-B3EB-85AEED73805A}
110,/Sectors/Automotive/Global,fr-CA,1C4EBAED-624D-47C9-9B6C-7EFEBF696D2F,International,International,"Le secteur automobile, caractérisé par son rythme effréné et son côté innovateur, exige le recours à des avocats qui réfléchissent et réagissent sur-le-champ et qui comprennent les pressions commerciales auxquelles est soumise l’industrie.",NULL,NULL,"<p>Le secteur automobile, caractérisé par son rythme effréné et son côté innovateur, exige le recours à des avocats qui réfléchissent et réagissent&nbsp;sur-le-champ et qui comprennent les pressions commerciales auxquelles est soumise l&rsquo;industrie.</p>    <p>Au cours de la dernière décennie, des changements et des bouleversements sans précédent ont secoué le secteur. En effet, l&rsquo;augmentation du prix du carburant, les réglementations environnementales, l&rsquo;entrée sur le marché de véhicules électriques et autonomes, et la modification des politiques gouvernementales ont forcé les fabricants automobiles à effectuer des changements majeurs aux systèmes de propulsion, de connexion et de distribution de leurs véhicules.</p>    <p>Afin de demeurer concurrentiels sur la scène mondiale, il vous faut trouver de nouvelles façons de gérer vos chaînes d&rsquo;approvisionnement, de reconstituer vos stocks, d&rsquo;améliorer le rendement du carburant grâce aux nouvelles technologies, d&rsquo;impartir les méthodes de production et de mener vos opérations dans le cadre de nouvelles structures d&rsquo;entreprise.</p>    <h3>Avocats leaders</h3>    <p>Gowling WLG se situe à l&rsquo;avant-plan de cette industrie exaltante. Le cabinet offre des services à la hauteur de la grande diversité des secteurs de pratique et la portée internationale de nos clients. Nous vous proposons une expertise technique de premier plan et mettons à votre disposition une équipe mondiale d&rsquo;avocats dévoués et passionnés par tous les aspects du secteur automobile. À votre image, nous avons l&rsquo;habitude de remettre en question les façons traditionnelles de penser tout en offrant des solutions alternatives novatrices.</p>    <p>Comme nos avocats connaissent votre secteur, vous collaborez avec des sommités du domaine qui possèdent une expertise de niche. Notre groupe du secteur automobile rassemble une excellence technique dans divers domaines&nbsp;:</p>    <ul>   <li>Concurrence</li>   <li>Droit commercial</li>   <li>Droit de l&rsquo;emploi</li>   <li>Droit des sociétés</li>   <li>Fusions et acquisitions</li>   <li>Immobilier</li>   <li>Protection de la vie privée et de la propriété intellectuelle</li>   <li>Règlement de différends</li>   <li>Réglementation</li>   <li>Restructuration</li>  </ul>    <p>Que ce soit dans le cadre de la réalisation de dessaisissements et d&rsquo;acquisitions ou du règlement de différends, nous anticipons et réglons les problèmes avant qu&rsquo;ils n&rsquo;aient d&rsquo;incidence sur vos résultats financiers.</p>    <h3>Service à l&rsquo;échelle mondiale</h3>    <p>Nous avons des clients dans le monde entier et nous représentons des intervenants à tous les paliers de l&rsquo;industrie, notamment des équipementiers multinationaux d&rsquo;envergure, des fabricants de pièces de premier et de deuxième rang, des fabricants spécialisés, des sociétés de financement, des détaillants ou encore des fournisseurs de pièces et autres organisations de la chaîne d&rsquo;approvisionnement automobile. Plusieurs marques de calibre international, comme Mazda, Prodrive, Peugeot, Aston Martin, SMMT et GKN, travaillent étroitement avec notre cabinet et nous avons forgé de solides relations à long terme.</p>    <p>L&rsquo;équipe joue aussi un rôle important au sein du consortium des véhicules sans conducteur UK Autodrive, dont l&rsquo;objectif consiste à faire du Royaume-Uni le pôle mondial en matière d&rsquo;élaboration de technologies liées aux véhicules autonomes et d&rsquo;intégration de véhicules sans conducteur en milieu urbain.</p>    <h3>Mandats représentatifs</h3>    <ul>   <li>Conseillers juridiques de Magna dans le cadre de l&rsquo;acquisition de Stadco Automotive Ltd.;</li>   <li>Représentation de Ford Motor Company quant à la vente de l&rsquo;équipe de Formule 1, devenue Red Bull Racing;</li>   <li>Conseillers juridiques de plusieurs sociétés de fabrication de systèmes autonomes et semi-autonomes destinés à des aéronefs ou des véhicules terrestres;</li>   <li>Conseillers de Jaguar Land Rover pour la conception de son usine de fabrication de moteurs évolués au Royaume-Uni d&rsquo;une valeur de 500 M&pound;;</li>   <li>Conseillers juridiques de General Motors (Vauxhall) dans le cadre de la vente d&rsquo;une de ses friches industrielles les plus importantes en milieu urbain;</li>   <li>Conseillers de marques comme Audi, FCA, Jeep, Seat, Skoda, Volkswagen et Volvo en matière de publicité;</li>   <li>Conseillers juridiques de Mitsubishi Heavy Industries dans le cadre de divers mandats liés à la propriété intellectuelle.</li>  </ul>    <h3>Partenaires de vos ambitions</h3>    <p>Notre cabinet d&rsquo;avocats est capable de satisfaire presque tous les besoins qui se manifestent au sein de ce marché complexe et évolutif. Nous sommes constamment à l&rsquo;affût des nouveaux enjeux pouvant toucher votre industrie et nous surveillons de près les entités influentes du milieu.</p>    <p>Nous offrons des conseils qui témoignent de notre expérience et des antécédents que nous avons rencontrés, ainsi que de notre compréhension approfondie des tendances qui influencent les participants sectoriels à tous les niveaux. Et lorsque surviennent des différends, les intervenants les plus importants du secteur font appel à nous.</p>    <h3>Pour en savoir plus</h3>    <p>Comme nos avocats sont les moteurs de votre réussite, nous sommes le partenaire idéal dans cette industrie en plein renouveau. Pour en savoir davantage sur la façon dont nous pouvons aider votre entreprise, veuillez communiquer avec l&rsquo;un ou l&rsquo;autre des membres de <a href=""~/fr/people?page=1&amp;sectors=166"">notre équipe</a>.</p>  ",GWLG.Global,44e4aa31-07d9-4e3f-a88e-b3398f315e4b;5f2d3429-54fb-4005-99bf-68f77fe81428,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{EE9DC267-2EEE-4530-8CC4-D132CAD79675}|{A48180A6-54EA-4F4E-847C-35E399EB739D}
111,/Sectors/Automotive/China,fr-CA,286DA517-5CF8-4ABB-BF3E-CFB2AF7F9AD7,Chine,Chine,-,NULL,NULL,<p>-</p>  ,GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013
112,/Sectors/Automotive/Germany,fr-CA,8407E780-FEF6-48B6-8DE5-2E85D270A901,Allemagne,Allemagne,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
113,/Sectors/Automotive/Russia,fr-CA,CEE4B643-FF99-4436-8980-6AC7ED0225F3,Russie,Russie,-,NULL,NULL,<p>-</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
114,/Sectors/Construction-Engineering/Global,fr-CA,FE666B90-1152-486A-B2FA-07825C5226EA,International,International,"La construction est un secteur diversifié et complexe de plusieurs milliards de dollars. C’est une industrie très profitable, mais les enjeux sont de taille. ",~/getmedia/a2881f7e-ba07-43f8-b047-1d51c8908777/S-S_Construction_desktop.jpg.xml?width=1400&height=541&ext=.jpg,NULL,"<p>La construction est un secteur diversifié et complexe de plusieurs milliards de dollars. C&rsquo;est une industrie très profitable, mais les enjeux sont de taille. Pour mener à bien vos projets, il vous faut des conseils juridiques pratiques et vous faire représenter par des avocats chevronnés durant toutes les phases du processus de construction. Ainsi, vous pourrez concrétiser votre vision dans le respect des délais et du budget, tout en limitant les risques.</p>    <p>Vous accompagnant de la conception à la réalisation de vos projets, Gowling WLG souhaite faire partie intégrante de votre équipe et vous offrir un guichet unique. En tant que partie prenante de votre industrie, nous en connaissons les rouages, les obstacles à éviter et la façon de maintenir le cap des projets.</p>    <h3>Un service complet</h3>    <p>Nous représentons des entrepreneurs d&rsquo;envergure ainsi que des promoteurs leaders, et nous jouissons de solides relations de longue date avec certains des acteurs les plus importants du secteur. Nous comptons également des employeurs, des utilisateurs finaux et des fonds parmi nos clients.</p>    <p>Avec Gowling WLG, vous bénéficierez d&rsquo;un service exhaustif de la part de nos avocats d&rsquo;expérience qui ont travaillé dans des projets de tout genre pour l&rsquo;ensemble des parties de divers secteurs&nbsp;:</p>    <ul>   <li>infrastructures et PPP;</li>   <li>énergie (hydroélectricité, LGN, énergie renouvelable et nucléaire);</li>   <li>exploitation minière;</li>   <li>pétrole et gaz;</li>   <li>services financiers;</li>   <li>et construction traditionnelle, industrielle, résidentielle et commerciale.</li>  </ul>    <p>Comme nous exerçons nos activités à l&rsquo;échelle mondiale, nous pouvons gérer vos projets de façon concertée, où qu&rsquo;il soit situé.</p>    <h3>Une approche commerciale</h3>    <p>Connaissant le secteur de la construction sur le bout des doigts et possédant d&rsquo;excellentes aptitudes techniques, nos avocats peuvent également adopter une approche commerciale. Forts de nombreuses années d&rsquo;expérience, nous comprenons tous les aspects des contrats types principaux du secteur, et nous pouvons rédiger et négocier des ententes sur mesure. Vous pouvez bénéficier de conseils spécialisés à tous les stades du processus de promotion d&rsquo;un projet, de sa conception au choix des sources d&rsquo;approvisionnement, en passant par le processus d&rsquo;appel d&rsquo;offres, les négociations contractuelles complexes, la gestion des contrats, ainsi que l&rsquo;évitement des différends et le règlement de ces derniers.</p>    <p>Grâce à notre feuille de route éloquente en matière de règlement de différends de tout genre (médiation, arbitrage intérimaire, conciliation, négociation), vous êtes entre de bonnes mains. Réputé pour nos modes alternatifs de règlement des litiges, notre cabinet est souvent associé à des dossiers d&rsquo;envergure en ce qui a trait à la prestation de conseils à des sociétés de premier plan.</p>    <h3>Des spécialistes de pointe</h3>    <p>En tant que cabinet juridique international, Gowling WLG emploie des centaines de professionnels du droit et nombre d&rsquo;entre eux se spécialisent dans des domaines directement reliés à l&rsquo;industrie de la construction et du génie, notamment :</p>    <ul>   <li>L&rsquo;assurance et la responsabilité professionnelle</li>   <li>L&rsquo;énergie</li>   <li>L&rsquo;immobilier</li>   <li>La réglementation</li>   <li>La santé et la sécurité au travail</li>   <li>Le droit autochtone</li>   <li>Le droit de l&rsquo;emploi et du travail</li>   <li>Le droit de l&rsquo;environnement</li>   <li>Le droit de la propriété intellectuelle</li>   <li>Le droit municipal</li>   <li>Les affaires gouvernementales</li>   <li>Les cautionnements</li>   <li>Les différends</li>   <li>Les services financiers</li>  </ul>    <p>En quoi consistent nos services liés aux contrats? Nous offrons de l&rsquo;assistance dans divers domaines&nbsp;: processus de soumission, d&rsquo;appel d&rsquo;offres et de demandes de propositions et de devis, acquisition de terrains et questions de sécurité, obtention des approbations réglementaires, protection de la propriété intellectuelle et des exigences en matière de confidentialité. Nos services de litige comprennent la revendication de droits et la présentation de réclamations en matière de privilège ou d&rsquo;hypothèques légales et l&rsquo;opposition d&rsquo;une défense contre celles-ci, les questions relatives à la mise sous séquestre et à la faillite, à la responsabilité des tiers et du fait du produit ainsi qu&rsquo;aux responsabilités prévues par la loi.</p>    <h3>Axés sur votre réalité</h3>    <p>Comme ils baignent dans le secteur de la construction, nos professionnels juridiques sont les premiers à connaître les plus récents enjeux qui pourraient avoir une incidence sur votre entreprise et sur vos résultats financiers.</p>    <p>Au Canada, par exemple, nous sommes à l&rsquo;affût de changements comme les modifications importantes apportées à la <em>Loi sur le privilège dans l&rsquo;industrie de la construction</em> (LPIC) de l&rsquo;Ontario. Ces modifications, qui devraient entrer en vigueur en 2018, prévoient d&#39;instaurer un nouveau régime de paiements rapides, d&rsquo;imposer le recours à l&rsquo;arbitrage intérimaire des différends, et d&rsquo;apporter des changements aux privilèges et aux délais. Pour en savoir plus, veuillez consulter nos articles sur la LPIC.</p>    <h3>Nos clients</h3>    <ul>   <li>AMEC</li>   <li>AXA</li>   <li>Black &amp; Veatch</li>   <li>Bloor Homes</li>   <li>Cemex</li>   <li>Development Securities</li>   <li>E.ON</li>   <li>Kier May Gurney</li>   <li>Legal and General</li>   <li>Miller, Morgan</li>   <li>Persimmon</li>   <li>Pochin Construction</li>   <li>Prologis Developments</li>   <li>Shepherd Group</li>   <li>Sindall</li>   <li>St. Modwen Properties</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Si vous recherchez des avocats dotés d&rsquo;une solide expérience, des conseils de premier ordre et un service sans pareil, Gowling WLG est votre cabinet de prédilection. Pour en savoir davantage sur la façon dont nous pouvons vous guider vers la réussite, veuillez communiquer avec l&rsquo;un ou l&rsquo;autre des membre de <a href=""~/fr/people?page=1&amp;sectors=186"">notre équipe</a>.</p>  ",GWLG.Global,fee46864-312d-4663-a0fc-5e30836efd91;1bcef802-e18d-4c52-9203-5d613c802e3f;dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{455ABB31-95A8-44A4-BB66-D1D901A9122B}|{D2D321DE-981F-4805-A2FD-88D01F4EFD96}|{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
115,/Sectors/Construction-Engineering/Russia,fr-CA,117C0DD8-DAAE-48BE-855E-95DE28A3F909,Russie,Russie,-,NULL,-,<p>-</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
116,/Sectors/Retail-Leisure-Hotels/Global,fr-CA,4DC41889-5BC1-4437-99C6-3C8205CA8E21,International,International,"Les détaillants, les spécialistes des loisirs et les promoteurs hôteliers, les investisseurs et les franchisés se livrent concurrence dans des secteurs comptant parmi les plus exigeants et les plus dynamiques du monde. ",NULL,NULL,"<p>Les détaillants, les spécialistes des loisirs et les promoteurs hôteliers, les investisseurs et les franchisés se livrent concurrence dans des secteurs comptant parmi les plus exigeants et les plus dynamiques du monde. Aujourd&rsquo;hui plus que jamais, ils doivent s&rsquo;entourer de conseillers juridiques qui carburent au changement et qui offrent les conseils commerciaux, pragmatiques et judicieux dont les entreprises ont besoin pour prospérer.</p>    <p>Les équipes de Gowling WLG dans les secteurs hôtelier, du détail, du franchisage et des loisirs œuvrent dans toutes les disciplines&nbsp;: publicité et commercialisation, propriété intellectuelle, immobilier, financement, franchisage, droit des sociétés, droit de l&rsquo;emploi, du travail et droits de la personne, règlement des différends, contrats commerciaux, des technologies de l&rsquo;information (TI), de la protection de la vie privée et des données.</p>    <p>Travaillant avec certaines des entreprises et des franchises les plus florissantes, soient des sociétés inscrites à la cote du FTSE 100 ou des sociétés en démarrage plus petites et innovatrices, nous mettons cette expérience à votre profit.</p>    <p>Comptant quelque 1 400 professionnels du droit répartis dans nos bureaux situés au Canada, au Royaume-Uni, ailleurs en Europe, au Moyen-Orient et en Asie, nous offrons des conseils experts sur toutes les questions d&rsquo;affaires, et ce, dans une panoplie de langues et aux quatre coins du monde.</p>    <h3>Secteur du détail et des loisirs</h3>    <ul>   <li>Nous approuvons des stratégies de promotion de prix afin d&rsquo;éviter d&rsquo;être confrontés à des problèmes réglementaires, nous remettons en question la publicité comparative des concurrents, nous défendons les détaillants contre toutes plaintes et nous négocions des contrats à l&rsquo;échelle locale et internationale avec des agences de publicité et des vedettes.</li>   <li>Nous offrons des conseils aux détaillants et aux spécialistes des loisirs de tout genre quant à leur utilisation de données afin d&rsquo;améliorer la personnalisation et la loyauté des clients. Nos avocats spécialisés en contrats commerciaux et en TI ont d&rsquo;ailleurs travaillé dans le cadre de certains des projets commerciaux et technologiques les plus palpitants du secteur du détail.</li>   <li>Nous vous prêtons main-forte dans le cadre d&rsquo;acquisitions de propriétés. En effet, acquérir une propriété rapidement et dans des conditions optimales vous permet d&rsquo;obtenir un avantage concurrentiel. Si vous cherchez à faire des soumissions percutantes, vous devez vous associer à des avocats en mesure d&rsquo;agir dans les échéanciers convenus, avec un minimum de contrariétés, tout en obtenant des conditions raisonnables.</li>   <li>Notre équipe en droit des sociétés possède des connaissances de pointe et une expérience sectorielle approfondie, ce qui est vital pour étayer la croissance au moyen d&rsquo;activités de financement, des acquisitions ou une expansion à l&rsquo;échelle internationale grâce à des coentreprises stratégiques.</li>   <li>Nos avocats peuvent vous aider à mobiliser des fonds pour de nouvelles chaînes ou des chaînes ayant déjà pignon sur rue. Nous conseillons des investisseurs et des familles fondatrices sur l&rsquo;acquisition de portefeuilles actuels et sur la réalisation de leurs investissements, souvent au moyen d&rsquo;une vente, d&rsquo;une inscription ou d&rsquo;une hypothèque viagère.</li>   <li>Nous nous chargeons de tous les aspects et types de projets de construction et de génie, et nous sommes en mesure de vous aider à atteindre vos objectifs rapidement et à éviter les écueils éventuels.</li>   <li>Grâce à notre méthodologie primée, nos professionnels juridiques œuvrant en droit du travail, de l&rsquo;emploi et droits de la personne conseillent des détaillants quant à divers domaines&nbsp;: examen des contrats et des politiques, parité salariale, règlement TUPE du Royaume-Uni, assistance dans le cadre d&rsquo;enquêtes menées sur des employés, défenses contre des réclamations intentées par le Tribunal.</li>  </ul>    <p>Et si une affaire tournait au vinaigre? Si un différend survenait? Votre entreprise doit pouvoir se fier à des avocats chevronnés capables de trouver la meilleure solution. Notre priorité est de comprendre vos objectifs commerciaux, d&rsquo;évaluer les forces et les faiblesses de votre position, et de choisir ensemble la stratégie gagnante.</p>    <p>Des enquêtes menées par les autorités de réglementation peuvent aussi perturber vos affaires, engendrer une publicité négative, des frais, des amendes voire une peine d&rsquo;emprisonnement, et faire perdre du temps précieux aux membres de la direction. Afin de prévenir toute infraction réglementaire, notre équipe prendra le temps qu&rsquo;il faut pour se familiariser avec vos activités commerciales et elle interviendra en connaissance de cause s&rsquo;il se produit quelque chose.</p>    <h3>Une équipe axée sur vos besoins en matière de franchisage</h3>    <p>Consacrée exclusivement au droit de la franchise et de la distribution, notre équipe de professionnels juridiques peut vous aider à démarrer votre entreprise et à assurer son expansion au moyen du franchisage, tant à l&rsquo;échelle nationale qu&rsquo;internationale. Elle veille à ce que vous disposiez du mécanisme d&rsquo;expansion le plus efficace, notamment par l&rsquo;entremise d&rsquo;accords-cadres de franchisage, d&rsquo;ententes de développement régional et d&rsquo;aménagement de plusieurs emplacements, ainsi que d&rsquo;accords de concession de licence et de distribution.</p>    <p>Votre succès nous tient à cœur. Nous sommes déterminés à vous voir réussir à tous les stades du processus de franchisage, qu&rsquo;il s&rsquo;agisse d&rsquo;aborder des questions réglementaires complexes ou de conformité, de rédiger un contrat de franchisage destiné à s&rsquo;appliquer dans plusieurs territoires, de protéger votre propriété intellectuelle ou de vous aider à gérer la relation franchiseur-franchisé.</p>    <h3>Hôtels</h3>    <p>Nos professionnels juridiques comprennent le monde hôtelier et ont conscience des nombreux intervenants qui participent à des projets d&rsquo;acquisition et d&rsquo;aménagement d&rsquo;hôtels. En leur qualité de conseillers leaders dans ce secteur, ils travaillent étroitement avec des propriétaires, des promoteurs, des bailleurs de fonds et des gestionnaires lors de tels projets à l&rsquo;échelle internationale.</p>    <p>Nos avocats en droit des sociétés offrent des conseils sur les sujets suivants :</p>    <ul>   <li>accords directs ou accords contre les troubles de jouissance</li>   <li>acquisitions et aliénations d&rsquo;hôtels, de centres de villégiature de luxe et de complexes</li>   <li>contrats de franchisage</li>   <li>contrats de gestion hôtelière</li>  </ul>    <p>Spécialisés également en financement hôtelier, nos professionnels juridiques peuvent vous conseiller en matière de mécanismes de financement pour des hôtels de luxe offrant des services complets ou de restructuration d&rsquo;ententes de financement par emprunt grevant des actifs hôteliers. Ils offrent également des conseils sur tous les aspects de l&rsquo;acquisition et de l&rsquo;aliénation d&rsquo;immeubles.</p>    <h3>Pour en savoir plus</h3>    <p>Pour prendre contact avec nous et apprendre comment nous pouvons guider votre entreprise vers la réussite, veuillez communiquer avec l&rsquo;un ou l&rsquo;autre des membres de <a href=""~/fr/people?page=1&amp;sectors=203"">notre équipe</a>.</p>  ",GWLG.Global,157cef8d-3bda-45e7-9dcd-bc32b082fa17;46b21a2f-6764-47aa-a5e4-93f7e0959916,0357076D-2635-451A-8D67-EC01F9F3082B,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{BF4EB340-343D-418B-A98B-DB773A3A50D1}|{E30466D8-0DA9-4E54-A729-9E455BCD2424}
117,/Sectors/Life-Sciences/Global,fr-CA,12883179-84A7-45F6-B99F-7275348D7F56,International,International,"Dans le secteur des sciences de la vie, que vous soyez une société en démarrage ou une multinationale, il vous faut un partenaire juridique de confiance capable de vous épauler à chaque étape de votre projet, et de vous offrir des conseils juridiques pratiques à un coût abordable.",NULL,NULL,"<p>Dans le secteur en constante évolution des sciences de la vie, que vous soyez une société en démarrage ou une multinationale, il vous faut un partenaire juridique de confiance capable de vous épauler à chaque étape de votre projet, et de vous offrir des conseils juridiques efficaces et rentables.</p>    <p>Fort de ses 150 professionnels actifs dans le monde, le groupe des sciences de la vie de Gowling WLG possède l&rsquo;expertise technique requise pour comprendre les défis uniques auxquels vous faites face tout au long de votre cycle d&#39;affaires.</p>    <p>Nous collaborons avec vos équipes en affaires, en propriété intellectuelle (PI), en ressources humaines et en réglementation afin de vous offrir une orientation et un soutien dans des secteurs clés des sciences de la vie&nbsp;: protection et mise en valeur de vos idées, protocoles en vue d&rsquo;essais cliniques, rédaction de contrats y afférents, présentations de médicaments, octrois de licences, financement, emploi et travail, règlement de différends contractuels, recherche et développement (R et D), établissement des prix, remboursement, et plus encore.</p>    <p>Nos professionnels connaissent parfaitement le secteur, et nombre d&rsquo;entre eux ont des diplômes liés aux sciences de la vie ou ont été des scientifiques pendant une partie de leur carrière, ils ont ainsi l&rsquo;expérience pratique leur permettant de comprendre votre milieu d&rsquo;exploitation, vos besoins commerciaux et les défis qui se posent à vous.</p>    <h3>Services exhaustifs</h3>    <p>Voici les domaines pour lesquels nous offrons des services :</p>    <ul>   <li>Acquisitions, fusions, entreprises dérivées et dessaisissements, structures de fonds et premiers appels publics à l&rsquo;épargne (PAPE)</li>   <li>Différends contractuels liés à une multitudes d&rsquo;enjeux : des violations importantes en passant par les efforts commercialement raisonnables, aux résiliations et aux litiges concernant la PI et les ententes d&rsquo;octroi de licences</li>   <li>Interprétation de contrats et optimisation de positions commerciales et atténuation des risques de violation</li>   <li>Coentreprises</li>   <li>Concurrence et lois antitrust</li>   <li>Ententes de concession de licence, de développement et de commercialisation</li>   <li>Ententes en matière d&rsquo;essais cliniques et de fabrication de médicaments</li>   <li>Établissement des prix des médicaments et leur remboursement</li>   <li>Étiquetage, publicité et distribution</li>   <li>Fiscalité</li>   <li>Gestion des risques, responsabilité du fait du produit et litiges connexes</li>   <li>Opinions sur la liberté d&rsquo;exploitation</li>   <li>Protection des brevets et des marques et litiges connexes</li>   <li>Réglementation</li>   <li>Relations gouvernementales</li>   <li>Services relatifs aux produits pharmaceutiques et aux soins de santé</li>   <li>Transactions immobilières et soutien quant aux enjeux de gestion immobilière au quotidien pour les entreprises des sciences de la vie louant des biens immobiliers voués à ces sciences.</li>  </ul>    <p>Qu&rsquo;il s&rsquo;agisse de protéger ou de faire valoir vos droits de PI, de concevoir une structure d&rsquo;opérations afin d&rsquo;atténuer les risques ou de réaliser une fusion ou une acquisition, nous aidons les sociétés des sciences de la vie &ndash; y compris les investisseurs, les preneurs fermes, les émetteurs publics, les sociétés novatrices en démarrage et les titulaires de marques internationales &ndash; à atteindre leurs objectifs commerciaux.</p>    <h3>Nous avons vos intérêts à cœur</h3>    <p>Notre équipe est à votre&nbsp;disposition&nbsp;lorsque vous avez besoin d&rsquo;orientation dans ce secteur fortement réglementé à l&rsquo;échelle mondiale. Forts d&rsquo;une expertise dans des secteurs donnés, nos professionnels savent réagir rapidement et de manière efficace à des menaces planant sur votre PI. Nous comprenons le défi que représente la récupération de l&rsquo;investissement compte tenu des coûts croissants de la mise au point de médicaments et la difficulté de mise en marché de nouveaux produits.</p>    <p>Les produits innovateurs constituent la source vitale de nombreuses sociétés pharmaceutiques. La protection de ces produits exige une connaissance intime à la fois des aspects de procédure et de la jurisprudence des tribunaux qui tranchent des litiges en matière de brevets.</p>    <p>Nos avocats plaidants en PI comptent des décennies d&rsquo;expérience sur le plan des différends très techniques en matière de brevets dans le secteur des sciences de la vie et des antécédents impressionnants de réussite. Qu&rsquo;il s&rsquo;agisse de petites molécules, de produits biologiques, d&rsquo;appareils médicaux ou de la gamme complète d&rsquo;autres types de brevets, notre équipe possède les compétences et l&rsquo;expérience techniques et juridiques pour vous offrir des conseils de la meilleure qualité.</p>    <p>Nous tirons également parti de notre expertise primée en poursuite de demandes d&rsquo;enregistrement de brevets et de marques de commerce au Canada, au Moyen-Orient, à Singapour et en Chine, et nous collaborons avec un réseau mondial de cabinets d&rsquo;avocats pour aider les clients à gérer leurs portefeuilles de PI.</p>    <p>L&rsquo;expérience combinée de nos opérations dans le domaine des sciences de la vie, des litiges en matière de brevets et des différends contractuels, fait en sorte que nous sommes bien placés pour traiter tous les types de litiges contractuels pour les clients de ce secteur. Les circonstances évoluant au fil du temps, vous devrez peut-être réévaluer vos ententes contractuelles à long terme. Notre équipe internationale d&#39;avocats peut vous conseiller sur l&#39;interprétation des contrats et envisager tous les angles potentiels en cas de différends afin de travailler avec vous pour en assurer le règlement optimal.</p>    <p>Les membres de notre équipe participent activement aux travaux d&rsquo;organismes tels que l&rsquo;Association of the British Pharmaceutical Industry, BIOTECanada et l&rsquo;UK BioIndustry Association. Grâce à cette participation, ainsi qu&rsquo;aux articles rédigés par nos membres qui contribuent également périodiquement à des publications professionnelles clés, nous sommes perçus comme des leaders d&rsquo;opinion sur les derniers enjeux du milieu.</p>    <h3>Pour en savoir plus</h3>    <p>Nous vous offrons les conseils dont vous avez besoin au moment où vous en avez besoin : communiquez avec une équipe&nbsp;véritablement en mesure d&rsquo;aider votre entreprise.</p>  ",GWLG.Global,NULL,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
118,/Sectors/Life-Sciences/China,fr-CA,B3EB1296-0C36-4C13-9AC8-9462BEFA7F83,Chine,Chine,-,NULL,NULL,<p>-</p>  ,GWLG.China,bb6e4e98-2d11-42a4-a949-3c3e7a8225f0;4bcdddc1-a500-4dd4-ac52-fd05abee5ef7,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E15A097F-C847-448B-9878-1702A07540D4}|{9CE439C1-2253-4714-81A2-A2EB6B9064A2}
119,/Sectors/Life-Sciences/Germany,fr-CA,DB69A381-CE3D-4A13-BF72-666577FBFC13,Allemagne,Allemagne,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,4fd47d35-1640-4f91-b0ef-15ad1fa16f95,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4fd47d35-1640-4f91-b0ef-15ad1fa16f95
120,/Sectors/Life-Sciences/Russia,fr-CA,6B77E97C-CF53-4343-B39C-09C8F48E11FA,Russie,Russie,-,NULL,NULL,<p>-</p>  ,GWLG.Russia,afdd0917-8c31-4023-b2b8-3a046e0ea3fc,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,afdd0917-8c31-4023-b2b8-3a046e0ea3fc
121,/Sectors/Government-Contracting-Public-Sector/Global,fr-CA,CA959E8D-83CB-4E01-8A06-4374DE157916,International,International,"Nous comprenons les pressions exercées sur le secteur public. Nos principaux experts possèdent une expérience exceptionnelle qui nous permet de fournir des conseils juridiques, réglementaires et publics sophistiqués sur pratiquement toutes les questions.",NULL,NULL,"<p>Le secteur public fait face à des temps difficiles, mais ni les demandes en services ni les attentes en matière de livraison ne semblent diminuer.</p>    <p>Le cabinet Gowling WLG comprend bien ces enjeux. Dotés d&#39;une expérience exceptionnelle dans les secteurs public et privé, nos professionnels possèdent une vue d&#39;ensemble qui leur permet d&#39;offrir des conseils judicieux en matière de droit, de réglementation et de politique publique sur pratiquement tout sujet.</p>    <p>Nous comptons parmi nos clients des gouvernements de tous les paliers ainsi que leurs organismes, des associations commerciales et professionnelles, des organismes non gouvernementaux, des sociétés d&#39;État, des sociétés de services publics, des promoteurs et des établissements d&#39;enseignement, comme des écoles et des universités.</p>    <p>Nous représentons les intérêts de nos clients devant des comités du secteur public et du gouvernement et lors de leurs enquêtes, ainsi que devant des groupes de travail du gouvernement, à tous les paliers des tribunaux nationaux, fédéraux et provinciaux.</p>    <h3>Promotion de votre plan d&#39;action</h3>    <p>Notre réseau étendu de contacts au sein des administrations gouvernementales constitue un avantage clé pour les intervenants sectoriels qui souhaitent faire part de leurs préoccupations aux décideurs.</p>    <p>En effet, nombre de nos professionnels ont occupé une charge élective ou des postes clés au sein de gouvernements, ou ont contribué à l&#39;élaboration de politiques, de lois et de régimes de réglementation. Forts de notre expérience, nous pouvons vous aider à comprendre le processus parlementaire et la manière d&#39;exercer vos activités de façon efficace à tous les paliers de gouvernement.</p>    <p>Nous offrons également des conseils en matière de conformité aux lois sur le lobbyisme et sur les obligations de déontologie, et nous vous guidons pour vos questions liées aux conflits d&#39;intérêts aussi bien aux niveau fédéral et provincial, que municipal.</p>    <p>Les questions juridiques complexes exigent souvent l&#39;adoption d&#39;une démarche intersectorielle et interservices. Nous sommes fiers de notre capacité d&#39;allier, au besoin, toutes ces spécialisations sous une même bannière dans le but d&#39;offrir un &laquo; guichet unique &raquo;.</p>    <h3>Vos défis sont les nôtres</h3>    <p>En établissant clairement vos objectifs dès le départ, nous sommes en mesure de veiller à produire les résultats escomptés. C&#39;est ainsi que nous forgeons des liens de longue durée avec nos clients.</p>    <p>Qu&#39;il s&#39;agisse de gérer une réputation, de procéder à une refonte complète de la prestation de services, d&#39;établir une stratégie de négociation, de gérer des projets dans le cadre de la réalisation de mandats, d&#39;opposer une défense à des litiges complexes, ou encore de transférer les risques à des tiers, nous trouvons la solution qui s&#39;impose.</p>    <p>Parfois, il faut commencer par un canevas vierge. Notre manière originale de réfléchir est mise en évidence par les distinctions que nous avons reçues pour les mandats que nous avons exécutés dans le secteur public, que ce soit pour notre prestation de conseils novateurs sur des questions de parité salariale ou des opérations historiques dans le domaine des soins de la santé.</p>    <h3>Un cabinet juridique de confiance</h3>    <p>Réaliser des économies et faire preuve d&#39;efficacité est l&#39;une des principales préoccupations des organismes gouvernementaux. Nous avons agi dans le cadre de programmes importants ciblant la réalisation d&#39;économies et d&#39;efficiences par la restructuration de la prestation de services et la renégociation d&#39;ententes contractuelles existantes.</p>    <h3>Mandats représentatifs&nbsp;:</h3>    <ul>   <li>Conseils à un important client du secteur sans fil canadien, à un client international du secteur de l&#39;approvisionnement et à un client international en matière de placements dans le cadre d&#39;un examen réglementaire par des fonctionnaires canadiens d&#39;une fusion et acquisition;</li>   <li>Conseils au conseil municipal de Birmingham City lors de la vente très médiatisée du NEC Group, qui assure l&#39;emploi de quelque 29 000 personnes et dont les activités rapportent plus de 2 G&pound; par an dans la région du West Midlands;</li>   <li>Nomination parmi un nombre limité de fournisseurs de niveau 1 au <em>Crown Commercial Service</em> qui représente les organismes de l&#39;administration centrale pour ce qui est de l&#39;approvisionnement lors de projets d&#39;envergure;</li>   <li>Conseils au <em>Department for Business, Energy and Industrial Strategy</em> du Royaume-Uni sur le programme de compteurs intelligents d&#39;une durée de six ans et d&#39;une valeur de 11&nbsp;G&pound;, soit le projet axé sur les nouvelles technologies le plus important en son genre au Royaume-Uni. Lors de ce mandat, nous avons donné des conseils sur le cadre réglementaire nécessaire à la mise en œuvre et au fonctionnement du programme;</li>   <li>Conseils au <em>Ministry of Defence</em> du Royaume-Uni sur divers aspects de ses projets visant des porte-avions, des sous-marins et des véhicules de combat polyvalents, ainsi qu&#39;à NATS relativement au réseau de gestion du trafic aérien du Royaume-Uni;</li>   <li>Conseils à la <em>Sanctuary Housing Association</em> lors de sa nouvelle émission en continu d&#39;obligations garanties de 150 M&pound;, lesquelles sont inscrites à la cote de la Bourse de Londres; ce programme, le plus important en son genre, a assuré la mise à disposition de plus de 5 000 nouvelles résidences à prix abordable partout au Royaume-Uni avant 2015;</li>   <li>Conseils à Simon &amp; Schuster Canada lors de ses pourparlers fructueux avec le ministère du Patrimoine canadien en vue d&#39;obtenir une dispense d&#39;application des dispositions de <em>Book publishing policy and programs, the book report</em> prises en vertu de la <em>Loi sur Investissement Canada</em>;</li>   <li>Conseils à des membres du consortium Ontario Sports Solution, de Fengate Capital Management Ltd. et de Kenaidan Contracting Ltd. lors du projet de construction du stade de soccer à Hamilton Soccer Stadium dans le cadre des Jeux panaméricains et parapanaméricains de 2015 à Toronto;</li>   <li>Conseils à Tarion Warranty Corporation, qui administre le programme ontarien de garantie des maisons neuves, lors d&#39;un différend avec un constructeur de maisons dont était saisie la Cour supérieure de justice de l&#39;Ontario;</li>   <li>Conseils au conseil municipal de Westminster City dans le cadre d&#39;options en matière d&#39;aménagement pour le projet de revitalisation de Church Street, soit un projet de 300&nbsp;M&pound; formé de 2 000 résidences à vocation multiple, d&#39;un marché de rue, de commerces de détail et d&#39;emplois;</li>   <li>\Conseils au <em>South African National Treasury</em>, au <em>South African Department of Energy</em> et à la <em>Development Bank of South Africa</em> lors de l&#39;élaboration du programme de production de charbon, de gaz et de coproduction des producteurs indépendants d&#39;électricité en charge fondamentale et intermédiaire de 7,5 GW de l&#39;Afrique du Sud\;</li>   <li>Conseils au gouvernement du Kenya et à TradeMark East Africa concernant l&#39;élaboration d&#39;un nouveau régime législatif et réglementaire pour la <em>Kenya Ports Authority</em> et de la loi habilitante en ayant recours à un PPP comme mécanisme de mise en valeur du secteur portuaire au Kenya.</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Votre réussite nous tient à cœur. Pour en savoir plus sur les services en affaires gouvernementales que nous offrons, veuillez communiquer avec un membre de notre équipe.</p>  ",GWLG.Global,40d2e703-8710-44d5-9b4a-6108d5734e98;d3439935-7893-4a93-b3aa-d3169bfd758f;4f7f399d-4924-4c9f-aa7c-2fdc3c2c77a3,5AD41B49-D460-489A-95B9-84C854EDA6F1,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A09A7A80-1041-4B5E-B156-C023BC66DA86}|d3439935-7893-4a93-b3aa-d3169bfd758f|{0D3C7782-862F-4764-9191-1AE46F04873C}
122,/Sectors/Health-Care/Global,fr-CA,6F782279-37D3-43F1-86A1-C793AA6D92CC,International,International,"De par son rôle essentiel au sein de la société, le secteur des soins de santé est toujours sous la loupe du public, des autorités de réglementation, des cliniciens et des gouvernements. ",NULL,NULL,"<p>De par son rôle essentiel au sein de la société, le secteur des soins de santé est toujours sous la loupe du public, des autorités de réglementation, des cliniciens et des gouvernements. Vous devez prendre conseils auprès d&#39;avocats qui comprennent les priorités commerciales, le contexte réglementaire et les défis qui se posent au secteur.</p>    <p>Le rythme effréné et le caractère innovateur de ce secteur exige le recours à une équipe juridique qui offre des perspectives et un savoir-faire sectoriels en raison des progrès médicaux réalisés au quotidien. Les avocats qui vous représentent doivent être à l&#39;avant-garde de ce secteur dynamique et pouvoir vous éclairer quant aux enjeux pertinents.</p>    <h3>Service à l&#39;échelle mondiale</h3>    <p>À une époque où les soins de santé commencent à se mondialiser, Gowling WLG exerce ses activités à l&#39;échelle internationale&nbsp;: nos avocats saisissent bien l&#39;interaction entre les divers territoires et en connaissent les meilleurs pratiques. Au sein de nos services en soins de santé figurent des spécialistes en mise en service, en impartition, en fusions et acquisitions de sociétés, en marchés des capitaux, en réglementation, en protection des données, en droit commercial, en propriété intellectuelle (PI), en droit de l&#39;emploi, en droit bancaire et en droit de l&#39;approvisionnement.</p>    <p>Nous vous aidons à naviguer dans ce secteur hautement réglementé où la surveillance exercée par les gouvernements et les autorités de réglementation est à son apogée. Compte tenu du potentiel accru de responsabilité liée à vos produits et services, les conseils juridiques éclairés que nous offrons peuvent se révéler essentiels.</p>    <h3>Spécialistes sectoriels</h3>    <p>Qu&#39;il s&#39;agisse de projets stratégiques ou de coentreprises, d&#39;entreprises sociales, de services de soutien en approvisionnement ou de conseils en matière d&#39;emploi, notre équipe aide les gouvernements à proposer de meilleurs choix et une plus grande souplesse dans la prestation de soins de santé.</p>    <p>D&#39;importants fournisseurs de services privés de soins de santé et investisseurs font également appel à nos experts en fusions et acquisitions, en marchés des capitaux, en financement et en capital d&#39;investissement pour réaliser des opérations d&#39;envergure. Nous avons une vaste expérience dans la prestation de conseils aux clients du secteur des résidences de soins, des établissements pour personnes âgées, des centres de retraités et des résidences pour personnes atteintes de démence ou nécessitant des soins psychiatriques.</p>    <p>Notre équipe bénéficie d&#39;une expérience considérable en prestation de conseils à des emprunteurs et à des prêteurs en matière de financement de l&#39;aménagement et de l&#39;acquisition d&#39;unités de soins à domicile, de soins spécialisés et de longue durée, ainsi que dans le cadre du financement et l&#39;aménagement d&#39;hôpitaux privés.</p>    <p>Les progrès en communications et en technologies de l&#39;information (TI) n&#39;ont pas encore réalisé leur plein potentiel dans le domaine des soins de la santé. Toutefois, dans un monde où il y a plus de téléphones mobiles que de personnes et où la génétique peut prédire les maladies avant qu&#39;elles ne frappent, le potentiel des TI au service de la santé est énorme. Nous sommes des leaders en santé électronique et nous allions une expertise spécialisée en soins de santé, en sciences de la vie et en technologie afin d&#39;aider nos clients à optimiser les opportunités qui se présentent à eux.</p>    <h3>Mandats représentatifs&nbsp;:</h3>    <ul>   <li>Conseils offerts à Formation Capital LLC dans le cadre de son acquisition de NHP Group/HC One (et du financement connexe) moyennant 477 M&pound;;</li>   <li>Représentation lors de la vente de Cygnet Health à Universal Health Services;</li>   <li>Conseils offerts à Golden House lors de son acquisition de St Cloud Care moyennant 30&nbsp;M&pound;;</li>   <li>Conseils offerts lors de la vente et de la cession-bail à un FPI américain du Circle Hospital à Bath;</li>   <li>Représentation de Circle Group lors d&#39;un placement en espèces et d&#39;une souscription visant à réunir 47,5 M&pound; et lors d&#39;une réorganisation au sein du groupe et de la simplification de ses activités immobilières et commerciales;</li>   <li>Conseils offerts à St Martin&#39;s Healthcare Limited, filiale de HCA Holdings Inc., dans le cadre de son offre d&#39;acquisition contre espèces de General Medical Clinics Plc inscrite à la cote de PLUS;</li>   <li>Conseils offerts à Regard Holdings Limited lors du refinancement de 71 M&pound; de dettes existantes, donnant lieu à une réorganisation du groupe;</li>   <li>Représentation de Voyage Care lors de son acquisition avec capacité de gain d&#39;au moins 8,5 M&pound; de Partners in Specialist Care, un fournisseur de soins infirmiers à domicile pour les adultes et enfants atteints de lésions cérébrales et médullaires et de maladies neurologiques complexes;</li>   <li>Représentation de Santander lors du financement d&#39;un projet d&#39;aménagement par voie de coentreprise de 35 M&pound; portant sur trois établissements de soins.</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Dans le domaine des soins de santé, il est difficile de battre les services qu&#39;offre Gowling WLG. Communiquez avec nous et travaillons ensemble à votre réussite.</p>  ",GWLG.Global,1ca237c0-eb32-40df-ba06-268230275f34,A929915C-1D1F-4E9C-8C8B-F34A30E2AB4E,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6B557C33-A81E-4EB3-A849-0BC0CECD797A}
123,/Sectors/Food-Beverage/Global,fr-CA,6FD26C7E-FF79-43E8-B121-D73EE3D7DCFD,International,International,"Le secteur des aliments et des boissons évolue rapidement, est extrêmement concurrentiel et hautement réglementé. Nous vous aiderons à atteindre vos objectifs commerciaux dans un environnement commercial difficile.",NULL,NULL,"<p>Le secteur des aliments et boissons évolue rapidement,&nbsp;il est très concurrentiel et fortement réglementé.</p>    <p>Que votre entreprise soit axée sur la culture ou sur la transformation, le transport, la distribution, la stratégie de marque, la promotion ou la vente d&#39;aliments, d&#39;alcools ou de produits de santé naturelle, les lois en matière d&#39;aliments et de boissons exigent que vous vous dotiez d&#39;une équipe juridique qui possède une perspective exceptionnelle et une expérience pratique d&#39;intervention auprès des organismes de réglementation&nbsp;gouvernementaux.</p>    <p>Gowling WLG vous aidera à atteindre vos objectifs commerciaux dans un environnement d&#39;affaires complexe.</p>    <p>Compte tenu de la réglementation et des exigences accrues en matière de conformité, vous devez connaître les changements imminents et leur incidence potentielle sur votre entreprise. Nous intervenons activement auprès des ministères responsables de la réglementation ainsi qu&#39;auprès des organisations sectorielles à l&#39;échelle internationale. Les professionnels de Gowling WLG collaborent régulièrement avec des clients et des associations commerciales leaders, et les représentent, afin de faire valoir auprès des autorités de réglementation leurs observations sur des projets de modification du cadre réglementaire.</p>    <h3>Solutions complètes</h3>    <p>Œuvrant comme un seul et même réseau international de professionnels du droit des affaires, nous sommes en mesure d&#39;offrir des solutions exhaustives sur le plan du financement, du franchisage, de l&#39;octroi de licences, de la distribution, du packaging et de l&#39;étiquetage de produits, de la gestion des risques et de la responsabilité du fait du produit relativement à l&#39;industrie des aliments, des boissons et des produits de santé naturelle.</p>    <p>Vous pouvez vous fier à nous pour vous fournir des informations commerciales et un point de vue éclairé quant à vos défis opérationnels. Nous comprenons les pressions associées à la réglementation évolutive de la chaîne d&#39;approvisionnement, la pression subie par vos marges et le besoin de conseils rapides et précis. Tous ces facteurs forcent les fabricants d&#39;aliments à améliorer leur productivité et leurs procédés, sans pour autant compromettre les normes de sécurité alimentaire ni le contrôle de la qualité.</p>    <h3>Mandats représentatifs&nbsp;:</h3>    <ul>   <li>Conseils offerts à Weetabix, une marque mondiale de céréales implantée dans plus de 80&nbsp;pays, pour son mandat mondial en propriété intellectuelle;</li>   <li>Conseils offerts à United Biscuits, propriétaire de marques mondiales telles que McVitie&#39;s et Carrs, sur des questions comme l&#39;achat d&#39;un fabricant et distributeur de biscuits en l&#39;Afrique occidentale;</li>   <li>Services offerts et s&#39;apparentant presque à ceux d&#39;un contentieux à certaines des marques multinationales les plus importantes au Canada dans les domaines des aliments, des boissons et des suppléments;</li>   <li>Conseils offerts à Nomad Foods (anciennement Birds Eye Iglo) quant à son contrat de logistique valant plusieurs millions de livres avec DHL, ainsi que dans le cadre de ses ententes en matière d&#39;entreposage d&#39;aliments surgelés conclues avec Partner Logistics;</li>   <li>Conseiller juridique pour une société alimentaire et de confection mondiale lors de plusieurs recours collectifs intentés au Canada et alléguant la fixation des prix;</li>   <li>Conseiller juridique pour certaines des marques leaders mondiales en nourriture pour animaux;</li>   <li>Conseiller juridique pour de nombreux fabricants d&#39;aliments et d&#39;alcool de premier plan ayant des activités à l&#39;échelle mondiale, dans le cadre de questions de réglementation des produits, de publicité, de protection des marques et de rappels de produits;</li>   <li>Représentation de restaurants et chaînes de restaurants leaders, et prestation de conseils stratégiques en matière de franchisage, de publicité, de tenue de concours, de protection de la vie privée et de médias sociaux;</li>   <li>Conseiller juridique auprès de plusieurs sociétés de conditionnement physique, de nutrition sportive et de suppléments au Canada.</li>  </ul>    <h3>Des conseils là où vous en avez besoin</h3>    <p>Vos activités ne s&#39;arrêtent pas à la frontière &ndash; et nous non plus. Partout dans le monde, nos clients se tournent vers nous pour leur offrir des conseils d&#39;experts sur l&#39;ensemble de leurs enjeux en matière de fabrication et de production d&#39;aliments, de boissons et de produits de santé naturelle, notamment les suivants :</p>    <ul>   <li>Approbations des autorités de réglementation, obtention de licences et réformes</li>   <li>Distribution et franchisage</li>   <li>Ententes relatives aux essais cliniques</li>   <li>Étiquetage, packaging et commercialisation de produits</li>   <li>Formulation des produits et examen des ingrédients</li>   <li>Importation d&#39;aliments et de suppléments</li>   <li>Lois en matière d&#39;emploi, de travail, et de santé et de sécurité</li>   <li>Marché de la contrefaçon et marché gris</li>   <li>Médias sociaux, tenue de concours et promotions</li>   <li>Présentation de licences d&#39;exploitation pour les produits de santé naturelle</li>   <li>Promotion et protection d&#39;images de marque, y compris les marques de commerce et d&#39;autres actifs de propriété intellectuelle</li>   <li>Publicité trompeuse et défense en recours collectifs</li>   <li>Questions de responsabilité du fait du produit et rappels de produits</li>   <li>Représentation devant les ministères et organismes gouvernementaux</li>   <li>Santé, teneur en nutriments et autres services de soutien en matière de revendications</li>   <li>Sécurité alimentaire</li>  </ul>    <p>Que les défis auxquels vous faites face portent sur la publicité destinée aux enfants, le cannabis, l&#39;étiquetage sur le devant du paquet, les exigences d&#39;indication des nutriments ou le cadre de réglementation des choix personnels, nous sommes toujours au fait des événements nouveaux sur le marché et nous pouvons vous aider à réagir à l&#39;évolution de la réglementation et aux lois récemment adoptées. Forts de notre expérience considérable, nous pouvons vous offrir des solutions innovatrices et pragmatiques &ndash; de la ferme à l&#39;assiette. En choisissant Gowling WLG, vous êtes entre de bonnes mains.</p>    <h3>Renseignements complémentaires</h3>    <p>Pour en savoir davantage sur la façon dont nous pouvons vous guider vers la réussite, veuillez communiquer avec l&#39;un ou l&#39;autre des membres de notre équipe.</p>  ",GWLG.Global,ad056fcd-7211-4da7-a9e2-30612d332954;9b9ae971-5e77-434c-ab69-7192c6cb65b6,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|{823D3EEC-3F86-4890-9633-796B611EB17A}
124,/Sectors/Food-Beverage/Russia,fr-CA,10B5A42B-F196-4A7C-A881-50ADA0A91737,Russie,Russie,-,NULL,NULL,<p>-&nbsp;</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
125,/Sectors/Food-Beverage/Germany,fr-CA,6295E402-2277-4160-984A-A4D6D3CD7CD6,Allemagne,Allemagne,-,NULL,-,<p>-</p>  ,GWLG.Germany,4fd47d35-1640-4f91-b0ef-15ad1fa16f95,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4fd47d35-1640-4f91-b0ef-15ad1fa16f95
140,/Sectors/Construction-Engineering/UAE,en-GB,E8F1005C-5156-4A71-B933-FBFD3FA6B51A,UAE,UAE,,NULL,NULL,<p>/</p>  ,GWLG.UAEDubai,ed59235d-4a28-40d8-90ea-e0dc3c139b01,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,ed59235d-4a28-40d8-90ea-e0dc3c139b01
172,/Sectors/Financial-Institutions-Services/Global,fr-CA,4DB00D29-6B2D-4E4B-8ACA-A1BB19DF666B,International,International,"Nous offrons de nouvelles perspectives, un service transparent et une compréhension approfondie des principaux défis du secteur des services financiers.",NULL,NULL,"<p>Le marché financier est en constante évolution. Pour répondre aux exigences qu&#39;il impose, les acteurs de l&#39;industrie doivent pouvoir compter sur un cabinet juridique qui propose de nouvelles perspectives, un service uniformisé, et qui possède une compréhension approfondie des principaux enjeux liés au secteur.</p>    <p>Vos relations devraient toujours reposer sur la confiance, surtout dans un domaine où prendre de nouveaux risques est synonyme d&#39;innovation. Il est essentiel de bien connaître la réglementation financière internationale, de minimiser les risques et de trouver des solutions pratiques et fiables.</p>    <h3>Un leader de l&#39;industrie</h3>    <p>La réputation de Gowling WLG, leader de l&#39;industrie des services financiers, est bien ancrée auprès des institutions financières du monde entier. Nous avons représenté certaines des plus importantes institutions financières au monde dans le cadre de dossiers transfrontaliers et au niveau national&nbsp;: nous sommes donc en mesure de vous offrir une expertise dans tous les domaines pertinents.</p>    <p>À la fine pointe des tendances et de l&#39;évolution de la législation, nos professionnels sont issus d&#39;équipes multidisciplinaires et s&#39;appliquent à trouver des solutions adaptées aux besoins de nos clients et aux exigences d&#39;un marché changeant.</p>    <p>Parmi nos clients figurent plus de cinquante banques nationales et internationales, d&#39;autres fournisseurs de services financiers et des compagnies d&#39;assurances. Nous sommes donc des conseillers de choix pour mener à bien un large éventail de transactions, dont la valeur varie notamment entre un million et un milliard de livres sterling. À la fine pointe des domaines émergeants, nous sommes à l&#39;écoute de vos besoins alors que vous vous adaptez et repérez de nouveaux marchés. Nous comptons aussi parmi nos clients des coopératives de crédit, des fonds spéculatifs, des compagnies d&#39;assurances, des prêteurs, de grandes banques nationales et internationales, des caisses de retraite, des fonds de capital-investissement, des consortiums et des sociétés de capital-risque.</p>    <h3>Services financiers</h3>    <p>Nous offrons à nos clients des services hautement spécialisés et novateurs grâce notamment à une connaissance approfondie des mécanismes de financement non traditionnels&nbsp;: le prêt mezzanine, le financement reposant sur les actifs ou par créance subordonnée et le financement du débiteur-exploitant (financement DIP et unitranche). Nous proposons aussi des services juridiques en matière de réglementation du secteur financier pour aider nos clients à obtenir les autorisations nécessaires et à s&#39;assurer que leurs opérations respectent les exigences réglementaires de tous les paliers de gouvernement.</p>    <p>Grâce à notre connaissance approfondie du contexte concurrentiel des services financiers, notre expérience des environnements réglementaire et législatif complexes, et notre expérience pratique à l&#39;échelle nationale et internationale, nous offrons une gamme complète de services juridiques :</p>    <ul>   <li>Assurance commerciale</li>   <li>Créances subordonnées, prêts mezzanines, et créances de deuxième rang</li>   <li>Crédit aux particuliers et cartes de crédit</li>   <li>Demandes et procédures de mise à exécution</li>   <li>Dérivés et produits structurés</li>   <li>Droit du travail et de l&#39;emploi</li>   <li>Emprunt obligataire/dette publique</li>   <li>Financement commercial</li>   <li>Financement conforme à la charia</li>   <li>Financement d&#39;entreprises, de dettes et de restructuration d&#39;entreprises</li>   <li>Financement de fusions et acquisitions</li>   <li>Financement de projets et d&#39;infrastructures</li>   <li>Financement reposant sur les actifs</li>   <li>Fiscalité</li>   <li>Fusions et acquisitions de sociétés en difficulté</li>   <li>Insolvabilité et restructurations</li>   <li>Litiges</li>   <li>Location</li>   <li>Mises sous séquestre, faillites et procédures de mise à exécution afférentes</li>   <li>Prêts unitranches</li>   <li>Prêts immobiliers</li>   <li>Prêts principaux garantis et non garantis</li>   <li>Prix de transfert</li>   <li>Réglementation bancaire et financière (litigieuse ou non)</li>   <li>Renégociations de prêts et de contrats de garantie</li>   <li>Transactions de capital-risque, opérations de couvertures et services bancaires d&#39;investissement</li>   <li>Transactions de consortiums, de groupes et de coentreprises</li>   <li>Transactions nationales et transfrontalières</li>  </ul>    <h3>Experts de la technologie blockchain</h3>    <p>Gowling WLG est réputée dans l&#39;industrie pour son expertise de pointe en matière de technologie blockchain (chaîne de blocs) et de contrats intelligents. Nous sommes le seul cabinet d&#39;avocats d&#39;envergure internationale à être associé et membre cofondateur du <em>Blockchain Research Institute</em>, un réseau de savoirs d&#39;une valeur de plusieurs millions de dollars qui se penche sur les incidences stratégiques de la chaîne de blocs.</p>    <p>Qu&#39;il s&#39;agisse d&#39;une première émission de cryptomonnaie (PEC), de portefeuilles numériques, de bourse de cryptomonnaies ou de conformité aux lois sur les valeurs mobilières, notre équipe peut vous aider à surmonter les nouveaux défis et à tirer profit des nouvelles possibilités engendrées par cette technologie émergente.</p>    <h3>Mandats représentatifs</h3>    <ul>   <li>Prestation de conseils quant aux exigences réglementaires touchant une transaction de swap/réassurance à l&#39;étranger d&#39;une longévité de plusieurs milliards de dollars pour un important régime de retraite canadien</li>   <li>Inscription d&#39;une entreprise étrangère de services monétaires auprès du CANAFE</li>   <li>Rédaction et négociation de tous les aspects liés à la licence d&#39;une banque de l&#39;Annexe&nbsp;III au Canada</li>   <li>Représentation d&#39;un gestionnaire d&#39;investissements appartenant à des intérêts privés quant à la formation et à la clôture d&#39;un fonds de revenus et de croissance IV (<em>Income &amp; Growth Fund&nbsp;IV</em>)</li>   <li>Prestation de conseils à STAR Capital Partners relativement à son acquisition de Synergy Health Management Services Limited de Synergy Health (UK) Limited</li>   <li>Conduite d&#39;une enquête interne quant à des allégations de pots-de-vin, de contrebande et de blanchiment d&#39;argent pour une société ouverte Fortune&nbsp;500</li>   <li>Prestation de conseils à la division des services bancaires d&#39;investissement d&#39;une grande banque internationale relativement à l&#39;enquête d&#39;un organisme d&#39;application de la loi du Royaume-Uni de même que dans le cadre du litige y afférent</li>   <li>Prestation de conseils à Crowdcube, la première et plus importante plateforme de financement participatif du Royaume-Uni, quant à un placement réussi visant à investir davantage dans son entreprise. Il s&#39;agit du plus important et du plus gros financement public réalisé par une plateforme de financement participatif au Royaume-Uni</li>   <li>Conseiller juridique d&#39;un fournisseur (aux États-Unis) de services de paiements internationaux à des banques dans le cadre d&#39;une acquisition transfrontalière d&#39;une valeur de 1,25&nbsp;G$ US.</li>   <li>Représentation de Banque Transatlantique, Crédit Mutuel CM-CIC et BMCE Bank quant à l&#39;établissement de bureaux de représentation de banques à l&#39;étranger</li>   <li>Prestation de conseils liés à la gouvernance et aux régimes de certification à l&#39;intention des cadres supérieurs&nbsp;</li>   <li>Prestation de conseils approfondis relatifs à la nouvelle réglementation européenne &laquo;&nbsp;Abus de marché (<em>Market Abuse</em> <em>Regulation</em>) et de sa mise en œuvre au Royaume-Uni</li>   <li>Prestation de conseils à des fonds d&#39;investissement inscrits à la cote quant aux exigences réglementaires pour l&#39;inscription à l&#39;AIM et à la LSE</li>   <li>Prestation de conseils quant à la conformité avec Solvency&nbsp;II, le régime des cadres supérieurs en assurance, les règles liées à la dénonciation et les exigences réglementaires en vertu de la réglementation en matière de DPA</li>   <li>Prestation de conseils touchant les aspects réglementaires liés au transfert d&#39;entreprises d&#39;une entité réglementée à une autre</li>   <li>Prestation de conseils auprès de participants du marché de quotas d&#39;émission (&laquo;&nbsp;nouveaux entrants&nbsp;&raquo;) quant à la conformité à la nouvelle réglementation européenne &laquo;&nbsp;Abus de marché&nbsp;&raquo; (<em>Market Abuse</em> <em>Regulation</em>) et ses incidences</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Pour en savoir davantage sur la façon dont le groupe Institutions financières et services financiers de Gowling WLG peut vous aider à concrétiser vos projets, veuillez contacter l&#39;un des membres de notre équipe.</p>  ",GWLG.Global,43892574-242a-4892-9fde-4dab2d63bbfe;5ae5a269-9c5f-4332-920e-28b31ec9066e;18c972b4-6383-49da-8645-30a3b18621a5,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,43892574-242a-4892-9fde-4dab2d63bbfe|{C0C757A8-E589-459A-B574-1E3C3FF83EBD}|{38984250-866F-40B0-B3EB-85AEED73805A}
173,/Sectors/Financial-Institutions-Services/Germany,fr-CA,E577C5EA-8159-4FD1-8AB5-C398B0266087,Allemagne,Allemagne,-,NULL,NULL,<p>-</p>  ,GWLG.France,199becac-9a85-4082-aec2-fd0969f7da84,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
174,/Sectors/Financial-Institutions-Services/UK,fr-CA,C9D7A4E0-A6E5-4D08-9C05-AB5C50234F24,Royaume-Uni,Royaume-Uni,,NULL,NULL,<p>-</p>  ,GWLG.UK,43892574-242a-4892-9fde-4dab2d63bbfe;18c972b4-6383-49da-8645-30a3b18621a5,06CECB4C-C959-4674-9047-D5D8EE8C673C,NULL,0,NULL,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,43892574-242a-4892-9fde-4dab2d63bbfe|{38984250-866F-40B0-B3EB-85AEED73805A}
175,/Sectors/Real-Estate/Global,fr-CA,A04234F8-DACA-4934-B9B1-166FE14889FF,International,International,"Le marché de l'immobilier mondial est dynamique et complexe. Pour vous y retrouver dans ce secteur exigeant au rythme rapide, vous devez compter sur des conseillers juridiques attentifs à vos besoins et pour qui les marchés locaux et internationaux n'ont plus de secrets. ",NULL,NULL,"<p>Le marché de l&#39;immobilier mondial est dynamique et complexe. Pour vous y retrouver dans ce secteur exigeant au rythme rapide, vous devez compter sur des conseillers juridiques attentifs à vos besoins et pour qui les marchés locaux et internationaux n&#39;ont plus de secrets. &nbsp;</p>    <p>Gowling WLG bénéficie de l&#39;une des plus solides équipes juridiques multidisciplinaires en immobilier du monde, dédiée à vous fournir promptement des conseils opportuns et pratiques pour vous aider à satisfaire aux exigences de vos clients, partenaires, organismes de règlementation et investisseurs.</p>    <p>Nous œuvrons avec plusieurs des entreprises les plus réputées du secteur et avons participé à la réalisation de nombreux projets d&#39;envergure à toutes les étapes du cycle de vie.</p>    <p>Nos spécialistes possèdent chacun une riche expérience personnelle quant à une vaste gamme d&#39;actifs, ce qui signifie que même lorsque vos activités concernent un actif inusité, nous avons probablement une expertise dans ce domaine&nbsp;: gares de train, aéroports et ports de mer, ponts, usines de recyclage, programmes de chauffage urbain, centres d&#39;exposition, centrales électriques, écoles, hôpitaux et plusieurs autres.</p>    <p>Nous avons aussi de solides antécédents dans le secteur de la technologie. Nous sommes donc bien placés pour réagir aux transformations engendrées par la technologie numérique qui modifie notre façon de gérer les immeubles, les villes et agglomérations.</p>    <p>Faire progresser vos objectifs d&#39;affaires est toujours une priorité, mais nous comprenons que vous ne disposez pas de budgets illimités. Nous savons donc comment optimiser vos dépenses juridiques en mettant en œuvre une structure d&#39;honoraires adaptée, en offrant des taux concurrentiels et en anticipant diligemment les coûts.</p>    <p>Nous offrons des services intégrés complets dans l&#39;ensemble de nos bureaux à l&#39;échelle mondiale. Peu importe l&#39;enjeu, nous garantissons la qualité de nos services pour assurer que vous tiriez le meilleur parti de vos transactions avec rapidité et efficience.</p>    <p>Parce que chaque mandat est différent, nous formons nos équipes en fonction des meilleures ressources nécessaires pour sa réalisation&nbsp;: le bon expert au bon endroit. Nous nous efforçons en tout temps de contrôler vos coûts en faisant appel à nos membres œuvrant à l&#39;extérieur des grands centres plus coûteux, et en utilisant des systèmes exclusifs de prestation de services juridiques.</p>    <h3>Mandats représentatifs</h3>    <ul>   <li>Représentation de HSBC Alternative Investments relativement à l&#39;achat de Brindley place, à Birmingham, pour la somme de 260 millions&nbsp;&pound;</li>   <li>Représentation dans le cadre du projet Ballymore Snowhill, y compris la promotion et le financement de Three Snow Hill</li>   <li>Représentation de Hearst Magazines UK quant à sa relocalisation à un nouveau siège social à Leicester Square, Londres.</li>   <li>Représentation relativement à la vente de la plateforme de logistique du Royaume-Uni industrials.co.uk à Stenprop pour 127 millions&nbsp;&pound;</li>   <li>Représentation quant à la vente de la location de 2, 2&nbsp;M pi2 d&#39;Amazon à Roxhill et du London Distribution Park du Port de Tilbury de 70 acres à Essex</li>   <li>Représentation de Prologis quant à la prélocation à Screwfix d&#39;un centre de distribution de 600&thinsp;000 pi2 au Prologis Park d&#39;une valeur de 55 millions&nbsp;&pound;</li>   <li>Représentation du Domaine de la Couronne relativement à un agrandissement&nbsp;de 150&nbsp;000 pi2 au centre commercial Fosse Park</li>   <li>Représentation de Fiera Properties Limited dans le cadre du lancement de son fonds diversifié de biens immobiliers ouvert, le Fiera Properties CORE Fund, le plus important fonds immobilier diversifié ouvert canadien depuis plus de 20 ans, représentant 352 millions&nbsp;$ en capital-actions provenant d&#39;investisseurs</li>   <li>Représentation d&#39;un nouveau fonds immobilier canadien créé par Investissements Standard Life, qui a recueilli 77 millions&nbsp;$ en capital initial</li>   <li>Représentation d&#39;Urban &amp; Civic quant à l&#39;acquisition, à la promotion et à la vente de l&#39;Hôtel Hampton by Hilton à l&#39;aéroport Stansted Airport à Legal &amp; General pour un montant d&#39;environ 50 millions&nbsp;&pound;</li>   <li>Représentation de l&#39;Université de Birmingham quant à son site de 37&thinsp;000&nbsp;m2 dans le district Eastside visant la construction d&#39;un campus de 130 millions&nbsp;&pound;</li>   <li>Représentation de Triple Point Social Housing REIT Plc quant à ses investissements de + de 200&nbsp;millions&nbsp;&pound; dans les secteurs d&#39;aide à la vie autonome et des soins supplémentaires</li>   <li>Représentation de Sanctuary quant au placement d&#39;environ 3&thinsp;500 unités visant à faciliter le retrait de diverses facilités de crédit renouvelable par sa société de trésorerie</li>   <li>Représentation juridique d&#39;Arden Cross Consortium quant à Arden Cross, l&#39;un des plus importants sites de développement du Royaume-Uni</li>   <li>Représentation de Brookfield Capital Partners Ltd., le groupe de capital-investissement de Brookfield Asset Management Inc., quant à l&#39;octroi d&#39;un prêt à terme garanti de premier rang de 130&nbsp;millions&nbsp;$ US à North American Palladium Ltd.</li>   <li>Représentation de St Modwen Developments quant à sa coentreprise avec VINCI PLC relativement au réaménagement du nouveau marché Covent Garden à Londres de 2 milliards&nbsp;&pound;</li>   <li>Représentation de Taylor Wimpey et Dorchester Living quant à la conclusion d&#39;un accord de gestion d&#39;aménagement avec le secrétaire d&#39;État de la Défense en vue de remettre à neuf d&#39;anciens baraquements du ministère de la Défense à Whitehill et Bordon par l&#39;intermédiaire d&#39;un appel de propositions. Le projet créera 2&thinsp;400 nouveaux domiciles, un nouveau centre-ville et une nouvelle école secondaire ainsi que 3&thinsp;000 nouveaux emplois.</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Nous aimerions vous aider à surmonter vos défis et à saisir toutes les occasions immobilières qui se présentent à vous. Veuillez contacter l&#39;un des membres de notre équipe pour en apprendre davantage au sujet de nos services juridiques.</p>  ",GWLG.Global,28adebbb-5239-4131-b123-eb860852ce0c;dc37a2c5-d22d-49f9-932a-0d8054b36385,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{78D88FC3-0344-402B-85ED-AF69D1596497}|{FE8591DB-3DA8-4182-9B2A-A532BD263105}
176,/Sectors/Real-Estate/UAE,fr-CA,0591C5F5-03BE-4092-8C87-9E5E6FE4D76B,Émirats Arabes Unis,Émirats Arabes Unis,-,NULL,NULL,<p>-</p>  ,GWLG.UAEDubai,cf2e1452-122b-41a6-b6a9-7d4d4c03b630,59BE9DCD-E5F0-43E4-9D50-442A658EDA18,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,cf2e1452-122b-41a6-b6a9-7d4d4c03b630
177,/Sectors/Energy/Global,fr-CA,A95E37FD-B615-449F-B59D-D11205EEE08C,International,International,"L'industrie de l'énergie de demain sera très différente de celle d'aujourd'hui. À l'échelle mondiale, ce secteur vit une période de changement sans précédent. ",NULL,NULL,"<p>L&#39;industrie de l&#39;énergie de demain sera très différente de celle d&#39;aujourd&#39;hui. À l&#39;échelle mondiale, ce secteur vit une période de changement sans précédent. À mesure que la demande d&#39;approvisionnement en énergie sécuritaire, durable et à prix abordable augmente dans le monde, les progrès technologiques créent de nouvelles opportunités débouchant sur l&#39;élaboration de nouveaux modèles d&#39;affaires, et encourageant l&#39;entrée de nouveaux arrivants. &nbsp;&nbsp;</p>    <p>Depuis bien des années, Gowling WLG est à l&#39;avant-plan des importants progrès du secteur énergétique qui n&#39;a plus de secrets pour nous. Forts de nos connaissances de ses enjeux, nous pouvons aider nos clients à cerner et à surmonter les défis qui surviennent et à tirer parti des occasions qui se présentent dans une industrie hautement réglementée et qui évolue rapidement.</p>    <h3>Service de premier plan</h3>    <p>Notre équipe pluridisciplinaire jouit d&#39;une réputation enviable et agit en harmonie partout au monde. Nous conseillons, entre autres, des gouvernements, des organismes de réglementation, des promoteurs de projets, des sociétés de réseautage, des institutions financières et des investisseurs, des fournisseurs et des courtiers en énergie, des sociétés de technologie et toute la chaîne d&#39;approvisionnement du secteur.</p>    <p>Nous avons une solide expérience dans tous les types de production énergétique&nbsp;: énergie thermique, valorisation énergétique des déchets, hydroélectricité, énergie éolienne, biomasse énergétique, énergie solaire, technologies nouvelles (y compris le stockage de l&#39;énergie) et énergie nucléaire.</p>    <p>Alliant connaissances juridiques de premier plan avec une profonde compréhension des complexités du secteur de l&#39;énergie, nos avocats offrent des conseils pragmatiques et ciblés. Ils figurent d&#39;ailleurs fréquemment au classement des principaux répertoires juridiques au monde et agissent régulièrement en tant que procureurs de confiance pour le compte de leaders de l&#39;énergie et de décideurs clés en matière d&#39;élaboration de politiques. Ils jouent notamment un rôle de premier plan dans le cadre de transactions d&#39;envergure, de programmes de transformation du marché et de litiges dans des pays du monde entier.</p>    <p>Qu&#39;il s&#39;agisse de la mise sur pied de nouveaux cadres de réglementation, de la mise en valeur ou de la remise en état d&#39;actifs ou de l&#39;exercice d&#39;activités commerciales dans le secteur, nous proposons des conseils commerciaux innovateurs.</p>    <h3>Partenaires de vos ambitions</h3>    <p>Nous pouvons vous conseiller sur une vaste gamme de sujets&nbsp;:</p>    <ul>   <li>Construction, fourniture en équipement, et frais de fonctionnement et d&#39;entretien</li>   <li>Déploiement et financement de nouvelles technologies</li>   <li>Ententes en matière d&#39;achat et de fourniture d&#39;énergie</li>   <li><a href=""https://gowlingwlg.com/fr/services/environmental-social-and-governance-esg/overview/"">Facteurs environnementaux, sociaux et de gouvernance (ESG)</a></li>   <li>Financement de projets et financement structuré</li>   <li>Fiscalité</li>   <li>Immobilier, planification et environnement</li>   <li>Marchés des capitaux, fusions et acquisitions, coentreprises et premiers appels publics à l&#39;épargne (PAPE)</li>   <li>Mise en valeur de projets - production, transport, distribution et stockage de l&#39;énergie</li>   <li>Règlement de différends</li>   <li>Structure et réglementation des marchés de l&#39;énergie</li>  </ul>    <h3>Mandats représentatifs</h3>    <ul>   <li>Conseillers juridiques de la Development Bank of South Africa, du South African National Treasury et du South African Department of Energy lors de l&#39;élaboration du programme des producteurs indépendants d&#39;électricité en charge fondamentale et intermédiaire;</li>   <li>Conseillers juridiques de la Northern Ireland Authority for Energy Regulation et de la Commission for Energy Regulation relativement à la mise sur pied d&#39;un marché transfrontalier nouveau et unique de commerce de gros de l&#39;électricité;</li>   <li>Conseils offerts lors du programme de compteurs intelligents de BEIS, soit le plus important programme d&#39;infrastructures en technologies nouvelles de son genre jamais mis sur pied en Grande-Bretagne, qui prévoit l&#39;installation, au coût de 11 G&pound;, de compteurs intelligents dans l&#39;ensemble des résidences et des locaux de petites entreprises, nécessitant la visite de 30 millions d&#39;emplacements. En raison de sa participation au projet, l&#39;équipe Énergie et ressources naturelles du cabinet a été saluée comme équipe de l&#39;année en énergie et infrastructures aux British Legal Awards de 2017;</li>   <li>Conseils offerts à Primrose Solar lors de l&#39;aliénation de ses cinq derniers parcs d&#39;énergie solaire au Royaume-Uni à Equitix Infrastructure, soit un programme d&#39;acquisition, de mise en valeur, de mise en service et d&#39;aliénation de 350 MW dirigé par Primrose depuis 2013;</li>   <li>Représentation d&#39;E.ON lors de l&#39;introduction de procédures juridiques afin de déterminer la responsabilité contractuelle après qu&#39;il a été établi que des problèmes de liaisons jointoyées avaient été découverts dans 60 générateurs à turbines éoliennes dans un parc éolien extraterritorial et à l&#39;échelle sectorielle. L&#39;équipe a conseillé E.ON pour déterminer la stratégie de rectification qui s&#39;imposait ainsi que pour cerner et gérer ses risques commerciaux, et elle l&#39;a représentée tout au long des procédures judiciaires qui ont suivi. Cette affaire très médiatisée s&#39;est soldée par une décision rendue par la Cour suprême britannique en août 2017. L&#39;interprétation contractuelle préconisée par l&#39;équipe a transformé la manière dont les contrats, et en particulier les documents techniques, devraient être examinés à l&#39;avenir;</li>   <li>Conseillers juridiques pour une gamme de propriétaires promoteurs en infrastructures extraterritoriaux relativement à la mise en valeur de projets, aux acquisitions et aux dessaisissements, aux financements et aux contrats commerciaux;</li>   <li>Conseils offerts au gouvernement de la Barbade lors de l&#39;examen de l&#39;accord d&#39;achat d&#39;électricité et des contrats accessoires intervenus avec Cahill Energy;</li>   <li>Conseillers juridiques de Sterigenics, une société de portefeuille de GTCR, dans le cadre de son acquisition transfrontalière de Nordion Inc. valant 826 M$ US;</li>   <li>Conseillers juridiques spéciaux d&#39;Emera Inc. lors de la négociation d&#39;accords officiels conclus avec Nalcor Energy en vue de la mise en valeur et du transport d&#39;énergie hydroélectrique du projet de 7 G$ CA de Muskrat Falls, au Canada;</li>   <li>Conseillers juridiques d&#39;AGR Energy Limited No. 1, qui s&#39;est proposé d&#39;investir environ 37,1 M&pound; dans Max Petroleum Plc au moyen d&#39;une souscription conditionnelle en espèces de nouvelles actions ordinaires</li>  </ul>    <h3>Renseignements complémentaires</h3>    <p>Pour en savoir plus sur la manière dont nous pouvons vous aider dans le cadre de votre projet énergétique, veuillez communiquer avec un membre de notre équipe.</p>  ",GWLG.Global,3548e870-49df-488e-b75c-4e2e727c2fd7;4c3c2534-e644-427f-9b61-e7cd1aec53cf;612ac63e-b8e8-4615-beb9-be3097aed2cf,F1E960F5-8231-4C56-B7BF-9898EBB538C5,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{7DDD01D1-65D6-46C6-BBC2-1ACD9E666BBA}|{F046AD45-7012-48EC-8763-50941C4A853A}|{4EEC0607-D478-4592-BEFC-114187A59260}
178,/Sectors/Nuclear/Global,fr-CA,8451877C-37C0-4BFF-AFBC-BCC4709FB54A,International,International,"À l’avant-plan de la revitalisation du secteur nucléaire, Gowling WLG fournit des conseils sur de nouveaux projets de construction et des programmes de déclassement évolués partout dans le monde.",NULL,NULL,"<p>À l&#39;avant-plan de la revitalisation du secteur nucléaire, Gowling WLG fournit des conseils sur de nouveaux projets de construction et des programmes de déclassement évolués partout dans le monde.</p>    <p>Notre équipe internationale d&#39;avocats chevronnés offre un accompagnement juridique pratique et stratégique qui couvre l&#39;ensemble des activités des centrales nucléaires, de la mise en valeur et du financement d&#39;un projet jusqu&#39;aux affaires réglementaires.</p>    <h3>Une expérience de taille</h3>    <p>Nous épaulons les clients tout au long du cycle de vie de leurs projets de centrales nucléaires. Les membres de notre équipe ont aidé des organisations du secteur public et privé à mettre en œuvre des initiatives importantes en matière d&#39;énergie nucléaire qui ont obtenu des résultats exemplaires. Voici nos domaines de prédilection :</p>    <h4>Soutien pour les nouveaux projets de construction et de modernisation</h4>    <ul>   <li>Approvisionnement;</li>   <li>Assurances et atténuation des risques de responsabilité;</li>   <li>Contrats et gestion relativement à la chaîne d&#39;approvisionnement;</li>   <li>Documentation liée aux projets&nbsp;: contrats d&#39;ingénierie-approvisionnement-construction, contrats d&#39;approvisionnement en carburant et en combustibles usés, contrats d&#39;exploitation et d&#39;entretien;</li>   <li>Financement de projets de centrales nucléaires, financement par organisme de crédit à l&#39;exportation, garanties et soutiens souverains;</li>   <li>Gestion des réclamations et règlement des différends&nbsp;(arbitrage dans le cadre de projets d&#39;envergure)</li>   <li>Partenariats public-privé;</li>   <li>Protection de la propriété intellectuelle (PI) du secteur nucléaire et accords de concession de licences de PI;</li>   <li>Structure de projets sous forme de financement par actions ou par emprunt.</li>  </ul>    <h4>Réglementation</h4>    <ul>   <li>Élaboration de la réglementation et conformité;</li>   <li>Élaboration de politiques et de lois;</li>   <li>Évaluation de l&#39;impact environnemental et conformité;</li>   <li>Importation et exportation de renseignements, de matières et d&#39;équipement nucléaires;</li>   <li>Marchés de l&#39;électricité et approbations des autorités de réglementation;</li>   <li>Octrois de licences relatives à des projets, installations et technologies nucléaires.</li>  </ul>    <h4>Soutien à l&#39;exploitation</h4>    <ul>   <li>Contrats d&#39;achat d&#39;électricité et contrats de couverture des fluctuations;</li>   <li>Déclassement et gestion des déchets;</li>   <li>Examens par les pairs, analyses des causes profondes et mesures correctrices;</li>   <li>Extraction et transformation de l&#39;uranium, fabrication de carburants et approvisionnement en combustibles;</li>   <li>Fusions et acquisitions;</li>   <li>Gestion des risques des projets nucléaires;</li>   <li>Gouvernance d&#39;entreprises dans le secteur nucléaire;</li>   <li>Planification stratégique;</li>   <li>Restructurations;</li>   <li>Surveillance de la conformité des conseils d&#39;administration et des cadres;</li>   <li>Systèmes de gestion;</li>   <li>Transport de matières nucléaires.</li>  </ul>    <p>Les membres de notre équipe du secteur nucléaire ont prêté main-forte à des projets et des opérations nucléaires dans de nombreux pays et territoires&nbsp;: Afrique du Sud, Allemagne, Arabie saoudite, Argentine, Australie, Canada, Chine, Corée du Sud, Égypte, Émirats arabes unis, États-Unis, Finlande, Japon, Jordanie, Roumanie, Royaume-Uni, Russie, Turquie. D&#39;ailleurs, nombre de nos professionnels sont membres ou fondateurs d&#39;organisations nucléaires mondiales.</p>    <h3>Élaboration de programmes et de politiques</h3>    <p>Nos conseillers principaux du secteur nucléaire ont élaboré des directives internationales relatives à des politiques et des mécanismes de soutien à la mise en œuvre de programmes nucléaires. Ils ont également conseillé des gouvernements sur l&#39;élaboration de programmes et de projets, et mené des initiatives de restructuration et de regroupement du marché nucléaire. Notre équipe détient les compétences et les ressources nécessaires pour agir comme conseillers pour élaborer un programme nucléaire à son stade initial, optimiser et gérer les risques associés à l&#39;emplacement d&#39;une chaîne d&#39;approvisionnement ou miser sur ses propres technologies nucléaires afin de maximiser les avantages économiques nationaux du secteur.</p>    <h3>Nouveaux projets de construction</h3>    <p>En collaboration avec des gouvernements, des bailleurs de fonds, des fournisseurs de technologie, des entrepreneurs, des exportateurs, des propriétaires, des exploitants et des assureurs (responsabilité en matière nucléaire), nous avons participé à de nouveaux projets de construction parmi les plus importants et les plus ambitieux du monde, et dans l&#39;optique d&#39;assurer la viabilité et la réussite du projet, nous avons également aidé les clients à éviter des risques.</p>    <h3>Financement de projets nucléaires</h3>    <p>Peu importe l&#39;envergure, la complexité ou l&#39;emplacement de votre projet nucléaire, nos avocats spécialisés en financement dans ce domaine et habitués à participer à ce type de projet peuvent vous aider à établir un financement solide par l&#39;entremise de nos bureaux à l&#39;échelle mondiale.</p>    <h3>Réglementation et conformité</h3>    <p>Nous conseillons les clients quant à de nombreuses questions d&#39;ordre réglementaire (conception de systèmes de réglementation, élaboration de lois et de règlements), et nous les aidons à obtenir des approbations de permis et à se conformer à la réglementation. Nous offrons également des conseils sur la gouvernance des organismes nucléaires, dont la mise en œuvre et le respect de pratiques exemplaires et de directives internationales.</p>    <h3>Protection de la PI et transfert de technologie</h3>    <p>Nous offrons des services de protection de la PI et des services de soutien évolués en matière d&#39;octroi de licences technologiques pour les îlots nucléaires, îlots de turbines et centrales nucléaires, ainsi que pour les outils spéciaux, la fabrication, la production et l&#39;enrichissement du combustible nucléaire, et les solutions de gestion, de stockage et de nettoyage de déchets nucléaires<em>. </em>Nous conseillons également nos clients sur les politiques et les modèles d&#39;affaires liés au transfert de technologie.</p>    <h3>Innovation technologique en matière nucléaire</h3>    <p>Nous avons conseillé des clients qui élaborent de nouvelles technologies nucléaires et de nouvelles applications pour les technologies existantes, ainsi que des clients qui commercialisent ces développements technologiques. Notre expérience couvre notamment les réacteurs de recherche, la production de radioisotopes médicaux et industriels, la passation de marchés, l&#39;approvisionnement, les fusions et acquisitions, et le soutien pour une vaste gamme de développeurs et de fournisseurs de technologies liées aux petits réacteurs modulaires.</p>    <h3>Installations en fonctionnement et services publics d&#39;énergie nucléaire</h3>    <p>Pendant plusieurs décennies, notre équipe a offert son soutien à des installations en exploitation et à des services publics produisant de l&#39;énergie nucléaire, dans le cadre de diverses activités&nbsp;:</p>    <ul>   <li>l&#39;approvisionnement et la passation des marchés;</li>   <li>l&#39;élaboration de politiques et la sensibilisation;</li>   <li>l&#39;octroi de licences en matière nucléaire et l&#39;obtention de permis en matière environnementale;</li>   <li>la conformité à une culture de sécurité et aux systèmes de gestion;</li>   <li>la conformité réglementaire;</li>   <li>la conformité sur le plan de l&#39;exploitation;</li>   <li>la gestion de la PI;</li>   <li>la gestion des réclamations et le règlement des différends;</li>   <li>la gouvernance des organisations nucléaires;</li>   <li>la structure à privilégier pour les services publics d&#39;énergie nucléaire et leurs ententes en matière de financement;</li>   <li>le financement de contingence;</li>   <li>les enquêtes et les poursuites;</li>   <li>les relations de travail.</li>  </ul>    <h3>Déclassement</h3>    <p>La mise hors service des centrales nucléaires est une discipline complexe qui nécessite une expertise pointue. Forts de nos connaissances approfondies, nous offrons des conseils sur les modèles et les modalités de passation de marchés ainsi que sur les exigences réglementaires relatives au déchargement du combustible des réacteurs, au démantèlement et au stockage provisoire de ces derniers et au déclassement d&#39;installations nucléaires.<br />  <br />  Nous offrons également un soutien sur le plan de l&#39;exploitation à des organisations qui gèrent des installations d&#39;ancienne génération et des programmes de déclassement. Ainsi, notre équipe peut proposer une prestation de services-conseils exhaustifs permettant à nos clients de faire face aux défis de déclassement à l&#39;aide de solutions élaborées à vocation commerciale axées sur les politiques.</p>    <h3>Gestion des déchets</h3>    <p>Nous conseillons nos clients quant à la création de nouvelles installations de stockage de déchets, et à l&#39;exploitation et la gestion d&#39;installations existantes, notamment en matière d&#39;approvisionnement, de passation de marchés, d&#39;obtention d&#39;approbations des autorités de réglementation et de conformité, d&#39;octroi de licences et d&#39;évaluation de l&#39;impact sur l&#39;environnement. Nous donnons aussi des conseils sur les contrats de service de gestion de déchets à long terme.</p>    <h3>Contrôle des exportations</h3>    <p>Nous aidons nos clients à demeurer conformes aux dispositions contractuelles visant l&#39;importation, l&#39;exportation et la logistique entourant les renseignements nucléaires et les composants à double usage nucléaire.</p>    <h3>Défense des droits, gestion des réclamations et règlement des différends</h3>    <p>Nous offrons des conseils stratégiques en cas de litige et nous représentons les clients dans le cadre d&#39;audiences et devant des comités législatifs, des tribunaux administratifs, des instances judiciaires civiles, criminelles et administratives, lors de la négociation et de la médiation, de l&#39;arbitrage et d&#39;autres mécanismes de règlement extrajudiciaire des conflits en salle d&#39;audience ou ailleurs. Notre équipe aide aussi les clients à formuler et gérer des réclamations relatives à des projets nucléaires, et ce en temps réel, afin d&#39;éviter de retarder les projets et d&#39;aggraver les différends. Nous avons une feuille de route éloquente en matière de médiation et d&#39;arbitrage dans le cadre de projets nucléaires d&#39;envergure.</p>    <h3>Responsabilité, assurance et indemnités en matière nucléaire</h3>    <p>Forts de notre vaste expérience en matière de conventions de responsabilité et de régimes législatifs d&#39;assurance nucléaire, nous sommes bien placés pour aider nos clients à effectuer des évaluations exhaustives des risques de responsabilité nucléaire et à élaborer des mécanismes efficaces &nbsp;d&#39;atténuation des risques (élaboration de lois, paramètres de garantie d&#39;assurance, conception et utilisation d&#39;indemnités en matière de responsabilité nucléaire).</p>    <h3>Secteur de la défense</h3>    <p>Dans le cadre d&#39;approvisionnements d&#39;envergure dans le domaine de la défense, nous conseillons des clients de l&#39;industrie en matière de permis et d&#39;indemnités liés à l&#39;énergie nucléaire.</p>    <h3>Approvisionnement en uranium et en combustible nucléaire</h3>    <p>Notre équipe connaît bien le secteur minier et nous conseillons les sociétés minières d&#39;extraction d&#39;uranium sur les entrées en bourse, la mobilisation de capitaux et les questions contractuelles. Nous avons également conseillé et représenté des fabricants et fournisseurs de combustible nucléaire parmi les plus grands au monde.</p>    <h3>Mandats représentatifs</h3>    <ul>   <li>Conseillers juridiques de NASA - Nucleoeléctrica Argentina concernant des contrats en vue de l&#39;approvisionnement et de la construction de deux réacteurs nucléaires;</li>   <li>Conseillers juridiques dans le cadre du projet d&#39;énergie nucléaire de Sinop, une nouvelle construction de quatre unités en Turquie;</li>   <li>Conseillers juridiques de Bruce Power, exploitant de la plus grande installation nucléaire au monde;</li>   <li>Conseils offerts à Laboratoires Nucléaires Canadiens et à divers consortiums relativement à l&#39;exploitation, au déclassement et à la gestion d&#39;installations nucléaires;</li>   <li>Conseils offerts à un représentant du gouvernement de la Roumanie concernant le projet Cernavoda 3 et 4;</li>   <li>Conseillers juridiques d&#39;EACL dans le cadre de nombreux mandats : projets nucléaires, conformité en matière réglementaire, octroi de licences, élaboration de lois, règlement de différends (arbitrage dans le cadre de projets nucléaires d&#39;envergure), rédaction et traitement de demandes de brevet et octroi de licences en PI;</li>   <li>Conseils offerts à Korea Hydro &amp; Nuclear Power Co., Ltd. pour planifier son déclassement;</li>   <li>Conseils offerts quant à l&#39;élaboration du programme d&#39;approvisionnement en énergie nucléaire de l&#39;Arabie saoudite;</li>   <li>Conseils offerts à diverses parties ─ US Exim, Korea Exim et KEPCO ─ relativement au projet ENEC Barakah;</li>   <li>Conseils offerts à ENEC relativement à des questions d&#39;exploitation de PI.</li>  </ul>    <h3>Une équipe virtuelle</h3>    <p>Grâce à notre service virtuel interne de conseillers chevronnés internationaux du secteur nucléaire, vous obtenez des conseils juridiques au quotidien. Que vous vous heurtiez à une question urgente ou émergente nécessitant des solutions immédiates ou des conseils spécialisés, ou que vous souhaitiez simplement discuter d&#39;un enjeu complexe, faites appel à l&#39;un de nos professionnels de confiance pour obtenir des conseils stratégiques.</p>    <h3>Renseignements complémentaires</h3>    <p>Besoin d&#39;aide dans le cadre de votre projet d&#39;énergie nucléaire? Communiquez avec un membre de notre équipe.</p>  ",GWLG.Global,a6ae8169-6aa0-48fd-889e-71550df00866;12aa0eba-741b-4962-afdd-c31c2e88f07d;b8180d18-a523-4d12-9a03-f76949a53796,DEDE4518-E78C-4B48-A143-A2338BE5D0AC,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{FA3E0F6F-B6C5-461D-8917-D2CF037162D1}|{AAE4729A-0C1A-442F-896B-99834773CBFF}|{BFB5A75A-AEAF-4A97-9008-D117F3180CC3}
179,/Sectors/Automotive/Canada,en-GB,E0218A70-7609-4979-B894-FCEB08CBF1E4,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,44e4aa31-07d9-4e3f-a88e-b3398f315e4b,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{EE9DC267-2EEE-4530-8CC4-D132CAD79675}
180,/Sectors/Automotive/UK,en-GB,4E94B800-90F2-4E2A-B521-79FD9D90DEC1,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,5f2d3429-54fb-4005-99bf-68f77fe81428,DE517572-4373-4B36-844B-18BE93F6F9BC,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A48180A6-54EA-4F4E-847C-35E399EB739D}
181,/Sectors/Aviation-Aerospace-Defence/Canada,en-GB,38CF8BD4-DF56-45E6-B303-1A0B0F184C16,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,ff6c0bfb-40e4-432b-8b21-fa0689b68388,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3F5ED8F2-BBE3-4F80-A2B3-6D1332B15AF1}
182,/Sectors/Aviation-Aerospace-Defence/UK,en-GB,F79CB20C-D008-4FB8-8989-CD55E986BBF3,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,3a0c975c-ae61-4906-9ee2-b44185806511,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,3a0c975c-ae61-4906-9ee2-b44185806511
183,/Sectors/Construction-Engineering/Canada,en-GB,EEAB860C-82C3-4973-9336-76CE53EB84BB,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
184,/Sectors/Construction-Engineering/UK,en-GB,0A506E17-9542-4F49-AED7-734DF36FD27A,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,1bcef802-e18d-4c52-9203-5d613c802e3f;fee46864-312d-4663-a0fc-5e30836efd91,3FC2CA8C-9D19-44BA-A3A9-AD1ECB11E900,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{D2D321DE-981F-4805-A2FD-88D01F4EFD96}|{455ABB31-95A8-44A4-BB66-D1D901A9122B}
185,/Sectors/Energy/Canada,en-GB,F41CA0D2-C09F-4741-8270-1AFE8A904331,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,3548e870-49df-488e-b75c-4e2e727c2fd7;4c3c2534-e644-427f-9b61-e7cd1aec53cf,F1E960F5-8231-4C56-B7BF-9898EBB538C5,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{7DDD01D1-65D6-46C6-BBC2-1ACD9E666BBA}|{F046AD45-7012-48EC-8763-50941C4A853A}
186,/Sectors/Energy/UK,en-GB,B08EF164-F068-41C2-9444-CC1983684027,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,532e53ff-a7e9-451d-ad5d-5dfdfc681712,F1E960F5-8231-4C56-B7BF-9898EBB538C5,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{DBEEA1B1-FBD9-41CC-A2EA-39D36CC3DB0E}
187,/Sectors/Tech/Global,fr-CA,D399972D-DC54-48C6-ACF4-EF3B7C5C4A4F,International,International,"Le secteur des technologies évolue rapidement. Cette constante évolution transforme les affaires et les comportements, tout en révélant de nouvelles opportunités et de nouveaux défis. Il vous faut le soutien d'un cabinet juridique tout aussi novateur et dynamique que vous.",~/getmedia/acfdd5da-4d6a-413c-b064-657ed159f6ec/tech_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p>Le secteur des technologies évolue rapidement, et ce à l&#39;échelle mondiale. Cette constante évolution transforme les affaires et les comportements, tout en révélant de nouvelles opportunités et de nouveaux défis. Dans un monde au rythme frénétique, il vous faut le soutien d&#39;un cabinet juridique tout aussi novateur et dynamique que vous.&nbsp;</p>    <p>Le groupe Technologie de Gowling WLG possède l&#39;expertise et l&#39;esprit d&#39;entreprise nécessaires pour vous aider à prendre votre envol et à protéger votre caractère unique, que vous soyez une entreprise en démarrage, une société technologique bien établie ou une entité inscrite à la bourse.</p>    <p>Notre équipe de plus de 300 membres est prête à vous aider à tirer profit des nouvelles occasions et à surmonter tous les obstacles, qu&#39;il s&#39;agisse de vous guider dans le dédale des nouvelles percées en technologie blockchain (chaîne de blocs), de vous épauler dans la création d&#39;une application d&#39;intelligence artificielle (IA) ou d&#39;atténuer les cyberrisques.&nbsp;</p>    <p>Nous aidons certains des plus importants innovateurs en technologie à élaborer de judicieuses stratégies d&#39;affaires, à faire exercer et rentabiliser leurs droits de propriété intellectuelle (PI), à investir dans des entreprises, ainsi qu&#39;à acquérir et se dessaisir de participations dans ces dernières. Notre expertise de pointe nous permet d&#39;aider les clients à tirer profit des technologies émergentes qui transforment la manière dont les industries de la finance, de l&#39;énergie, du commerce de détail, de la fabrication, des assurances, des mines, de l&#39;automobile et de la santé fonctionnent à l&#39;échelle mondiale.&nbsp;</p>    <p>Nous travaillons avec vous pour vous aider à atteindre vos objectifs commerciaux dans un paysage novateur, en constante métamorphose, et de plus en plus concurrentiel.&nbsp;</p>    <h3>Un service mondial&nbsp;</h3>    <p>Forts de nos connaissances variées en science et en génie, et possédant de l&#39;expérience pratique en technologie, nous comprenons votre marché et les besoins des entreprises qui créent et utilisent des technologies.&nbsp;</p>    <p>Notre riche expérience en technologie, nous permet de vous aider à tirer profit de vos conceptions et à en maximiser la croissance, en plus de protéger et de monétiser vos actifs. Nos clients bénéficient d&#39;un service transfrontalier parfaitement harmonisé alliant l&#39;expertise de l&#39;ensemble de nos bureaux internationaux à celle des chefs de file locaux dans d&#39;autres pays.&nbsp;</p>    <h3>Commercialisation&nbsp;</h3>    <p>Nous pouvons vous aider à acquérir, développer, financer et commercialiser des technologies novatrices. Notre équipe fournit des conseils pointus et sur mesure dans tous les domaines de pratique et de services.&nbsp;</p>    <h3>Propriété intellectuelle&nbsp;</h3>    <p>Chaque étape de la mise en marché présente ses défis et nous vous aidons à les relever tous en protégeant et faisant respecter vos actifs de propriété intellectuelle (PI) et en vous aidant à en maximiser la valeur.&nbsp;</p>    <p>Forte d&#39;une expertise inégalée en brevets, marques de commerce, marques et dessins, droits d&#39;auteurs, publicité, litige en PI et plus encore, l&#39;équipe mondiale de PI de Gowling WLG obtient gain de cause pour des clients du monde entier depuis plus de 125 ans, et vous offre une représentation exceptionnelle dans un marché dynamique et compétitif.&nbsp;</p>    <h3>Technologies émergentes&nbsp;</h3>    <p>Très active dans le domaine en constante évolution de la technologie transformative comme la chaîne de blocs, l&#39;intelligence artificielle (IA), l&#39;internet des objets (IdO) et les contrats intelligents, notre équipe occupe une position dominante dans ces marchés d&#39;avant-garde. Nous comptons parmi nos clients des portefeuilles numériques de premier plan, des bourses de cryptomonnaie, des fonds d&#39;investissement souhaitant investir dans les cryptomonnaies ou autres cryptoactifs, et d&#39;importants pionniers de la chaîne de blocs du monde entier.&nbsp;</p>    <h3>Télécommunications</h3>    <p>Notre équipe des télécommunications soutient tout l&#39;écosystème de ces marchés. Nous possédons une expérience spécialisée en matière d&#39;arrangements entre fournisseurs, d&#39;alliances stratégiques, de soutien commercial et stratégique, d&#39;acquisitions, d&#39;impartition complexe, de projets immobiliers, de projets d&#39;infrastructure mobile et de transmission, de passation d&#39;importants contrats de télécommunications multiterritoriaux, et de soutien commercial et en PI, y compris le litige en matière de brevets.&nbsp;</p>    <h3>Cybersécurité et protection de la confidentialité&nbsp;</h3>    <p>Grâce à notre portée mondiale, notre équipe en cybersécurité et protection de la confidentialité fournit un soutien juridique spécialisé et réactif pour atténuer les risques avant et après une cyberattaque. Notre équipe vous aide à interagir avec les autorités et les organismes de réglementation, à gérer les incidences négatives sur vos affaires et à retracer les contrevenants.&nbsp;</p>    <h3>Centres d&#39;hébergement de données et infrastructure Web &laquo;&nbsp;Cloud&nbsp;&raquo;&nbsp;</h3>    <p>Notre équipe intersectorielle spécialisée en centres d&#39;hébergement de données et en infrastructure Web &laquo;&nbsp;Cloud&nbsp;&raquo; est à façonner la loi en la matière, de concert avec les propriétaires, les développeurs et les exploitants de centres d&#39;hébergement de données, et ce, depuis les tout débuts de cette industrie. Peu importe les enjeux, nous pouvons aider ces derniers, ainsi que leurs bailleurs de fonds, à surmonter les obstacles.&nbsp;</p>    <h3>Pour en savoir plus&nbsp;</h3>    <p>Veuillez communiquer avec nous pour découvrir comment nous pouvons aider votre entreprise à prospérer dans le vaste domaine des technologies.&nbsp;</p>  ",GWLG.Global,NULL,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
188,/Sectors/Tech/China,fr-CA,99B5FFBC-44A5-4AAD-91E2-AB848FDEF0D8,Chine,Chine,-,NULL,NULL,<p>-</p>  ,GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013
189,/Sectors/Tech/Germany,fr-CA,9D205B3B-C5B7-4EDE-950A-B4C4AE752E1E,Allemagne,Allemagne,-,NULL,NULL,<p>-</p>  ,GWLG.Germany,bc89113e-4507-4a3d-812a-d8d8a9d9573e,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,bc89113e-4507-4a3d-812a-d8d8a9d9573e
190,/Sectors/Tech/UAE,fr-CA,B1F0F815-8E3C-405F-81C0-6FE4DF265C7F,Émirats Arabes Unis,Émirats Arabes Unis,-,NULL,NULL,<p>-</p>  ,GWLG.UAEDubai,34e4f40d-a7d6-4a3c-80e5-a3aa69943fa7,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e4f40d-a7d6-4a3c-80e5-a3aa69943fa7
191,/Sectors/Tech/Russia,fr-CA,B41C5993-6C3E-48FA-8BCA-EF02F6C6AF49,Russie,Russie,-,NULL,NULL,<p>-</p>  ,GWLG.Russia,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}
192,/Sectors/Tech/UK,fr-CA,B198D2FC-9635-4A35-8ECD-B3299BECBFFC,Royaume-Uni,Royaume-Uni,-,NULL,NULL,<p>-</p>  ,GWLG.UK,d960a618-a196-404c-b795-b884bc90e603;3eea8a58-b3f2-4e3c-87f4-8853720e2a67,CDFC9B50-74C2-4AF5-9508-342935F81CCD,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{AD4D3F97-80D7-4280-9634-F885370C3930}|{3D891B4E-1F61-437D-9FF8-FADA32E6C073}
193,/Sectors/Food-Beverage/Canada,en-GB,2AD22A89-27A3-4FE7-A282-2DF8059EA383,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,9b9ae971-5e77-434c-ab69-7192c6cb65b6,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{823D3EEC-3F86-4890-9633-796B611EB17A}
194,/Sectors/Food-Beverage/UK,en-GB,F84121C7-93D9-4371-A55B-D71ABB1567BA,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,ad056fcd-7211-4da7-a9e2-30612d332954,2CD1B5C0-8992-4C92-B8E8-D65D8B86DBED,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}
195,/Sectors/Infrastructure/Canada,en-GB,E13E468B-8290-44B0-9C8D-96CB0660C483,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
196,/Sectors/Infrastructure/UK,en-GB,922DC941-C617-46B1-87AF-258929AAA98E,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,612ac63e-b8e8-4615-beb9-be3097aed2cf;ce26ed51-95b0-44fd-86b0-2667fae0d46e,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{D56A07D1-3171-48B1-B4C1-D123FC657893}
197,/Sectors/Life-Sciences/Canada,en-GB,D6AA7E29-EC86-49E0-9DA9-920EB09B9B7C,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,870774bf-534e-466c-be9a-e89fb3fb38bf,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A98C2246-8DFB-4F74-8E3F-6ED4A5BA4A75}
198,/Sectors/Life-Sciences/UK,en-GB,329BD77D-AF32-4DFF-A490-FC1E4A3E95A9,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,8e016382-a73f-4aba-8339-02f14b8a79bb,049C8249-7FF3-4EE3-A439-590F45FD5CFF,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B827998C-32D5-4FA2-A800-AE49022CF610}
199,/Sectors/Retail-Leisure-Hotels/Canada,en-GB,7868B0C6-6441-413D-95A5-CA91D4AA8AB8,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,46b21a2f-6764-47aa-a5e4-93f7e0959916,0357076D-2635-451A-8D67-EC01F9F3082B,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E30466D8-0DA9-4E54-A729-9E455BCD2424}
200,/Sectors/Retail-Leisure-Hotels/UK,en-GB,A7EB95E0-8F7E-4A31-B2CA-C7734341F7EB,UK,UK,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,157cef8d-3bda-45e7-9dcd-bc32b082fa17;9ad94fda-c656-4644-89a7-98aa82d07946,0357076D-2635-451A-8D67-EC01F9F3082B,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{BF4EB340-343D-418B-A98B-DB773A3A50D1}|9ad94fda-c656-4644-89a7-98aa82d07946
201,/Sectors/Aviation-Aerospace-Defence/Global,fr-CA,11C2D0C0-1D14-414D-B043-493736702CBC,International,International,"Lorsque vous travaillez dans les secteurs de l'aviation, de l'aérospatiale et de la défense, vous devez penser aux niveaux national et international.",NULL,NULL,"<p>Lorsque vous travaillez dans le secteur de l&rsquo;aviation, de l&rsquo;aéronautique et de la défense, les défis et enjeux que vous devez surmonter sont nombreux&nbsp;: opérations quotidiennes, financements et sûretés sur actifs, conformité et environnement réglementaires, ententes avec les clients et fournisseurs, opérations de commerce et de logistique, acquisitions et approvisionnements d&rsquo;actifs, infrastructure notamment aéroportuaire, protection et commercialisation de la technologie et des actifs, et différends complexes, le tout dans un environnement sophistiqué et en pleine évolution.</p>    <p>Les défis et enjeux sont nombreux et pour démystifier leurs impacts, il vous faut compter sur des avocats qui connaissent vos affaires, votre entreprise, votre marché et qui ont la capacité de vous conseiller à l&rsquo;échelle mondiale dans une industrie fortement réglementée et dont les éléments sont interdépendants. En effet, vous devez non seulement saisir les contraintes réglementaires, de coûts et autres difficultés qui se présentent, mais vous devez aussi comprendre la nature transfrontalière et complexe des chaînes d&rsquo;approvisionnement propres à ce secteur et cette industrie.</p>    <h3>Une riche expertise</h3>    <p>Gowling WLG couvre tous ces aspects. Ayant longtemps œuvré dans le domaine de l&rsquo;aviation, de l&rsquo;aéronautique et de la défense, nous sommes des experts en la matière.</p>    <p>Notre mission? Vous fournir les conseils juridiques pratiques et avisés dont vous avez besoin pour atteindre vos objectifs commerciaux. Fiez-vous à notre expertise multiterritoriale, notre excellence technique et nos connaissances du secteur et de l&rsquo;industrie pour obtenir des résultats efficaces en ce qui concerne les coûts.</p>    <p>Que vos produits aient une application civile ou militaire, qu&rsquo;ils soient hautement spécialisés ou diversifiés, nous pouvons vous offrir un soutien exhaustif. Et comme nous sommes bien pourvus en professionnels juridiques, nous pouvons adapter notre pratique à des opérations de petite ou grande envergure dans votre pays ou ailleurs dans le monde.</p>    <p>Nous possédons une expertise dans divers domaines importants de ce secteur, notamment&nbsp;:</p>    <ul class=""o-2-columns is-list-unstyled"">   <li>Acquisitions et dessaisissements</li>   <li>Assurance</li>   <li>Certification et immatriculation d&rsquo;aéronefs</li>   <li>Conformité réglementaire</li>   <li>Contrats liés à la défense et contrats d&rsquo;approvisionnement</li>   <li>Contrôle du trafic aérien</li>   <li>Contrôles des importations et des exportations</li>   <li>Dossiers liés à la Convention du Cap, y compris en ce qui a trait au Registre international</li>   <li>Enjeux fiscaux et de prix de transfert</li>   <li>Enjeux liés à l&rsquo;investissement à l&rsquo;étranger et à la concurrence</li>   <li>Enjeux liés aux accords commerciaux et au contrôle des exportations</li>   <li>Enjeux touchant la fabrication et la chaîne d&rsquo;approvisionnement</li>   <li>Financement aéronautique (structure par crédit-bail et prêt)</li>   <li>Infrastructures aéroportuaires</li>   <li>Licences et réglementation relatives aux drones (systèmes d&rsquo;aéronef non habité)</li>   <li>Litige (dont les recours collectifs)</li>   <li>Protection de la propriété intellectuelle (PI) et commercialisation de dessins de produits et de savoir-faire</li>   <li>Questions litigieuses et non litigieuses en PI</li>   <li>Règlement de différends et litiges</li>   <li>Relations gouvernementales</li>   <li>Réparation et maintenance d&rsquo;aéronefs</li>   <li>Sanctions et corruptions</li>   <li>Santé et sécurité</li>   <li>Satellites</li>   <li>Transactions d&rsquo;alliance et d&rsquo;impartition</li>  </ul>    <p>Outre notre expertise dans ce secteur, notre cabinet fournit aussi des conseils avisés en ce qui a trait à tous les domaines d&rsquo;affaires généraux&nbsp;: transactions corporatives, droit bancaire et financement, contrats et droit commercial, droits de PI et règlement de différends. Nos avocats dont la pratique est véritablement mondiale ont traité des différends et litiges dans plus de 50&nbsp;territoires par arbitrage international et devant divers tribunaux et cours, dont la Cour pénale internationale (CPI), la Canadian Airlines International Limited (CAIL), et la Commission des Nations Unies pour le droit commercial international (CNUDCI).</p>    <p>De plus, nous nous engageons à vous offrir un service efficace à un prix raisonnable. Grâce à nos ressources et outils novateurs &ndash; comme <a href=""~/fr/services/practical-lpm-by-gowling-wlg/canada/"">GPJ Pratique<sup>MC</sup></a>, la plateforme de gestion de projets juridiques de Gowling WLG &ndash; nous faisons un usage efficient de nos ressources et vous offrons des modèles d&rsquo;honoraires, adaptés à vos besoins qui se distinguent des taux horaires traditionnels.</p>    <h3>Une expérience éprouvée</h3>    <ul>   <li>Conseiller de Meggitt et UTC Aerospace Systems (Goodrich) quant à des arrangements visant la fourniture de composantes et la fabrication en sous-traitance pour des projets comme le A380, le Joint Strike Fighter et le Boeing&nbsp;777.</li>   <li>Conseiller de GKN quant aux aspects touchant la propriété et l&rsquo;environnement de la vente de sa participation de 50&nbsp;% d&rsquo;une valeur de 1 milliard&nbsp;&pound; dans AgustaWestland.</li>   <li>Conseiller de compagnies aériennes internationales, y compris British Airways, Air Canada, Air China, Air Pacific, Garuda Indonesia, Malaysia Airlines, Norwegian Air, Olympic Air Oman Air, Thai Airways et Turkish Airlines.</li>   <li>Conseiller du ministère de la Défense du Royaume-Uni pendant 20 ans &ndash; y compris en ce qui a trait à ses contrats relatifs à ses deux porte-aéronefs iconiques.</li>   <li>Conseiller général de NAV Canada (le système canadien de navigation aérienne civile), un rôle que le cabinet occupe depuis la création de NAV Canada.</li>   <li>Conseiller de longue date pour un important fournisseur de systèmes d&rsquo;aérospatiale, d&rsquo;électroniques, et d&rsquo;information et de sécurité à des clients commerciaux, ainsi qu&rsquo;en défense et en sécurité à l&rsquo;échelle mondiale.</li>   <li>Conseiller pour une entreprise de véhicules aériens sans pilote (réglementation, octroi de licences pour les drones, exigences en matière d&rsquo;opérations, exemptions et mise à jour de commentaires relatifs au cadre réglementaire canadien et américain sur les drones).</li>   <li>Conseiller pour une entreprise de conception et de fabrication de semi-conducteurs établie aux États-Unis dans le cadre de &nbsp;trois recours collectifs, lesquels concernaient des allégations de fixation des prix et de comportement anticoncurrentiel et ont été intentés contre des producteurs de mémoire vive statique (SRAM).</li>   <li>Représentation d&rsquo;émetteurs d&rsquo;obligations dans le cadre de financements de réaménagement pour de nombreux aéroports internationaux canadiens, y compris des financements sous forme d&rsquo;obligations, de débentures de prêts de construction et de crédits d&rsquo;opération de plus de 1,5 milliard&nbsp;$.</li>   <li>Représentation de Cargojet inc. dans un placement par voie de débentures subordonnées convertibles non garanties portant intérêt à 5,50&nbsp;% au montant de 74&nbsp;millions&nbsp;$.</li>   <li>Conseiller pour une importante compagnie aérienne canadienne quant à la maintenance et la réparation de sa flotte d&rsquo;aéronefs.</li>  </ul>    <h3>Pour en savoir davantage</h3>    <p>Vous pouvez compter sur Gowling WLG pour aider votre entreprise à accroître son efficacité et sa rentabilité. Si vous souhaitez savoir comment nous pouvons l&rsquo;aider à prospérer, veuillez contacter l&rsquo;un ou l&rsquo;autre membre de notre équipe.</p>  ",GWLG.Global,NULL,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
202,/Sectors/Aviation-Aerospace-Defence/China,fr-CA,D0F71518-1914-42E3-BD82-F66887A4EDCD,Chine,Chine,-,NULL,NULL,<p>-</p>  ,GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013
203,/Sectors/Aviation-Aerospace-Defence/UK,fr-CA,F79CB20C-D008-4FB8-8989-CD55E986BBF3,Royaume-Uni ,Royaume-Uni ,-,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,77781370-a881-48be-a13e-871b97c58c38,CBBBF9EB-A169-4053-8043-7085CFB8FD4A,NULL,0,NULL,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{5E7E15D0-546D-4D5B-A19A-A0095AD73F35}
204,/Sectors/Mining/Global,fr-CA,6CA24219-6B30-40B2-A75C-17030681C92C,International,International,"La réussite sur le marché minier mondial nécessite l’expertise d’un cabinet de premier plan en matière de droit minier fort de ses connaissances de l’industrie, d’une portée internationale et d’un solide sens des affaires.",NULL,NULL,"<p><strong>Alors que l&rsquo;industrie minière évolue pour s&rsquo;adapter à de nouveaux enjeux, les grands joueurs du secteur redéfinissent leurs objectifs stratégiques pour s&rsquo;investir davantage en matière de carboneutralité et d&rsquo;environnement, de responsabilité sociale et de gouvernance (ESG). Régies par une abondante réglementation nationale et internationale, les sociétés d&#39;exploration et d&rsquo;exploitation minière doivent considérer des questions juridiques et des occasions couvrant plusieurs pays et domaines de pratique. La réussite sur le marché minier mondial nécessite l&#39;expertise d&rsquo;un cabinet de premier plan en matière de droit minier fort de ses connaissances de l&rsquo;industrie, d&rsquo;une portée internationale et d&rsquo;un solide sens des affaires.</strong></p>    <p>Que vous soyez une petite société d&rsquo;exploitation minière ou un producteur de taille moyenne, nos avocats en droit minier aborderont vos enjeux dans une optique multidisciplinaire. Notre expérience couvre les opérations liées aux matières premières et aux métaux précieux les plus importants tels que l&#39;or, le cuivre, le cobalt, le lithium, l&#39;argent, le vanadium, le zinc, le minerai de fer et l&rsquo;uranium.</p>    <p>Nous sommes là pour vous guider à chaque étape du cycle de vie d&rsquo;un projet : l&rsquo;exploration, l&rsquo;exploitation et la fermeture. Notre pratique juridique est fondée sur notre fine compréhension des aspects commerciaux et concrets de votre entreprise, grâce à laquelle nous trouvons les solutions qui vous conviennent le mieux.</p>    <p>L&rsquo;évolution technologique, politique et économique du monde pousse l&rsquo;industrie à revoir constamment ses méthodes. L&rsquo;avenir du secteur minier sera probablement très différent de ce que l&#39;on observe aujourd&#39;hui. Les facteurs ESG, le renforcement du protectionnisme et la demande insatiable de métaux pour la haute technologie transformeront le domaine minier pendant encore plusieurs années. Par ailleurs, l&#39;utilisation croissante de technologies novatrices comme l&rsquo;automatisation pour l&rsquo;exploitation minière poussera les acteurs de l&rsquo;industrie à vouloir garder une longueur d&rsquo;avance. À l&rsquo;approche de cette ère nouvelle, le savoir et l&#39;expérience devraient être à la source de chaque décision stratégique.</p>    <h2>Conseils axés sur votre secteur</h2>    <p>Armés d&rsquo;une connaissance pointue du domaine, nos avocats en droit minier élaborent des solutions sophistiquées répondant aux aspects commerciaux et concrets de votre entreprise. Nos conseils adaptés à votre secteur d&rsquo;activité couvrent tous les domaines du droit des entreprises, du droit financier, du droit commercial ainsi que les divers modes de résolution de différends.</p>    <h2>Services juridiques complets</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/banking-finance/#international"">Droit bancaire et financement</a></li>   <li><a href=""~/fr/services/climate-change-and-environmental-law/#international"">Droit de l&#39;environnement et changements climatiques</a></li>   <li><a href=""~/fr/services/commercial-litigation/#international"">Litiges commerciaux</a></li>   <li><a href=""~/fr/sectors/energy/global/"">Énergie</a></li>   <li><a href=""https://gowlingwlg.com/fr/services/governance-risk-and-compliance-grc/"">Gouvernance, risque et conformité</a></li>   <li>Santé et sécurité</li>   <li><a href=""~/fr/services/international-arbitration/#international"">Arbitrage international</a></li>   <li><a href=""~/fr/services/international-trade-and-customs/#global"">Commerce international et douanes</a></li>   <li><a href=""~/fr/services/litigation-dispute-resolution/#international"">Litige et règlement de différends</a></li>   <li><a href=""~/fr/services/competition-law-antitrust/#international"">Droit de la concurrence/antitrust</a></li>   <li><a href=""~/fr/services/corporate-m-a-and-capital-markets/#international"">Droit des entreprises, fusions et acquisitions et marchés financiers</a></li>   <li><a href=""~/fr/topics/autonomous-connected-electric-and-shared-vehicle/overview/"">Véhicules électriques</a></li>   <li><a href=""~/fr/services/private-equity/#canada"">Capital-investissement</a></li>   <li><a href=""~/fr/services/projects/#international"">Projets</a></li>   <li><a href=""~/en/services/project-finance/#canada"">Financement de projets</a></li>   <li><a href=""~/fr/services/real-estate/#international"">Immobilier</a></li>   <li><a href=""~/fr/services/restructuring-insolvency/#international"">Réorganisation et insolvabilité</a></li>   <li><a href=""~/fr/services/tax/#international"">Fiscalité</a></li>   <li><a href=""~/fr/sectors/tech/global/"">Technologie</a></li>  </ul>    <h2>Une expérience éprouvée</h2>    <p>Nous avons représenté des sociétés ouvertes, des sociétés fermées, des maisons de courtage de valeurs, des fonds d&rsquo;acquisition, des courtiers et d&rsquo;autres types d&rsquo;investisseurs à propos de leurs investissements nationaux et internationaux dans le secteur minier. Nous agissons régulièrement pour de nombreux clients inscrits à la Bourse de Toronto, à la Bourse de croissance TSX, au marché NASDAQ, à la Bourse de New York, à la Bourse de Londres, au marché AIM, à la Bourse d&rsquo;Australie et la Bourse de Johannesburg. Voici quelques les projets auxquels nous avons collaboré :</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Bacanora Lithium plc</h3>     <p>Représentation dans le cadre de son déménagement du Canada, de l&rsquo;émission d&rsquo;obligations européennes d&rsquo;une valeur de 150 M$ US avec Red Kite et d&rsquo;une sollicitation de capitaux totalisant 65 M$ US.</p>   </li>   <li>   <h3>Phoenix Copper Limited</h3>     <p>Représentation à l&rsquo;égard de l&rsquo;admission à la cote du marché AIM de la Bourse de Londres et à la mobilisation de capitaux de cette société d&rsquo;exploration et de mise en valeur de l&rsquo;or et du cuivre située en Idaho.</p>   </li>   <li>   <h3>Zijin Mining Group Co. Limited</h3>     <p>Représentation dans le cadre de l&rsquo;acquisition de Guyana Goldfields Inc. pour 323 M$.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Bushveld Minerals Limited</h3>     <p>Représentation dans le cadre de l&rsquo;acquisition de Vametco et de Vanchem, qui comprenait un financement de second rang de 65 M$ US avec Orion Mine Finance; représentation concernant l&rsquo;acquisition d&rsquo;Enerox, qui a permis de pénétrer le secteur de la pile rédox au vanadium.</p>   </li>   <li>   <h3>Minera Alamos Inc.</h3>     <p>Représentation relativement à un placement privé par voie de prise ferme d&rsquo;actions ordinaires pour un produit brut global d&rsquo;environ 15 M$, y compris le produit résultant de la vente d&rsquo;actions ordinaires aux termes de l&rsquo;exercice d&rsquo;une option octroyée au preneur ferme.</p>   </li>   <li>   <h3>Lucky Minerals Inc.</h3>     <p>Représentation quant à la négociation d&rsquo;une convention d&rsquo;options définitive, qui a donné à First Quantum Minerals Ltd des droits exclusifs de prospection de gisements de cuivre.</p>   </li>  </ul>    <h2>Awards and accolades</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Gowling WLG est un cabinet d&rsquo;avocats de premier ordre jouissant d&rsquo;une bonne réputation dans l&rsquo;industrie minière&hellip; sa force réside dans ses innombrables années d&rsquo;expérience dans les projets miniers et les opérations transfrontalières.<cite>Chambers and Partners</cite></p>  </blockquote>    <p>Reconnue par une foule de répertoires juridiques et récipiendaire de nombreux prix, notre équipe est un acteur respecté dans le milieu.</p>    <p>Huit des nôtres sont désignés &laquo;&thinsp;Avocats recommandés&thinsp;&raquo; par <i>Who&rsquo;s Who Legal:</i><i> Mining 2021</i>, dans lequel Charles Bond et France Tenaille sont par ailleurs reconnus comme &laquo;&nbsp;Chef de file individuel</p>    <p>Nous figurons aussi régulièrement dans <i>Chambers and Partners</i> et <i>The Legal 500</i>. <i>Chambers and Partners</i> classe d&rsquo;ailleurs également Charles Bond parmi les &laquo;&thinsp;Chef de file individuel&thinsp;&thinsp;&raquo;.</p>    <p><i>Latinvex</i>, quant à lui, cite fréquemment France Tenaille dans le <i>Latin America:</i><i> Top 100 Lawyers</i> et dans <i>Latin America:</i><i> Top 100 Female Lawyers</i> pour ses réalisations au plan international en lien avec des fusions et acquisitions, les marchés financiers et le financement de projets dans les secteurs énergétique et minier.</p>    <p>Enfin, nous sommes régulièrement en tête du palmarès <i>FTSE&nbsp;100 AIM</i> pour le nombre de clients inscrits à l&rsquo;AIM.</p>    <h2>Notre réseau international</h2>    <p>Nous sommes établis au Canada, au Royaume-Uni, ailleurs en Europe, en Asie et au Moyen-Orient - et forts d&#39;un solide réseau de professionnels en <a href=""~/fr/global-reach/africa/"">Afrique du Sud</a>, en Australie et en Amérique du Sud; notre compréhension des marchés de chaque pays nous permet d&rsquo;offrir des solutions multinationales. <b>Communiquez avec nous dès aujourd&rsquo;hui pour apprendre comment notre équipe peut vous aider à relever vos défis juridiques.</b></p>    <p><b><strong><a href=""~/en/people/charles-bond/"">Charles Bond</a></strong></b><br />  Associé, chef du groupe Mines (R.-U.)</p>    <p><b><strong><a href=""~/en/people/r-ian-mitchell/"">R. Ian Mitchell</a></strong></b><br />  Associé, chef du groupe Mines (Canada)</p>  ",GWLG.Global,6535cd7a-0e8e-447a-bc96-cec1df267dfe;d084ac14-1e2e-4b99-a026-90bb152ae60d,C0B8C1A8-73EB-4122-972F-DC5DF852F68D,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{A166FCE2-0AEE-402E-A111-134DB5217816}
205,/Sectors/Infrastructure/Global,fr-CA,0101075E-12C0-4DD6-BB39-525942DCD950,International,International,"Les projets d’infrastructure sont essentiels à la santé économique de toute société. Ils assurent non seulement son bon fonctionnement, mais aussi une meilleure mobilité de ses citoyens et un terreau propice à la réussite des entreprises. ",NULL,NULL,"<p>Les projets d&rsquo;infrastructure sont essentiels à la santé économique de toute société. Ils assurent non seulement son bon fonctionnement, mais aussi une meilleure mobilité de ses citoyens et un terreau propice à la réussite des entreprises. Toutefois, ces projets sont souvent colossaux, complexes et assujettis à des restrictions politiques et législatives.</p>    <p>Autoroutes congestionnées, hôpitaux surpeuplés, écoles en décrépitude, approvisionnement en eau et traitement des eaux usées inadéquats, les besoins sont criants en matière d&rsquo;infrastructures. Des mesures d&rsquo;amélioration s&rsquo;imposent, tant au niveau des immeubles et des routes qu&rsquo;au chapitre des relations entre les intervenants des secteurs public et privé.</p>    <p>Dans plusieurs juridictions, on note un appétit croissant pour des solutions novatrices qui soutiennent des initiatives publiques au moyen de ressources et d&rsquo;expertises du secteur privé.</p>    <h3>Un choix judicieux</h3>    <p>Lorsqu&rsquo;il faut choisir des avocats pour réaliser de grands projets complexes où que ce soit dans le monde, Gowling WLG offre une alliance parfaite d&rsquo;expérience et d&rsquo;expertise.</p>    <p>Nous agissons comme conseillers dans les projets d&rsquo;infrastructure et de partenariats public-privé (PPP) les plus ambitieux et complexes à l&rsquo;échelle internationale. Nos avocats sont des conseillers bien établis auprès des organismes gouvernementaux, des entrepreneurs, des développeurs et des bailleurs de fonds, et leur feuille de route en fait de livraison de projets d&rsquo;importance stratégique et de grande valeur est des plus impressionnantes.</p>    <p>Nous maîtrisons la gamme complète des modèles de passation des marchés et offrons des conseils quant aux enjeux touchant des tactiques de propositions et l&rsquo;approvisionnement stratégique. Notre équipe agit régulièrement à titre de conseiller quant à la vente et l&rsquo;achat de participations dans des projets PFI/PPP, différentes structures contractuelles, l&rsquo;établissement d&rsquo;alliances et de partenariats, des initiatives de marchés élargis, l&rsquo;impartition, des ententes de maîtrise d&rsquo;œuvre et de collaboration à long terme.</p>    <h3>Nos champs de compétence</h3>    <ul class=""two-columns"">   <li>Aménagement du territoire et zonage</li>   <li>Approvisionnement et gouvernance en mode PPP/alternatif</li>   <li>Conception et gestion de processus d&rsquo;approvisionnement</li>   <li>Construction de palais de justice et de centres de détention</li>   <li>Contrats d&rsquo;exploitation et de gestion</li>   <li>Contrats particuliers, établissement d&rsquo;alliances et impartitions</li>   <li>Création et lancement de fonds d&rsquo;investissement&nbsp;</li>   <li>Développement de projets immobiliers</li>   <li>Divers modes de transport</li>   <li>Écoles et universités</li>   <li>Financement, y compris les placements de dettes et de capitaux propres</li>   <li>Installations de soins de santé</li>   <li>Projets d&rsquo;énergie tirée de déchets, de la collecte et du traitement des déchets</li>   <li>Projets liés à l&rsquo;eau et au traitement des eaux usées</li>   <li>Relations gouvernementales</li>   <li>Stratégies de sortie telles que le financement public</li>   <li>Stratégies, approbations et conseils en matière de planification</li>   <li>Structuration de l&rsquo;apport de capitaux et du financement</li>  </ul>    <h3>PFI/PPP</h3>    <p>Notre pratique se compare aux pratiques exemplaires internationales grâce à notre expérience au Royaume-Uni (chef de file mondial en PFI et PPP) et de notre travail sur des projets de PPP au Moyen-Orient et en Afrique. Les membres de l&rsquo;équipe agissent pour le gouvernement britannique depuis près de 20 ans et ont réalisé plusieurs PPP avec succès pour la Direction commerciale du ministère de la Santé, du ministère de la Justice et du ministère de la Défense.</p>    <h3>Modes de transport et ports</h3>    <p>Notre équipe possède une longue feuille de route en matière de projets d&rsquo;infrastructures liés aux transports &ndash; ports, autoroutes, ponts, tunnels, projets ferroviaires et systèmes légers sur rail &ndash; et est apte à aider les intervenants de ces secteurs.</p>    <h3>Déchets</h3>    <p>L&rsquo;équipe de Gowling WLG constitue le meilleur choix pour des conseils de pointe dans ce domaine en plein essor. Nos compétences ont été éprouvées et affinées dans des projets de gestion et de traitement des déchets, y compris en lien à des projets d&rsquo;énergie tiré de déchets. Sur la scène internationale, les membres de notre équipe ont conseillé CNM quant au projet de gestion de déchets solides en PPP au Bahreïn, le premier projet de ce type financé par le Conseil de coopération du Golfe.</p>    <h3>Défense</h3>    <p>Les clients choisissent notre équipe pour ses connaissances spécifiques du marché du secteur de la défense, acquises au fil de nombreux projets d&rsquo;envergure.</p>    <h3>Infrastructure sociale</h3>    <p>Notre expertise en fait de projets liés à des services de santé ne cesse de se renforcer grâce à un nombre croissant de clients comptant les plus grands noms des fournisseurs de soins de santé du secteur privé, fournisseurs de services sociaux, des sciences de la vie, des pharmaceutiques et des services sociaux nationaux.</p>    <h3>Infrastructure ferroviaire</h3>    <p>Forte de plus de 25 avocats spécialisés en infrastructure ferroviaire représentant les différents types d&rsquo;intervenants de l&rsquo;industrie, l&rsquo;équipe de Gowling WLG conseille des clients européens et internationaux depuis 20 ans sur tous les aspects du droit ferroviaire et du transport par rail, y compris des gouvernements, des exploitants du secteur privé, des développeurs, des coentreprises et des intervenants financiers.</p>    <h3>Mandats représentatifs</h3>    <ul>   <li>Conseiller dans le cadre de trois des plus grands projets d&rsquo;autoroute en PPP au Royaume-Uni</li>   <li>Conseiller pour le gouvernement du Rwanda relativement à l&#39;élaboration et au financement de plusieurs projets de logistique en PPP</li>   <li>Conseiller de la RATP en lien avec une opération de location complexe visant à financer l&rsquo;acquisition de nouveaux trains pour le tramway parisien</li>   <li>Conseiller du groupe Plenary relativement à la deuxième phase du projet de 36&nbsp;voies réservées/de transit rapide par bus de 175 millions&nbsp;$ US du ministère des Transports du Colorado</li>   <li>Conseiller en matière de financement pour Macquarie, à titre de commanditaire du PPP de 2,1 milliards&nbsp;$ US visant le projet d&rsquo;expansion du tunnel du centre-ville/Midtown/MLK à Norfolk et à Portsmouth, en Virginie</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Vous faites face à des défis d&rsquo;envergure en matière d&rsquo;infrastructure? Il vous faut une équipe solide. Communiquez avec nous pour obtenir les conseils dont vous avez besoin.</p>  ",GWLG.Global,612ac63e-b8e8-4615-beb9-be3097aed2cf;ce26ed51-95b0-44fd-86b0-2667fae0d46e;dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{D56A07D1-3171-48B1-B4C1-D123FC657893}|{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
206,/Sectors/Infrastructure/Canada,fr-CA,E13E468B-8290-44B0-9C8D-96CB0660C483,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.Canada,dd6fafb1-ecf7-491d-ac34-0e0f405cea0d,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}
207,/Sectors/Infrastructure/UK,fr-CA,922DC941-C617-46B1-87AF-258929AAA98E,Royaume-Uni ,Royaume-Uni ,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>-</p>  ,GWLG.UK,612ac63e-b8e8-4615-beb9-be3097aed2cf;ce26ed51-95b0-44fd-86b0-2667fae0d46e,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{D56A07D1-3171-48B1-B4C1-D123FC657893}
208,/Sectors/Infrastructure/UAE,en-GB,A581D793-ED53-4307-84A0-560E3EEF987F,UAE,UAE,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>UAE</p>  ,GWLG.UAEDubai,612ac63e-b8e8-4615-beb9-be3097aed2cf;7574853e-b1e1-4eba-8604-1a01d0d0a056,DF411E0B-2C62-4A68-8456-2C7C1DD0B4DA,NULL,0,NULL,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{70545C59-D6F4-4F8A-A98E-6FAFCC9D3665}
209,/Sectors/Oil-Gas/Global,en-GB,BCA23E94-E3F1-4498-853E-FF51D335F613,Global,Global,An international oil and gas law firm with a deep understanding of the industry. Our oil and gas lawyers deliver practical and actionable advice.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The global oil and gas industry is at a crossroads. The impact of COVID-19 paired with a decrease in petroleum demand leaves a question mark over the direction the sector will take. With a high level of regulatory scrutiny and legal challenges, expertise from a dynamic oil and gas law firm is critical to managing change and securing success.</strong></p>    <p>Whether you are a small exploration and production company or a large multi-national corporation, our oil and gas lawyers are equipped to address a full range of commercial and regulatory concerns. From development and financing to the execution of upstream and midstream projects, our cross-practice approach ensures you have the right expertise every step of the way.</p>    <p>With trends such as energy transition and digital transformation not slowing down, it is clear that the sector&#39;s attention is shifting. Emerging areas such as hydrogen and geothermal energy and the focus on environmental, social and governance (ESG) are already having a huge impact. Many major players are strengthening their net-zero goals, implementing low carbon solutions and establishing robust carbon capture programs.</p>    <p>While focuses such as these may be a top priority, moving towards them will bring new challenges for the industry. Those going through the process of transformation will need counsel with a deep understanding of the sector and how the market is evolving to help shape decisions.</p>    <p>Our team applies specialist industry knowledge with a genuine ability to understand your commercial objectives. We deliver practical and actionable advice that is built on extensive experience, with many of our lawyers having previously worked in-house within the oil and gas sector. Our expertise includes access to funding or assets, production and processing, arrangements for pipeline and refining construction projects, joint ventures, disputes, M&amp;A, IPOs, energy trading, and capital markets.</p>    <h2>Full-service support</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/banking-finance/#global"">Banking &amp; Finance</a></li>   <li><a href=""~/en/services/capital-markets/#overview"">Capital Markets</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Climate Change and Environmental Law</a></li>   <li><a href=""~/en/services/commercial/#global"">Commercial</a></li>   <li><a href=""~/en/services/commercial-litigation/#global"">Commercial Litigation</a></li>   <li><a href=""~/en/services/competition-law-antitrust/#global"">Competition Law &amp; Antitrust</a></li>   <li><a href=""~/en/services/corporate/#overview"">Corporate</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#global"">Employment, Labour &amp; Equalities</a></li>   <li><a href=""~/en/services/governance-risk-and-compliance-grc/#global"">Governance, Risk and Compliance</a></li>   <li>Health and Safety</li>   <li><a href=""~/en/services/indigenous-law/#canada"">Indigenous Law</a></li>   <li><a href=""~/en/services/insurance-professional-liability/#global"">Insurance and Professional Liability</a></li>   <li><a href=""~/en/services/intellectual-property-law/#global"">Intellectual Property</a></li>   <li><a href=""~/en/services/international-arbitration/#global"">International Arbitration</a></li>   <li><a href=""~/en/services/international-trade-and-customs/#global"">International Trade and Customs</a></li>   <li><a href=""~/en/services/litigation-dispute-resolution/#global"">Litigation &amp; Dispute Resolution</a></li>   <li><a href=""~/en/services/mergers-acquisitions/#overview"">Mergers &amp; Acquisitions</a></li>   <li><a href=""~/en/services/private-equity/#canada"">Private Equity</a></li>   <li><a href=""~/en/services/projects/#global"">Projects</a></li>   <li>Project Finance</li>   <li><a href=""~/en/services/real-estate/#global"">Real Estate</a></li>   <li><a href=""~/en/services/restructuring-insolvency/#global"">Restructuring &amp; Insolvency</a></li>   <li><a href=""~/en/services/tax/#global"">Tax</a></li>  </ul>    <h2>Proven experience</h2>    <p>Globally we advise a broad range of oil and gas companies, including public and private exploration corporations, contractors, suppliers, pipeline and refining companies. Past projects have included:</p>    <p>{^widget|(bghover1)colour-lightred|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)CGL+First+Nations+Limited+Partnership|(headline3)Clear+Directional+Drilling+Solutions+Limited|(headline2)Pipestone+Energy+Corp.|(copy1)Advising+on+its+potential+equity+participation+in+the+Coastal+GasLink+Pipeline%2c+a+feeder+pipeline+for+the+%2443bn+Canada+LNG+project.|(copy3)Advised+on+a+joint+venture+initiative+with+ProGroup+MENA+Limited+of+Masdar+City%2c+UAE%2c+for+the+purposes+of+providing+drilling+equipment+and+services+in+the+Middle+East+and+North+Africa+region.|(copy2)Advising+on+the+refinancing+of+its+existing+credit+facilities+to+a+%24225m+borrowing+base+loan%2c+consisting+of+a+%24195m+syndicated+revolving+facility%2c+and+a+%2430m+bilateral+operating+facility.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Upland+Resources+Limited|(headline3)EOGI+International+Company|(headline2)Macquarie+Energy+Canada+Limited|(copy1)Advised+on+its+registration+in+Jersey+by+way+of+a+continuation+out+of+the+British+Virgin+Islands+and+migration+into+Jersey.|(copy3)Advised+the+subsidiary+of+EOG+Resources%2c+Inc.+in+the+divestiture+of+its+UK+assets+to+Tailwind+Energy+Ltd.|(copy2)Advised+Macquarie+Energy+Canada+in+respect+to+various+midstream+optimization+projects%2c+including+advising+on+counter-party+risks+associated+with+transportation+assignment+agreements.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h2>Awards and accolades</h2>    <blockquote style=""text-align: center;"">  <p>The team is very professional, with a great focus on current trends and how those could impact clients.<cite>Chambers and Partners</cite></p>  </blockquote>    <p>Our international oil and gas lawyers are recognised by a host of legal directories.</p>    <p>We are consistently ranked by <em>Chambers and Partners</em> and <em>The Legal 500</em> in energy, oil and gas, and natural resources categories. Charles Bond is a &#39;Leading Individual&#39; according to <em>Chambers and Partners</em> and <em>Chambers Global</em> recognises France Tenaille as a &#39;Foreign Expert&#39; for international and cross border work. <em>The Legal 500</em> recommends several of our oil and gas specialists.</p>    <p>Lorne Rollheiser is regularly recognised by <em>Best Lawyers</em> and <em>The Legal 500 </em>for oil and gas. <em>Best Lawyers</em> named Gowling WLG &#39;Law Firm of the Year&#39; in 2021.</p>    <p><em>Latinvex</em> names France Tenaille in the <em>Latin America: Top 100 Lawyers </em>and<em> Latin America: Top 100 Female Lawyers</em> for her work in international M&amp;A, capital markets, and project finance in the energy sector.</p>    <h2>Meet our international team</h2>    <p>Members of our international team have broad experience supporting clients in jurisdictions around the world, including in Africa, North America, South America, Europe, and Asia. <strong>Contact us today to find out how our team can support you on oil, gas, and energy projects</strong>.</p>    <p><strong><a href=""~/en/people/charles-bond/"">Charles Bond</a></strong><br />  Partner, Head of Natural Resources (UK)</p>    <p><strong><a href=""~/en/people/andrew-lamb/"">Andrew Lamb</a></strong><br />  Partner (Canada)</p>  ",GWLG.Global,6535cd7a-0e8e-447a-bc96-cec1df267dfe;8851356b-723a-4786-b06a-91caee32c6af,AC9BFCAC-76AA-4FEF-8D64-FE3F921C7659,NULL,0,NULL,1,t-white,NULL,NULL,NULL,NULL,Stay ahead,"<p>Keep up-to-date with the latest in oil and gas by registering for our updates.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us,"<p>In the oil and gas sector and in need of advice? Contact a member of our team.</p>    <p><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the Oil &amp; Gas team</a></p>  ",NULL,NULL,{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{20499AC7-4382-4D8B-8C68-109767620E45}
210,/Sectors/Oil-Gas/Global,fr-CA,BCA23E94-E3F1-4498-853E-FF51D335F613,International,International,"En raison d’un strict contrôle réglementaire et d’une foule des défis juridiques, il est essentiel de pouvoir compter sur l’expertise d’un cabinet juridique dynamique spécialisé en pétrole et gaz pour gérer le changement et garantir le succès.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><b>Le secteur pétrolier et gazier mondial est à la croisée des chemins. L&rsquo;impact de la COVID-19, jumelé à la diminution de la demande en pétrole, soulève bien des questions quant à la voie dans laquelle le secteur s&#39;engagera. En raison d&#39;un strict contrôle réglementaire et d&rsquo;une foule des défis juridiques, il est essentiel de pouvoir compter sur l&#39;expertise d&#39;un cabinet juridique dynamique spécialisé en pétrole et gaz pour gérer le changement et garantir le succès.</b></p>    <p>Que vous soyez une petite société d&rsquo;exploration et de production ou une grande entreprise multinationale, nos avocats du secteur pétrolier et gazier sont parfaitement outillés pour traiter la gamme complète de vos préoccupations commerciales et réglementaires. De la mise en valeur au financement, en passant par la réalisation de projets en amont et dans le marché intermédiaire, notre approche fondée sur la collaboration vous garantit une expertise de pointe à toutes les étapes.</p>    <p>Des tendances telles que la transition énergétique, et la transformation numérique, qui n&rsquo;indiquent aucun signe de ralentissement, démontrent que le secteur est effectivement en pleine métamorphose. Des domaines émergents comme l&rsquo;énergie associée à l&#39;hydrogène et l&#39;énergie géothermique, ainsi que l&rsquo;importance grandissante des mesures visant l&rsquo;environnement, la société et la gouvernance (ESG), tout cela exerce déjà une influence marquée. Plusieurs des principaux acteurs renforcent actuellement leurs objectifs de carboneutralité et mettent en œuvre des solutions à faibles émissions de carbone de même que de solides programmes de captage de carbone.</p>    <p>Bien que de tels objectifs puissent constituer une priorité absolue, leur adoption entraînera immanquablement de nouveaux défis pour le secteur. Les sociétés qui entameront ce processus de transformation devront, afin de prendre des décisions éclairées, être conseillées par des avocats possédant une connaissance approfondie du secteur et de la manière dont le marché évolue.</p>    <p>Notre équipe offre une connaissance pointue de l&rsquo;industrie dans un contexte sectoriel, à laquelle s&#39;ajoute une capacité réelle de comprendre vos objectifs. Nous offrons des conseils pratiques et pertinents reposant sur une solide expérience, plusieurs de nos avocats ayant œuvré au sein de contentieux de sociétés des secteurs pétrolier et gazier. Notre expertise englobe les enjeux touchant à l&rsquo;accès à du financement ou à des actifs, la production et le traitement, les arrangements visant les projets de construction liés aux pipelines et au raffinage, les coentreprises, les différends, les F&amp;A, les PAPE, le commerce de l&#39;énergie et les marchés des capitaux.</p>    <h2>Service complet sur toute la ligne</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/banking-finance/#international"">Droit bancaire et financement</a></li>   <li><a href=""~/fr/services/climate-change-and-environmental-law/#international"">Droit de l&rsquo;environnement et changements climatiques</a></li>   <li>Droit commercial</li>   <li><a href=""#global"">Travail, emploi et droits de la personne</a></li>   <li><a href=""~/en/services/governance-risk-and-compliance-grc/#global"">Gouvernance, gestions des risques et conformité</a></li>   <li>Santé et sécurité</li>   <li><a href=""~/en/services/indigenous-law/#canada"">Droit autochtone</a></li>   <li><a href=""~/fr/services/insurance-professional-liability/#international"">Assurance et responsabilité professionnelle</a></li>   <li><a href=""~/fr/services/intellectual-property-law/#international"">Propriété intellectuelle</a></li>   <li><a href=""~/en/services/international-arbitration/#global"">Arbitrage international</a></li>   <li><a href=""~/fr/services/commercial-litigation/#international"">Litige commercial</a></li>   <li><a href=""~/fr/services/competition-law-antitrust/#international"">Droit de la concurrence/antitrust</a></li>   <li><a href=""~/fr/services/corporate-m-a-and-capital-markets/#international"">Droit des entreprises, fusions et acquisitions et marchés financiers</a></li>   <li><a href=""~/fr/services/international-trade-and-customs/#global"">Commerce international et douanes</a></li>   <li><a href=""~/en/services/litigation-dispute-resolution/#global"">Litige et règlements de différends</a></li>   <li><a href=""~/en/services/private-equity/#canada"">Capital-investissement</a></li>   <li><a href=""~/en/services/projects/#global"">Projets</a></li>   <li><a href=""~/en/services/project-finance/#canada"">Financement de projets</a></li>   <li><a href=""~/en/services/real-estate/#global"">Immobilier</a></li>   <li><a href=""~/en/services/restructuring-insolvency/#global"">Réorganisation et insolvabilité</a></li>   <li><a href=""~/en/services/tax/#global"">Fiscalité</a></li>   <li><a href=""~/en/services/real-estate/#global"">Real Estate</a></li>   <li><a href=""~/en/services/restructuring-insolvency/#global"">Restructuring &amp; Insolvency</a></li>   <li><a href=""~/en/services/tax/#global"">Tax</a></li>  </ul>    <h2>Expérience éprouvée</h2>    <p>Nous conseillons un éventail de sociétés pétrolières et gazières, des sociétés d&rsquo;exploration des secteurs public et privé, des entrepreneurs et des fournisseurs, ainsi que des sociétés de pipeline et de raffinage à l&rsquo;échelle mondiale. Voici quelques-uns des projets auxquels nous avons participé:</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>CGL First Nations Limited Partnership</h3>     <p>Représentation de CGL First Nations Limited Partnership quant à sa participation potentielle à la mise de fonds visant le gazoduc de Coastal GasLink, pipeline d&rsquo;amenée à construire dans le cadre du projet LNG Canada, lequel est évalué à 43&nbsp;G$ et est essentiel pour rendre les ressources de gaz naturel du Canada accessibles sur le marché mondial.</p>   </li>   <li>   <h3>Pipestone Energy Corp.</h3>     <p>Représentation dans le cadre du refinancement de ses facilités de crédit actuelles sur une base d&#39;emprunt de 225 M$, composé d&#39;une facilité de crédit renouvelable consortiale de 195 M$, et d&rsquo;une facilité de crédit d&rsquo;exploitation bilatérale de 30 M$, avec une caractéristique accordéon potentielle d&#39;un montant maximum additionnel de 25 M$.</p>   </li>   <li>   <h3>Clear Directional Drilling Solutions Limited</h3>     <p>Représentation quant à un projet de coentreprise avec ProGroup MENA Limited, située à Masdar City, aux Émirats arabes unis, en vue de fournir de l&#39;équipement et des services de forage au Moyen-Orient et en Afrique du Nord.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Upland Resources Limited</h3>     <p>Représentation dans le cadre de son inscription à Jersey par voie de continuation hors des îles Vierges britanniques et d&#39;une migration vers Jersey, une &#39;première&#39; pour une société du marché principal inscrite à la Bourse de Londres et dont les actions sont inscrites sur la liste officielle de la FCA.</p>   </li>   <li>   <h3>Macquarie Energy Canada Limited</h3>     <p>Représentation de Macquarie Energy Canada relativement à divers projets d&rsquo;optimisation dans les marchés intermédiaires. Il s&rsquo;agissait notamment de donner des conseils sur les risques liés aux contreparties associés aux accords de cession de transport, aux nominations, aux accords de services de commercialisation ainsi qu&rsquo;à l&rsquo;information provisoire sur les règles et la réglementation relatives aux pipelines.</p>   </li>   <li>   <h3>Counsel to EOGI International Company</h3>     <p>Représentation de la filiale d&rsquo;EOG Resources, Inc. dans le cadre du dessaisissement de ses actifs du R.-U. à Tailwind Energy Ltd.</p>   </li>  </ul>    <h2>Prix et distinctions</h2>    <blockquote style=""text-align: center;"">  <p>TL&rsquo;équipe est très professionnelle, bien au fait des tendances actuelles et de la manière dont elles pourraient toucher les clients.<cite>Chambers and Partners</cite></p>  </blockquote>    <p>Nos avocats internationaux du secteur pétrolier et gazier sont reconnus dans de nombreux répertoires juridiques.</p>    <p>Nous professionnels sont constamment classés dans les catégories énergie, pétrole et gaz et ressources naturelles par les guides <em>Chambers and Partners</em> et <em>The Legal 500</em>. Selon <em>Chambers and Partners</em>, Charles Bond est un &laquo; Chef de file individuel &raquo; et, selon le <em>Chambers Global</em>, France Tenaille est une &quot;Experte des marchés extérieurs&quot; pour les dossiers transfrontaliers et internationaux. Plusieurs de nos spécialistes en droit pétrolier et gazier sont recommandés dans <em>The Legal 500</em>.</p>    <p>&nbsp;</p>    <p><em>Latinvex</em> a classé France Tenaille dans ses listes <em>Latin America: Top&nbsp;100 Lawyers</em> et <em>Latin America: Top 100 Female Lawyers </em>pour son travail dans des dossiers de F&amp;A internationales, des marchés financiers et de financement de projets dans le secteur de l&#39;énergie.</p>    <h2>Voici notre équipe internationale</h2>    <p>Les membres de notre équipe internationale ont prêté main-forte à des clients partout dans le monde, y compris en Afrique, en Amérique du Nord, en Amérique du Sud, en Europe, et en Asie. <b>Communiquez avec nous dès aujourd&#39;hui pour savoir comment notre équipe peut soutenir vos projets des secteurs de l&rsquo;énergie, du pétrole et du gaz.</b></p>    <p><strong><a href=""~/en/people/charles-bond/"">Charles Bond</a></strong><br />  Associé, chef du groupe Ressources naturelles (R.-U.)</p>    <p><strong><a href=""~/en/people/andrew-lamb/"">Andrew Lamb</a></strong><br />  Associé, chef du groupe Pétrole et gaz (Canada)</p>  ",GWLG.Global,6535cd7a-0e8e-447a-bc96-cec1df267dfe;8851356b-723a-4786-b06a-91caee32c6af,AC9BFCAC-76AA-4FEF-8D64-FE3F921C7659,NULL,0,NULL,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{20499AC7-4382-4D8B-8C68-109767620E45}
211,/Sectors/Cannabis/Global,en-GB,6702A3F2-7BB2-4320-BB98-8A8FAE00A61D,Global,Global,Law firm offering legal advice to the cannabis industry in Canada and the UK. Advice for cannabis companies and those wishing to invest in CBD.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>While every company has its challenges, the hurdles that cannabis businesses face are particularly complex. Indeed, as the regulatory and commercial frameworks shaping the global cannabis sector continue to crystallize, significant business risk inheres in every new opportunity.</p>    <p>At Gowling WLG, we help a wide range of cannabis industry participants manage such risk and find success across a number of fronts. We also work closely with entities from other sectors that are looking to leverage the growth opportunities presented by cannabis.</p>    <p>No matter the challenge, our team has the first-hand industry experience, far-reaching global platform and comprehensive service offering to help you advance in this dynamic space. Some of our areas of expertise include:</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/advertising-product-regulatory/#global"" target=""_blank"">Advertising</a></li>   <li><a href=""~/en/services/commercial-litigation/#global"" target=""_blank"">Commercial litigation</a></li>   <li>Consumer protection</li>   <li>Debt &amp; equity financing transactions</li>   <li><a href=""~/en/services/employment-labour-equalities/#global"" target=""_blank"">Employment &amp; labour issues</a></li>   <li><a href=""~/en/services/intellectual-property-law/#global"" target=""_blank"">Intellectual property</a></li>   <li>IPOs &amp; private placements</li>   <li>Legislative and regulatory frameworks</li>   <li>Licensing &amp; distribution</li>   <li>Packaging &amp; labelling</li>   <li><a href=""~/en/services/mergers-acquisitions/#overview"" target=""_blank"">Private &amp; public M&amp;A</a></li>   <li>Product liability &amp; risk management</li>   <li><a href=""~/en/services/real-estate/#global"" target=""_blank"">Real estate</a> &amp; municipal zoning</li>   <li>Regulations matters</li>   <li><a href=""~/en/services/restructuring-insolvency/#global"" target=""_blank"">Restructuring &amp; insolvency</a></li>   <li><a href=""~/en/services/tax/#global"" target=""_blank"">Tax</a></li>  </ul>    <p>&nbsp;</p>    <h2>Making sense of cannabis regulation</h2>    <p>Our professionals can help you navigate the emergent legislative and regulatory frameworks that govern cannabis from jurisdiction to jurisdiction. Our expertise also encompasses cannabidiol (CBD) and related products. From nuanced consumer protection issues to municipal real estate zoning bi-laws, we ensure you have the knowledge and resources needed to anticipate obstacles and scale your business with confidence.</p>    <h2>Helping you grow</h2>    <p>We have comprehensive experience leading issuers, investment dealers and strategic investors through multi-faceted corporate finance and M&amp;A transactions. Our work has resulted in the listing of a number of private cannabis companies - through initial public offerings, reverse take-over/qualifying transactions, private and public mergers and acquisitions, or debt and equity financing transactions.</p>    <blockquote style=""text-align: center;"">  <p>Excellent standing in the life sciences industry. <cite>Chambers UK</cite></p>  </blockquote>    <blockquote style=""text-align: center;"">  <p>What separates them is their understanding of us and ability to put things into our context. They&#39;ve been very good at translating complex legal issues into language that our organization can understand. <cite>Chambers Canada</cite></p>  </blockquote>    <p>We have experience working with businesses in the cannabis and <abbr title=""cannabidiol"">CBD</abbr> industries across a wide range of practice areas. We are able to provide our clients with a deep understanding of this area of the law to ensure their success.</p>    <h3>Recent projects and experience</h3>    <ul>   <li>Counsel to <strong>Canopy Growth Corporation</strong>, one of the world&#39;s largest cannabis companies, on planning, real estate (including leasing), construction, environmental and IP matters associated with the production, storage and distribution of cannabis in Canada.</li>   <li>Counsel to an online cannabis delivery company on its successful acquisition of distressed cannabis assets from the receiver of an insolvent company.</li>   <li>Counsel to a cannabis producer on its proposed acquisition of the assets of an insolvent company.</li>   <li>Advising the board of directors of a cannabis company on insolvency risks.</li>   <li>Counsel to a cannabis company in its proposal proceedings under the&nbsp;<em>Bankruptcy and Insolvency Act</em></li>   <li>Counsel to <strong>Aleafia Health Inc.</strong> in connection with its acquisition of Emblem Corp. valued at $172.3 million at the time of announcement, pursuant to a court approved plan of arrangement under the provisions of the <em>Canada Business Corporations Act</em>.</li>   <li>Counsel to <strong>Aleafia Health Inc.</strong> in a public offering of convertible debenture units of the company for aggregate gross proceeds of $40.25 million, which included the full exercise of the over-allotment option.</li>   <li>Counsel to <strong>Phivida Holdings Inc.</strong>, a premier brand of CBD-infused products listed on the Canadian Securities Exchange.</li>   <li>Counsel to <strong>MPX Bioceutical Corporation</strong> in $30-million financing. MPX, through its wholly owned subsidiaries in the US, provides a range of services to two medicinal cannabis enterprises in Arizona.</li>   <li>Counsel to <strong>Khiron Life Sciences Corp.</strong>, a Colombian medical marijuana company, in its going public transaction on the TSX Venture Exchange.</li>   <li>Advising <strong>The Green Organic Dutchman</strong> on construction contracts for a cannabis hydroponics plant.</li>   <li>Counsel to <strong>Molson Coors Canada</strong>, advising on the <a href=""~/en/insights-resources/client-work/2018/molson-coors-canada-and-hexo-launch-truss/"" target=""_blank"">creation of a joint venture with HEXO Corp. called Truss Limited Partnership</a>. The venture will pursue opportunities to develop non-alcoholic, cannabis-infused beverages for the Canadian market.</li>   <li>Counsel to <strong>Cannabis One Holdings Inc.</strong> in connection with its <a href=""~/en/insights-resources/client-work/2019/cannabis-one-completes-business-combination/"" target=""_blank"">RTO transaction on the Canadian Securities Exchange</a>. The project resulted in the client becoming a multi-state dispensary operator and aggregator of popular cannabis brands throughout North America.</li>   <li>Counsel to <strong>GW Pharma</strong>, the global leader in developing cannabinoid based medicines.</li>   <li>Counsel to <strong>Cenkos Securities</strong> on English cannabis regulatory advice.</li>   <li>Counsel to a global investment bank on English cannabis regulatory advice.</li>   <li>Counsel to an investment bank on the IPO on the Standard List of the Main Market of the London Stock Exchange plc of a cannabinoid-based pharma company.</li>  </ul>    <h2>Meet the team and grow your business</h2>    <p>Contact any member of our team to find out more about how can help you succeed in the cannabis industry.</p>    <p style=""text-align: center;""><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>    <hr />  <h3><a href=""~/en/people/lewis-retik/"" target=""_blank"">Lewis Retik</a><br />  Partner (Canada)</h3>    <p>Lewis is a partner in Gowling WLG&#39;s Ottawa office, practising primarily in the area of corporate commercial and regulatory law. His practice focuses on regulatory and commercial issues relating to the commercialisation of products. Lewis is Co-Leader of the National Cannabis Group for Gowling WLG in Canada.</p>    <hr />  <h3><a href=""~/en/people/samantha-myers/"" target=""_blank"">Samantha Myers</a><br />  Partner (UK)</h3>    <p>Samantha Myers is a partner&nbsp;in the UK Corporate Group, specialising in corporate finance, mergers and acquisitions and equity capital markets. Samantha has extensive experience of acting for companies, or their advisers, on IPOs and secondary transactions. She regularly advises on a range of domestic and cross border M&amp;A transactions, including public takeovers. Samantha leads the UK Cannabis Group.</p>    <hr />  <h3><a href=""~/en/people/peter-simeon/"" target=""_blank"">Peter Simeon</a><br />  Partner (Canada)</h3>    <p>Peter is an experienced corporate commercial and securities lawyer. As a partner in Gowling WLG&#39;s Toronto office, Peter focuses his practice on corporate finance, mergers and acquisitions, and structured products. Working closely with issuers, underwriters, and other corporate clients, Peter delivers practical, effective advice to help businesses move their transactions forward. He is Co-Leader of the National Cannabis Group for Gowling WLG in Canada.</p>  ",GWLG.Global,286a9412-b4bf-49af-840a-a94f08cb65d1;c2d606a0-c969-45ae-ac29-89c4cdc04c9d;9b9ae971-5e77-434c-ab69-7192c6cb65b6,F79574FC-C0D9-4D62-B148-541E0B1A4844,NULL,0,NULL,1,NULL,NULL,Expertise in Cannabis Law,NULL, See more articles,Stay ahead,"<p>Keep up-to-date with the latest in cannabis by registering for our updates.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us today,"<p style=""center"">For advice specific to the cannabis industry&nbsp;contact a member of our team.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",NULL,NULL,{64280350-4348-4DC0-8A9B-1412A614306C}|{FDDC4B94-7CA9-4265-AAD2-B1573B9C797F}|{823D3EEC-3F86-4890-9633-796B611EB17A}
212,/Sectors/Cannabis/Global,fr-CA,6702A3F2-7BB2-4320-BB98-8A8FAE00A61D,Aperçu,Aperçu,Cabinet d'avocats offrant des conseils juridiques à l'industrie du cannabis au Canada et au Royaume-Uni. Conseils aux entreprises de cannabis et à ceux qui souhaitent investir dans le CBD.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Chaque entreprise doit tôt ou tard composer avec son lot de difficultés. C&#39;est particulièrement vrai pour les sociétés de cannabis qui doivent faire face à des défis très complexes, car à mesure que se précisent la réglementation et le cadre commercial du secteur mondial du cannabis, chaque nouvelle occasion d&#39;affaires comporte des risques considérables.</p>    <p>Chez Gowling&nbsp;WLG, nous aidons divers participants de l&#39;industrie du cannabis à gérer ces risques et à progresser à différents égards. Nous travaillons également avec des entités d&#39;autres secteurs commerciaux cherchant à profiter des occasions de croissance de l&#39;industrie du cannabis.</p>    <p>Quelle que soit la difficulté, notre équipe possède l&#39;expérience pratique, les ressources mondiales et la gamme complète de services dont vous avez besoin pour aller de l&#39;avant dans cette industrie en constante évolution. Voici nos domaines d&#39;expertise&nbsp;:</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Cadres législatifs et réglementaires</li>   <li><a href=""~/fr/services/real-estate/#international"" target=""_blank"">Droit immobilier</a> et zonage municipal</li>   <li>Emballage et étiquetage</li>   <li><a href=""~/fr/services/employment-labour-equalities/#international"" target=""_blank"">Enjeux de droit du travail et de l&#39;emploi</a></li>   <li><a href=""~/fr/services/tax/#international"" target=""_blank"">Fiscalité</a></li>   <li><a href=""~/fr/services/mergers-acquisitions/#international"" target=""_blank"">Fusions et acquisitions de sociétés ouvertes et fermées</a></li>   <li><a href=""~/en/services/commercial-litigation/#global"" target=""_blank"">Litige commercial</a></li>   <li>Octroi de licences et distribution</li>   <li>Opérations de financement par emprunt et par actions</li>   <li>PAPE et placements privés</li>   <li><a href=""~/fr/services/intellectual-property/#international"" target=""_blank"">Propriété intellectuelle</a></li>   <li>Protection des consommateurs</li>   <li><a href=""https://gowlingwlg.com/fr/services/advertising-product-regulatory/#international"" target=""_blank"">Publicité</a></li>   <li><a href=""~/fr/services/advertising-product-regulatory/#international"" target=""_blank"">Questions réglementaires</a></li>   <li>Responsabilité du fait du produit et gestion des risques</li>   <li><a href=""~/fr/services/restructuring-insolvency/#international"" target=""_blank"">Restructuration et insolvabilité</a></li>  </ul>    <h2>Trouvez vos repères quant à la réglementation du cannabis</h2>    <p>Nos professionnels vous aident à y voir clair en ce qui a trait à la législation et la réglementation qui régissent les activités liées au cannabis dans différents pays. Notre expertise couvre également le cannabidiol (CBD) et les produits connexes. Qu&#39;il s&#39;agisse d&#39;enjeux complexes liés à la protection des consommateurs ou à des règlements de zonage municipal applicables à vos biens immobiliers, nous anticipons les obstacles potentiels et mettons à votre disposition les connaissances et ressources nécessaires afin de vous aider à faire croître votre entreprise en toute confiance.</p>    <h2>Nous vous aidons à croître</h2>    <p>Nous possédons une vaste expérience lorsqu&#39;il s&#39;agit de diriger des émetteurs, courtiers en valeurs mobilières et investisseurs stratégiques dans des opérations complexes de financement de sociétés et de fusions et acquisitions. Nous avons d&#39;ailleurs aidé plusieurs sociétés privées de l&#39;industrie du cannabis à s&#39;inscrire en bourse, notamment dans le cadre de premiers appels publics à l&#39;épargne, de prises de contrôle inversées ou d&#39;opérations admissibles, de F&amp;A de sociétés fermées et ouvertes, ou d&#39;opérations de financement par emprunt et par actions.</p>    <blockquote style=""text-align: center;"">  <p>&laquo; Excellente réputation dans le secteur des sciences de la vie. &raquo;&nbsp;-&nbsp;<cite>Chambers UK</cite></p>  </blockquote>    <blockquote style=""text-align: center;"">  <p>&laquo;&nbsp;Ils se démarquent des autres cabinets grâce à leur compréhension de nos activités et leur façon d&#39;aborder les choses en fonction de notre réalité. Ils savent très bien nous expliquer des enjeux juridiques complexes dans un jargon familier pour notre entreprise. &raquo;&nbsp;-&nbsp;<cite>Chambers Canada</cite></p>  </blockquote>    <p>Travaillant avec des entreprises du secteur du cannabis et du <abbr title=""cannabidiol"">CBD</abbr> dans un large éventail de domaines de pratique, nous fournissons à nos clients une compréhension approfondie des enjeux juridiques propres à l&#39;industrie afin de bien les conseiller.</p>    <h2>Mandats et projets récents</h2>    <ul>   <li>Représentation de <strong>Canopy Growth Corporation</strong>, l&rsquo;une des plus grandes sociétés de cannabis au monde, quant à des questions de planification, d&rsquo;immobilier (y compris de location), de construction, de droit environnemental et de propriété intellectuelle relativement à la production, l&rsquo;entreposage et la distribution de cannabis au Canada.</li>   <li>Représentation d&rsquo;une société en ligne de livraison de cannabis quant à l&#39;acquisition des actifs en difficulté du séquestre d&#39;une société insolvable.</li>   <li>Représentation d&#39;un producteur de cannabis quant à son projet d&#39;acquisition des actifs d&rsquo;une société insolvable.</li>   <li>Prestation de conseils juridiques au conseil d&#39;administration d&#39;une société de cannabis quant aux risques d&#39;insolvabilité.</li>   <li>Représentation d&#39;une société de cannabis en vertu de la <em>Loi sur la faillite et l&rsquo;insolvabilité</em>.</li>   <li>Représentation d&rsquo;<strong>Aleafia Health Inc. </strong>quant à son acquisition d&rsquo;Emblem Corp., transaction évaluée à 172,3&nbsp;M$ au moment de l&rsquo;annonce et réalisée aux termes d&rsquo;un plan d&rsquo;arrangement approuvé par la cour conformément aux dispositions de la <em>Loi canadienne sur les sociétés par actions</em>.</li>   <li>Représentation d&rsquo;<strong>Aleafia Health Inc. </strong>dans le cadre d&rsquo;un placement public de débentures convertibles de la société pour un produit brut global de 40,25&nbsp;M$, y compris l&rsquo;exercice intégral de l&rsquo;option en cas d&rsquo;attribution excédentaire.</li>   <li>Représentation de <strong>Phivida Holdings Inc.</strong>, une société fabricante de produits infusés au CBD de qualité supérieure inscrite à la Bourse des valeurs canadiennes.</li>   <li>Représentation de <strong>MPX Bioceutical Corporation</strong> dans le cadre d&rsquo;un financement de 30&nbsp;M$. Par l&rsquo;intermédiaire de ses filiales américaines en propriété exclusive, MPX fournit une variété de services à deux sociétés du secteur du cannabis à des fins médicales en Arizona.</li>   <li>Conseillers juridiques de <strong>Khiron Life Sciences Corp.</strong>, une entreprise colombienne de cannabis médical, relativement à son inscription à la cote de la Bourse de croissance TSX.</li>   <li>Conseillers juridiques de <strong>The Green Organic Dutchman</strong> relativement à des contrats de construction visant une installation destinée à la culture hydroponique du cannabis.</li>   <li>Représentation de <strong>Molson Coors Canada</strong>, quant à la <a href=""https://gowlingwlg.com/fr/insights-resources/client-work/2018/molson-coors-canada-and-hexo-launch-truss/"" target=""_blank"">création d&rsquo;une coentreprise avec HEXO Corp. nommée Truss Limited Partnership</a>, laquelle explorera les possibilités de mise au point de boissons non alcoolisées infusées au cannabis pour le marché canadien.</li>   <li>Représentation de <strong>Cannabis One Holdings Inc.</strong> dans le cadre de sa <a href=""https://gowlingwlg.com/fr/insights-resources/client-work/2019/cannabis-one-completes-business-combination/"" target=""_blank"">prise de contrôle inversée à la Bourse des valeurs canadiennes</a>. Grâce à cette transaction, le client est devenu exploitant de dispensaire et revendeur de marques populaires de cannabis dans de nombreux États en Amérique du Nord.</li>   <li>Représentation de <strong>GW Pharma</strong>, chef de file mondial en conception de médicaments à base de cannabinoïdes.</li>   <li>Conseillers juridiques de <strong>Cenkos Securities</strong> quant à la réglementation du cannabis au Royaume-Uni.</li>   <li>Conseillers juridiques d&rsquo;une banque d&rsquo;investissement mondiale quant à la réglementation du cannabis au Royaume-Uni.</li>   <li>Représentation d&rsquo;une banque d&rsquo;investissement quant au PAPE d&rsquo;une société pharmaceutique de produits à base de cannabinoïdes sur la liste standard du Marché Principal de la Bourse de Londres</li>  </ul>    <h2>Rencontrez l&rsquo;équipe et prenez de l&rsquo;expansion</h2>    <p>Vous avez des ambitions commerciales sur le marché du cannabis? Communiquez avec un membre de notre équipe qui saura vous conseiller.</p>    <p style=""text-align: center;""><a class=""c-button-red"" href=""~/fr/contact-us/"">Nous contacter</a></p>    <hr />  <h3><a href=""~/en/people/lewis-retik/"" target=""_blank"">Lewis Retik</a><br />  Associé (Canada)</h3>    <p>Associé au sein du bureau de Gowling WLG à Ottawa, Lewis œuvre principalement en droit des sociétés, en droit commercial et en droit de la réglementation. Sa pratique est axée sur les enjeux réglementaires et commerciaux liés à la commercialisation des produits. Lewis est cochef du groupe Cannabis de Gowling WLG au Canada, lequel agit à l&rsquo;échelle nationale.</p>    <hr />  <h3><a href=""~/en/people/samantha-myers/"" target=""_blank"">Samantha Myers</a><br />  Directrice (Royaume-Uni)</h3>    <p>Samantha Myers est directrice au sein du groupe de droit des sociétés du Royaume-Uni, où sa pratique est axée sur le financement des entreprises, les fusions et acquisitions ainsi que sur les marchés boursiers et financiers. Elle possède une vaste expérience lorsqu&rsquo;il s&rsquo;agit de représenter des sociétés ou leurs conseillers dans le cadre de PAPE et de reclassements, et elle agit régulièrement en tant que conseillère juridique dans le cadre de fusions et acquisitions nationales et transfrontalières, y compris des offres publiques d&#39;achat. Samantha dirige le groupe Cannabis de Gowling WLG au Royaume-Uni.</p>    <hr />  <h3><a href=""~/en/people/peter-simeon/"" target=""_blank"">Peter Simeon</a><br />  Associé (Canada)</h3>    <p>Peter est un avocat chevronné en droit des sociétés, droit commercial et droit des valeurs mobilières. En tant qu&rsquo;associé au sein du bureau de Gowling WLG à Toronto, Peter se spécialise au chapitre du financement des entreprises, des fusions et acquisitions, et des produits structurés. Travaillant étroitement avec des émetteurs, preneurs fermes et autres clients du secteur commercial, Peter fournit des conseils pratiques et efficaces afin d&rsquo;aider les entreprises à mener leurs transactions à terme. Il est cochef du groupe Cannabis de Gowling WLG au Canada, lequel agit à l&rsquo;échelle nationale.</p>  ",GWLG.Global,9b9ae971-5e77-434c-ab69-7192c6cb65b6;c2d606a0-c969-45ae-ac29-89c4cdc04c9d;286a9412-b4bf-49af-840a-a94f08cb65d1,F79574FC-C0D9-4D62-B148-541E0B1A4844,NULL,0,NULL,1,NULL,NULL,Expertise in Cannabis Law,NULL,Pour en savoir plus,Gardez une longueur d'avance,"<p>Restez au fait des développements les plus récents dans l&#39;industrie du cannabis en vous abonnant à nos nouvelles.</p>    <p style=""center""><a class=""c-button-red"" href=""~/fr/footer/updates/"">S&#39;abonner</a></p>  ",Communiquez avec nous dès aujourd'hui,"<p style=""center"">Pour obtenir des conseils portant spécifiquement sur le secteur du cannabis, contactez un membre de notre équipe.</p>    <p style=""center""><a class=""c-button-red"" href=""~/fr/contact-us/"">Nous contacter</a></p>  ",NULL,NULL,{823D3EEC-3F86-4890-9633-796B611EB17A}|{FDDC4B94-7CA9-4265-AAD2-B1573B9C797F}|{64280350-4348-4DC0-8A9B-1412A614306C}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,

- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 296766
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: text/csv
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: csv
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20230828T124302Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "1d971d37-af6c-4a35-8d1c-bf75bef1badc"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\mahesh.kambhampati@altudo.co
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20230926T183912Z
