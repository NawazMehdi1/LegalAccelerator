---
ID: "a88911bb-5e83-4214-a992-a1912e1b8cd4"
Parent: "98018a5b-9678-4d97-9a71-6894eff4035d"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Services/ServicesLocation_CMSTree
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/A88911BB5E834214A992A1912E1B8CD4.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "a4dd74e4-90fe-4b4e-9bae-d1a10e17dbb6"
  Value: ﻿ServiceLocationID,NodeAliasPath,DocumentCulture,TreeNodeGUID,PageName,Title,Summary,Image,ImageAltText,MainContent,Location,KeyContacts,ServiceNodeGuid,DisplayCondition,Evergreen,ShowViewAll,PageBackgroundColour,IntroContent,HighlightsTitle,RelatedNewsResources,ButtonText,LeftHeader,LeftContent,RightHeader,RightContent,CTASelector,ButtonURL,ImageSocialMedia,KeyContacts_SitecoreGUID
1,/Services/Advertising-Product-Regulatory/Overview,en-GB,EE3420F2-064F-4BA6-B2E8-65C3A59F070F,Overview,Overview,"Gowling WLG offers combined experience in advertising and product regulation to help you succeed throughout the lifecycle of designing, launching, marketing and protecting your products.",NULL,NULL,"<p>Bringing new products and services to market requires innovation and creativity, coupled with a deep understanding of the regulatory environment in which they are to be designed, marketed and sold.</p>    <p>Gowling WLG offers combined experience in advertising and product regulation to help you succeed throughout the lifecycle of designing, launching, marketing and protecting your products.</p>    <p>We understand that great advertising requires keen insight and unbridled creativity. It also calls for an equally insightful and creative team of legal professionals who can ensure your campaigns meet industry and legal requirements, while preserving the integrity and inspiration of your ideas.</p>    <p>From product licensing to the review of advertising copy to representation in trade disputes, Gowling WLG&#39;s team of knowledgeable, industry-savvy professionals provides its clients with considerable hands-on experience and a flexible, effective approach to solving their issues.</p>    <p>Product regulation calls for a detailed knowledge of the product and the market as well as of the law, and a legal team that knows how to help you navigate effectively through the your dealings with a wide range of regulatory bodies. It requires lawyers who are not just experts in their fields, but bring a commercial and problem-solving approach to regulatory issues. Meanwhile, the rise of digital media, including social media, means you also need lawyers who understand the latest technology and channels and are able to apply existing laws to new ways of advertising.</p>    <p>Gowling WLG is at the forefront of these issues. We understand advertising and what you&#39;re trying to achieve. Our goal at all times is to help you market and sell your goods and services while remaining within the law.</p>    <p>Our clients work in industries ranging from packaged goods to automotive and from retail to telecommunications. We&#39;re frequently asked to facilitate national product launches and advertising and packaging integration for companies seeking to enter - or introduce new products and services into - the UK, European, Canadian or Middle Eastern marketplaces.</p>    <p>We assist in all matters relating to advertising, marketing and product regulation, including:</p>    <ul>   <li>Advertising disputes</li>   <li>Advertising reviews</li>   <li>Agency, media buying and advertising services agreements</li>   <li>Ambush marketing</li>   <li>Branded content</li>   <li>CE marking, certification and accreditation for EU markets</li>   <li>Children&#39;s advertising</li>   <li>Co-promotion and celebrity endorsement agreements</li>   <li>Comparative advertising and claims support advice</li>   <li>Consumer complaints and competitor disputes</li>   <li>Consumer protection laws</li>   <li>Contests and promotions</li>   <li>Digital media, including apps, ad blocking, ad placement, viewability and click fraud, bloggers and vloggers, native advertising, behavioural targeting and analytics, affiliate marketing and live video streaming</li>   <li>Multi-level marketing and direct sales, including compliance and licensing</li>   <li>Distribution, manufacturing, and quality assurance agreements e-commerce</li>   <li>Environmental claims</li>   <li>Food reviews and regulatory approvals, including health and nutrition claims</li>   <li>Free movement of goods and services</li>   <li>International advertising, music and other copyright licences</li>   <li>Packaging and labelling</li>   <li>Pharmaceutical and medical device licensing</li>   <li>Price, sale and discount claims</li>   <li>Privacy, data protection and direct marketing/anti-spam</li>   <li>Product licensing</li>   <li>Recall and enforcement management</li>   <li>Social media</li>   <li>Sponsorship and events</li>   <li>Talent agreements</li>   <li>Trademarks and copyright</li>  </ul>    <p>Recognised by the world&#39;s most respected legal directories for our leadership and expertise, we keep on top of legal trends by contributing our insights to a variety of publications and speaking at numerous conferences and events around the world.</p>    <p>Knowledgeable, practical and market-focused: Gowling WLG has the creativity and commercial and regulatory insight to help you prosper. To learn more about how we can help you, please contact any member of our team.</p>  ",GWLG.Global,897543f6-1036-4499-934c-adf5f5afeaf4;6e30f114-ee86-423f-9384-d8a75d75077c,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,534b988b-50d8-4f76-b8eb-78e06461bb3a;34e72ec6-f31b-4dc7-9739-743b455f36a1;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{202711F6-A4C3-4DC7-97C8-C4A79ED8F207}|{D5398E9F-C6CA-48EC-B886-196F6CD6BD69}
2,/Services/Advertising-Product-Regulatory/Canada,en-GB,FF3D9631-208D-4458-ABEA-CCF069BE4F19,Canada,Canada,"Great advertising takes keen insight and unbridled creativity. It also calls for an equally creative and insightful team of legal professionals who can ensure your campaigns meet industry and legal requirements, while still preserving the integrity and creativity of your ideas.",NULL,NULL,"<p>Great advertising takes keen insight and unbridled creativity. It also calls for an equally creative and insightful team of legal professionals who can ensure your campaigns meet industry and legal requirements, while still preserving the integrity and creativity of your ideas.</p>    <p>There&#39;s a reason Gowling WLG is the law firm of choice for so many leading advertising agencies, media outlets, publishing houses and Fortune 500 companies across the country: we&#39;re just as committed to raising the bar in our industry as you are in yours. Our team combines exceptional industry insight with unparalleled skill to deliver a full range of effective, innovative client solutions.</p>    <h3>Comprehensive advice</h3>    <p>From product licensing to the review of advertising copy to representation in trade disputes, we provide our clients with considerable hands-on experience and a flexible and effective approach to solving their unique issues.</p>    <p>Our team of knowledgeable and industry-savvy legal professionals works closely with you to understand your objectives, identify specific risks and create customized, effective solutions while respecting and enabling your creative process.</p>    <h3>Legal guidance at the forefront of your industry</h3>    <p>Social media, mobile marketing, anti-spam law compliance, privacy standards, consumer-generated content - these are just some of the rapidly-evolving areas where our professionals can help you stay ahead of the curve.</p>    <h3>Full-service support</h3>    <p>As part of an international, sector-focused law firm, the Gowling WLG Advertising &amp; Product Regulatory Group is frequently sought after to facilitate national product launches and North American advertising and packaging integration for foreign or U.S. companies seeking to enter the Canadian marketplace.</p>    <h3>A global perspective</h3>    <p>Gowling WLG is the sole Canadian member of AdLaw International, a global network of law firms that focuses on advertising and marketing law. This gives you seamless access to international professionals and sophisticated legal advice in markets around the world.</p>    <h3>Proven experience</h3>    <p>Our professionals are regularly featured as keynote speakers in conferences around the world, and are the authors of the leading Canadian textbook, <em>Advertising and Marketing Law in Canada</em>, published by LexisNexis, and co-authors of <em>Canadian Advertising and Marketing Law</em>, published by Carswell.</p>    <p>The group also shares its exceptional insights and relevant highlights of recent Canadian legal decisions, policies and legislation through <em>AdBytes</em>, our e-newsletter (<a href=""~/en/footer/updates/subscribe-canada/"">subscribe to our publications</a>).</p>    <h3>A top-ranked team</h3>    <p>Year over year, our professionals are recognized as leaders in the field by publications such as <em>Chambers Global</em>, <em>The Best Lawyers in Canada</em>, the <em>Canadian Legal Lexpert Directory</em>, and the <em>Lexpert/American Lawyer Guide to the Leading 500 Lawyers in Canada</em>.</p>    <h3>Innovative solutions</h3>    <p><a href=""https://gowlingwlg.com/en/topics/contest-creator/overview/"" target=""_self""><em>Contest Creator</em></a> by Gowling WLG (Canada) LLP is an automated application that helps users to create a set of contest rules for contests run in Canada. The tool guides users through an interactive online questionnaire that helps streamline the legal review process and generates contest rules for downloading or printing.&nbsp; <em>Contest Creator</em> incorporates our expertise in Canadian contest laws and best practices honed from years of experience, within a user-friendly platform designed for brand teams.</p>    <p>Please contact <a href=""mailto:innovate@gowlingwlg.com"">innovate@gowlingwlg.com</a> for more information.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you succeed, <a href=""~/en/people/?page=1&amp;services=273&amp;locations=GWLG.Canada"" target=""_blank"">please contact any member of our team</a>.</p>  ",GWLG.Canada,6e30f114-ee86-423f-9384-d8a75d75077c,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{D5398E9F-C6CA-48EC-B886-196F6CD6BD69}
4,/Services/Banking-Finance/Overview,en-GB,DD89078C-5C98-4A59-B70A-9564AF5C998F,Overview,Overview,"In the banking world, trust is everything. You want the confidence that only comes from working with a legal team already advising many of the world's major financial players with a proven track record of success.",NULL,NULL,"<p>In the banking world, trust is everything. You want the confidence that only comes from working with a legal team already advising many of the world&#39;s major financial players with a proven track record of success.</p>    <p>Gowling WLG is a team you can depend on for practical, commercially astute banking advice. We help many of the world&#39;s leading banks handle the most sophisticated transactions in an efficient and effective manner.</p>    <p>You can rely on a team that advises a range of global financial institutions and high street names. We work with European, Asian and US-based banks - and all five of the largest Canadian banks trust our services.</p>    <p>Based in major financial centres in addition to lower cost centres, we provide enhanced efficiencies and on-the-ground advice. Our professionals possess a detailed understanding of your competitive landscape, regulatory and legislative environments, and emerging economic trends. We&#39;ll always innovate on your behalf, drawing from the expertise of our cross-disciplinary industry groups to offer creative solutions that are tailored to you specific goals.</p>    <p>By engaging Gowling WLG, you&#39;ll be working with some of the leading players in banking law. For example, our specialist regulatory team has in-depth experience with the financial sector, while our high-quality debt finance team undertakes project finance work particularly focused on the energy and infrastructure sector. We&#39;re also leaders in serving the banking requirements of the automotive sector.</p>    <p>We offer a full range of banking services, including:</p>    <ul>   <li>Asset finance and invoice discounting</li>   <li>Auto financing</li>   <li>Banking and financial regulatory law</li>   <li>Bond financing/public debt</li>   <li>Capital markets and derivatives</li>   <li>Cross-border and domestic transactions</li>   <li>Debt financing</li>   <li>Demand and enforcement proceedings</li>   <li>Equity capital markets</li>   <li>Factoring arrangements</li>   <li>Financial regulatory</li>   <li>Financial technology (fin-tech)</li>   <li>General banking and corporate lending</li>   <li>Investment grade financings</li>   <li>Letters of credit and guarantee arrangements</li>   <li>Leveraged and acquisition finance</li>   <li>Litigation</li>   <li>Loan syndications</li>   <li>Private equity</li>   <li>Project finance</li>   <li>Real estate lending</li>   <li>Senior secured and unsecured lending</li>   <li>Sub-debt, mezzanine and second lien lending</li>   <li>Trade finance</li>   <li>Transfer pricing</li>   <li>Venture capital, hedge fund and merchant</li>   <li>banking transactions</li>   <li>Wholesale banking</li>  </ul>    <p>Service is as crucial to us as it is to you. We put client account teams in place for all of our major banking clients and encourage an active, two-way secondments programme.</p>    <p>Gowling WLG is a team that truly understands your legal business world. Please get in touch to discuss how we can help.</p>  ",GWLG.Global,b2b3de7a-f860-4024-b95f-ea25cf063893;45042386-e87e-4fa2-8f87-101784526d0a,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,534b988b-50d8-4f76-b8eb-78e06461bb3a;34e72ec6-f31b-4dc7-9739-743b455f36a1;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{F08710E4-1845-4B15-8141-8AA2021598DC}|{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
12,/Services/Asset-Management/UK,en-GB,CDE2871B-435D-452B-A6A1-81FDECDF7826,UK,UK,"Our dedicated asset management team works alongside our market leading investment practice. Unlike many law firms, this is a core business for us which enables us to give asset management the right priority and resource.",NULL,NULL,"<p>Our dedicated asset management team works alongside our market leading investment practice. Unlike many law firms, this is a core business for us which enables us to give asset management the right priority and resource.</p>    <p>Our team is both motivated by and focused on asset management. Our priorities are not split with handling large investment acquisitions which ensures that lettings receive the focus they deserve.</p>    <p>Management after the acquisition of an asset is as fundamental as the acquisition itself. There can be significant opportunities for growth and it is important that income streams are maximised with a focus on lettings and assets maintained ready for sale.</p>    <p>Our team of asset management specialists has the experience to provide you with the solutions you need. Our qualified lawyers come from a variety of backgrounds. They include a legal adviser on the RICS Service Charge Code Committee. A partner or director will supervise every project and transaction and they will get to know your assets in detail, attending management meetings and making site visits as necessary. Our team understands the importance of maintaining good relationships with your tenants and we will act as your ambassador in any transaction and interaction.</p>    <p>Client projects on which we advise include:</p>    <ul>   <li>Harbert Management Corporation - managing a number of multi-let industrial estates following us completing the acquisition.</li>   <li>Kennedy Wilson - managing its shopping centres in Oldham and Ashford and several of its recently acquired business assets, some of which we acquired for the client and some which we took over from other lawyers.</li>   <li>Schroder UK Property Fund and Schroder Retail Property Unit Trust - exclusively appointed to manage its industrial estates.</li>   <li>Mucklow - managing its portfolio of offices and industrial estates across the country.</li>   <li>Hines Moorfield - management of Brindleyplace a 500,000 sq ft mixed use, office led complex. We also advise Hines on its office development at Broadgate Quarter and other offices around the City.</li>   <li>LaSalle Investment Management - in relation to its funds for Northern Ireland Local Government Officers&#39; Superannuation Committee, Pearson and HSBC, on the management of a mix of retail and business assets, including several significant shopping centres.</li>   <li>Royal Exchange - advising private investors on the management of Royal Exchange in the City, and its subsequent sale, and we have recently been reappointed by the new owners.</li>   <li>IM Properties - on its management of Mell Square shopping centre in Solihull.</li>  </ul>  ",GWLG.UK,NULL,45D8BC2C-0EB3-450F-B051-7D6ED80DF4A3,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
13,/Services/Banking-Finance/Canada,en-GB,0A7C6C5F-FAC1-4378-8A80-C0741AB98BB3,Canada,Canada,"Leading players in the financial industry need legal support that provides exceptional experience, proven insight, and a firm grasp of this rapidly evolving market. ",NULL,NULL,"<ul class=""o-lined-list is-list-unstyled list-of-links"">   <li><a href=""https://www.theglobeandmail.com/business/rob-magazine/article-best-lawyers-in-canada-our-complete-listings/"" target=""_blank"">Gowling WLG&#39;s Banking and Finance group recognized in <em>Canada&#39;s Best Law Firms for 2022 by The Globe and Mail&#39;s Report on Business</em></a></li>   <li><a href=""https://www.mondaq.com/Guides/Subject/15?country_id=39"" target=""_blank"">Gowling WLG lawyers contribute to the Mondaq comparative guide on Banking Regulation</a></li>  </ul>    <p>&nbsp;</p>    <p>At Gowling WLG, we tailor our services to meet the unique needs of our clients, staying current with trends and legislative developments in the wide range of industries they serve. Working in client-dedicated teams, our professionals are focused on delivering solutions that meet the demands of the ever-changing financial market.</p>    <p>We complement&nbsp;our &quot;clients first&quot; approach with&nbsp;highly specific and innovative service offerings. For example, our portfolio management programs reduce client risk by assuming full responsibility for all aspects of various types of claims, including insurance claims and defaulted mortgages and loans.</p>    <p>We have in-depth experience with a variety of non-traditional lenders &ndash; such as mezz, ABL, sub-debt and DIP &ndash; and provide insightful financial regulatory law services to help our clients achieve transaction approvals and ensure compliance with all levels of Canadian regulatory requirements.</p>    <p>As part of a global law firm, our team leverages its national reach and diverse international network to provide practical insight into the Canadian marketplace. We frequently work with U.S. and global companies with operations in Canada to maximize opportunities and reduce risk.</p>    <p>With an in-depth understanding of the competitive financial services landscape, extensive experience navigating complex regulatory and legislative environments, and hands-on national and international experience, we offer a comprehensive range of legal services, including:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Asset-based lending</li>   <li>Bond financing/public debt</li>   <li>Consumer finance and cards</li>   <li>Commercial insurance law</li>   <li>Corporate and debt restructurings</li>   <li>Cross-border and domestic transactions</li>   <li>Demand and enforcement proceedings</li>   <li>Employment and labour</li>   <li>Insolvency and restructurings, including litigation proceedings</li>   <li>Leasing</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Mortgage recovery</li>   <li>Project finance</li>   <li>Real estate lending</li>   <li>Receiverships, bankruptcy and related enforcement proceedings</li>   <li>Renegotiating loans and security agreements</li>   <li>Senior secured and unsecured lending</li>   <li>Shariah-compliant financing</li>   <li>Sub-debt, mezzanine and second lien lending</li>   <li>Syndicated, club and joint venture transactions</li>   <li>Tax</li>   <li>Trade finance​</li>  </ul>  </div>  </div>  </div>    <h3>Learn more</h3>    <p>To learn more about how our Banking &amp; Finance Group can help you succeed, <a href=""~/en/people/?page=1&amp;services=274&amp;locations=GWLG.Canada"" target=""_blank"">please contact any member of our team</a>.</p>  ",GWLG.Canada,45042386-e87e-4fa2-8f87-101784526d0a,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,1,t-white,"<p>Leading players in the financial industry need legal support that provides exceptional experience, proven insight, and a firm grasp of this rapidly evolving market. Working with more than 50 domestic and foreign banks and insurers, the legal professionals at Gowling WLG are the preferred counsel on a wide variety of transactions ranging in size from $1 million to $34 billion.</p>  ",Featured news & insights,b2482e0b-00cc-4920-a0d6-7a7700195b28;d05dfadd-34cc-4fc3-b686-574debc86a5d,View all Banking & Finance articles,NULL,NULL,NULL,NULL,534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;e6dcb1b9-2d49-40bf-a74f-138e4dc0d7c0,/en/insights-resources/?page=1&locations=GWLG.Canada&services=274,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
14,/Services/Banking-Finance/UK,en-GB,907B97EF-69EC-4BD9-A72A-1B16BCA86203,UK,UK,"The confidence that only comes from working with a team already advising many of the world's leading banks, financial institutions and major corporate clients is a major advantage of choosing the Gowling WLG finance team.",NULL,NULL,"<p>The confidence that only comes from working with a team already advising many of the world&#39;s leading banks, financial institutions and major corporate clients is a major advantage of choosing the Gowling WLG finance team.</p>    <p>Greater than the sum of its total parts, the team is known for:</p>    <ul>   <li><strong>High levels of expertise</strong> - inside experience from previous in-house roles, access to related legal experts in private equity, pensions, litigation, real estate and funds, plus sector expertise give the team an added edge. Client feedback in Chambers praises the team for being &quot;extremely commercial and always prepared to give a view&quot;, &quot;practically minded&quot; while &quot;their opinions are thorough and provided quickly&quot;</li>   <li><strong>Exceptional service</strong> - our team is &quot;professional, well run ... prepared to go that extra mile&quot; and has &quot;magic circle quality but with a refreshing personal touch&quot;. One of the team&#39;s partners will work with you at every stage of your transaction to ensure you &quot;get partner input and market knowledge&quot;, and achieve the best possible outcome</li>   <li><strong>Developing lasting relationships</strong> - some of the our longstanding clients and repeat panel appointments include HSBC, Bank of America, BNP Paribas, Deutsche Bank, RBS, European Investment Bank, Santander, Handelsbanken and Bank of Ireland</li>  </ul>    <p>Financial institutions, major corporates and public bodies also choose us. The likes of Ballymore Properties, Sanctuary Housing Association, Bridgepoint, CBPE Capital, Conygar Investments, Dyson, Euro Exide Corporation, GE Capital, Isis Equity Partners, JP Morgan Asset Management, Lyceum Capital, Marks &amp; Spencer, Mazda, Mercedes Benz and Smith News plc and Pension Insurance Corporation Limited.</p>    <p>The team provides a full service in all types of general corporate and investment grade financing, both in a national and an international context, through the following sub-teams:</p>    <ul>   <li><strong>Leveraged finance</strong> - Advising lenders, borrowers, infrastructure funds and private equity houses on structuring and negotiation of a wide range of transactions across different industry sectors and in different jurisdictions</li>   <li><strong>Asset finance/invoice discounting</strong> - All elements of asset based finance are covered including invoice and receivables finance, leasing, equipment finance, asset based facilities and syndicated facilities</li>   <li><strong>General banking and derivatives</strong> - We advise a wide range of corporates, banks, pension trustees and other organisations on their financing needs and facilities, including derivative products and other specialist products including funds at Lloyd&#39;s</li>   <li><strong>Real estate finance</strong> - Together with our leading real estate practice, we advise banks, funds and other financial institutions as well as borrowers on all aspects of real estate financing, including innovative structures and large portfolio financings</li>   <li><strong>Capital markets and securitisation</strong> - With a reputation for innovation in funding, the team advises issuers, sponsors, funds and originators on raising finance through securitisation, capital markets issues and other treasury products</li>   <li><strong>Restructuring and Corporate Recovery</strong> - Working with insolvency practitioners, banks, institutional investors, asset-based lenders, LPA receivers, corporates and company directors, the team offers advice on the full range of corporate recovery and insolvency related work and LPA appointment. Highlights for the team include securing the future of the iconic black cab on behalf of Manganese Bronze Holdings and heavy involvement in the restructuring of UK Coal</li>  </ul>  ",GWLG.UK,b2b3de7a-f860-4024-b95f-ea25cf063893;b93c62c6-92d7-4124-9643-a559d656cfdf,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,f5e472a5-d069-4b98-b204-a27ad34f6747;c0791066-b1ca-48e4-be8b-0086d6051b23;e37fc7fb-2cf9-453c-a841-9f228d86f66e,NULL,NULL,{F08710E4-1845-4B15-8141-8AA2021598DC}|{F8D61D25-5BB7-4C74-A7BB-B64DBA6CAEA4}
17,/Services/Banking-Litigation/Canada,en-GB,1FCC8C53-6863-414B-9D5E-F284BCDBAA1C,Canada,Canada,"As the financial industry and regulations become increasingly difficult to navigate, you need a litigation team with sound legal knowledge and a deep understanding of the latest legal developments in order to successfully address your financial disputes.",~/getmedia/e0497b04-1fb3-47f4-82ff-a05bc91d3fec/banking-finance_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p>The complexity and variety of issues facing banks and other financial institutions are considerable. As the financial industry and regulations become increasingly difficult to navigate, you need a litigation team with sound legal knowledge and a deep understanding of the latest legal developments in order to successfully address your financial disputes.</p>    <p>As one of the strongest and most diverse teams of its kind in Canada, the Gowling WLG Banking Litigation Group has a long and distinguished history of successfully litigating cases on behalf of the majority of Canada&#39;s Schedule I banks, as well as Canada&#39;s top corporations and other financial industry participants - from foreign banks, trust companies, and insurance intermediaries to securities dealers, pension funds and government regulators.</p>    <p>Our banking litigation services&nbsp;includes:</p>    <ul>   <li>Retail banking litigation, including <em>Bank Act</em> and Bills of Exchange disputes</li>   <li>Civil fraud remedies and international fraud recovery</li>   <li>Class actions, including employment and credit card matters</li>   <li>Mortgage enforcement</li>   <li>Contractual disputes</li>   <li>Securities litigation, including class actions</li>   <li>Regulatory disputes, including Investment Industry Regulatory Organization of Canada (IIROC) and Fintrac investigations</li>   <li>Broker/dealer liability</li>  </ul>    <h3>An unmatched banking litigation team</h3>    <p>Our group includes practitioners who once served in key government roles, such as senior deputy commissioner of the Competition Bureau; assistant Crown attorney; and former deputy director, chief litigation counsel, prosecutor and litigation specialists to several Branches (Compliance/Registrant Regulation and Corporate Finance) and Units (Insider Trading/Market Manipulation) of the Ontario Securities Commission (OSC).</p>    <p>Our group also includes leading financial regulatory lawyers with experience as staff counsel at the Bank of Canada, and the co-author of <em>The 2015 Annotated Bank Act</em>.</p>    <p>These lawyers have not only developed an in-depth experience with the complex financial rules and regulations that affect your business and industry, but have also developed exceptionally strong relationships with government agencies (e.g., the OSC, OSFI, IIROC, MFDA, Competition Bureau, SEC and AMF) - to the direct benefit of our clients.</p>    <h3>Highly credentialed</h3>    <p>Regularly ranked among the very best litigators in Canada, our banking litigation team is a recognized leader in creatively resolving any dispute that affects our banking clients and other market participants. Our work has been repeatedly recognized by leading legal directories (including <em>Chambers Global</em>, the <em>Canadian Legal Lexpert Directory</em>, <em>The Best Lawyers in Canada</em> and <em>Benchmark Canada</em>) in such areas as Dispute Resolution, Banking &amp; Finance, Corporate and Commercial Litigation, White Collar Crime &amp; Investigations, Securities Law, Employment Law and Class Action Litigation. These rankings speak to our results-focused approach, and our exceptional ability to understand the complex business needs facing your business.</p>    <h3>A collaborative approach</h3>    <p>Our banking litigators work closely with Gowling WLG&#39;s full-service Banking &amp; Finance Group. Whether it be multi-jurisdictional securities class actions, wrongful dismissal claims by departing investment advisers, ensuring compliance with anti-money laundering (AML) regulations, managing international fraud recovery matters or handling high-stakes contractual disputes, our practitioners have served as lead counsel on many of the leading and most recent banking and regulatory cases in Canada.</p>    <p>We work as a team to get you the best results. By way of example, our team recently successfully prosecuted a multi-million dollar claim on behalf of one of Canada&#39;s Schedule 1 banks against several former employees for breach of fiduciary duty and misappropriation of corporate opportunities. In another, our team worked together to successfully defend a series of financial institutions in a $20-million claim which alleged breaches of fiduciary duty in the administration of an estate trust.</p>    <h3>Key industry roles</h3>    <p>Our team members occupy key leadership positions in the regulatory and compliance industry, such as the OSC&#39;s Securities Advisory Committee, the Association sur l&#39;accès et la protection de l&#39;information, and the Institute of Corporate Directors.</p>    <p>We&#39;re also frequently called on to lecture on compliance matters at leading industry conferences and universities, including the IIROC-CLS Compliance Conference. These key positions allow our practitioners to keep on top of the latest litigation trends in the financial industry to serve you better.</p>    <h3>Enhanced value and results</h3>    <p>In working with us, you&#39;ll also benefit from Practical LPM&trade;, our in-house legal project management platform. By seamlessly managing the scope, costs, tasks and resources associated with your file, we help keep your legal matter on track, on time and on budget. We also reduce costs and ensure efficiency through the use of Go.Plead&trade;, a legal research and precedents tool built and maintained by our team.</p>    <p>To learn more about how we can help you, <a href=""~/en/people/?page=1&amp;services=275&amp;locations=GWLG.Canada"" target=""_blank"">please contact any member of our team</a>.</p>  ",GWLG.Canada,0dea1395-883b-4534-a606-1a943c240748,4E4B575A-899D-4F37-8949-57BBC621534A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C91BBD3A-7B3F-4EC3-80C2-0CDDBD90686A}
18,/Services/Canada-s-Anti-Spam-Legislation-CASL/Canada,en-GB,395ED3A6-0771-4F74-A0FE-84C99EAAD578,Canada,Canada,"With Canada's Anti-Spam Legislation (CASL) now in effect, businesses and organizations are no longer able to send ""commercial electronic messages"" through email, text messaging or social networks without first obtaining the recipient's express or implied consent.",NULL,NULL,"<p>With Canada&#39;s Anti-Spam Legislation (CASL) now in effect, businesses and organizations are no longer able to send &quot;commercial electronic messages&quot; through email, text messaging or social networks without first obtaining the recipient&#39;s express or implied consent.</p>    <p>The penalties for non-compliance are severe, with fines of up to $10 million, as well as the potential for private actions for damages and even class action suits.</p>    <p>What exactly is a commercial electronic message? How do you determine express or implied consent? And what does all of this mean for you and your business?</p>    <p>At Gowling WLG, our dedicated legal professionals are here to answer your questions and ensure your organization is fully <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>-compliant.</p>    <p>Gowling WLG is home to some of Canada&#39;s top advertising and marketing, privacy, and technology lawyers. To date, we&#39;ve advised a wide range of Canadian, U.S. and multinational businesses on their <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>-readiness strategies. Our team can help you:</p>    <ul>   <li>Audit your current approach to commercial electronic messages (CEMs) and managing recipient consents</li>   <li>Develop policies and plans to ensure your organization is <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>-compliant</li>   <li>Identify <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr> exceptions and implied consent scenarios that may apply to your organization</li>   <li>Implement <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr> best practices, including building &quot;data buckets&quot; to manage recipient consents, and establishing information support mechanisms for unsubscribing and preference management</li>   <li>Plan and implement staff training to ensure your organization understands and complies with <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr></li>  </ul>    <h3><abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr> resources</h3>    <p><a href=""~/en/insights-resources/articles/2014/preparing-your-organization-for-casl-s-commercial/"">Preparing Your Organization for <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>&#39;s Commercial Electronic Message Requirements</a>: This article summarizes the critical steps that organizations need to take in order to be <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>-ready.</p>    <p><a href=""~/getmedia/a71585ee-c0b9-4ab8-9abe-c564318c5fe8/Canada_Anti-Spam_Law_Commercial_Electronic_Message-Process_Chart.pdf.xml"" target=""_blank""><abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr> Compliance Flow Chart</a>: Not sure if your email practices are <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>-compliant? This helpful chart outlines seven questions that every organization needs to ask before hitting &quot;send&quot;.</p>    <p><a href=""http://www.crtc.gc.ca/eng/casl-lcap.htm"" target=""_blank"">CRTC.gc.ca</a>: The Canadian Radio-television and Telecommunications Commission website offers useful infographics, videos, and information bulletins to help you better understand how <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr> affects your business.</p>    <p><a href=""http://fightspam.gc.ca/eic/site/030.nsf/eng/home"" target=""_blank"">FightSpam.gc.ca</a>: The Government of Canada&#39;s official <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr> website hosts a wealth of resources, including compliance best practices, and a <a href=""https://www.fightspam.gc.ca/eic/site/030.nsf/eng/00020.html"" target=""_blank"">glossary of terms</a> used in the legislation.</p>    <h3>Learn more</h3>    <p>We want to help you succeed. To learn more about our <abbr title=""Canada's Anti-Spam Legislation"">CASL</abbr>-related services, please <a href=""~/en/people/?page=1&amp;services=276&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,d4e1433a-2b32-4fdc-92a9-146bcee11f6c;afc382e9-2b75-4a26-9e20-0a8c68694164,1B69248B-14A3-47AB-9722-C8685533F4B4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A0321263-4695-4FC7-9C87-E35959612009}|{5AFA17F4-B29F-4E20-A9C6-AFD5CDAE180D}
19,/Services/Capital-Markets/Canada,en-GB,30F453BB-67DA-418D-8A5F-6CB06C85ECD2,Canada,Canada,"Whether you're obtaining or maintaining your listing, looking for financing or providing it, you need legal advice you can rely on from seasoned lawyers who've been through the process and know how to make it work.",NULL,NULL,"<p>Whether you&#39;re obtaining or maintaining your listing, looking for financing or providing it, you need legal advice you can rely on from seasoned lawyers who&#39;ve been through the process and know how to make it work.</p>    <p>At Gowling WLG, we have vast experience in fundraising ventures and acting for capital markets participants in Canada and around the world, and take great pride in what we help our clients achieve.</p>    <p>We know that your business is unique, and we take the time to fully understand your objectives. We also know that cost control, increased predictability and risk avoidance are critical to success. That&#39;s why we apply a budget-conscious approach to your deals by implementing efficient fee arrangements, offering optimized rates and anticipating risks and costs to ensure you get the most value from your legal spend.</p>    <p>We also offer customised tools to support your success. This includes applying our innovative project management approach, Practical LPM&trade;, to seamlessly manage the scope, costs, tasks and resources associated with your file to help keep your matter on track, on time and on budget.</p>    <p>Our capital markets services include practical, strategic legal advice on:</p>    <ul>   <li>Debt and equity transactions</li>   <li>Public offerings, including bought deals and secondary offerings</li>   <li>Other corporate finance transactions, including private placements, alternative financings and cross-border financings</li>   <li>Stock exchange listings, including dual-listings with foreign exchanges</li>   <li>Creation of capital pool companies (CPCs) and related qualifying transactions</li>   <li>Capital restructurings</li>   <li>Due diligence</li>   <li>Representation before securities regulators and stock exchanges</li>   <li>Stakeholder activism</li>  </ul>    <p>We counsel publicly traded and private companies, including their boards and special committees, investors, financial advisers, agents and underwriters.</p>    <p>We provide advice on compliance with securities regulatory and stock exchange requirements, and will proactively inform you of emerging trends in disclosure obligations, corporate governance and directors&#39; duties. We&#39;re on top of - and heavily involved in - capital markets regulatory developments in Canada.</p>    <p>Our team is particularly noted for its extensive international experience, having handled financing transactions on behalf of companies operating in numerous jurisdictions across Europe, Asia, the Americas, Africa and Australasia.</p>    <h3>Learn more</h3>    <p>In working with us, you&#39;ll receive personalized service from a team of leading professionals with a genuine interest in your business and its success. Please get in touch with any member of our group to find out how we can help you. You can also stay up to date on the latest legal developments in capital markets by subscribing to our free MarketCaps newsletter. <a href=""~/en/footer/updates/"">Subscribe to our updates</a>.</p>  ",GWLG.Canada,ede5ead0-1723-4206-be45-ecf0ae1db2b4;f52c18f0-f75d-443c-8edf-8eb8851b7f75;2e743440-df8d-4a5d-b652-cdbce8339713,60BB1A30-82DE-4038-AA38-9B01A87215C6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,306b51a3-d1c2-467b-8f45-4c430a1985ca;6ea6e24d-cd0f-4e33-b31a-caad1ff80a9f;34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a,NULL,NULL,{B5E267BD-BE24-4B07-8FF0-671F41E111EC}|{ECC027C9-82CC-4859-86C2-D05976465855}|{54EE1783-466C-4967-9D10-3C2561C2447D}
20,/Services/Capital-Markets/Overview,en-GB,C243B49C-BEAC-46FC-8F4D-E7DA06E38973,Overview,Overview,"International capital markets law firm with an established track record advising issuers and their sponsors, financial advisers, nominated advisers and brokers.",NULL,NULL,"<p>From obtaining or maintaining your listing to seeking or providing financing, you need advice you can rely on from seasoned lawyers who&#39;ve been through the process and know how to make it work.</p>    <p>At Gowling WLG, we have vast experience in fundraising ventures and acting for capital markets participants, and take great pride in what we help our clients achieve.</p>    <p>Recognised as one of the most active and successful in equity raisings and stock exchange listings, we know that your business is unique - which is why we take the time to fully understand your objectives. We also know that cost control, increased predictability and risk avoidance are critical to your success.</p>    <p>That&#39;s why we apply a budget-conscious approach to your deals by implementing efficient fee arrangements, offering optimised rates and anticipating risks and costs to ensure you get the most value from your legal spend.</p>    <p>We also offer customised tools to support your success. This includes applying our innovative project management approach, <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"">Practical LPM</a>&trade;, to seamlessly manage the scope, costs, tasks and resources associated with your file to help keep your legal matter on track, on time and on budget.</p>    <p>Our services include strategic legal advice on:</p>    <ul>   <li>Debt and equity transactions</li>   <li>Corporate finance transactions, including private placements, public offerings, bought deals, alternative financings and cross-border financings</li>   <li>Stock exchange listings, including dual-listings with foreign exchanges</li>   <li>Capital restructurings</li>   <li>Global deposit receipt (GDR) programmes</li>   <li>Due diligence</li>   <li>Representation before securities regulators and stock exchanges</li>   <li>Stakeholder activism</li>  </ul>    <p>We counsel publicly traded and private companies, including their boards and special committees, investors, financial advisers, agents and underwriters. We provide advice on compliance with securities regulatory and stock exchange requirements. We will proactively inform you of emerging trends in disclosure obligations, corporate governance and directors&#39; duties.</p>    <p>Our team also advises general partners, fund sponsors, fund investors, pension funds and other pools of capital on all aspects of the establishment and restructuring of investments into various types of funds.</p>    <p>We&#39;re particularly noted for our extensive international experience, having handled financing transactions on behalf of companies operating in numerous jurisdictions across Europe, Asia, the Americas, Africa and Australasia.</p>    <p>In working with Gowling WLG, you&#39;ll receive personalised service from leading capital markets professionals who have a genuine interest in your business and its success. Please get in touch with any member of our group to find out how we can help you.</p>  ",GWLG.Global,6535cd7a-0e8e-447a-bc96-cec1df267dfe;ede5ead0-1723-4206-be45-ecf0ae1db2b4;2377a67c-1e57-4514-9b6e-aee6bfab3640,60BB1A30-82DE-4038-AA38-9B01A87215C6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,534b988b-50d8-4f76-b8eb-78e06461bb3a;34e72ec6-f31b-4dc7-9739-743b455f36a1;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{B5E267BD-BE24-4B07-8FF0-671F41E111EC}|{571BDAE6-EC43-4509-9FD5-1D14CED8B0FC}
21,/Services/Charities-Not-for-Profits/Canada,en-GB,0F5BB002-7069-42F0-8BCF-02FEAFF89509,Canada,Canada,Gowling WLG understands the many challenges and needs of charities and not-for-profit organizations. Our strategic thinking and creative problem-solving is what attracts clients to our Charities & Not-for-profits Group.,NULL,NULL,"<p>Gowling WLG understands the many challenges and needs of charities and not-for-profit organizations. Our strategic thinking and creative problem-solving is what attracts clients to our Charities &amp; Not-for-profits Group.</p>    <p>Our expertise is based on our clients&#39; broad interests and activities, including health care, international development, social services, environmental protection, arts and culture, education and religion.</p>    <p>We offer a wealth of experience and work with many different types of not-for-profit organizations, including charities, foreign entities, community groups, governmental and quasi-governmental entities, service clubs, religious organizations, trade organizations, recreational clubs, those engaged in joint ventures with businesses and other not-for-profits, and many special interest groups.</p>    <p>We provide a broad range of services to charities and other not-for-profits in all areas of law, including taxation, intellectual property, corporate and commercial, litigation, real estate, employment and public policy matters. These services include:</p>    <ul>   <li>Incorporation and charitable registration applications</li>   <li>Structural issues for international organizations and national organizations with provincial and local branches</li>   <li>Tax advice on the aspects and advantages of setting up charitable foundations</li>   <li>Structuring governance solutions for complex charitable and not-for-profit situations</li>   <li>Planned giving, endowments, fundraising, charitable gaming and sponsorships</li>   <li>Risk management, asset protection and insurance issues</li>   <li>Governance, conflict of interest, ethics, and officer and director liability issues</li>   <li>Sponsorship, borrowing, financing, funding, licensing and other agreements</li>   <li>Advice to Canadian charities operating abroad</li>   <li>Advice to foreign charities operating in Canada</li>  </ul>    <p>We deliver timely, effective advice and representation to directors, trustees, officers, and all levels of management. We also offer on-going training to board members, senior managers and the staff of charities and not-for-profit organizations on their public-policy advocacy efforts and related strategic communications.</p>    <p>In addition, many Gowling WLG professionals actively volunteer and are involved in community organizations and charities as senior advisers and directors. These experiences greatly enhance our individual and collective expertise.</p>    <h3>Learn more</h3>    <p>Ultimately, our success is measured by delivering solutions that exceed our clients&#39; expectations. To learn more about our services, please <a href=""~/en/people/?page=1&amp;services=278&amp;locations=GWLG.Canada"" target=""_blank"">contact a member of our team</a>.</p>  ",GWLG.Canada,5a819d5f-4c09-4d15-b4e8-79f4aafbed10;159cc9f9-3c5b-460e-930b-1abbec4ed250;26636c15-ccf3-408d-b5c5-8b4bdf04b2c8,8275EC85-9F76-4C4F-8774-D44AD01F4531,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{D901EEB1-C001-4692-934C-9A899B134FB8}|{CD875495-DB4D-4891-892D-24115E43DBE5}|{BEF2CA66-B4D2-47F5-88B4-EF03E76E55E0}
22,/Services/Chemicals/Canada,en-GB,73FF5E62-A285-4710-8831-78F74CB8067B,Canada,Canada,"With increasing demands being placed on our environment, businesses need to be aware of chemical laws and regulations surrounding the import or manufacture of various substances and their effect on people and the planet. Products must comply with a host of regulations and issues.",NULL,NULL,"<p>With increasing demands being placed on our environment, businesses need to be aware of chemical laws and regulations surrounding the import or manufacture of various substances and their effect on people and the planet. Products must comply with a host of regulations and issues, including environmental impact and end of life cycle disposal.</p>    <p>Gowling WLG has one of the strongest environmental regulatory practices in Canada. Time and time again, our professionals have been internationally recognized for their specialist knowledge in environmental law - an edge gained through a commitment to providing the highest level of regulatory, environmental and advertising service to our clients.</p>    <p>Our Chemicals Group is made up of a dedicated team of experts in offices across Canada. Through its broad-reaching and locally focused, interdisciplinary approach, our firm endeavours to help clients negotiate the complex terrain of regulations in a strategic and cost-effective manner.</p>    <p>We work with companies of all sizes, guiding them through the necessary steps to comply with regulatory frameworks for products in many industries, such as chemicals, consumer products, cosmetics, pharmaceuticals, food, pest control and fertilizer. We act for chemical and product manufacturers, importers, carriers and users of chemicals on provincial and federal regulatory matters.</p>    <p>{^widget|(headingtext)Highlights+in+Canada|(name)GWLG.Widgets.FAQList|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fChemicals%2f%2525|(widget_displayname)FAQ+List|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(width)|(height)^}</p>    <p>Our advice spans all levels of the product commercialization cycle, including:</p>    <ul>   <li>Manufacturing, registering, importing, packaging, labelling, use and disposal of food and chemical substances</li>   <li>Managing product licence submissions with Health Canada and/or Environment Canada</li>   <li>Post-licensing issues, including enforcement</li>   <li>Product classification</li>   <li>Reporting and record-keeping obligations</li>   <li>Risk assessment</li>   <li>Substance registration</li>  </ul>    <p>In particular, as part of the product review process for drugs and natural health products, we examine individual product ingredients (medicinal and non-medicinal) to determine whether there are any overt regulatory matters specific to those ingredients.</p>    <h3>Learn more</h3>    <p>To learn more about how our Chemicals Group can help you succeed, please contact a member of our team.</p>  ",GWLG.Canada,a7981dca-18b5-4064-b9ea-340d3fba1862,1E77F0A5-009E-4B72-A836-9C12A665A930,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}
23,/Services/Class-Actions/Canada,en-GB,CF0C930A-C003-473B-A4C8-D1394B4B8DA7,Canada,Canada,"Gowling WLG is a leader in class action defence litigation. Top-ranked by Chambers Global, The Best Lawyers in Canada, Lexpert, Benchmark Canada and other prestigious directories, our lawyers excel at obtaining the best results in challenging situations.",NULL,NULL,"<p>Gowling WLG is a leader in class action defence litigation. Top-ranked by <em>Chambers Global</em>, <em>The Best Lawyers in Canada</em>, <em>Lexpert</em>, <em>Benchmark Canada </em>and other prestigious directories, our lawyers excel at obtaining the best results in challenging situations.</p>    <p>Our lawyers have defended over 100 class actions in jurisdictions across Canada. As experienced trial lawyers, we hold strong expertise in a wide range of fields, including:</p>    <ul>   <li>Securities law</li>   <li>Competition law</li>   <li>Environmental law</li>   <li>Product liability law</li>   <li>Consumer protection law</li>   <li>Banking litigation</li>   <li>Cyber / Data breach and privacy</li>   <li>Employment law /&nbsp;Worker classification</li>  </ul>    <h3>A proven record of success</h3>    <p>Defending a class action doesn&#39;t need to be costly, distracting to your business or damaging to your reputation. Our class action lawyers have defended the highest-risk cases in the country and achieved outstanding results. We&#39;ve had tremendous success in defeating certification, obtaining summary dismissal of claims and - when preferred by our clients - expeditiously settling cases on very favourable terms.</p>    <h3>A collaborative approach</h3>    <p>In partnership with you, we develop our defence strategy based on a careful and strategic assessment of your business objectives, the facts and the defences available to you. We ensure that you understand the key issues in the lawsuit, and the risks and opportunities associated with different defence strategies. Whether through aggressive litigation or skilled negotiation, you&#39;ll receive the best defence, the best service and the best outcome.</p>    <h3>Seamless, Canada-wide support</h3>    <p>With top-tier class action lawyers in every key class action jurisdiction in Canada, we offer seamless cross-country co-ordination of multi-provincial matters. We also work seamlessly with lawyers in other countries - including our Gowling WLG colleagues in offices in the U.K., Europe, Asia and the Middle East - to ensure that strategies are integrated and duplication is avoided.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you, please <a href=""~/en/people/?page=1&amp;services=280&amp;locations=GWLG.Canada"" target=""_blank"">contact a member of our team</a>.</p>  ",GWLG.Canada,034fb16f-8b22-4291-afcd-7aaecfa025d5,7C3910A6-FC85-49D7-A166-419893444FDC,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
25,/Services/Combined-Human-Resources-Solutions/UK,en-GB,662338DF-F56B-456D-A9B0-0CC85AB59386,UK,UK,"The range of issues facing today's pensions and human resource professionals is daunting. Many problems involve two or more specialist areas such as employment, pensions, benefits and tax.",NULL,NULL,"<p>The range of issues facing today&#39;s pensions and human resource professionals is daunting. Many problems involve two or more specialist areas such as employment, pensions, benefits and tax.</p>    <p>In such a time pressured and business critical field, clients need clear answers in plain English, delivered on time and within budget.</p>    <p>We have addressed this need with its innovative combined human resources solutions (CHRS) team which provides specialist advice on both employment and pension law - and the increasingly important and sometimes challenging crossover between the two - <abbr title=""human resources"">HR</abbr> Law.</p>    <p>The only one of its kind in the UK, our expert practice of eight lawyers, led by partner Richard Lee and director Liz Wood, ensures clients - such as HRDs, FDs and pension managers - have the comprehensive and clear advice they need to develop and maintain a successful and motivated workforce within the business.</p>    <p>Experienced and capable in delivering high-end strategic advice, large-scale <abbr title=""human resources"">HR</abbr> projects or day-to-day operational guidance, <abbr title=""combined human resources solutions"">CHRS</abbr> lawyers meet clients&#39; <abbr title=""human resources"">HR</abbr> legal needs in the most cost-effective and pragmatic way.</p>    <p>This is why increasing numbers of FTSE companies, private and public sector organisations, including W M Morrisons Supermarkets, Sanctuary Housing Association, Royal London, Cemex UK, AS Watson, Thorntons and Interserve have chosen <abbr title=""combined human resources solutions"">CHRS</abbr> as their trusted adviser for <abbr title=""human resources"">HR</abbr>legal matters.</p>    <p>The <abbr title=""combined human resources solutions"">CHRS</abbr> team can help you to:</p>    <ul>   <li>use our ALL ABOUT AGE initiative for &quot;cradle to grave&quot; workplace advice</li>   <li>make changes to benefits and pension arrangements in a commercial and pragmatic way</li>   <li>manage all things TUPE, including pensions</li>   <li>make sure you&#39;re compliant with auto-enrolment duties - we&#39;re experts in <a href=""~/en/services/workplace-pension-reform/#uk"">workplace pension reform</a></li>   <li>communicate workforce changes clearly and effectively, minimising the risk of successful challenge</li>   <li>get to grips with the new flexibilities of defined contribution (money purchase) pension schemes</li>   <li>maximise the value of your business through effective people &amp; reward solutions</li>   <li>handle and deliver a wide range of <abbr title=""human resources"">HR</abbr> projects, including salary sacrifice, flexible benefits, multi-million pound pension re-structuring projects, succession planning, absence management and ill-health pensions</li>  </ul>    <h3>Why <abbr title=""combined human resources solutions"">CHRS</abbr>?</h3>    <p>An ever-expanding area of law links pensions, employment and benefits. This is the future of <abbr title=""human resources"">HR</abbr> legal services as businesses work with advisers who can cover on all aspects of <abbr title=""human resources"">HR</abbr> law. Our unique specialism in this area gives clients all of their <abbr title=""human resources"">HR</abbr> Law through a single adviser.</p>    <p>Our wide experience and depth of know how ensures that whatever the <abbr title=""human resources"">HR</abbr> challenge, we are on hand to help. Because we are <abbr title=""human resources"">HR</abbr> Lawyers skilled in pensions and employment law, you and your organisation will benefit from pragmatic and commercial solutions delivered on time and on budget, leaving you free to focus on managing your business and its employees.</p>    <h3>Giving clients a competitive edge</h3>    <ul>   <li>Working alongside all of the major <abbr title=""human resources"">HR</abbr> and pensions/benefits consultants, we are at the forefront of developments in the <abbr title=""human resources"">HR</abbr> legal arena.</li>   <li>We help clients retain their competitive advantage by bringing them the latest developments in <abbr title=""human resources"">HR</abbr> Law through regular legal updates and webinars.</li>   <li>For example, we&#39;ve been busy advising on the new flexible working rights and older workers; all of the new workplace saving flexibilities coming out of the March 2014 budget and we are running a series of webinars: ALL ABOUT AGE which cover the &#39;cradle to grave&#39; of workplace advice.</li>  </ul>    <h3>How to handle auto-enrolment</h3>    <p>We&#39;ve been the legal advisers of choice for many businesses needing to successfully comply with their automatic-enrolment duties, ranging from some of the largest retailers in the UK to international airlines and industry leading master trust providers.</p>    <p>Our team worked with the <abbr title=""human resources"">HR</abbr>, pensions and payroll teams at WM Morrisons Supermarkets plc to ensure the successful on-time introduction of a new auto-enrolment compliant cash balance scheme for 130,000 employees. This involved a new pension scheme being set up, along with a ground-breaking communication exercise encouraging the workforce to understand more about financial planning and saving for retirement. Team experience, including a secondment at the DWP, gave the client clear advice as the legislation was unfolding.</p>    <h3>Experience</h3>    <h3>Successfully launching <abbr title=""National Employment Savings Trust"">NEST</abbr>&#39;s customer website</h3>    <p>The <abbr title=""combined human resources solutions"">CHRS</abbr> team were also the lead pensions advisors to the National Employment Savings Trust (NEST) as it established and developed a scheme that now boasts over a million members. <abbr title=""combined human resources solutions"">CHRS</abbr> lawyers responded flexibly to the client&#39;s demands, providing on-site boosts to the organisation&#39;s legal capability and helping to ensure a successful on-time launch.</p>    <p>As part of this, <abbr title=""combined human resources solutions"">CHRS</abbr> lawyers were on hand to ensure the successful launch of <abbr title=""National Employment Savings Trust"">NEST</abbr>&#39;s member, employer and advisor transactional websites. The team provided support for the website project as well as providing a wide range of additional pensions advice, supplementing the in-house resource at a crucial time in <abbr title=""National Employment Savings Trust"">NEST</abbr>&#39;s development.</p>    <h3>Defined benefit projects</h3>    <p>The team has advised numerous clients on all aspects of defined benefit pension projects, including cessation of benefit accrual, moving to CARE, capping pensionable salary, employment contract reviews, workforce consultation issues, trustee negotiation/liaison and member communication review.</p>    <p>Cessation of accrual and the switch from defined benefit to defined contribution pension provision can be one of the most emotive issues to face employers. Recent case law has focused attention on the risks of mismanaging this process.</p>    <p><abbr title=""combined human resources solutions"">CHRS</abbr> lawyers have advised on numerous closure and cessation of accrual projects in both the public and private sector, ensuring employers comply with their employment and pensions obligations, communicate effectively with employees whilst meeting statutory consultation requirements and handling negotiations with trustees.</p>  ",GWLG.UK,NULL,3910CB3C-C235-4246-A8D7-A8E9155B8A4E,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
26,/Services/Commercial/Overview,en-GB,38F5D749-4F02-4691-92BF-E1387E600E39,Overview,Overview,Commercial agreements are essential to all businesses to capture value and manage risk. Getting commercial contracts right helps our clients to create and run efficient and profitable enterprises.,NULL,NULL,"<p>Commercial agreements are essential to all businesses to capture value and manage risk. Getting commercial contracts right helps our clients to create and run efficient and profitable enterprises.</p>    <p>The Gowling WLG team appreciates that clients are looking for pragmatic legal advice which helps secure and maximise the right opportunities. Our lawyers are equally at home advising on complex, high value, multi-jurisdictional projects or managing high-volume day-to-day contracting requirements.</p>    <p>We bring together experts from different practice areas and multiple jurisdictions to ensure your agreements work everywhere you do business. Our advice is strengthened through our specific expertise in key industry sectors, such as life sciences, real estate, retail, financial services, food and beverage, automotive, IT, telecom, defence, health, government projects, aviation and travel.</p>    <p>Our international client list includes leading global consumer goods brands, industrial manufacturers and supply chains, government departments and other crown/public bodies, and major financial institutions.</p>    <p>From local startups to high-profile global powerhouses, we draft and negotiate commercial agreements, whether they relate to routes to market or procurement and supply chain. We&#39;re also ahead of the game when it comes to IT and technology, and have market leading expertise in issues such as cloud computing, data protection and security, and Safe Harbor.</p>    <p>Other services include:</p>    <ul>   <li>Business process outsourcing</li>   <li>Consumer and travel law</li>   <li>Data protection and Safe Harbor</li>   <li>Distribution and agency agreements</li>   <li>E-commerce</li>   <li>Franchise agreements</li>   <li>IT development, software licensing and outsourcing</li>   <li>Logistics</li>   <li>Manufacturing</li>   <li>Merchandising</li>   <li>Telecom agreements</li>   <li>Procurement</li>   <li>Property and facilities management</li>   <li>Sales and marketing</li>   <li>Sponsorship</li>  </ul>    <p>You&#39;ll find us to be creative problem solvers focused on delivering solutions. By bringing together our experience and technical expertise, we deliver advice that maximises your opportunities and position.</p>    <p>Let Gowling WLG take care of all your commercial contract needs. Please contact us to learn more.</p>  ",GWLG.Global,ad056fcd-7211-4da7-a9e2-30612d332954;2377a67c-1e57-4514-9b6e-aee6bfab3640,549CBE28-F188-44CD-85C0-0F4E23A23817,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,534b988b-50d8-4f76-b8eb-78e06461bb3a;34e72ec6-f31b-4dc7-9739-743b455f36a1;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|{571BDAE6-EC43-4509-9FD5-1D14CED8B0FC}
27,/Services/Commercial/UK,en-GB,5BBE3255-6766-4417-9251-F0F2082C9B5E,UK,UK,"The best possible deal, delivered on time by lawyers who understand you, your business and your sector. That is what you'll receive from our commercial team.",NULL,NULL,"<p>The best possible deal, delivered on time by lawyers who understand you, your business and your sector. That is what you&#39;ll receive from our commercial team.</p>    <p>The firm &quot;treats this area as a standalone specialism&quot; and &quot;punches well above its weight&quot; with &quot;proven abilities in handling large and complex mandates&quot; (Legal 500).</p>    <p>In-house legal teams can outsource commercial contracts of all sizes, description and complexity to our expert team, which has worked with the likes of Marks and Spencer, AstraZeneca and Premier Foods on meeting and exceeding compliance standards.</p>    <p>What you can expect from one of the UK&#39;s largest dedicated commercial teams of more than 30 lawyers:</p>    <ul>   <li><strong>Breadth of capability</strong> - from high volume routine contracts, such as more than 100 contracts for Marks and Spencer, to the most complex, such as advising CBRE on Europe&#39;s largest property management requirement for PRUPIM with 1300 properties</li>   <li><strong>Sector experience</strong> - established track-record in food and drink, life sciences, real estate, retail, financial services, automotive, IT, aviation and travel industries</li>   <li><strong>Keen and confident</strong> - a natural ability to put ourselves in our clients&#39; shoes and become an extension of the in-house legal team. Positive client feedback secured David Lowe a win as UK Projects and Procurement lawyer of the year 2013 International Law Office Client Choice Awards</li>  </ul>    <p>The team works closely with colleagues in real estate, corporate, employment and insurance. Public procurement experts also provide valuable insight into contracting with private sector.</p>  ",GWLG.UK,ad056fcd-7211-4da7-a9e2-30612d332954,549CBE28-F188-44CD-85C0-0F4E23A23817,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d;40c2df88-693d-451b-8633-8eee3c76676f,NULL,NULL,{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}
28,/Services/Commercial-Leasing/Canada,en-GB,ED473B7C-7160-40ED-BA1F-AC5D3F30EDE4,Canada,Canada,Commercial leasing is a unique aspect of real estate and commercial law that requires specialized knowledge and skills. Gowling WLG's Commercial Leasing Group comprises some of Canada's leading lawyers with proven expertise in this multifaceted field.,NULL,NULL,"<p>Committed to delivering practical and timely results, the Gowling WLG team provides clients with cost-effective advice, innovative solutions and responsive documentation for both simple and complex transactions.</p>    <p>Our group offers a full range of commercial leasing services, including preparing the RFP, negotiating the offer and related leasing documents, and advising on the orderly turnover at the end of the term. We advise and represent landlords and tenants on a local and national scale on issues unique to the sector, such as:</p>    <ul>   <li>Cost recovery and realty tax allocations and reporting obligations</li>   <li>Selecting and applying measurement standards to achieve financial objectives</li>   <li>Best practices for securing covenants</li>   <li>Risk allocation and insurance matters</li>   <li>Restoration obligations at lease conclusion</li>   <li>Environmental due diligence</li>   <li>Telecommunication integration</li>   <li>Operating covenants and radius restrictions</li>   <li>Leasing of First Nations lands</li>  </ul>    <p>As part of a global, full-service law firm with offices in Toronto, Montreal, Ottawa, Calgary, Vancouver, Hamilton and Waterloo Region, members of the Commercial Leasing Group have access to over 1,500 legal professionals across Canada and in the U.K., Europe, Asia and the Middle East who practice in a variety of related areas, including litigation and dispute resolution; municipal law; real estate and urban development; corporate and business law; government relations and regulatory affairs; income, commodity and real estate taxation; energy and infrastructure; trademarks and information technology; franchising and licensing; insolvency; and construction and engineering.</p>    <h3>Learn more</h3>    <p>To learn how about how we can help you succeed in the area of commercial leasing, please <a href=""~/en/people/?page=1&amp;services=282&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,6a16b886-f67c-4bbd-ba9c-7c006c5f32bc,894FAB50-B948-4D2F-A516-86150D34DE04,NULL,0,1,t-white,<p>Commercial leasing is a unique aspect of real estate and commercial law that requires specialized knowledge and skills. Gowling WLG&#39;s Commercial Leasing Group comprises some of Canada&#39;s leading lawyers with proven expertise in this multifaceted field.</p>  ,Featured Insights,ba83be04-1cec-4fe3-b9d8-b5e45e1673f2;e13ede6a-6c6e-4d2b-bbf7-a6c1026eb48f;a44ded2c-f4b7-4d13-8faa-4eccf56b138f;997432da-4893-46af-9cc9-4dae43958cc8,View all Commercial Leasing articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=282,NULL,{C30B0D56-218E-4FDE-9953-A6B47C5E512C}
29,/Services/Commercial-Litigation/Overview,en-GB,14F02383-1C50-4766-A0DF-47B72C78D0CA,Overview,Overview,"Gowling WLG can get to the heart of any commercial dispute and provide you with the best possible outcome. We frequently handle challenging, high-profile litigation matters, and know what it takes to get you the result you need.",NULL,NULL,"<p>Gowling WLG can get to the heart of any commercial dispute and provide you with the best possible outcome. We frequently handle challenging, high-profile litigation matters, and know what it takes to get you the result you need.</p>    <p>Our approach is strategic: we&#39;ll understand your commercial objectives, assess your strengths and weaknesses, and explore the pathways open to you - from mediation and alternative dispute resolution (ADR) to a day in court.</p>    <p>At all times, we aim to minimise disruption to your business, maintain important relationships and protect your reputation.</p>    <p>To learn more about our commercial litigation expertise, please contact us.</p>  ",GWLG.Global,90573229-adbc-497c-9e6e-7ee61952f25b;034fb16f-8b22-4291-afcd-7aaecfa025d5,C774BE76-80EC-4195-83A3-5850B5E2A4A2,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,534b988b-50d8-4f76-b8eb-78e06461bb3a;34e72ec6-f31b-4dc7-9739-743b455f36a1;8d059378-6b75-4105-b57d-3bafa12bb15d;40c2df88-693d-451b-8633-8eee3c76676f,NULL,NULL,{DB180194-4B02-46F8-A0CE-0DFB051009EE}|{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
30,/Services/Commercial-Litigation/Canada,en-GB,A061EA5E-8D07-40DC-8BF5-4118D03764FB,Canada,Canada,"Ranked among the strongest litigation teams in Canada, the Gowling WLG Commercial Litigation Group can get to the heart of your legal issue to resolve your commercial dispute, be it large or small, and help you get back to business.",NULL,NULL,"<p>Ranked among the strongest litigation teams in Canada, the Gowling WLG Commercial Litigation Group can get to the heart of your legal issue to resolve your commercial dispute, be it large or small, and help you get back to business.</p>    <p>As longstanding legal advisers to corporate Canada - from public and private companies to startups, national corporations and other market participants -&nbsp;we&#39;ve handled some of the most challenging, high-profile litigation files in recent years and know what it takes to get you the best result.</p>    <p>Our expertise covers a full range of corporate and commercial disputes, including:</p>    <ul>   <li>Banking litigation</li>   <li>Bankruptcy and insolvency</li>   <li>Breach&nbsp;of contract</li>   <li>Class actions</li>   <li>Construction liens</li>   <li>Crisis and risk management</li>   <li>Derivatives litigation</li>   <li>Insurance and professional liability</li>   <li>International arbitration</li>   <li>Internal investigations</li>   <li>Medical defence and health law</li>   <li>Negligence</li>   <li>Partnership disputes</li>   <li>Product liability</li>   <li>Securities litigation</li>   <li>Shareholder disputes and oppression</li>  </ul>    <p>Practical, responsive and cost-efficient, we&#39;ll partner with you to develop and execute an effective litigation strategy that results in the best possible outcome for your business.</p>    <h3>A strong, diverse legal team</h3>    <p>By choosing Gowling WLG, you&#39;ll benefit from the top-tier litigation skills of our lawyers, who are repeatedly recognized in prestigious legal directories such as <em>Chambers Global</em>, <em>Lexpert</em>, <em>The Best Lawyers in Canada</em> and <em>Benchmark Canada</em>. Working seamlessly with you from seven offices across Canada, as well as in the U.K., Europe, Asia and the Middle East, our leading litigators are equipped to assemble the right resources to address your commercial disputes - no matter where they may arise.</p>    <h3>Results-focused</h3>    <p>Committed to formulating litigation strategies that are closely aligned with your commercial objectives, we work with you to gain an in-depth understanding of the key issues, goals, risks and opportunities surrounding your business. Through a negotiated settlement, alternative dispute resolution (ADR) or the courtroom, we&#39;ll work with you to achieve the best possible results that meet your business needs.</p>    <h3>Key commercial leadership roles</h3>    <p>Our team is on the cutting edge of the industry, and works hard to keep on top of leading trends and developments in the corporate world to serve you better.</p>    <p>We hold key leadership positions within respected industry organizations (such as the Institute of Corporate Directors, the Professional Liability Underwriters&#39; Society, the Human Resources Professionals Association, the Construction Specifications Canada and The Empire Club of Canada), commercial litigation committees (for example, the Ontario Civil Rules Committee), professional organizations (such as the American Bar Association&#39;s Securities Litigation Committee and the International Bar Association&#39;s Media Law Committee).</p>    <p>We&#39;ve also authored leading texts on commercial litigation matters (e.g., <em>Class Actions: Law and Practice The Paperless Trials Manual</em>).</p>    <h3>Expertise in complex litigation and international disputes</h3>    <p>Whether your issue involves a multijurisdictional class action, bet-the-company litigation, forensic internal investigation or a product liability case, Gowling WLG can provide strategic counsel on any high-stakes commercial matter - both in Canada and internationally. Regardless of the scale or complexity of the dispute, we offer smart, creative solutions that are always tailored to your unique needs.</p>    <h3>Extensive crisis and risk management expertise</h3>    <p>With expert knowledge of the legal, business, employment, reputational and media issues and risks that can impact your business in times of trouble, our <a href=""~/en/services/crisis-management/#canada"">crisis management team</a> can help you avoid, manage and recover from a wide variety of critical situations. We can also work proactively with you to help identify and mitigate risks, and provide effective crisis management plans for your business.</p>    <h3>Efficient solutions</h3>    <p>We bring you enhanced cost-certainty and value through <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"">Practical LPM</a>&trade;, our collaborative legal project management platform that helps keep your legal matters on track, on time and on budget. We also reduce your costs and provide quick answers to your concerns using Go.Plead&trade;, our extensive legal research and precedents database.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you resolve your commercial litigation dispute, please contact any member of our team.</p>  ",GWLG.Canada,034fb16f-8b22-4291-afcd-7aaecfa025d5,C774BE76-80EC-4195-83A3-5850B5E2A4A2,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
31,/Services/Company-Secretarial/UK,en-GB,F8F416E7-2685-48DB-AA1D-A02D6B98FB58,UK,UK,Our company secretarial team comprises a team of specialists trained on a comprehensive range of company secretarial issues. We use fixed pricing options wherever possible to give clients certainty and security.,NULL,NULL,"<p>Excellent client care is at the heart of our business - our aim is to provide our clients with a first class service and real value for money.</p>    <p>Our company secretarial team comprises a team of specialists trained on a comprehensive range of company secretarial issues. We use fixed pricing options wherever possible to give clients certainty and security.</p>    <p>What you get:</p>    <ul>   <li><strong>Safe hands</strong> - we provide expert assistance on all day-to-day, routine secretarial matters, including annual compliance requirements and advice on procedure and practice at Board and shareholder meetings. Our paralegals and chartered company secretaries have extensive experience in this area and are supervised by associates and partners who can step in quickly and advise if a simple matter becomes more complex</li>   <li><strong>Specialist knowledge</strong> - we also have extensive experience in non-standard queries such as statutory register audits, advising on directors&#39; complex conflicts of interest, advising on group simplification exercises or other intra-group arrangements including distributions. Work of this type is handled by our more senior team members to ensure full corporate governance compliance</li>   <li><strong>Flexibility</strong> - we have the capacity and flexibility to deal with ad hoc queries such as company formations (and the formations of other entities such as limited partnerships and LLPs), as well as attending potentially hostile Board or shareholder meetings. We work closely with other sectors of the business and can quickly obtain expert advice if a company secretarial issue requires corporate, commercial, employment or real estate advice</li>  </ul>    <p>Matters are allocated according to their needs in order to provide a cost-effective service. Instructions are handled by paralegals, associates or partners, depending on our clients&#39; requirements. Whatever your query, we can support you with all your company secretarial needs, helping to ensure compliance in relation to all aspects of corporate governance, from boardroom best practice to constitutional compliance.</p>    <p>We act for some big names including Iglo Group (Birds Eye) and CDK Global. Clients choose us because: &quot;The service is always efficient, cost-effective and delivered in a friendly manner. I would not hesitate to recommend them.&quot;</p>  ",GWLG.UK,a87f189a-5214-4ce2-9ca9-a54ac984cba6,D0E578D5-C33E-4C83-879B-B55902EEAC5E,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4114B62D-8AEF-4E3A-ACB8-2F0F147DAABA}
32,/Services/Competition-Law-Antitrust/Overview,en-GB,4ABA8EB7-8BEA-4965-9D80-BFC125F2583E,Overview,Overview,"Competition law issues are increasingly challenging, with critical implications that often transcend national borders.",NULL,NULL,"<p>Competition law issues are increasingly challenging, with critical implications that often transcend national borders. Whether you&#39;re the subject of a cartel investigation or a class action, considering an acquisition, dealing with pricing or distribution issues, accused of misusing market power or countering a competitor&#39;s latest move in the market, you need access to knowledgeable and experienced competition lawyers&nbsp;you can trust.</p>    <p>With a strong track record of success, the specialists at Gowling WLG will steer you through this complex and dynamic area, providing competitive advantage, technically sound, strategic advice and absolute certainty on what needs to be done - and when and why it needs to happen.</p>    <p>More often than not, you need solutions fast. Our team responds quickly in any situation across a range of key industry sectors, including agrochemicals, aviation, automotive, construction, energy, fast-moving consumer goods, food and drink, healthcare, heavy engineering, life sciences, and technology, media and telecommunications.</p>    <p>Clients worldwide trust and value our expertise and view our team as an extension of their in-house team. We&#39;re constantly looking for technically sound and practical solutions to the problems that others may not see, while sharing knowledge of processes and tactics gained from working within competition and regulatory authorities.</p>    <p>Combining both trial and antitrust specialists, our team prides itself on resolving clients&#39; issues that arise with respect to a full range of competition and antitrust issues, including:</p>    <ul>   <li>Cartels - multi-jurisdictional civil and criminal investigations and inquiries, including internal investigations and leniency and immunity applications</li>   <li>Co-operative arrangements and strategic alliances</li>   <li>Criminal prosecutions of individuals</li>   <li>Daily counselling for both global corporations and innovative new market entrants</li>   <li>IP/competition law interface - including FRAND and misuse of regulatory systems</li>   <li>Merger clearance - both national and multi-jurisdictional, including foreign investment review where necessary</li>   <li>Monopolisation (dominance)</li>   <li>Pricing issues</li>   <li>Private competition litigation and arbitration, including national and cross-border antitrust class actions</li>   <li>State aid</li>   <li>Strategic opinions in relation to business-critical issues</li>   <li>Supply and distribution strategies</li>   <li>Trade association issues</li>  </ul>    <p>Gowling WLG also offers you business critical planning to minimise your exposure to antitrust risks in the achievement of your commercial goals. We provide practical support and strategic thought leadership, particularly in the context of merger review, and vigorously defend antitrust litigation and investigations.</p>    <p>We&#39;re experienced in running complex cases before competition law enforcement bodies, including the Canadian Competition Tribunal and courts, the European Commission, the European Court of Justice and the courts of the EU Member States, including the English High Court and Competition Appeal Tribunal.</p>    <p>With over 1,500 legal professionals around the world, you can count on Gowling WLG to mobilise the right resources to effectively deal with the competition/antitrust issues you face - while delivering exceptional service, value and results. Please contact us to find out more.</p>  ",GWLG.Global,NULL,B3F9FCE6-B77C-4E15-978E-EAA664C609DC,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;01bdea82-8148-40d9-9f5d-f977064865b5,NULL,NULL,
33,/Services/Competition-Law-Antitrust/Canada,en-GB,2A8DCF2D-D240-40D8-8F39-502CC035C671,Canada,Canada,"Whether your organization is the subject of an investigation, considering an acquisition, dealing with pricing issues, or countering a competitor's latest move, you need knowledgeable, experienced counsel who can handle your most complex competition and antitrust law matters.",NULL,NULL,"<p>Whether your organization is the subject of an investigation, considering an acquisition, dealing with pricing issues, or countering a competitor&#39;s latest move, you need knowledgeable, experienced counsel who can handle your most complex competition and antitrust law matters.</p>    <p>Gowling WLG&#39;s Competition &amp; Antitrust Law Group delivers on all counts. With an ideal combination of competition lawyers, industry experts and regulatory professionals, we offer strategic legal advice to help you achieve your unique business goals.</p>    <p>Our Canada-wide team holds unparalleled experience in dealing with multijurisdictional competition and antitrust matters. From day-to-day business issues to dawn-raid crisis response, we deliver timely, pragmatic advice on all aspects of Canada&#39;s competition law regime, including:</p>    <ul>   <li>Compliance and strategic opinions</li>   <li>Merger reviews, filings and clearances (including the <em>Investment Canada Act </em>and the <em>Canada Transportation Act</em>, where necessary)</li>   <li>Private competition litigation, including national and cross-border antitrust class actions</li>   <li>Supply and distribution strategies</li>   <li>Pricing issues</li>   <li>Civil and criminal Competition Bureau investigations and inquiries, including internal investigations and leniency and immunity applications</li>   <li>Internal compliance policies, seminars and programs</li>   <li>Trade association issues</li>   <li>Criminal prosecutions​</li>  </ul>    <p>Ranked in a host of prestigious legal directories - such as <em>The Best Lawyers in Canada</em>, the <em>Canadian Legal Lexpert Directory </em>and<em> Benchmark Canada</em> - our professionals include the immediate past Senior Deputy Commissioner of Competition (the second-most senior official in the Canadian Competition Bureau) and top competition litigators with extensive experience before the Canadian Competition Tribunal and all levels of court, including the Supreme Court of Canada.</p>    <p>Our litigators have been involved in some of Canada&#39;s most important antitrust cases, and have successfully represented clients from a wide range of industries in relation to <em>Competition Act </em>matters, as well as in civil and criminal proceedings. These include price-fixing class actions and conspiracy and bid-rigging prosecutions.</p>    <p>With offices across Canada and around the world, we&#39;re ready to draw on the top-tier competition and antitrust expertise of our group wherever - and whenever - you need us.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you, please <a href=""~/en/people/?page=1&amp;services=284&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,ec64dba1-ee7d-40c8-8fc2-4bf4bf90939a,B3F9FCE6-B77C-4E15-978E-EAA664C609DC,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{AF678F2D-6656-417B-8705-EC3BAE51208E}
38,/Services/Construction/UK,en-GB,E2859C3D-A997-4ECD-88B8-207298FD868F,UK,UK,"Our teams in London, Birmingham and the Middle East have experience in a wide range of construction activities and offer focused, specialist and commercial advice.",NULL,Construction lawyers,"<p>Our teams in London, Birmingham and the Middle East have experience in a wide range of construction activities and offer focused, specialist and commercial advice.</p>    <p>We have significant experience dealing with the procurement aspects of a diverse range of construction projects including major City headquarters, high end residential, retail, leisure, international commercial and industrial schemes and large scale urban renewal and infrastructure projects. We advise on project finance, funding and development agreements as well as all forms of building contracts, appointment documents, warranties and ancillary contracts.</p>    <p>We have significant expertise in contentious construction. We often work with our clients to prevent issues escalating into litigation and to achieve the quickest and most beneficial resolution to their problems, mostly through arbitration and mediation.</p>    <p>Where necessary, we have acted for our clients in a wide range of domestic and international litigation arising out of construction projects, including large scale and complex litigation as well as smaller disputes involving specific issues of construction law.</p>  ",GWLG.UK,fee46864-312d-4663-a0fc-5e30836efd91;1bcef802-e18d-4c52-9203-5d613c802e3f,9CEBEAF8-D868-4884-B035-03F46770DE62,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,ad81e3ca-373e-4cd9-b75d-e5f9b53af1ab,NULL,NULL,{455ABB31-95A8-44A4-BB66-D1D901A9122B}|{D2D321DE-981F-4805-A2FD-88D01F4EFD96}
39,/Services/Trusts-Litigation/UK,en-GB,9C882AC9-ACAE-4B0E-8030-6ECF6F3416FD,UK,UK,"Our team has a wealth of experience of trust disputes - both onshore and offshore. We act for professional trustees in complex, often multi-jurisdictional litigation, drawing on our network of specialist advisers to ensure seamless service wherever your proceedings may be.",NULL,NULL,"<p>Our award-winning trusts litigation team is &quot;recognised for its experience advising trustees and private wealth funds&quot; (Chambers UK). We pride ourselves on giving &quot;very commercial&hellip;practical advice to deal with complex situations&quot; (Legal 500).</p>    <p>The team has a wealth of experience of trust disputes - both onshore and offshore. We act for professional trustees in complex, often multi-jurisdictional litigation, drawing on our network of specialist advisers to ensure seamless service wherever your proceedings may be.</p>    <p>We regularly deal with cases in the BVI, Bermuda, Cayman Islands, Jersey, Guernsey and Singapore as well as in the High Court in London.</p>    <h3>Client work</h3>    <p>We offer a litigation-led service helping our clients handle all aspects of contentious trusts proceedings, including:</p>    <ul>   <li>claims by and against professional trustees, including breach of trust claims, construction of trust documentation and applications for court guidance</li>   <li>disputes between beneficiaries, co-trustees or successor trustees</li>   <li>third party attacks on trusts</li>   <li>constructive, resulting and sham trusts</li>   <li>international and cross-jurisdictional trust litigation</li>   <li>international asset tracing and recovery and accessory liability risks for trustees</li>   <li>trustees issues arising from foreign litigation</li>  </ul>    <p>Recent examples of our trusts litigation work include:</p>    <ul>   <li>Acting for professional trustees defending multi-million pound claims in England, New York and Bermuda relating to the Kingate Funds, which invested some US$1.7 billion of subscriber money into Bernard L. Madoff Investment Securities LLC.</li>   <li>Advising offshore trustees to dispose, pre-action, of breach of trust claims.</li>   <li>Acting for Merrill Lynch Bank &amp; Trust Company (Cayman) Limited and others in a successful Privy Council appeal.</li>   <li>Negotiating the settlement of a multi-million pound High Court claim alleging breach of duty and negligence against a trust company and its former directors.</li>  </ul>  ",GWLG.UK,3110a84a-f993-4c98-b2f3-54f983a40915,DE4DD9CE-DD7A-4AF6-BA25-80F400B250ED,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{42980B38-E2A7-4DEF-9BE8-62B739C4783D}
40,/Services/Corporate/Overview,en-GB,2CFA2BE2-DA17-4B48-A630-19F54AAEA8A3,Overview,Overview,"Corporate law firm with corporate lawyers providing a wide range of legal services including private equity, M&A and investment funds.",NULL,NULL,"<p><strong>Without sound corporate law advice, no organisation can function at its best. Global mergers and restructurings tend to grab the headlines, but there are also many everyday matters which need to be handled correctly in order for your business to grow and make progress.</strong></p>    <p>At Gowling WLG, we understand that you need trusted corporate lawyers who can flex to match the job in hand. Our global corporate team offers you a complete range of services, from simple registration to complex reorganisations. You tell us what you want and we&#39;ll provide it.</p>    <p>Our clients range from the world&#39;s leading financial institutions and public companies to private businesses and entrepreneurs. Our market-leading service line in AIM and dynamic approach to key sectors - such as energy, mining, real estate, life sciences and tech - are some of the many reasons why we&#39;ve advised clients on hundreds of major deals in recent years.</p>    <p>Connected across the market, our team is highly sensitive to your business realities. Our size means we can allocate the appropriate level of experience to address your matter most efficiently. Senior oversight and a talented paralegal group provides technical expertise and practical service.</p>    <p>You&#39;ll be working with integrated teams that incorporate professionals from other practice areas to provide tailored insight and advice. We accommodate tight timelines and efficiently address complicated legal issues to deliver a seamless, results-based service.</p>    <p>With offices located in key jurisdictions around the world, we can handle projects of any size. Our professionals communicate efficiently with each other to provide timely legal services to clients who require advice from multiple locations.</p>    <p>We deliver proven results in a full range of corporate legal areas, including:</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Corporate governance</li>   <li>Equity financings</li>   <li>Funds</li>   <li>General counsel services</li>   <li>Incorporation and company secretarial</li>   <li>Partnerships</li>   <li>Mergers, amalgamations, plans of arrangement and takeovers</li>   <li>Private equity</li>   <li>Restructuring</li>   <li>Shareholder agreements</li>  </ul>    <h3>Contact our team</h3>    <p>Gowling WLG is an international firm that remains focused on its clients, providing world-class corporate law services to national and international companies alike. Please get in touch to discuss how we can assist your business.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/corporate/#germany"">Germany</a></li>   <li><a href=""~/en/services/corporate/#uk"">UK</a></li>  </ul>  ",GWLG.Global,2377a67c-1e57-4514-9b6e-aee6bfab3640;e296f021-59e1-410e-a0ad-0626e49ce506,CA126CE8-3692-45E8-A1BE-AA0808B0C37E,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{571BDAE6-EC43-4509-9FD5-1D14CED8B0FC}|{783579A7-C423-44B6-AC93-3C05ADB31EBC}
41,/Services/Corporate-Commercial/Canada,en-GB,F76B8D21-AE62-4A62-902A-F07B5C38461F,Canada,Canada,"From local startups to global powerhouses, Gowling WLG offers unparalleled expertise and efficient service that covers a full range of corporate and commercial law matters.",NULL,NULL,"<p>From local startups to global powerhouses, Gowling WLG offers unparalleled expertise and efficient service that covers a full range of corporate and commercial law matters.</p>    <p>We understand the issues you face because we&#39;re immersed in the same issues every day. With the ability to flex to match the job at hand, our team is equipped to handle everything from landmark transactions and major reorganizations to routine business filings and agreements.</p>    <p>Spanning all industry sectors, our services include:</p>    <ul>   <li>Incorporations</li>   <li>Reorganizations, amalgamations, continuances, arrangements and dissolutions</li>   <li>Corporate governance</li>   <li>Company secretarial (including registration for extra-territorial corporations)</li>   <li>Virtual (outside) general counsel services</li>   <li>Shareholder, partnership and joint venture agreements</li>   <li>Managed service and outsourcing agreements</li>   <li>IT contracts</li>   <li>Service and supply agreements</li>   <li>Franchise, agency and distribution agreements</li>   <li>Consumer and direct selling agreements</li>  </ul>    <h3>Helping your business grow</h3>    <p>The Gowling WLG corporate commercial team knows the challenges of establishing and conducting business in Canada.</p>    <p>As your business expands across provincial and territorial borders, you&#39;ll encounter shifting rules and norms in each jurisdiction in which you operate. We can help you navigate this diverse legal landscape with timely, strategic advice that aligns your Canadian business operations with today&#39;s realities and opportunities.</p>    <h3>Complete corporate commercial support</h3>    <p>Through our firm&#39;s broad strength across a wide range of practice areas and industry sectors, we often act as outside general counsel to clients in both the private and public sector. We also act as local counsel to many foreign entities, offering full corporate and commercial services to manage corporate subsidiaries in Canada.</p>    <p>Whether you&#39;re looking into establishing a Canadian subsidiary or have been in the Canadian market for years, our team can help you navigate the complexities of the Canadian marketplace and provide innovative business solutions.</p>    <h3>Aligned with your needs</h3>    <p>To ensure you always receive the right level of service and expertise for the task at hand, we assemble customized teams from different practice areas and jurisdictions with skills that are aligned with your unique needs.</p>    <p>You&#39;ll find us to be creative problem-solvers who are focused on delivering solutions. By bringing together our collective experience and technical expertise, we provide advice that maximizes your commercial position.</p>    <h3>Learn more</h3>    <p>Every successful relationship begins with a great conversation about the challenges and opportunities you face. Please <a href=""~/en/people/?page=1&amp;services=285&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a> to learn more about how we can help you.</p>  ",GWLG.Canada,2377a67c-1e57-4514-9b6e-aee6bfab3640,04411FAC-DC23-4861-BD0C-AADA44EFCDEB,NULL,0,1,t-white,NULL,Featured Insights,cefe15fb-7a92-4106-a0ab-d791e5813490;0e8d0bbc-c084-406c-8d50-a5fa863abbfd,View all Corporate Commercial articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=285,NULL,{571BDAE6-EC43-4509-9FD5-1D14CED8B0FC}
42,/Services/Corporate-Restructuring/Canada,en-GB,E1975B8B-C63C-4986-A604-312C83E27B76,Canada,Canada,"When it comes to executing national, cross-border and multi-jurisdictional insolvencies and restructurings, there's no substitute for experience.",NULL,NULL,"<p>Armed with the knowledge and insight gained from being intimately involved in complex restructurings, the professionals in Gowling WLG&#39;s Corporate Restructuring Group have advised major stakeholders, acting as debtor counsel, as counsel to the Monitor, as counsel to significant creditor groups and as counsel to acquirers of distressed assets.</p>    <p>We provide corporate restructuring advice across Canada, with experienced senior practitioners in our Toronto, Montréal, Ottawa, Calgary and Vancouver offices. Our resources are mobile and completely integrated, ensuring we always have the right people in the right place to service the needs of our clients in the best and most efficient way possible.</p>    <h3>Nothing speaks like experience</h3>    <p>Gowling WLG professionals have played significant roles in many of the largest and most complex corporate restructurings in Canada in the last three decades, including:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Nortel</li>   <li>CNOOC&#39;s acquisition of OPTI Canada</li>   <li>Quebecor World</li>   <li>Air Canada</li>   <li>Abitibi Consolidated, the restructuring of the asset-backed commercial paper market in Canada</li>   <li>W.R. Grace</li>   <li>Dumoulin Group</li>   <li>Kitco Metals Inc.</li>   <li>Norbourg Group</li>   <li>Babcock &amp; Wilcox</li>   <li>MuscleTech</li>   <li>Unique Broadband Systems</li>   <li>Ravelston</li>   <li>Slater Steel</li>   <li>WellPoint</li>   <li>Jung Developments</li>   <li>Algoma</li>   <li>Skyservice</li>   <li>Laidlaw</li>   <li>North American Steamships</li>   <li>Cineplex Odeon</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>The Loewen Group</li>   <li>Canadian Airlines</li>   <li>Anvil Range Mining</li>   <li>PSINet</li>   <li>360Networks</li>   <li>Agribiotech</li>   <li>Livent</li>   <li>GT Group Telecom</li>   <li>Cotton Ginny</li>   <li>Noble China</li>   <li>SAAN Stores</li>   <li>Teleglobe</li>   <li>Eatons</li>   <li>Confederation Life</li>   <li>Royal Oak Mines</li>   <li>SkyDome</li>   <li>Royal Trust</li>   <li>Scotia Plaza DPS</li>   <li>Trizec</li>   <li>Cadillac Fairview</li>   <li>Bramalea</li>   <li>Olympia &amp; York</li>  </ul>  </div>  </div>  </div>    <h3>​Learn more</h3>    <p>To find out how we can support your corporate restructuring needs, please <a href=""~/en/people/?page=1&amp;services=286&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,1b16d33b-6132-403b-96c8-413ae88eb1ef,875571D8-6031-4A69-A136-886B8FCA491D,NULL,0,1,t-white,"<p>When it comes to executing national, cross-border and multi-jurisdictional insolvencies and restructurings, there&#39;s no substitute for experience.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{8050158D-7D93-4E3D-8D93-7E793893D287}
45,/Services/Crisis-Management/Canada,en-GB,05D3F227-A372-4A56-9CB8-F4B9BD8389EA,Canada,Canada,"With extensive expertise in all facets of crisis management and hands-on industry experience, the Gowling WLG Crisis Management Group can help your organization avoid, manage and recover from a wide variety of critical situations and issues.",NULL,NULL,"<p>Avoiding and dealing with a potential crisis is critical to an organization&#39;s success. Successfully identifying, mitigating and managing risk in today&#39;s business environment calls for a team of business-savvy and experienced legal professionals with unsurpassed industry expertise and the insight to create smart, effective crisis and risk management solutions.</p>    <p>With extensive expertise in all facets of crisis management and hands-on industry experience, the Gowling WLG Crisis Management Group can help your organization avoid, manage and recover from a wide variety of critical situations and issues.</p>    <p>Comprised of leading crisis management professionals, our team leverages expertise from aligned practice teams - including government affairs, class actions, product liability, occupational health and safety, employment and labour, and commercial litigation&nbsp;-&nbsp;to create effective and valuable solutions for our clients.</p>    <p>We work closely with our clients to identify and prevent crises, investigate ongoing or potential issues, manage existing situations and learn from experience with post-situation audits and other robust evaluation processes. Our in-depth resources allow for immediate assessments of an organization&#39;s legal position and needs, while our industry focus flattens the learning curve and lets us get straight to work to protect and defend their interests.</p>    <p>Our clients rely on our network of Canadian and international offices to provide rapid and effective response to issues originating in Canada, or those impacting their market from overseas. From product recall and liability issues to civil fraud and defamation suits, our team consistently strives to protect your reputation, defend your business and safeguard your future.</p>    <h3>Learn more</h3>    <p>To learn more about our crisis management services, please <a href=""~/en/people/?page=1&amp;services=287&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,3ae82526-329e-41d7-8e7e-7b14a7af12bc,5B1E4C6F-134F-4E9B-8908-AEB4734D2010,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3275D488-797C-47CE-A9DE-98A8ABFED5A2}
46,/Services/Data-Centres/UK,en-GB,800CCE73-7D26-4BED-B0B0-A4B04C125080,UK,UK,"We help the owners and operators of data centres, their funders and the enterprises which use them to navigate through the legal issues relating to this fast-moving industry.",~/getmedia/14a911e1-e38a-4b9e-8c5b-44cbefce5b29/data-centres_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p>Over the past 20 years, the demand for digital data has grown explosively.</p>    <p>Data centres now underpin our digital economy - for corporate IT services, digital media, financial services, mobile computing, social networking and internet access.</p>    <p>We help the owners and operators of data centres, their funders and the enterprises which use them to navigate through the legal issues relating to this fast-moving industry.</p>    <p>Meeting the increasing demand on businesses for data processing, storage and options for flexibility is an ongoing challenge. So when it comes to handling the legal aspects of data centre operations, it pays to work with lawyers who are fully immersed in the sector. Focused on helping clients achieve their commercial goals, we provide speed, commercialism and cost-effective advice to resolve complex issues and maximise investment.</p>    <p>As one of the only legal teams in Europe dedicated to this sector, Gowling WLG&#39;s full-service data centres team is unique. Our team unites industry specialists from <a href=""~/en/services/real-estate/#uk"">real estate</a>, <a href=""~/en/services/cyber-security-data-protection-law/#global"">information technology (IT)</a>, <a href=""~/en/services/banking-finance/#uk"">banking</a>, <a href=""~/en/services/outsourcing/#uk"">outsourcing</a>, <a href=""~/en/services/commercial/#uk"">commercial</a>, <a href=""~/en/sectors/construction-engineering/"">construction</a>, <a href=""~/en/sectors/energy/"">energy infrastructure</a> and data protection, to add value to clients. We help:</p>    <ul>   <li>data centre developers and investors in connection with the initial site acquisition, energy and connectivity issues relating to the development/construction of data centres using a variety of different acquisition and funding structures</li>   <li>data centre operators on the creation and negotiation of occupational and/or services agreements for the sale of capacity and/or services at a data centre, whether wholesale or retail colocation, or framework/master service agreements/leases for the sale of a range of services</li>   <li>data centre owners on the funding arrangements, including debt financing and re-financing</li>   <li>service integrators and other service providers on reviewing and drafting standard terms of business and the structuring and negotiation of complex, multi-vendor arrangements</li>   <li>occupiers, end users, and the buyers of services provided at data centres on the terms of their contracts with the data centre owner and/or operator, and the service level agreement that they can or should expect</li>   <li>on <abbr title=""information technology"">IT</abbr> procurement, <abbr title=""information technology"">IT</abbr> outsourcing, energy procurement, e-business, <a href=""~/en/services/intellectual-property-law/#global"">intellectual property (IP) licensing</a> and data protection issues</li>  </ul>    <p>Constantly tracking new developments in the field, our specialists boast deep technical expertise. Wider relationships with developers, agents, landowners and &#39;best-friend&#39; firms also benefit clients by helping them to progress deals across jurisdictions quickly and effectively.</p>    <p>Gowling WLG was recently shortlisted in the &#39;Law Firm of the Year&#39; category at Data Economy&#39;s Finvest Global Awards 2020, which celebrates the best legal experts, financers and advisory firms in the data centre, cloud and edge computing markets.</p>  ",GWLG.UK,75a219e7-ea84-4ba2-9990-61b83de62877;35408c86-7cbc-4f05-907f-87c21d2d6647,438B1C12-115C-4A2F-9953-07578E27357C,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2895F3B4-A117-4E62-AB3C-C05D4A1527B5}|{C805B0B5-C60A-41E4-8200-188ED7A3C09F}
47,/Services/Defamation-Media-Law/Canada,en-GB,3F18C422-1655-4EF7-B65F-0C1363BAF85A,Canada,Canada,"At Gowling WLG, our counsel have appeared in high-profile cyber-libel cases in trials and before the appellate courts, including the Supreme Court of Canada.",NULL,NULL,"<p>The mainstream media industry has radically changed and continues to adapt to 21st-Century modes of communications. The Internet and social media have shattered our traditional media and opened the floodgates for potential defamatory statements and invasions of privacy that can cause devastating damage to individuals and businesses.</p>    <p>At Gowling WLG, our counsel have appeared in high-profile cyber-libel cases in trials and before the appellate courts, including the Supreme Court of Canada. As online publications pose many legal issues yet to be resolved by the courts or the legislatures, we provide cutting-edge advice on these concerns.</p>    <p>We also have extensive experience in traditional libel cases, where we&#39;ve have acted for both plaintiffs and defendants, as well as in pre-publication and pre-broadcast advice for our national and local media clients.</p>    <p>Our media law litigators have successfully argued precedent-setting freedom of the press decisions under the <em>Canadian Charter of Rights and Freedoms</em>. On behalf of our media clients, provisions of statutes have been declared unconstitutional infringements of section 2(b) of the <em>Charter</em> that guarantees freedom of the press, non-publication orders have been set aside, search warrants have been quashed as an abuse of process, production orders challenged, and court files unsealed.</p>    <p>Access to government information enjoys quasi-constitutional status and is an important business tool to obtain information about government and competitors. We have in-depth experience in seeking government information, as well as in defending third parties who need to protect their information from disclosure pursuant to exemptions mandated by the applicable legislation.</p>    <p>Members of our Defamation &amp; Media Law Group are recognized by prestigious publications such as <em>The Best Lawyers in Canada</em> and <em>Lexpert</em> for their top-tier media and defamation law expertise.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you with your defamation or media law matter, please <a href=""~/en/people/?page=1&amp;services=288&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,104b250f-b3c2-47df-9df6-1f1c11cf8908,EE90D195-F877-4374-AD1F-0C7A253EEFC1,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{37F6AC38-4AA0-4D21-B3B2-B38E32186927}
48,/Services/Defined-Contribution-Pensions/UK,en-GB,BEAE881F-F031-4AF6-9EDF-3EE18F99B931,UK,UK,Defined contribution (DC) pensions are at the centre of three key developments that are shaping the future of pension provision in the UK.,NULL,NULL,"<p>Defined contribution (money purchase) pensions are making the headlines.</p>    <p>Defined contribution (DC) pensions are at the centre of three key developments that are shaping the future of pension provision in the UK:</p>    <ul>   <li>workplace pension reform (automatic enrolment) is bringing millions of new members into <abbr title=""Defined contribution"">DC</abbr> pension savings - many for the first time</li>   <li>Budget 2014 has already changed the <abbr title=""Defined contribution"">DC</abbr> landscape and will bring further and even more radical changes to <abbr title=""Defined contribution"">DC</abbr> pensions with effect from April 2015</li>   <li>regulatory focus - employers, providers and trustees are dealing with a raft of regulatory challenges on <abbr title=""Defined contribution"">DC</abbr> pensions, including the Pension Regulator&#39;s Code of Practice and the DWP&#39;s charge capping regime and increasing focus on member value for money</li>  </ul>    <h3>How we can help</h3>    <p>The complex nature of <abbr title=""Defined contribution"">DC</abbr> schemes requires support from across legal disciplines, for example in relation to investment issues, HR policy and managing member data. Our cross-firm expertise ensures you get the holistic advice you need. We can help you:</p>    <ul>   <li>navigate through the complex Budget 2014 changes including flexible drawdown, tax free cash and new &#39;at retirement&#39; options</li>   <li>implement legally compliant automatic enrolment solutions and ensure that the complicated interactions between payroll, administration, pensions, employment and I.T. systems are covered</li>   <li>create effective and easy-to-understand communications covering all aspects of <abbr title=""Defined contribution"">DC</abbr> pensions</li>   <li>comply with increasingly demanding regulations and governance requirements</li>   <li>merge and wind-up <abbr title=""Defined contribution"">DC</abbr> arrangements to consolidate and streamline benefit provision</li>  </ul>    <p>Our pension and benefits experts have extensive experience in advising employers, providers and trustees on <abbr title=""Defined contribution"">DC</abbr> pensions. If you have any questions on anything to do with <abbr title=""Defined contribution"">DC</abbr> pensions, please contact one of the key contacts listed below or any of your usual client service team members.</p>  ",GWLG.UK,NULL,28B9078C-383D-431A-B8A9-DACAC4B8BFB0,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
50,/Services/Development-Regeneration/UK,en-GB,B13D00CC-421E-4E20-AE56-CED2E5A9301F,UK,UK,"We have one of the biggest dedicated development and regeneration teams in the UK and act for a wide range of developers, funders and local authorities, delivering innovative and commercial solutions to often complex specifications quickly and efficiently.",NULL,NULL,"<p>We have one of the biggest dedicated development and regeneration teams in the UK and act for a wide range of developers, funders and local authorities, delivering innovative and commercial solutions to often complex specifications quickly and efficiently.</p>    <p>Our comprehensive real estate development and regeneration service includes site assembly (with or without compulsory purchase) including obtaining vacant possession, managing the planning process to secure the necessary planning permission, structuring and negotiating tax-efficient development and financing arrangements. It also extends to negotiating construction contracts, professionals&#39; appointments and all necessary infrastructure and neighbour agreements and dealing with the lettings and sale of the development.</p>    <p>The broad spectrum of asset classes we deal with means our expertise advising on mixed use schemes and regeneration sites is unparalleled.</p>    <h3>Experience</h3>    <p>Our experience includes advising:</p>    <ul>   <li>Ballymore Properties on its agreements with the United States of America for the development of its new embassy at Nine Elms, London</li>   <li>St Modwen Developments on its joint venture with VINCI PLC in relation to the &pound;2 billion redevelopment of the New Covent Garden Market, London</li>   <li>a consortium of developers (Taylor Wimpey, Linden Homes and Bovis Homes) on the acquisition of 1,200 acres of land near Plymouth for the development of the new town of Sherford which, when completed, will contain 5,500 homes, schools, recreational facilities and a place of worship</li>   <li>be:here, a new company created by Willmott Dixon, on a residential development at the Aberfeldy estate in east London to provide homes for the private rented sector</li>   <li>Prime Knightsbridge Developments Limited, the owners of Bulgari Hotels &amp; Residences, on the development, structuring, procurement, construction, letting and sale of the residences, penthouse apartments and the hotel element</li>  </ul>    <h3>Regeneration</h3>    <p>Our regeneration team is skilled in the delivery of complex and strategically significant long-term projects.</p>    <p>We are experienced in advising clients on the management of long term strategic assets, drafting development agreements and best practice gained from extensive experience of developing and managing competitive procurements.</p>    <p>We regularly advise on the formation and role of joint ventures (corporate and contractual) and other delivery arrangements, profit (and risk) sharing arrangements, tax mitigation, CPO powers and processes (including compromise agreements with third parties and indemnity arrangements with developer partners).</p>    <p>Gowling WLG is the legal supporter of the inaugural Estates Gazette &#39;Peter Wilson Lecture&#39; and a campaign on the future of regeneration.</p>  ",GWLG.UK,NULL,ABB690B5-3DAE-42A0-8C4A-5491682DF623,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
51,/Services/Discrimination/UK,en-GB,9BF95066-BB36-4282-91C5-51219EC7256F,UK,UK,"Within our full-service employment team, we have discrimination specialists who can help you manage cases and the unavoidable risks they entail.",NULL,NULL,"<p>Discrimination in the workplace can be ugly and costly if not dealt with in a timely and sensitive way. It can take many forms: gender, sexual orientation and gender reassignment; race; disability; religion; belief and age.</p>    <p>Within our full-service employment team, we have discrimination specialists who can help you manage cases and the unavoidable risks they entail. We won&#39;t ever tell you there&#39;s nothing that can be done - even with the most entrenched issue we help find a way through.</p>    <p>Having your ducks in a row can prevent difficult issues arising. We provide bespoke training at your premises on keeping policies and procedures up-to-date and understanding the risk areas. Because we know it can be daunting to receive a claim, we also train senior management on dealing with the worst case scenario. For example, we have recently provided interactive training sessions on diversity, equal opportunities and mental health using actors for &#39;real life&#39; case studies, with psychologists as guest speakers.</p>    <p>When carrying on to a hearing isn&#39;t the right solution, we come up with innovative alternatives. We advised a client facing a race discrimination claim to write a letter to the claimant inviting him to join the company&#39;s diversity forum to help the company develop a diversity policy. As a result, the claimant dropped the case before it went to court.</p>    <p>However, sometimes you can&#39;t avoid a fight. We understand that discrimination cases can be serious and attract uncapped payouts.</p>    <p>But we have a strong track-record. When working for a large telecoms company we secured strike-out of a potentially damaging discrimination claim at a preliminary hearing. We then guided our client through the expected constructive dismissal and sex discrimination claim which followed.</p>    <p>Our work behind the scenes during the grievance process put our client in the best possible position to defend the claim successfully or to secure a low value commercial settlement at an early stage.</p>    <p>We handle cases where mental health conditions prevent claimants from seeing the situation objectively. When advising on a race discrimination case, we received aggressive correspondence from a claimant on a daily basis. While robustly preparing for tribunal, we also built a case for a strike-out due to the claimant&#39;s behaviour. Following a particularly offensive email from the claimant one week before the hearing, we quickly turned round an application and were successful in getting the claim struck out.</p>    <p>Equality in the provision of goods and services is becoming a bigger issue and is often reported in the press. We have worked with clients in the hospitality and leisure sector to resolve issues relating to access to premises, as well as accessibility requirements in relation to websites.</p>    <p>The only team of its kind in the UK, our combined human resources solutions team offers a dual approach to pensions and employment. It helps devise solutions such as non-discriminatory benefits following the removal of the default retirement age.</p>    <p>We have strong expertise in the area of age discrimination, regularly advising, writing and training on the subject. We have a core &quot;<strong>All about age</strong>&quot; team, which analyses the latest case law and remains ahead of the curve in terms of developments, advising and updating employers accordingly.</p>    <p>With the introduction of tribunal fees, it has been widely publicised that tribunal cases are in decline.</p>    <p>However, headline-grabbing discrimination cases are ever-present and draw attention to employee rights.</p>    <p>The Equality Act 2010 consolidated existing discrimination legislation to make it easier for employers to understand their obligations. But it also added new layers of complication. As disputes in this area can involve disproportionate amounts of management time, we navigate the tricky issues on your behalf, freeing you up to focus on other matters. This approach takes the strain of what can be a very sensitive issue away from those involved and helps minimise your cost and time expenditure.</p>  ",GWLG.UK,799cf040-59c7-4986-825a-e4b909364823,ED05C269-57B4-4D38-8B3B-75EC4F066C7E,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E105E1FE-58D4-44E0-B32B-4367806B155E}
52,/Services/Dispute-Resolution/UK,en-GB,E3B3A955-1958-4B44-ABB4-5B5F841E7353,UK,UK,"The best possible solution for your business, well-protected interests and carefully-managed cost control. That's what the Gowling WLG dispute resolution team will deliver when we work alongside you in a dispute.",NULL,NULL,"<p>The best possible solution for your business, well-protected interests and carefully-managed cost control. That&#39;s what the Gowling WLG dispute resolution team will deliver when we work alongside you in a dispute.</p>    <p>Our first priority is to understand your commercial objectives. After assessing your case&#39;s strengths and weaknesses, where appropriate, we&#39;ll explore early resolution through open discussion with the opposition, and the use of mediation or ADR processes.</p>    <p>If a formal proceeding is unavoidable or the best course of action, this team has a proven track record of securing successful results. Whether it&#39;s the specialist divisions of Commercial, Chancery, Companies and Technology &amp; Construction in the English courts, domestic arbitration, adjudications or international arbitration proceedings under common institutional rules including ICC, LCIA, UNCITRAL, SIAC and DIAC, you&#39;ll be in safe hands.</p>    <p>That&#39;s why clients turn to us when the stakes are high. &quot;Frequently acting on high-profile cases&quot; (Chambers) our team is always ready and willing to fight for clients. In one case, our award-winning IP litigators pursued a six-year battle all the way to the Supreme Court, overturning 100 years of law in the process and saving the client from a &pound;49 million pay-out.</p>    <p>What else can you expect from one of the UK&#39;s largest team of dispute resolution lawyers?</p>    <ul>   <li><strong>Global reach</strong> - clients operate globally; we do too. A substantial proportion of our work is of a global nature. The team operates in the English High Court, in English domestic arbitration and in international arbitration for a range of foreign clients. Litigation and/or arbitration work is currently being handled in Australia, Austria, the Bahamas, Bermuda, Brazil, the British Virgin Islands, the Cayman Islands, Cyprus, France, Guernsey, Jersey, Pakistan, Saudi Arabia, Singapore, South Korea, Switzerland, Turkey, Ukraine and the USA</li>   <li><strong>Strength in depth</strong> - with more than 170 lawyers, you can be certain of the necessary resource to handle your dispute. Legal expertise includes bribery and corruption, commercial fraud, engineering and construction, regulatory and professional liability. Sectors expertise includes aerospace, automotive, food and drink, financial services, real estate, retail and technology</li>   <li><strong>Cost control</strong> - the team uses &#39;Phase and Task&#39;, an IT tool which tracks legal costs throughout the dispute. Regular communications keeps you in control of your case and costs</li>  </ul>    <p>These are a few reasons clients around the world choose us to represent them. These include the Department of Business, Innovation and Skills, FTSE 100, 250 and AIM-listed clients including Dyson, Phillips Electronics, 3i Group, GKN, NCP, Premier Foods, The Government of Brazil and The Ministry of Revenue and Duties of Ukraine.</p>    <p>Our work for these has seen the team win various awards.</p>    <p>The firm&#39;s Litigation and Regulatory team was a finalist at the British Legal Awards 2013 for its work advising the Federal Republic of Brazil and the Municipality of Sao Paulo in proceedings against two BVI companies closely connected to the former mayor of Sao Paulo, Paulo Maluf.</p>    <p>This was arguably one of the most important corruption and asset recovery cases ever to be undertaken by Brazil and the largest and most complex civil proceedings brought by the authorities to repatriate assets outside of the country.</p>    <p>Similarly, the IP team&#39;s successes have been acknowledged by being named UK Patent Contentious Team of the Year 2014, Managing IP; TMT Team of the Year 2014, Legal Business Awards; and TMT Team of the Year 2013, British Legal Awards. It also won China IP Deal of the Year 2013, China Business Law Journal.</p>    <p>We&#39;re a founder member of ICC FraudNet, the worldwide network of lawyers specialised in asset tracing and recovery, connecting clients with a 24/7 international rapid deployment force.</p>    <p>Advice on pre and post event legal insurance is also available.</p>    <p>Gowling WLG supports the Department of Constitutional Affairs&#39; programme to promote judicial diversity.</p>    <p>WINNER - Private Client Specialism of the Year - Contentious Trusts and Probate, The Legal 500 UK 2014 Awards.</p>  ",GWLG.UK,90573229-adbc-497c-9e6e-7ee61952f25b,B0C8C82F-1451-44DA-AFB4-D9BB649C6D42,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,c0791066-b1ca-48e4-be8b-0086d6051b23;e37fc7fb-2cf9-453c-a841-9f228d86f66e,NULL,NULL,{DB180194-4B02-46F8-A0CE-0DFB051009EE}
53,/Services/Distressed-M-A/Canada,en-GB,98CD87AE-1F02-4F6C-9F95-C4523C328FF3,Canada,Canada,"Selling or buying a financially challenged enterprise requires a unique set of skills and tools. Gowling WLG's distressed M&A professionals combine M&A, restructuring and insolvency strategies to preserve, extract and enhance the value trapped in a troubled business.",NULL,NULL,"<p>Selling or buying a financially challenged enterprise requires a unique set of skills and tools. Gowling WLG&#39;s distressed M&amp;A professionals combine M&amp;A, restructuring and insolvency strategies to preserve, extract and enhance the value trapped in a troubled business.</p>    <h3>The challenge</h3>    <p>The distressed target is running out of cash. Management is putting out fires and dealing with angry stakeholders and predatory competitors. Customers and suppliers are looking for exits. No one trusts the information coming out of the business. Gowling WLG&#39;s Distressed M&amp;A professionals act quickly to bring clarity and preserve the going concern value of the target enterprise.</p>    <h3>The opportunity</h3>    <p>Distressed businesses can be acquired at low multiples of EBITDA relative to historic pricing. If the buyer has the cash and skill to rationalize the business and survive the crisis, the acquisition of a troubled company can pay significant dividends as the target recovers.</p>    <h3>How we can help</h3>    <p>When received early, strategic advice can often diffuse hostile relationships between distressed companies, their creditors and equity holders. It can also help acquirers gain an early advantage over other bidders, as well as secure and protect critical suppliers and customers to ensure continued viability.</p>    <p>By combining insolvency and restructuring knowledge with our experience in healthy M&amp;A processes, the Gowling WLG team can run a seamless distressed M&amp;A transaction from start to finish.</p>    <h3>Learn more</h3>    <p>To find out how we can support your distressed M&amp;A needs, please <a href=""~/en/people/?page=1&amp;services=289&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,5ae5a269-9c5f-4332-920e-28b31ec9066e,B1FFD72E-B59C-4828-9EAC-256E3E3E57F8,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C0C757A8-E589-459A-B574-1E3C3FF83EBD}
54,/Services/Employment-Litigation/UK,en-GB,A2C3C3D4-91B6-42B9-A843-51FF8B24E612,UK,UK,"Employment litigation can be protracted and expensive, as well as nerve-wracking for all involved.",NULL,NULL,"<p>Employment litigation can be protracted and expensive, as well as nerve-wracking for all involved. Our litigation experts can take control of the case and handle as much or as little of this as you need to meet your budget and free up your people to deal with the day-to-day running of your business.</p>    <p>Whatever the nature of your employment dispute, our experienced team can provide you with all of the support you need.</p>    <p>Most employment disputes that reach the High Court relate to:</p>    <ul>   <li>enforcement of restrictive covenants</li>   <li>protection of confidential information</li>   <li>breach of duties by directors and senior employees</li>   <li>disputes arising out of individual and team moves to competitors</li>   <li>high value bonus and incentive payment disputes</li>   <li>breach of notice provisions</li>   <li>dismissal of senior executives</li>  </ul>    <p>Litigation tactics and planning are essential in order to provide a cost effective service, whether in relation to actions to enforce the provisions of service contracts, to prevent wrongdoing by former employees, or to defend financial claims brought by former employees.</p>    <p>The team has wide ranging experience and recent cases include:</p>    <ul>   <li>High Court action to enforce restrictive covenants entered as part of a settlement agreement</li>   <li>pre-action applications for disclosure of unlawfully removed confidential information</li>   <li>actions in relation to moves of teams to or from competitor organisations</li>   <li>financial claims asserting long term rights to commissions</li>   <li>claim asserting a contract for life</li>  </ul>    <p>Early gathering of information in matters which may give rise to disputes is recommended.</p>    <p>We often advise on steps employers can take to safeguard their interests, including ensuring an understanding of the scope of privilege from disclosure and the tactics likely to be adopted by an opponent when proceedings are commenced.</p>    <p>We work with other professionals such as forensic experts and in-house teams to ensure a seamless and cost-effective service. We can also call upon our dispute resolution colleagues to assist in tracing assets fraudulently removed by employees, whether in the UK or elsewhere, and on specialist protection of intellectual property assets.</p>    <p>This cross-sector sharing of knowledge and expertise provides our clients with all the answers and information they need in order to be successful in the High Court or to settle out of it and is why we are the go-to litigation specialists for big-name clients in the employment sector.</p>  ",GWLG.UK,79205c59-28cb-4630-bd62-bf070ba732b0;fb60329f-6333-4f7e-b26b-4f9b106a32e7,90AC2D0C-2585-4884-B759-D0157DFEE9F5,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3F8C3F58-5322-4435-8BC6-F40773A00AC9}|{436C8D12-0C94-497F-BAB2-F081F6782A9F}
58,/Services/Entertainment-Sports-Law/Canada,en-GB,377BAD72-FB82-4B5C-9F1F-0F1548D13AFD,Canada,Canada,"From music, TV, film and theatre to publishing, video games or sports, we know what it takes to protect and market your brand.",~/getmedia/1f283353-2ba4-45d1-9520-864d786f2940/entertainment-law-desktop.jpg.xml?width=930&height=358&ext=.jpg,NULL,"<h3>Maximizing the value of your creative works and talent</h3>    <p>Because Gowling WLG is a global leader in intellectual property (IP) law, we&#39;ll work with you to defend your <abbr title=""intellectual property"">IP</abbr> protected works and ensure you&#39;re well-positioned to commercialize your rights. Our reputation as the trusted ESL law firm is supported by our experience working internationally with musicians, actors, professional athletes, sports teams and organisations, record labels, film and television producers, production companies, managers, agents, publishers and charities across all entertainment and sports media.</p>    <h3>Growing your business and commercializing your content</h3>    <p>We serve as key advisers to our clients, applying our talent and connections to help them grow and succeed in the ever-changing entertainment and sports markets. Understanding that your goals and needs are unique, we can assist on a diverse array of legal matters, including commercial transactions such as negotiating and drafting production agreements, talent agreements, licensing agreements, record deals and merchandising arrangements; finance and investments; employment issues; sponsorship negotiation; real estate transactions; estate planning; personality rights; and more.</p>    <h3>Resolving your complex disputes</h3>    <p>From arbitration and litigation to negotiation and mediation, we have the high-level experience needed to resolve &ndash; and help you avoid &ndash; even the most contentious disputes in the entertainment and sports worlds. Our lawyers have appeared before all levels of courts and tribunals, representing clients on numerous cases ranging from civil and commercial disputes for large entertainment and sports organizations to litigation relating to licensing and sponsorship.</p>    <h3>Client work</h3>    <p>{^widget|(copy1)Counsel+to+peermusic%2c+the+world%27s+largest+global+independent+music+publishing+company%2c+on+its+acquisition+of+Canada-based+Premier+Muzik%2c+France-based+All+Right+Music+and+Netherlands-based+Global+Master+Rights+to+form+the+global+independent+leader+in+music+neighbouring+rights+management.|(bghover2)colour-darkblue|(copy3)Counsel+to+the+eSports+team+Toronto+Defiant+and+related+ownership+group+Overactive+Media+Group+Inc.%2c+in+being+successfully+awarded+a+professional+eSports+team+in+the+Overwatch+League.|(copy2)Counsel+to+the+National+Arts+Centre+with+respect+to+copyright%2c+licensing%2c+rights+management%2c+and+acquisition+and+agreement+negotiation+surrounding+their+live+multimedia+productions%2c+as+well+as+to+NAC%27s+National+Creation+Fund.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)peermusic|(headline3)Overwatch+Media+Group+Inc.|(headline2)National+Arts+Centre|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-darkred|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <p>We are recognized as a &quot;leading&quot; law firm for our work in the entertainment and sports law fields by several legal directories, including <em>Chambers Canada</em>, <em>Legal 500 Canada</em> and <em>Canadian Legal Lexpert Directory</em>. Susan Abramovitch, leader of our Entertainment and Sports Law Group has also been named as a leading lawyer in all those directories as well as in <em>The Best Lawyers in Canada</em> and <em>Who&#39;s Who Legal</em>, which ranked her as one of the world&#39;s top entertainment lawyers.</p>    <h3>Team Canada</h3>    <p>We are proud to be the official legal adviser to &ndash; and major sponsor of &ndash; Commonwealth Games Canada, supporting the organization as it prepares its Team Canada athletes for competition at the Birmingham 2022 Commonwealth Games in the UK.</p>    <h3>Contact our team in Canada</h3>    <p><strong><a href=""~/en/people/susan-abramovitch/"">Susan Abramovitch</a></strong><br />  Partner, Head - Entertainment &amp; Sports Law Group (Canada)</p>  ",GWLG.Canada,38313a1e-07be-4fe8-b61e-008316e36186,1262C308-04FD-4608-835B-A7950ABA17BE,NULL,0,1,t-white,"<p align=""left"">Whether it&#39;s music, television, film, theatre, fine art, book publishing, video games, sports, e-sports or the metaverse/NFTs, we know what it takes to protect and market your talent and content &nbsp;in a field that&#39;s full of competition and opportunity. By leveraging the experience of our top-ranked professionals, we help entertainment and sports businesses and talent achieve their desired outcomes &ndash; from securing the best deals to winning contentious disputes.</p>  ",Featured insights,9338cc83-a3b2-47cb-bbeb-12ef610605a2;1fc0dd90-3e77-4540-a29a-188aba64f46a,View all Entertainment & Sports law insight,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=291,NULL,{01F3B48C-972C-434D-B7E2-6EDED2EA05AC}
59,/Services/Climate-Change-and-Environmental-Law/Overview,en-GB,32065946-AFDB-4C09-9F66-24F96BF8E768,Overview,Overview,Law firm with experienced environmental lawyers providing advice on climate change and environmental law.,~/getmedia/a21ef64c-ac4a-4e79-86a2-e2a46c47a85f/environmental-law-desktop.jpg.xml?width=1400&height=540&ext=.jpg,Environmental law,"<h3>What is environmental law?</h3>    <p>Environmental law attempts to minimise the impact of climate change and protect the environment. It can cover a number of areas, including climate control, water pollution, renewable energy, waste and <abbr title=""environmental, social and governance"">ESG</abbr>.</p>    <p>Environmental law applies to every business and public body. If it is not carefully managed, non-compliance can cause significant financial and reputational damage to businesses.</p>    <p>Our environmental lawyers have a deep understanding of this area of the law and deliver practical advice that is easy to understand. We act for entrepreneurs, businesses, funders and public and local authorities across all sectors.</p>    <p>Our team of environmental and climate change lawyers are led by highly experienced partners who have a passion for this practice area. Translating complex legislation into clear actionable points, we draw upon our experience to offer you solutions that are built around your business and its needs.</p>    <p><iframe allow=""autoplay; fullscreen"" allowfullscreen="""" frameborder=""0"" height=""360"" src=""https://player.vimeo.com/video/364988789"" style=""width:100%;"" title=""Watch the video - Why you should choose us for environmental law"" width=""640""></iframe></p>    <h2>Meet our international team</h2>    <p>If you are seeking advice in this area, please do contact a member of our team today.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/climate-change-and-environmental-law/#canada"">Canada</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#uk"">UK</a></li>  </ul>  ",GWLG.Global,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;29d7e340-a6af-49b5-b223-993a69997a78;3d0d2ba1-fe4c-43cd-81d1-f7265baecea0;a7981dca-18b5-4064-b9ea-340d3fba1862;0efee052-a0c0-4bdb-9de2-1227c5fa1551,064C02F0-FF64-42F8-8A71-C8DECE3600FD,NULL,0,1,t-white,"<p>Protecting the world we live in is one of the key challenges for the 21st century. Businesses face both a legal obligation and a moral responsibility to work to ensure that their impact on the environment is minimised. Compliance with climate change and environmental law is relevant to all businesses, not just those that may have an obvious risk of pollution.</p>  ",NULL,NULL,See more articles,Stay ahead,"<p>Keep up-to-date with the latest in environmental law by registering for our updates.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us today,"<p style=""center"">For advice on climate change and environmental law, contact a member of our team.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;d59e28bf-7ef2-4629-b584-5de78c6631bb;33977956-356c-45c1-a4f6-f16ba10127b9;0eaa0790-eb13-4982-a309-ea91a9dfa505;4fece204-ba3c-4f6f-a416-359cac0d10f9,/en/insights-resources/?page=1&locations=&services=292,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{6582D9E4-B79F-4BB2-BABA-1F2B20537003}|{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}|{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}|{A6A3B0BC-061F-4F98-9949-16E412DF9D32}
60,/Services/Climate-Change-and-Environmental-Law/Canada,en-GB,287DD929-3687-488B-A4C5-1809E51E98A9,Canada,Canada,"Gowling WLG's Environmental Law Group combines the strength and flexibility of a global, full-service law firm with the expertise and quality of service of a boutique environmental practice.",NULL,NULL,"<p>Gowling WLG&#39;s Environmental Law Group combines the strength and flexibility of a global, full-service law firm with the quality of service of a boutique environmental practice.</p>    <p>We help clients anticipate new developments in environmental law, delivering practical advice and effective representation that help clients address environmental issues as they arise.</p>    <p>The legal professionals at Gowling WLG are recognized nationally and internationally for their experience in environmental law, including in <em>The Best Lawyers in Canada</em>,&nbsp;<em>The</em>&nbsp;<em>Legal 500</em> and <em>Chambers</em>.</p>    <p>In Ontario, six professionals are &quot;Certified Specialists in Environmental Law&quot; - a designation granted exclusively by the Law Society of Ontario to those who have met established standards of experience and knowledge, and maintained exemplary standards of professional practice.</p>    <h3>The legal expertise you need</h3>    <p>Our in-depth environmental law services include:</p>    <ul>   <li><strong>Brownfields</strong>: Advice on brownfield development strategies addressing environmental, municipal and planning approvals as well as economic incentives</li>   <li><strong>Climate change</strong>: Advice on proposed measures to address climate change, including carbon credit quantification and verification</li>   <li><strong>Corporate transactions</strong>: Environmental counsel in negotiations, due diligence and risk assessment as well as in drafting environmental provisions in transaction and finance documents</li>   <li><strong>Corporate advice</strong>: Counsel to businesses in a wide variety of industry sectors</li>   <li><strong>Emergency response</strong>: Advice with respect to environmental emergencies</li>   <li><strong>Environmental assessments</strong>: Advice on compliance with provincial and federal environmental legislation</li>   <li><strong>Litigation and advocacy</strong>: Representation at every level of court in British Columbia, Alberta, Ontario and Québec on a variety of issues, including toxic tort and contaminated lands litigation, defence and prosecution of environmental laws, and environmental arbitration and mediation, as well as counsel at parliamentary committees, municipal councils and provincial tribunals</li>   <li><strong>First Nations</strong>: Counsel and representation for First Nations, as well as public and private sector clients involved in Aboriginal rights issues</li>   <li><strong>International development</strong>: Preparation of institutional strengthening</li>   <li><strong>Real estate transactions</strong>: Advice on potential liabilities relating to corporate real estate transactions and development projects</li>   <li><strong>Toxic substances</strong>: Assistance in dealing with the registration of new substances for use in Canada, and advice on the proposed designation of certain substances as toxic substances</li>   <li><strong>Training</strong>: Design and delivery of environmental law training programs</li>   <li><strong>Transportation of dangerous goods</strong>: Advice on the registration, use, storage, handling, importing/exporting and transportation of toxic and controlled substances</li>   <li><strong>Waste management</strong>: Advice and representation on all aspects of waste management, from permitting to ongoing compliance</li>   <li><strong>Water and wastewater treatment and management</strong>: Advice on day-to-day operations, corporate structuring and outsourcing of municipal services</li>  </ul>    <h3>Learn more</h3>    <p>We want to help you succeed. To learn more about our environmental law services, please <a href=""~/en/people/?page=1&amp;services=292&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>    <p><strong><a href=""~/en/people/adam-chamberlain/"">Adam Chamberlain</a></strong><br />  Partner, Head of Environmental Law</p>    <p><strong><strong><a href=""~/en/people/natalie-mullins/"">Natalie Mullins</a></strong></strong><br />  Partner</p>  ",GWLG.Canada,29d7e340-a6af-49b5-b223-993a69997a78;a7981dca-18b5-4064-b9ea-340d3fba1862;0efee052-a0c0-4bdb-9de2-1227c5fa1551,064C02F0-FF64-42F8-8A71-C8DECE3600FD,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{6582D9E4-B79F-4BB2-BABA-1F2B20537003}|{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}|{A6A3B0BC-061F-4F98-9949-16E412DF9D32}
61,/Services/Environmental-Litigation/Canada,en-GB,228AF61B-4622-4A86-970B-2BDDC5BEA821,Canada,Canada,"When it comes to environmental law, you need a team with an in-depth understanding of the business, regulatory and litigation issues that often arise in environmental claims. The Gowling WLG Environmental Litigation Group delivers on all counts.",NULL,NULL,"<p>When it comes to environmental law, you need a team with an in-depth understanding of the business, regulatory and litigation issues that often arise in environmental claims. The Gowling WLG Environmental Litigation Group delivers on all counts.</p>    <h3>Effective leadership</h3>    <p>Recognized by clients and peers for our leadership, we handle a broad range of environmental concerns with an approach that&#39;s direct, practical and efficient. You&#39;ll receive advice based on experience and highly specialized knowledge, and solutions that are timely and effective.</p>    <h3>Teamwork</h3>    <p>Working as a team, we know that our success depends on your success. We align our interests with yours to understand the needs of your industry and your business, and have the expertise to deliver specialized advice on the commercial, regulatory and litigation issues that often arise in environmental claims.</p>    <h3>Tailored solutions</h3>    <p>Understanding that one size does not fit all, our legal teams are carefully crafted and incorporate professionals from a range of relevant backgrounds, including lawyers with technical expertise. Working in partnership with your external advisers as required, we&#39;re devoted to finding creative, efficient solutions to your important challenges so that you can achieve success.</p>    <h3>Experienced support</h3>    <p>Our lawyers regularly act as counsel in regulatory and civil matters, including appearing at all levels of court across Canada and representing our clients through alternative dispute resolution, such as mediation or arbitration. We&#39;ve experienced the full gamut of environmental claims, including the prosecution and defence of claims pertaining to:</p>    <ul>   <li>Migration of contamination on to, or off of, property</li>   <li>Contamination caused by leakage from old, defective or improperly installed or removed tanks</li>   <li>Contamination caused by negligent removal of hazardous materials</li>   <li>Professional negligence on the part of environmental consultants or businesses engaged in the handling of hazardous materials</li>   <li>Personal injury or occupational health claims</li>  </ul>    <p>We&#39;re also skilled in the economics of environmental litigation, including:</p>    <ul>   <li>Quantifying damages (including economic losses)</li>   <li>Quantifying diminishment in land value</li>   <li>Negotiating and drafting complex commercial, real estate and related agreements to implement business solutions to environmental claims</li>   <li>Negotiating and drafting complex multi-party settlement agreements, including indemnities</li>  </ul>    <h3>Top-ranked by clients and peers</h3>    <p>The market consistently recognizes Gowling WLG&#39;s position as a leader in environmental litigation. Our environmental group is frequently ranked by clients and peers among the very best in Canada in prestigious guides from Chambers, Lexpert, and Best Lawyers.&nbsp;</p>    <h3>Practical, cost-effective solutions</h3>    <p>We provide cost-certainty and case management services through Practical LPM&trade;, our legal project management tool that helps keep your matters on track, on time and on budget. We also reduce costs and provide timely service through the assistance of Go.Plead&trade;, our extensive legal research and precedents program.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you succeed, please <a href=""~/en/people/?page=1&amp;locations=GWLG.Canada&amp;services=293"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,29d7e340-a6af-49b5-b223-993a69997a78,E652EB3B-CD9C-4C1E-9991-A4B38E5E1CD3,NULL,0,1,t-white,NULL,Featured Insights,381bade0-f85d-4e7c-8ed5-8378fcb3f85b;a3eed3a1-2265-4a6d-a9b9-51ce0bd70cf7,View all Environmental Litigation articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=293,NULL,{6582D9E4-B79F-4BB2-BABA-1F2B20537003}
65,/Services/Executive-Compensation/Canada,en-GB,AB9241D2-3AB9-4B77-A83C-B63EB1864DF9,Canada,Canada,"In an increasingly competitive market, companies must provide creative and tax-effective compensation and benefits to attract, retain and motivate the highest-quality people.",NULL,NULL,"<p>In an increasingly competitive market, companies must provide creative and tax-effective compensation and benefits to attract, retain and motivate the highest-quality people.</p>    <p>Well-designed compensation plans and arrangements that take into account the complexities of domestic and foreign tax regimes, as well as securities and employment laws, can assist companies in avoiding unexpected costs and controversy - and can yield significant advantages in developing a premier workforce and superior management team.</p>    <p>The Gowling WLG Executive Compensation Group is a multidisciplinary team of legal professionals with expertise in taxation, pensions and benefits, employment and securities laws, and corporate governance. As part of a global, full-service law firm with offices across Canada as well as in the U.K., Europe, Asia and the Middle East, we provide practical, seamless advice on all compensation and benefits issues.</p>    <h3>Plans tailored to your needs</h3>    <p>Before adopting any executive compensation plan, we work with clients to determine which plan(s) will help them best meet their business objectives. Once we understand an organization's goals, we use our experience, knowledge and creativity to devise unique and innovative ways to achieve them.</p>    <p>Our group can design a full range of contemporary compensation plans, including equity-based incentive plans and arrangements, and phantom share and performance-based plans as well as registered pension plans, supplementary retirement plans, retirement compensation arrangements, group RRSPs and retiring allowances.</p>    <p>We counsel clients on governance aspects, securities law and stock exchange compliance, and the tax implications for the company and individuals participating in these plans. Our employment lawyers have expertise in drafting and negotiating senior executive employment contracts as well as change-of-control, indemnification and severance agreements.</p>    <h3>In Canada and abroad</h3>    <p>Gowling WLG bridges tax borders by delivering high-quality, integrated advice on the tax laws of foreign countries, in addition to the Canadian tax implications of arrangements for clients and their employees.</p>    <p>We also assist with transfers of foreign personnel between Canada and other jurisdictions on a temporary or permanent basis, and provide advice regarding visa and work permit issues as well as Canadian income tax implications for inbound and outbound personnel.</p>    <h3>Learn more</h3>    <p>We want to help you succeed. To learn more about our services, please contact any member of our team.</p>  ",GWLG.Canada,NULL,BAA166B8-ED10-469A-BEC6-0A2E4C72DBBB,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
67,/Services/Family-Law/Canada,en-GB,53497107-7A75-437E-A88D-5CB559850BD4,Canada,Canada,Relationships among family members are sometimes challenging. Our professionals can help resolve family disputes and offer strategies to avoid conflicts.,NULL,NULL,"<p>Relationships among family members are sometimes challenging. Our professionals can help resolve family disputes and offer strategies to avoid conflicts.</p>    <p>The members of our national Family Law Group provide personalized service to resolve family law issues through advanced planning, skilled negotiations and experienced representation in both courtroom and mediation settings.</p>    <p>In addition to the traditional services we provide to families in transition, our in-depth expertise enables us to provide strategic advice to business clients on protecting their commercial assets. We also consult with other professionals to advise clients on the impact of family law on their estate, corporate and tax-planning matters.</p>    <p>Our professionals offer a wide range of services, including assistance with:</p>    <ul>   <li>Adoptions</li>   <li>Drafting and negotiating marriage contracts</li>   <li>Cohabitation and surrogacy agreements</li>   <li>Separation agreements</li>   <li>Property division</li>   <li>Determination of spousal and child support and common law rights</li>   <li>Divorce applications</li>  </ul>    <p>In some cases, agreements can be drafted to protect assets, including family trusts and business assets. For litigated matters, our members argue family law issues in court and in private arbitrations.</p>    <h3>Learn more</h3>    <p>To find out more about our family law services, please <a href=""~/en/people/?page=1&amp;services=295&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,53ee8dd0-2165-4810-bcfc-def5b50f875f,CBE07A16-0986-4A6B-9106-D0834ADFE5BC,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{28312680-682A-4B72-AEE4-27712CD75F5A}
69,/Services/Financial-Services-Regulation/UK,en-GB,79D617C6-6EC1-4B1A-A248-95759FC4385E,UK,UK,"Whatever the issue - whether it's developing your financial services business, taking an active part in industry change and consolidation or dealing with regulatory scrutiny - Gowling WLG's Financial Services team can support you.",NULL,NULL,"<p>Whatever the issue - whether it&#39;s developing your financial services business, applying for authorisation, supervision and ongoing compliance issues, investigations and enforcement, taking an active part in industry change and consolidation or dealing with regulatory scrutiny, our Financial Services Regulation team&#39;s end-to-end tailored service is focused on helping you to meet your goals.</p>    <p>Our dedicated team includes lawyers who have worked both as regulators and in-house at top tier financial services companies. Our experience offers valuable insight into the UK Financial regulator&#39;s perspective, as well as an in-depth understanding of the challenges you face.</p>    <p>Taking a multidisciplinary approach to ensure full service support, we combine practical and technically excellent advice with a responsive and &#39;can-do&#39; attitude. Our regulatory experience covers a multitude of areas including FCA thematic projects, investigations, enforcement actions, s166 Skilled Person reviews and high profile redress exercises arising from FCA reviews.</p>    <p>We are particularly skilled in regulatory investigations, defending listed companies, senior management, heads of compliance and MLROs in FCA investigations and enforcement proceedings. We also advise on Skilled Person reports to the regulator. We take a proactive approach to ensure regulatory investigations are resolved quickly and efficiently.</p>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;""><em>Gowling WLG shows the type of commitment and engagement that we want from our external counsels, and it demonstrates that they are innovative and are really trying to understand the business on the detailed level that we need.</em> <cite>$10 billion FinTech operating the e-commerce sector</cite></p>  </blockquote>    <p>Our experiences have taken us to matters across all areas of financial services. Whether you are a financial institution or an entrepreneur with a clever idea, we can work with you to help ensure your success.</p>    <p>{^widget|(bghover1)colour-darkred|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Europe%27s+leading+FinTech|(headline3)Investment+funds|(headline2)Supporting+FinTech|(copy1)Appointed+to+the+UK+panel+of+one+of+the+world%27s+highest+value+FinTech+companies%2c+we+advise+them+on+the+UK%27s+payment+services+and+consumer+credit+regulatory+regimes.|(copy3)We+have+a+long-established+presence+in+the+investment+funds+industry%2c+advising+on+all+types+of+funds%2c+invested+in+a+wide+range+of+asset+classes%2c+in+the+UK+and+globally.|(copy2)We+routinely+provide+perimeter+guidance+advice+to+FinTech+firms+seeking+to+launch+innovative+financial+products+and+services+in+the+UK.+|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <div>  <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Their knowledge and experience of regulators has been one the firm&#39;s strengths.<cite>The Legal 500</cite></p>  </blockquote>    <p>Our team frequently speaks at industry conferences, seminars and webinars on financial services topics, including FCA Enforcement, market abuse and FinTech.</p>    <p>We are also ranked by <em>The Legal 500</em> for Financial Services: Non-Contentious/Regulatory and Financial Services: Contentious, with&nbsp;Sushil Kuner named as a key lawyer&nbsp;in the FinTech and Financial Services: Non-Contentious/Regulatory categories.</p>    <h3>Contact our team in the UK</h3>    <p><a href=""~/en/people/kam-dhillon/"">Kam Dhillon</a><br />  Principal Associate</p>    <p><a href=""~/en/people/sushil-kuner/"">Sushil Kuner</a><br />  Principal Associate</p>  </div>  ",GWLG.UK,6aaeb7d9-c65e-4c77-aa4d-2cf35e32c38c;0ccc4841-f8a1-4356-853e-e2ad6f7e230c,AA5DCCE5-FBE3-48B0-8A5C-B653C134F240,NULL,0,0,t-white,"<p>Regulatory change continues to top the agenda and will do for some time to come. There are more measures on the horizon, bringing new regulatory requirements and tighter control. These challenges, together with technical developments, also present many opportunities for those ready to embrace the new environment. Following Brexit, the UK Government is reviewing the regulatory environment and infrastructure, and is keen to encourage more investment in the UK in areas such as FinTech.</p>  ",Expertise in Financial Services Regulation,NULL,See more articles,Stay ahead,"<p>Keep up-to-date with the latest in financial services regulatory environment by registering for our updates.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us today,"<p>For advice on financial services regulation, contact a member of our team.</p>    <p><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",NULL,NULL,NULL,{7FD50B05-0CA7-43E6-B11F-B63EC34397C9}|{9B40E9F4-4CA7-42F5-ACBF-F64D334E4377}
72,/Services/Gamified-E-Learning/UK,en-GB,2BB50197-F92A-4FF4-8B47-98C231DD25D2,UK,UK,Gaming is a feature of modern life: 8 in 10 adults between 16 and 65 years old play video games ranging from sophisticated online multiplayers through to simple phone apps.,NULL,NULL,"<p>Gaming is a feature of modern life: 8 in 10 adults between 16 and 65 years old play video games ranging from sophisticated online multiplayers through to simple phone apps.</p>    <p>What&#39;s more, it&#39;s good for you. Research shows that the choices made by gamers improve creativity, decision making and perception.</p>    <p>What if you could replicate these benefits in your training? What if you could deliver that training without asking employees to travel or spend significant time out of the business? What if your training budget could afford it?</p>    <p>Let&#39;s play...</p>    <h2>The modules</h2>    <p>Our modules use experiential learning techniques and game theory to maximise engagement and knowledge retention. Modules include handling a disciplinary hearing, managing grievances and investigations and successful performance management.</p>    <p>Each session is a separate story with animated characters, with whom the user interacts as in a video game.</p>    <p>The user works through common &#39;red flag&#39; situations and is asked to decide how they would deal with them. The individual decisions made by each user shape the outcome of their module. Having identified and responded to these issues during the module managers can seek to avoid similar pitfalls in real life; reducing both legal risk and cost.</p>    <h2>What the users say</h2>    <blockquote>  <p>&quot;This engaging and innovative tool gives our line managers the confidence to make good decisions without exposing our business to risk. It also has the useful side effect that they recognise when they should get HR involved!&quot;<br />  <cite>Raminder Grewal, formerly Head of HR, Coral Racing</cite></p>    <p>&quot;Cutting edge ideas combined with stimulating learning for hard pressed managers that is immediately applicable to their day to day roles&quot;.<br />  <cite>Perry Timms, Independent Practitioner and CIPD Social Media Adviser</cite></p>    <p>&quot;User experience is paramount and Gowling WLG&#39;s employment team has created an innovative and focused approach to e-learning.&quot;<br />  <cite>Tim Carter, formerly In-House Counsel at Martin McColl</cite></p>  </blockquote>    <h2>Recognition</h2>    <p>Highly Commended in the Future of Legal Services category at Legal Week&#39;s Legal Innovation Awards 2015.</p>    <p>Shortlisted for Best client-facing use of digital media at the Lawyer Business Leadership Awards 2015.</p>    <h2>What does it look like?</h2>    <p>Jemma O&#39;Reilly, a principal associate in the employment team, provides an overview of the product in our <a href=""https://www.youtube.com/watch?v=WD2cVaLhZ80"" target=""_blank"">Save Time &amp; Money: Play More Games video</a> on YouTube.</p>    <h2>Benefits</h2>    <ul>   <li>Reduced legal risk, litigation and cost.</li>   <li>Managers identify common pitfalls and make better decisions.</li>   <li>Short sessions to maximise retention and minimise training time.</li>   <li>Access to standalone materials as instant refreshers.</li>   <li>Detailed reporting and learning insight.</li>   <li>Integration with existing platforms for seamless access.</li>   <li>Fast and effective delivery across multiple locations and devices.</li>  </ul>  ",GWLG.UK,79205c59-28cb-4630-bd62-bf070ba732b0,EC5BED5A-9C39-4182-8D5E-DB0B546CB67A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3F8C3F58-5322-4435-8BC6-F40773A00AC9}
73,/Services/Gaming/Canada,en-GB,C219B55A-C7F7-461B-97EC-AEC77CCC1588,Canada,Canada,Gowling WLG's Gaming Law Group works with a full spectrum of gaming clients to ensure that their interests are protected and that they're functioning within the strict confines of a highly regulated landscape. ,NULL,NULL,"<p>Gowling WLG&#39;s Gaming Law Group works with a full spectrum of gaming clients to ensure that their interests are protected and that they&#39;re functioning within the strict confines of a highly regulated landscape. Clients depend on us to provide creative advice and deliver innovative solutions with respect to their various gaming issues and challenges.</p>    <h3>Protecting your rights</h3>    <p>We hold extensive experience in advising participants in Canada&#39;s gaming industry. Our clients include lottery commissions as well as broader gaming participants, and we regularly advise on applicable regulatory regimes in Canada and the commercial elements relevant to the gaming industry, including online gaming, fantasy sports and advertising.</p>    <p>We advise on matters relating to casino development and acquisitions by strategic and financial investors, and negotiate consortium arrangements involving casinos. We also regularly assist in the negotiation and drafting of commercial agreements, technology licensing agreements and patent applications.</p>    <h3>Broad industry experience and a strategic, team-based approach</h3>    <p>Our group can advise you on a comprehensive range of gaming law matters, and is supported by Canada&#39;s leading intellectual property and advertising and marketing law practices. International in scope, our team provides seamless co-ordination of services across all jurisdictions, helping clients navigate federal and provincial gaming and related legislation and realize their business objectives.</p>    <h3>Learn more</h3>    <p>We want to help you succeed. To learn more about our services, please <a href=""~/en/people/?page=1&amp;services=297&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,c31b146c-1c90-4aa9-bbdd-a3660daf3a5b;1f6ff58e-9aec-4874-b591-42a0352c9977,5286F652-796D-4C16-8970-A97E5C4E98C9,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{D345C01A-CEFC-42D0-9E6C-D1A471471F9B}|{252EDF3E-BE13-4CF0-B512-E0270C5C60B7}
75,/Services/Government-Affairs/Canada,en-GB,303B7FBC-B3AD-488B-947C-F2848E099F09,Canada,Canada,"Our Government Affairs Group provides sophisticated legal, regulatory and public policy advice on virtually any government-related matter.",NULL,NULL,"<p>Gowling WLG&#39;s Government Affairs Group has exceptional experience in both the public and private sectors, with a 360-degree perspective that enables us to provide sophisticated legal, regulatory and public policy advice on virtually any government-related matter. We find solutions and deliver practical, effective results.</p>    <p>Gowling WLG advises a wide range of clients across Canada, including all levels of government and its agencies, trade and professional associations, non-governmental agencies, foreign governments, small and global companies, Crown corporations, utilities, developers and educational institutions such as schools and universities.</p>    <p>With expertise in key areas such as lobbying, government procurement, energy, infrastructure, international trade, transportation and immigration, we provide the right mix of services for international companies looking to enter the Canadian market.</p>    <p>Our professionals also serve First Nations and clients in industries such as food and beverage, environment and cleantech, aerospace and defence, technology, and manufacturing. We represent the interests of our clients before parliamentary committees, government task forces, and at all levels of federal and provincial courts.</p>    <h3>Advancing your agenda</h3>    <p>Gowling WLG&#39;s practitioners understand government from the inside out, as many of us have held elected office, senior government positions or contributed to the development of policy, legislation and regulatory regimes. Our extensive network of government contacts is a key advantage for industry stakeholders in presenting their concerns to decision makers.</p>    <p>The firm also advises on lobbying compliance and ethical obligations relating to gifts and hospitality, and provides guidance on issues relating to conflict of interest at the federal, provincial and municipal levels.</p>    <h3>Learn more</h3>    <p>We want to help you succeed. To learn more about our government affairs services, please <a href=""~/en/people/?page=1&amp;services=428&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,40d2e703-8710-44d5-9b4a-6108d5734e98,39CA3D7E-072F-42C5-AD32-EE659513B4B3,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A09A7A80-1041-4B5E-B156-C023BC66DA86}
76,/Services/Employee-Benefits/UK,en-GB,9F7B9E07-E1DF-4954-B2D6-8C1A25C90B04,UK,UK,"Our team provides specialist legal advice on medical plans, risk benefits and related employee benefit arrangements.",NULL,NULL,"<p>Our team provides specialist legal advice on medical plans, risk benefits and related employee benefit arrangements.</p>    <p>Whether we are advising employers, insurance companies or benefit consultancies, we distinguish ourselves by providing our clients with a collaborative service that draws upon broad industry knowledge and the latest developments in employee benefits.</p>    <p>Our clients receive clear, practical and commercial legal advice on the structuring and provision of employee benefits, rooted in an understanding of providers&#39; products and the complexities of the tax and employment legislation surrounding their provision. Our practical experience also enables us to evaluate how individual benefits interact with other elements of the employer&#39;s remuneration package and contracts of employment.</p>    <p>We help clients to manage legal risk across three main areas:</p>    <ul>   <li>life assurance and critical illness</li>   <li>income protection</li>   <li>private medical cover and wellbeing</li>  </ul>    <h3>Life assurance and critical illness</h3>    <p>The wide range of group and single-life policies that are available within registered, excepted and relevant arrangements offers an employer considerable scope for flexibility when tailoring life cover to the circumstances of its employees and its business.</p>    <p>Take life cover out of the occupational pensions arena, and less attention may be paid to the potential tax consequences, governance and the discretionary aspects of benefit distribution. There may also be discrimination issues and compliance requirements to consider.</p>    <p>The provision of critical illness cover often needs to be considered in the context of other benefits. Different circumstances and types of business mean that each employer will have its own priorities that shape how these benefits should be delivered. For example, how might &#39;key man&#39; insurance or shareholder and partner protections be incorporated into an overall group risk programme?</p>    <h3>Income protection</h3>    <p>Income protection is a straightforward product that is usually simple to set up. However, it can create challenges later. Our skills in this area lie in the application of employment and tax rules to ensure the efficient integration of this benefit with existing pension rights under occupational or contract-based schemes and to assist in the event of disputes.</p>    <p>If a dispute should arise between employers, employees and the insurer, we have the experience and expertise to help. Prevention is, however, better than cure and reviewing the terms of an arrangement at the outset can minimise the risk of challenge. A legal review by our team will help to ensure that benefit entitlement under the rules is compatible with the terms of the insurance cover taken out by the employer.</p>    <h3>Private medical benefits and wellbeing</h3>    <p>The provision of private medical benefits to employees and their families is under close scrutiny from many employers. The approach to this must be cost-efficient, but also responsive to the employees&#39; needs and effective as an absence management tool.</p>    <p>Associated employee health and wellbeing options are becoming increasingly sophisticated. The resurgence of corporate healthcare trusts, as an alternative to insurance, enables employers to take a more bespoke approach to the funding and design of their medical benefits arrangements.</p>    <p>Although the use of a trust structure involves additional steps at the outset, the potential financial, as well as HR-related, advantages can make this option worth exploring.</p>    <p>We work with many prominent providers, intermediaries and administrators in developing healthcare trusts. We are well-versed in explaining the concept to employers in an easy-to-understand way and working efficiently with other advisers to establish their own trust in a manner that achieves their aims within a sound governance structure and in a tax efficient manner.</p>    <h3>Other work carried out by our employee benefits practice</h3>    <p>In addition to reviewing and commenting upon the basic benefits structures adopted by employers, we can also look at these in the wider context of risk management. This includes considering the possibility of using an employer&#39;s existing captive insurance arrangements or their integration within group-wide or multi-national benefit programmes.</p>    <p>Examples of our innovations in this area include:</p>    <ul>   <li>The design of model life assurance policy and trust documentation for insurance companies. Our involvement ensured that policy provisions complied with the statutory rules relating to relevant and excepted group life schemes, while improving governance standards within the underlying trust.</li>   <li>The development of legal solutions that allow equity partners to participate in a corporate healthcare trust for their employees and the use of trusts as part of a wider absence management package to employers.</li>   <li>A legal health check review and revision of existing healthcare trust documentation to ensure that it:   <ul>    <li>complied with HMRC&#39;s current rules</li>    <li>adopted improved governance standards</li>    <li>protected the position of individual trustees</li>    <li>achieved a recovery of VAT on administration charges saving money that would otherwise have been lost.</li>   </ul>   </li>  </ul>  ",GWLG.UK,NULL,696B4A4A-E155-473E-B435-3FC3D484209E,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
80,/Services/Immigration/Canada,en-GB,C948345F-4372-4B79-8A34-6E8DED01B3D9,Canada,Canada,"In today's global economy, the ability to move personnel across borders and recruit skilled workers internationally is crucial. Gowling WLG's Immigration Group navigates the complexities of immigration laws and rules, and is here to help get the people you want to the places you need them to be.",NULL,NULL,"<p>For over 20 years, Gowling WLG has been a leader in immigration law. In close partnership with our colleagues practising in the areas of employment and labour, cross-border tax, business and intellectual property law, we provide a full range of services to help companies establish and conduct successful businesses in Canada.</p>    <p>We offer high-quality, cost-effective immigration law advice on key immigration-related matters such as:</p>    <ul>   <li>Corporate employee transfer applications, both temporary and permanent</li>   <li>Work permit applications, including NAFTA applications</li>   <li>Labour Market Impact Assessment (LMIA)</li>   <li>Citizenship applications</li>   <li>Permanent Residence applications</li>   <li>Investor and Entrepreneur applications</li>   <li>Provincial Nominee Program applications</li>   <li>Applications to overcome admissibility issues</li>  </ul>    <p>We distinguish ourselves by having the expertise and knowledge to provide mobility to our clients. We deliver a range of value-added solutions that complement our immigration services, including:</p>    <ul>   <li>Developing international human resources strategies and policies</li>   <li>Counselling foreign corporations expanding to North America</li>   <li>Preparing employment contracts for foreign workers</li>   <li>Deploying integrated expatriate tax services</li>   <li>Assisting with global business immigration services</li>   <li>Assessing immigration and entry options for foreign candidates</li>   <li>Creating turnkey immigration and workforce mobility solutions</li>  </ul>    <h3>Learn more</h3>    <p>To learn more about how we can help you with your immigration law matters, please <a href=""~/en/people/?page=1&amp;services=438&amp;locations=GWLG.Canada"" target=""_blank"">reach out to&nbsp;any member of our team</a>.</p>  ",GWLG.Canada,aa6497d4-fce6-44ea-b34c-5e7e86382372;8019d9ad-34b0-4cbd-8dfb-99a7578a4b6a,C88EECE6-41B1-4DB2-A8FB-58D8E5EEB453,NULL,0,1,t-white,"<p>In today&#39;s global economy, the ability to move personnel across borders and recruit skilled workers internationally is crucial. Gowling WLG&#39;s Immigration Group navigates the complexities of immigration laws and rules, and is here to help get the people you want to the places you need them to be.</p>  ",Featured insights,ce345eb4-9456-472a-8329-de6a7c3ace18;daae516f-9053-45ce-b23a-b7472b5c4881;71bf6609-7e03-4494-b53f-72f2a36ff696;473c73d3-532a-476c-b7a6-53d6f06f1fe6;cd9ecfca-ecec-4cfb-b0b7-c899568c3510;b9a9ff1d-22f2-461c-9587-7454169d2fd0;33fd2edc-6d6d-4be9-bae7-1c0e1fa5945b,View all Immigration articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=438,NULL,{F5614FDC-82A8-445B-BEEC-2434212F5F7E}|{CA8A987F-3831-4D18-B317-AD10598B445B}
81,/Services/Indigenous-Law/Canada,en-GB,03A20324-C349-4055-B1A3-035FDF3528D1,Canada,Canada,There's a level of expertise that only half a century of experience can provide - and a level of success that only a trusted legal partner can deliver.,NULL,NULL,"<p>Since the 1950s, Gowling WLG has been at the forefront of Indigenous law in Canada. We&#39;ve worked alongside First Nations, Métis and Inuit peoples in landmark self-government agreements, resource development projects and Supreme Court cases. We&#39;ve also acted for project proponents and governments at every level.</p>    <p>This singular legacy enables us to provide you with sophisticated legal advice in every aspect of Indigenous law - delivering practical, cost-effective solutions that help you advance your vision and achieve your goals.</p>    <h3>Top-tier legal advice</h3>    <p>Gowling WLG is home to one of the largest and most respected Indigenous law practices in Canada. Our lawyers are frequently recognized as top practitioners in the field in key legal directories such as <em>Chambers Global</em>, <em>The Best Lawyers in Canada</em> and the <em>Canadian Legal Lexpert Directory</em>. <em>The Best Lawyers in Canada</em> 2019 guide named Gowling WLG the &quot;Firm of the Year&quot; for Indigenous law.</p>    <div style=""background-color:#D3d3d3;padding: 15px 15px 15px 15px"">  <h3 style=""color: 401C42;"">Full Circle: A history of Indigenous and non-Indigenous relations in Canada</h3>    <p>Originally developed for Gowling WLG professionals and staff, and now adapted for the legal teams, executives and employees of our valued clients, the <em>Full Circle</em> presentation will help participants gain a better understanding of Indigenous people and learn how to place current events in their broader historical, social and legal context.</p>    <p><a class=""c-button"" href=""~/en/events/2021/a-history-of-indigenous-non-indigenous-relations/"" target=""_blank"">Learn more about <em>Full Circle</em></a></p>  </div>    <h3><br />  Sophisticated expertise</h3>    <p>The needs and aspirations of Indigenous communities continue to grow in scope and complexity. Accordingly, the practice of Indigenous law increasingly demands specialized expertise in a wide range of areas. As a full-service law firm, Gowling WLG is equipped to meet your diverse legal needs - from treaty rights and inherent rights, land claims, self-government, taxes and trusts to energy, mining, economic development and environmental matters.</p>    <h3>Strong ties to Indigenous communities</h3>    <p>We&#39;ve served as trusted legal counsel to Indigenous peoples for over 50 years, and we&#39;re proud to have these same communities reflected in our own team. We actively recruit lawyers of Indigenous ancestry and support numerous initiatives that promote their advancement in the legal profession.</p>    <h3>A unique perspective</h3>    <p>Gowling WLG is one of the only full-service law firms in Canada that acts for Indigenous clients as well as private industry, project proponents and all levels of government. As a result, our clients benefit from our in-depth insight into the views of parties on all sides of the table, and the national scope of our practice gives you the benefit of best practices and strategies from across the country.</p>    <h3>Outstanding service</h3>    <p>We&#39;ve built our reputation on being collaborative, flexible, responsive and, above all, available - wherever and whenever you need us.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you succeed, please <a href=""~/en/people/?page=1&amp;services=440&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,b2866a6b-d1a8-4481-91d8-78e0e7b8bcb4,264F3CAC-2DDB-4C4E-8048-EE0D63D1E68D,NULL,0,1,t-white,<p>There&#39;s a level of expertise that only half a century of experience can provide - and a level of success that only a trusted legal partner can deliver.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,d3e6fb36-169b-4f58-98e7-e5223327f397,NULL,NULL,{27FC7F53-00BF-44EA-8184-3B15FD753C5D}
82,/Services/Indirect-Real-Estate/UK,en-GB,A213EF19-3A56-442E-9043-8F44275189B9,UK,UK,Our corporate real estate lawyers offer seamless legal advice to help you at every stage of the indirect real estate investment cycle.,NULL,NULL,"<p><strong>When navigating joint ventures, funds, corporate acquisitions and financing structures in the real estate sector, it is essential that the legal advice you receive covers all angles. Working alongside our wider Real Estate Group, our corporate real estate lawyers offer a seamless service concerning transactions in the sector. Our Indirect Real Estate team works in unison with our tax and finance lawyers to advise our clients at every stage of the investment cycle.</strong></p>    <p>Our practice is built on a foundation of strong corporate technical experience and in-depth sector knowledge combined with a commercial outlook. We advise across the full set of asset classes including residential development, build to rent, logistics, student accommodation, senior living, hotels and leisure, offices, retail and life sciences.</p>    <p>From fund formation to the acquisition and disposal phase, we take a solutions-driven approach to the entire indirect real estate investment lifecycle. We have deep experience in establishing private and listed onshore and offshore real estate funds and work at the leading edge of new fund structures.</p>    <p>We procure time and cost efficiencies for our clients by utilising our dedicated Transaction Services team to assist with due diligence, the preparation of targets&nbsp;for sale, data room compilation and disclosure process management.</p>    <p>We are experienced in advising seasoned investors in the UK market as well as first-time investors and are well equipped to advise our domestic clients on their investment portfolios abroad with the assistance of our international offices and network of best friend firms.</p>    <h2>Indirect real estate advisory services</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Acquisitions and disposals</li>   <li>Funds</li>   <li>Indirect real estate services</li>   <li>Joint ventures</li>   <li>Solvent restructurings</li>   <li>Structured financing</li>  </ul>    <h3>Client work</h3>    <p>Our clients include UK and international private equity houses, asset managers, real estate investment trusts (REITs), pension funds, institutional investors, high net worth investors, family offices and public sector entities. Some of our past and current projects include:</p>    <p>{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Brent+Cross|(headline3)St+Modwen|(headline2)Universities+Superannuation+Scheme|(copy1)Advising+on+the+structuring%2c+the+implementation+and+complex+ongoing+advice+in+relation+to+the+joint+venture+investment+arrangements+for+the+%c2%a34.2+billion+redevelopment+of+Brent+Cross%2c+one+of+the+largest+and+most+complex+mixed-use+regeneration+schemes+in+Europe.|(copy3)Advising+St+Modwen+Developments+on+a+joint+venture+with+VINCI+plc+in+relation+to+the+%c2%a32+billion+development+of+New+Covent+Garden+and+its+subsequent+variation.|(copy2)Advising+Universities+Superannuation+Scheme+on+the+establishment+of+a+%c2%a3300+million+ground+breaking+joint+venture+investment+arrangement+with+Places+for+People+investing+into+the+private+rented+sector+across+the+UK.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-aubergine|(width)|(height)^}{^widget|(bghover1)colour-darkred|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)M%26G+plc|(headline3)Triple+Point+REIT|(headline2)Investment+platform|(copy1)Advising+M%26G+plc+on+the+set+up+and+structuring+of+a+JV+fund+using+the+new+private+fund+limited+partnership+vehicle+and+bringing+together+both+national+and+international+professional+investors.+The+fund+acquired+the+Selly+Oak+Retail+Park+in+Birmingham+for+%c2%a394+million.|(copy3)Since+its+listing+in+August+2017%2c+advising+Triple+Point+REIT+on+its+downstream+acquisitions+totalling+approximately+60+transactions+and+over+100+properties.|(copy2)Advising+on+the+launch+of+a+new+investment+platform+between+NFU+Mutual%2c+Apache+Capital+and+Harrison+Real+Estate+Capital.+The+platform+intends+to+invest+in+a+range+of+up+to+seven+build-to-rent+schemes+across+England+and+Scotland.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">It&#39;s very joined up between the funds team and real estate team. [They&#39;re] able to draw on technical financial services regulatory advice at short notice and provide integrated response.<cite>The Legal 500</cite></p>  </blockquote>    <p>We are consistently ranked as a top tier real estate firm by <em>The Legal 500</em> <em>and Chambers and Partners</em>. Our Real Estate Group has also been recognised by a host of industry awards including <em>The British Legal Awards</em>, <em>The Times Best Law Firms</em> and <em>The Lawyer Awards</em>.</p>    <h3>Contact our team</h3>    <p>For further advice on how we can help you with your investment opportunities, please contact a member of our team.</p>    <p><strong><a href=""~/en/people/micky-yang/"">Micky Yang</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/chris-towle/"">Chris Towle</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/sharon-ayres/"">Sharon Ayres</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/jeremy-millington/"">Jeremy Millington</a></strong><br />  Partner</p>  ",GWLG.UK,c8f9785f-4411-492e-b36d-4fc4ee58fc5c;d7a64117-fe8d-47a0-ace6-75c8607bfcdd;414ac382-6045-48c9-8797-b778fbe6164d;a87f189a-5214-4ce2-9ca9-a54ac984cba6,8F6A2B31-4A27-4128-9845-771F890961E0,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C288CC9A-2E17-4C90-85A1-B3A1EBCF8BE1}|{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{0A35E7F0-4054-4828-AEAE-E83D218832CF}|{4114B62D-8AEF-4E3A-ACB8-2F0F147DAABA}
83,/Services/Industrial-Logistics/UK,en-GB,F26CFDC6-BA13-4F66-910A-0A837367D984,UK,UK,A growing demand for large industrial sites and distribution centres fuelled by more people shopping online has led to resurgence in the logistics market. Our sector-focused experts have been at the heart of the latest large-scale transactions.,NULL,NULL,<p>A growing demand for large industrial sites and distribution centres fuelled by more people shopping online has led to resurgence in the logistics market. Our sector-focused experts have been at the heart of the latest large-scale transactions.</p>    <p>Our experience includes advising global leader Prologis on major pre-let agreements; Roxhill Development&#39;s plans to develop a one million sq ft distribution park at the Port of Tilbury; and US private equity group Harbert Management Corporation&#39;s acquisition of four major industrial estates from Segro in a &pound;204.5 million deal.</p>  ,GWLG.UK,5a15d673-e73e-43f9-8551-dcf291247f4d;1c4323a8-fcc2-4694-a0ae-23264e506ff8,675A30E2-3BA9-4E1F-B4F5-348D96311470,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,40c2df88-693d-451b-8633-8eee3c76676f,NULL,NULL,{14626987-C3CA-477D-8FDD-56314FBF5B3D}|{DC17FEA2-92A1-4F93-9CDB-6A063A21F400}
86,/Services/Insurance-and-Reinsurance/UK,en-GB,588FC035-4FC7-4269-ADC0-37B286E2468D,UK,UK,"Respected in the London market, we are a highly-knowledgeable team of specialist insurance lawyers, with an international reach. ",NULL,NULL,"<p>Respected in the London market, we are a highly-knowledgeable team of specialist insurance lawyers, with an international reach. We differ from our competitors in that we advise a broad and varied client base, encompassing insurance companies, Lloyds&#39; syndicates, MGUs and insurance brokers, as well as key policyholder clients of the firm in the real estate, corporate and pensions sectors.</p>    <p>We provide clear, fully considered advice, and place our clients&#39; commercial interests at the heart of what we do. We strive to settle disputes wherever possible, but you can be sure that we will fight our hardest for you when necessary.</p>    <p>Most of our experts have a litigation background, as well as being non-contentious insurance lawyers, so we are ideally placed to identify risk; to analyse and advise on the best use of insurance; and to stress-test the cover; driving the most value from the deal for you, whilst also addressing insurer concerns.</p>    <p>We are embedded in the insurance market and use our industry knowledge and connections to innovate wherever possible. We often work with entrepreneurial clients to bring new and bespoke insurance products to market, including most recently in the financial services and real estate sector.</p>    <p>Should you require assistance in foreign jurisdictions, we can either call upon insurance experts located in our overseas offices, or we can rely upon our network of trusted insurance lawyers in other jurisdictions who share our approach to client service.</p>    <p>Please get in touch with one of our key contacts to discuss how we can assist you with the opportunities and challenges you face.</p>    <h3>Client work</h3>    <p>Our services cover the full spectrum of our clients&#39; contentious and non-contentious requirements, including:-</p>    <ul>   <li>Advising on complex coverage issues in all classes of commercial insurance business, including financial lines such as directors&#39; &amp; officers&#39; liability and professional indemnity policies;</li>   <li>Litigation, arbitration and mediation of domestic and multi-jurisdictional disputes, including international arbitration (LCIA, ICC, UNCITRAL);</li>   <li>Assisting with the procuring of policies such as warranty &amp; indemnity, title indemnity, environmental liability, latent defects, cyber liability and pension trustee liability;</li>   <li>Drafting and reviewing policy wordings;</li>   <li>Advising on the structuring of complex insurance products and associated regulatory issues, including for life insurance providers and pension funds;</li>   <li>Insurance due diligence on M&amp;A deals.</li>  </ul>  ",GWLG.UK,2c23fcfc-6bb0-4205-898d-acc53bb1d960,7F4AB5EB-9A2C-48A1-89D0-126BFCDAD7AC,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4421F119-6A0B-4F0C-A20D-2D3A991936E0}
87,/Services/Insurance-Professional-Liability/Overview,en-GB,020AD184-0872-4850-AFE9-2D2E286750F6,Overview,Overview,"At Gowling WLG, we help clients successfully navigate the challenges facing the insurance industry. Our team handles a wide range of insurance and reinsurance matters for domestic and international insurers, reinsurers and other members of the industry.",NULL,NULL,"<p>The insurance industry is undergoing immense change, including market consolidation, increased competition among insurers and banks, legislative and regulatory developments, bad faith claims seeking punitive damages in Canada and the US, and a growing number of class actions.</p>    <p>At Gowling WLG, we help clients successfully navigate these challenges. Our team handles a wide range of insurance and reinsurance matters for domestic and international insurers, reinsurers and other members of the insurance industry. When you&#39;re looking for assistance in the area of insurance law, we have the knowledge, experience and creativity to provide practical, efficient solutions.</p>    <p>We represent insurers, reinsurers, brokers, other intermediaries and insureds. We&#39;re experts in handling the defence of liability and property claims, as well as dealing with coverage issues when they arise. We understand and engage in all forms of dispute resolution, including litigation, domestic and trade arbitration, international arbitration under common institutional rules, and ADR - including mediation.</p>    <p>We also provide assistance with policy wording, contract review, commutations, sanctions, related investigative work and due diligence in transactional insurance.</p>    <p>Our corporate and regulatory lawyers know the insurance industry inside and out, and provide key advice in respect of domestic regulation of insurance companies. We also deal with mergers and acquisitions of insurance interests, including corporate carriers and international brokers.</p>    <p>In a complex world, you can trust one of the world&#39;s largest and most experienced insurance law teams. We know how important it is for you to get quick, result-oriented advice and you can rely on us.</p>    <p>The Gowling WLG team is focused on achieving excellent results, reducing risk through our knowledge and experience and aggressively representing your interests utilising our expertise a large number of areas of importance to the insurance industry. Our services cover:</p>    <ul>   <li>Aviation</li>   <li>Bonding and surety</li>   <li>Business interruption</li>   <li>Captive insurance</li>   <li>Class actions</li>   <li>Construction</li>   <li>Corporate commercial</li>   <li>Coverage disputes</li>   <li>Defamation</li>   <li>Delegated authority underwriting</li>   <li>Directors and officers</li>   <li>Employment practices liability</li>   <li>Energy</li>   <li>Facultative and treaty reinsurance</li>   <li>Financial risks</li>   <li>Highway design, construction and maintenance</li>   <li>Industry loss warranties</li>   <li>Jurisdiction</li>   <li>Life and disability</li>   <li>Marine and transport</li>   <li>Mergers &amp; acquisitions</li>   <li>Pension liability</li>   <li>Patent and trademark liability</li>   <li>Personal injury</li>   <li>Policy wording</li>   <li>Product liability</li>   <li>Professional liability</li>   <li>Property claims</li>   <li>Regulatory</li>   <li>Reinsurance</li>   <li>Subrogation</li>   <li>Trustee liability</li>   <li>Warranty and indemnity</li>  </ul>    <p>Our commitment to excellence, personalised service, innovative thinking and in-depth knowledge can assist you in meeting the challenges presented by 21st-century insurance issues.</p>    <p>To learn more about how we can help you, please contact any member of our team.</p>  ",GWLG.Global,bd7f8b8d-ad9f-4a23-a17c-8f9950d52b6d,3389C6CF-54C5-47DB-81A0-7C09BE2BE982,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{2A8A0308-C190-4661-B67D-E6A2457C1017}
88,/Services/Insurance-Professional-Liability/Canada,en-GB,58E77638-706B-40F9-AB7A-AA57D680BB50,Canada,Canada,"The success of Gowling WLG's award‑winning Insurance & Professional Liability Group is based on more than a century of experience representing the insurance industry, combined with a persistent, results-driven approach and an innovative use of technology.",NULL,NULL,"<p>The success of Gowling WLG&#39;s award‑winning Insurance &amp; Professional Liability Group is based on more than a century of experience representing the insurance industry, combined with a persistent, results-driven approach and an innovative use of technology.</p>    <p>As the largest group of its kind in Canada, we&#39;re committed to excellence in all of the insurance and professional liability work we do.</p>    <p>We understand the ongoing changes taking place in the insurance industry - including market consolidation, increased competition among insurers and banks, legislative and regulatory developments, bad faith claims seeking punitive damages, and a growing number of class actions - and we provide advice that helps you successfully navigate these challenges.</p>    <p>Through the quality, creativity and timeliness of our advice, the innovative legal solutions we provide, and a distinctive service experience, we deliver unmatched results and value to the insurance community.</p>    <p>Our team has consistently achieved national recognition for its exceptional work. This recognition includes taking home the Canadian &quot;Insurance Firm of the Year&quot; Award from <em>Benchmark Litigation</em>, a leading legal rankings publication, three years in a row (2014, 2015 and 2016).</p>    <p>The comprehensive services we provide to the insurance industry include the following.</p>    <h3>Defence</h3>    <ul>   <li>Personal injury claims</li>   <li>Property claims, including fire and environmental claims</li>   <li>Defending all types of product liability claims</li>   <li>E&amp;O claims against a wide variety of professionals, including engineers, developers, architects, contractors, accountants, actuaries, doctors, lawyers, psychologists, physiotherapists, realtors, insurance agents and financial advisers</li>   <li>D&amp;O claims</li>   <li>Transportation claims, including trucking, rail and aviation claims</li>   <li>Construction claims</li>   <li>Heavy industrial claims, including oilfield and mining claims</li>   <li>Life and disability claims</li>   <li>Financial institutions, investment companies and their employees and agents</li>   <li>Class actions across Canada and working with U.S. attorneys to defend cross-border class actions</li>  </ul>    <h3>Coverage</h3>    <ul>   <li>Creating policy wording</li>   <li>Providing coverage opinions for insurance and reinsurance claims</li>   <li>Litigating coverage issues</li>   <li>Arbitrating reinsurance claims</li>  </ul>    <h3>Corporate commercial and regulatory</h3>    <ul>   <li>Purchase and sale of insurance companies and brokers</li>   <li>Licensing</li>   <li>Product development and approval</li>   <li>Distribution</li>   <li>Compliance</li>  </ul>    <h3>Subrogation</h3>    <ul>   <li>Aggressive pursuit of subrogated claims</li>   <li>Open to alternative fee arrangements, such as contingency fees, for subrogated claims</li>  </ul>    <h3>Learn more</h3>    <p>We&#39;re ready to help you with your insurance and professional liability-related legal needs. To start, please <a href=""~/en/people/?page=1&amp;services=451&amp;locations=GWLG.Canada"" target=""_blank"">engage any member of our Canada-wide team</a>.</p>  ",GWLG.Canada,bd7f8b8d-ad9f-4a23-a17c-8f9950d52b6d,3389C6CF-54C5-47DB-81A0-7C09BE2BE982,NULL,0,1,t-white,NULL,Featured Insights,d5315339-f9f4-4f21-b03a-175cfa785aac;97f2daeb-06ab-4a8d-bf27-edfb3fc7274b,View all Insurance & Professional Liability articles,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,/en/insights-resources/?page=1&locations=GWLG.Canada&services=451,NULL,{2A8A0308-C190-4661-B67D-E6A2457C1017}
89,/Services/Intellectual-Property-Law/Global,en-GB,CD8ADEF1-B43C-4FD2-9A0E-19D5ECEDD85B,Global,Global,Every step on the path to market presents different challenges. Gowling WLG works with you to overcome those challenges by protecting and enforcing your Intellectual Property (IP) assets and helping you maximise their value.,NULL,NULL,"<h2>Intellectual property legal services</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/advertising-product-regulatory/#global"" target=""_blank"">Advertising &amp; product regulatory</a></li>   <li><a href=""~/en/services/brand-protection/#global"">Brand protection</a></li>   <li><a href=""~/en/services/intellectual-property-transactions/#uk"">Intellectual property transactions</a></li>   <li><a href=""~/en/services/ip-litigation-strategy/#global""><abbr title=""intellectual property"">IP</abbr> litigation &amp; strategy</a></li>   <li><a href=""~/en/services/patents/#global"" target=""_blank"">Patents and trade secrets</a></li>   <li><a href=""~/en/services/trademarks-brands-designs/#global"" target=""_blank"">Trademarks, brands and designs</a></li>  </ul>    <h2>Meet our global team</h2>    <p>Our outstanding <abbr title=""intellectual property"">IP</abbr> lawyers will support you wherever you operate around the globe; including the most challenging of jurisdictions. Find out more about our teams across the world.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/intellectual-property/#canada"">Canada</a></li>   <li><a href=""~/en/services/intellectual-property/#china"">China</a></li>   <li><a href=""~/en/services/intellectual-property/#france"">France</a></li>   <li><a href=""~/en/services/intellectual-property/#germany"">Germany</a></li>   <li><a href=""~/en/services/intellectual-property/#uae"">UAE</a></li>   <li><a href=""~/en/services/intellectual-property/#uk"">UK</a></li>  </ul>  ",GWLG.Global,8ad0e3f6-68e6-45b9-a509-c5811ebc77af;5f39b2b0-1232-4c03-abce-300149d85f9b,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,"<p>When it comes to the world of intellectual property law, you need trusted advisors who will help you to maximize your assets and protect what makes them unique. Your business has invested time and resources and your <abbr title=""intellectual property"">IP</abbr> should remain yours to exploit to its full potential.</p>    <p>Our specialist intellectual property practice operates worldwide and works across key jurisdictions to provide exceptional <abbr title=""intellectual property"">IP</abbr> strategies and advice. Delivering a complete range of <abbr title=""intellectual property"">IP</abbr> legal services, our strength lies in our global capability paired with a collaborative approach.</p>    <p>Every step on the path to market presents different challenges for you and your <abbr title=""intellectual property"">IP</abbr>. Our team will work with you to overcome those challenges by delivering practical legal advice focused on growing and protecting your business.</p>  ",Featured news,7923b49a-18fd-4c51-bdae-f5227ad22309;27db51a8-6a19-405e-945d-8ed4604499df;4831b71a-5429-41c3-a911-16c7b47fda1f;9da80683-8582-4022-94c0-9c05168bfb5f,NULL,Get to know us,"<p>Find out more about our award-winning work with our selection of case studies.</p>    <p><a class=""c-button-red"" href=""~/en/contact-us/"">View client work</a></p>  ",Contact us,"<p>Send us an email to tell us more about your <abbr property="""" title=""intellectual"">IP</abbr> query.</p>    <p><a class=""c-button-red"" href=""mailto:ipinfo@gowlingwlg.com"">Contact our IP team</a></p>  ",ad194024-2f06-45df-b0ea-dab55e13dd2f,NULL,NULL,{2D06D20E-608B-4A50-A0AF-CC2F741D9E62}|{82CE0637-0A67-4363-A071-1FB76B014D04}
90,/Services/Intellectual-Property-Law/Canada,en-GB,4130B425-E506-4956-B224-9D983F5D866E,Canada,Canada,"For over 125 years, Gowling WLG has been helping the world's top organizations maximize their intellectual property and protect what makes them unique. We can help you overcome every challenge on the way to market by strategically defending and enforcing your intangible - and invaluable - assets.",NULL,NULL,"<blockquote style=""text-align:center;"">  <p>They are grandfathers of <abbr title=""intellectual property"">IP</abbr> in Canada and have all three heads covered - patent, trademark and copyright.&quot; <cite>Chambers Canada</cite></p>  </blockquote>    <h2>Awards and accolades in Canada</h2>    <ul>   <li>Band 1, &#39;Intellectual Property&#39;, <em>Chambers Canada</em></li>   <li>Band 1, &#39;Intellectual Property: Litigation&#39;, <em>Chambers Canada</em></li>   <li>&#39;Canadian Firm of the Year&#39; - Trademark Prosecution, <em>Managing <abbr title=""intellectual property"">IP</abbr> Americas Awards 2020</em></li>   <li>&#39;Impact Case of the Year&#39;, <em>Managing <abbr title=""intellectual property"">IP</abbr> Americas Awards 2020</em></li>   <li>&#39;Canada&#39;s Firm of the Year&#39; - Trademarks, <em>Global <abbr title=""intellectual property"">IP</abbr> Awards 2019</em></li>  </ul>  ",GWLG.Canada,8ad0e3f6-68e6-45b9-a509-c5811ebc77af,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,"<p>In Canada, we are recognized as the leading law firm across all types of intellectual property (IP). Our <abbr title=""intellectual property"">IP</abbr> team has earned a reputation as the go-to team for those seeking ironclad intellectual property protection.</p>    <p>We have extensive experience running enforcement and anti-counterfeiting programmes to ensure that our clients&#39; brands maintain their valuable goodwill. Our transactional <abbr title=""intellectual property"">IP</abbr> practice, supported by our full-service capabilities across our seven offices in Canada, is second to none. Whether you are in need of support on brands, designs, patent protection, enforcement and <abbr title=""intellectual property"">IP</abbr> litigation or help with navigating advertising, marketing and product regulation, then you can rely on our team.</p>  ",Latest resources,38324b76-ed7c-438b-8f7e-68d0808c28f8;b81d93a7-0d79-4c8b-a8b9-f5d2e7f9ec00;4831b71a-5429-41c3-a911-16c7b47fda1f;0bdb915b-b0e3-4053-8f85-ad5d98fd5375,View all IP insights from Canada,Sign up for Insights,"<p>Subscribe to our <em><abbr title=""intellectual property"">IP</abbr> Report</em> newsletter to receive our updates on the latest <abbr title=""intellectual property"">IP</abbr> developments that matter most to you.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Sign up for IP Report</a></p>  ",Contact us,"<p>For inquiries relating to&nbsp;<abbr title=""Intellectual Property"">IP</abbr>&nbsp;prosecution filings or patent/trademark application filings, please get in touch.</p>    <p><a class=""c-button-red"" href=""mailto:ipinfo@gowlingwlg.com"">Contact the team</a></p>  ",34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;ad194024-2f06-45df-b0ea-dab55e13dd2f,NULL,NULL,{2D06D20E-608B-4A50-A0AF-CC2F741D9E62}
91,/Services/Intellectual-Property-Law/UK,en-GB,C0D20CDD-3628-4CCB-B77A-A3635417556D,UK,UK,"If you want an intellectual property (IP) team that knows how to win anywhere in the world, puts your profitability at the top of its priorities and takes a shoulder-to-shoulder approach to client relationships, then Gowling WLG should be your first choice. ",NULL,NULL,"<blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Gowling WLG has a very strong team with deep knowledge of many high-tech industries and wide experience of intellectual property issues.<cite>The Legal 500</cite></p>  </blockquote>    <h2>Awards and accolades in the UK</h2>    <ul>   <li>Intellectual property - Midlands (Band 1),&nbsp;<em>Chambers and Partners</em></li>   <li>Intellectual property - National Leaders outside London (Band 1),&nbsp;<em>Chambers and Partners</em></li>   <li>Intellectual property - London (Band 2),&nbsp;<em>Chambers and Partners</em></li>   <li>Intellectual property - Patent litigation - London (Band 2),&nbsp;<em>Chambers and Partners</em></li>   <li>Intellectual property - West Midlands (Tier&nbsp;1),&nbsp;<em>The Legal 500</em></li>   <li>Intellectual property: Patents&nbsp;(Contentious and non-contentious) - London (Tier 2),&nbsp;<em>The Legal 500</em></li>   <li>Intellectual property: Trade marks, copyright and design - London&nbsp;(Tier 2),&nbsp;<em>The Legal 500</em></li>   <li>&lsquo;Designs Firm of the Year (UK)&rsquo;,&nbsp;<em>MIP EMEA Awards 2019</em></li>  </ul>  ",GWLG.UK,5f39b2b0-1232-4c03-abce-300149d85f9b,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,"<p>From starting up to building your UK business and growing your brand internationally, it is essential that you get the right legal expertise to protect your intellectual property (IP) assets and maximise their value.</p>    <p>Whether it is a multi-million pound dispute, a billion pound deal or cost-capped litigation for SMEs, we start out by looking at what you want to achieve and then set out a strategy to find the best solution. Whatever the challenge or opportunity, our team is at the cutting edge of <abbr title=""intellectual property"">IP</abbr> law providing expert advice with a commercial approach.</p>  ",NULL,694149fe-b5e8-4503-b893-196a41611169;61827cac-0433-4890-83ff-ef4d5f577b0c;7a1513fe-77cf-4262-acee-01b77d7833bb;fcb5496c-0f68-4b0a-8b04-934ccac2d37d;de091fa0-1499-4f56-8361-df075778aed5;3d14f76c-2763-43ea-a86b-b3f66f01b02c;75bb3cbe-3ea9-4975-bfd9-2e08953e7fe9,NULL,Subscribe for updates,"<p>Subscribe to our <em><abbr title=""intellectual property"">IP</abbr> Report</em> newsletter to receive our updates on the latest <abbr title=""intellectual property"">IP</abbr> developments that matter most to you.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Sign up for IP Report</a></p>  ",Contact us,"<p>For inquiries relating to&nbsp;<abbr title=""Intellectual Property"">IP</abbr> prosecution filings or patent/trademark application filings, please get in touch.</p>    <p><a class=""c-button-red"" href=""mailto:ipinfo@gowlingwlg.com"">Contact the team</a></p>  ",8d059378-6b75-4105-b57d-3bafa12bb15d;c0791066-b1ca-48e4-be8b-0086d6051b23;ad81e3ca-373e-4cd9-b75d-e5f9b53af1ab,NULL,NULL,{82CE0637-0A67-4363-A071-1FB76B014D04}
92,/Services/Intellectual-Property-Transactions/UK,en-GB,0AAA16C9-F992-4CB6-9A8C-31FAA1A23CF6,UK,UK,"Our 12-strong intellectual property (IP) transactions team understands the investment that goes into developing the brands, products, technology and creative works that make a business tick. ",NULL,NULL,"<p>Our 12-strong intellectual property (IP) transactions team understands the investment that goes into developing the brands, products, technology and creative works that make a business tick. So it knows how important it is to keep this <abbr title=""intellectual property"">IP</abbr> protected and exploited to its full potential.</p>    <p>With dedicated <abbr title=""intellectual property"">IP</abbr> teams in the UK, Germany and China, and the support of a wider team of 40 lawyers, led by 17 partners, as well as a global best friend network of lawyers, the team provides practical advice to some of the world&#39;s biggest companies and some of the most exciting start-ups.</p>    <p>The team has gained extensive collective knowledge across many industry sectors around the world. Many are scientists. Others have experience working as lawyers or business people in leading enterprises like Unilever, Hasbro, Aston Martin, the Forensic Science Service, British Airways, BP, E.ON, AstraZeneca, Dyson, GSK and the Ministry of Defence (MOD). They know the law and understand the business context in which advice is given.</p>    <p>International highlights include advising arGEN-X (a clinical-stage biopharmaceutical company) on two strategic deals that completed in a week and AstraZeneca on a licence with two Belgian research organisations. In addition, our team advised on the complex <abbr title=""intellectual property"">IP</abbr> aspects of the sale Williams Hybrid Power Limited to GKN which related to the design and manufacture of composite flywheel-based energy storage systems. From household names to multi-nationals to entrepreneurs, we can advise on a diverse range of <abbr title=""intellectual property"">IP</abbr> transactional and cross-border matters, including:</p>    <ul>   <li><abbr title=""intellectual property"">IP</abbr> transfer, coexistence, joint ownership, licensing and recordals</li>   <li>technology transfer and R&amp;D deals, as well as qualification for the UK Patent Box regime</li>   <li>securitisation of <abbr title=""intellectual property"">IP</abbr></li>   <li>merchandising</li>   <li>brand clearance</li>   <li>sponsorship, endorsement and product placement agreements</li>   <li>franchise contracts</li>   <li>collaboration and consortium agreements</li>   <li>confidentiality contracts</li>   <li>agency, advertising and marketing agreements;</li>   <li><abbr title=""intellectual property"">IP</abbr> aspects of corporate transactions (including M&amp;A, joint venture and hive offs), as well as life sciences, IT, competition/antitrust and employment transactions</li>  </ul>    <p>Members of the team speak at various international and local forums on <abbr title=""intellectual property"">IP</abbr> transactional issues such as a one day seminar for Management Forum on &quot;Avoiding Pitfalls in Patent/Know-How Licences and R&amp;D Collaborations&quot;, the Advanced Business Development course at the US BIO conference and the University College London <abbr title=""intellectual property"">IP</abbr> Transactions course. The team also provides talks and training to keep clients up-to-date with pressing <abbr title=""intellectual property"">IP</abbr> issues, whether it be legal updates, drafting workshops and risk management sessions for in-house lawyers and officers, or best practice guidance for employees at all levels.</p>    <h3>Audit service</h3>    <p>Not sure whether you&#39;re as well protected as you could be, or whether you&#39;re monetising your <abbr title=""intellectual property"">IP</abbr> portfolio to its maximum potential? We can provide an IP Audit Service. This can include: a business objective and costs review; portfolio strength assessment; suggestions for contract creation, amendment and management; <abbr title=""intellectual property"">IP</abbr> portfolio pruning and enhancement; and options for monetisation.</p>  ",GWLG.UK,31699bd7-da5f-4d73-834a-7e345e466806,B27944DB-178F-4382-8DB7-7F29F749DE1C,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2DBCFA00-3BC2-49E8-8A73-6CEE41D17B1A}
93,/Services/International-Arbitration/Canada,en-GB,C93E6B04-D3C7-4F67-B46A-221422B040DF,Canada,Canada,"When it comes to an international dispute, your business may wish to pursue private arbitration as opposed to traditional courtroom litigation.",NULL,NULL,"<p>When it comes to an international dispute, your business may wish to pursue private arbitration as opposed to traditional courtroom litigation.</p>    <p>With hundreds of experienced litigators around the world, Gowling WLG has the knowledge and experience to efficiently resolve your international dispute - so that you can stay focused on achieving your commercial objectives.</p>    <p>We&#39;ve represented clients in a wide range of institutional arbitrations under the ICC, UNCITRAL, LCIA, ICSID, SIAC, CIETAC and AAA rules, as well as pursuant to many ad hoc arbitrations. In doing so, we&#39;ve earned the utmost respect of the international business and legal communities.</p>    <p>At Gowling WLG, we offer you a clear path to success through any dispute.</p>    <h3>Keeping you out of the public eye</h3>    <p>Some disputes are best resolved behind closed doors. Our experienced roster of litigators can resolve your dispute discreetly and effectively through arbitration, negotiation, mediation or other forms of alternative dispute resolution (ADR).</p>    <h3>Control is key</h3>    <p>Arbitration is a flexible process. Our ability to control this process removes much of the uncertainty for you, and takes the guesswork out of identifying who the adjudicator will be and what rules will be applied. With our in-depth understanding of arbitration procedures, we&#39;ll work closely with you to craft a dispute resolution framework that&#39;s tailored to your needs.</p>    <h3>Innovation and&nbsp;collaboration</h3>    <p>Every dispute is different, which is why we&#39;ll collaborate with you to ensure that your voice is heard - and that your interests are always pursued. We&#39;ll establish strong lines of communication with you before a dispute occurs to ensure that, should a dispute arise, you&#39;re in the best position possible.</p>    <p>In working with us, you&#39;ll also appreciate our innovative approach to legal project management, which offers transparency into the costs and progress of your arbitrated dispute.</p>    <h3>Broad expertise whenever and wherever you need it</h3>    <p>We represent a global clientele in a diverse range of sectors. Regardless of the type of dispute, we&#39;ll provide you with a consistent level of service that matches the unique needs of your business. We&#39;ve resolved complex international and domestic arbitrations in the following areas:</p>    <ul>   <li>Aviation</li>   <li>Banking and finance</li>   <li>Construction and engineering</li>   <li>Energy</li>   <li>Information technology</li>   <li>Intellectual property</li>   <li>Investor state disputes</li>   <li>Oil and gas</li>   <li>Mining and environment</li>  </ul>    <h3>A truly international presence</h3>    <p>With over 1,400 lawyers across Canada, the U.K., Continental Europe, Asia and the Middle East, Gowling WLG has the resources and expertise to provide you with trusted litigation advice - wherever and whenever you need it.</p>    <h3>Learn more</h3>    <p>For more information on how we can help you, please <a href=""~/en/people/?page=1&amp;services=460&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,3ae82526-329e-41d7-8e7e-7b14a7af12bc;71cc52f2-e0c0-470a-a5a0-0726d832bc1e,CBACBAC0-ABB0-4B36-A8FC-3A060A5EF154,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{3275D488-797C-47CE-A9DE-98A8ABFED5A2}|{F152F9C3-161D-4454-A980-B5F2183EA229}
94,/Services/International-Arbitration/UK,en-GB,C31FAFBE-DC11-48DF-A83F-E30C4D053FD1,UK,UK,"In a global marketplace, disputes are increasingly international affairs. Our international arbitration team can advise you on suitable dispute resolution procedures for cross-border contracts, and on resolving disputes when they arise.",NULL,NULL,"<p>In a global marketplace, disputes are increasingly international affairs. Our international arbitration team can advise you on suitable dispute resolution procedures for cross-border contracts, and on resolving disputes when they arise</p>    <p>International arbitration offers a number of potential benefits to commercial parties. These include a greater degree of choice and control over how a dispute is managed (when compared to litigation in national courts), greater relevant expertise of the tribunal, the confidentiality that comes with arbitration, and the potential for easier recognition and enforcement of awards.</p>    <p>International arbitration is a key part of our global dispute resolution offering, and our team is well placed to guide you through the process, from drafting your dispute resolution provisions to conducting any resulting arbitration.</p>    <p>The team comprises lawyers in the UK, Europe, Asia, the Middle East and Canada, with international arbitration experts situated in the major arbitration centres of London, Paris, Dubai and Singapore. Members of the team have extensive experience of arbitrations across the globe (including, in particular, Calgary, Dubai, Geneva, Hong Kong, London, Paris, Singapore and Toronto)</p>    <p>We have represented clients in a wide range of institutional arbitrations under the rules of all of the major international arbitration bodies including ICC, LCIA, ICSID, SIAC, CIETAC, HKIAC, ICDR, AAA and the SCC, as well as in ad hoc disputes including under the UNCITRAL rules.</p>    <p>Regardless of the type of dispute, we will provide you with a consistent level of service that matches the unique needs of your business. We have resolved complex international and domestic arbitrations in the following areas:</p>    <ul class=""o-2-columns is-list-unstyled"">   <li>Aviation, aerospace and defence</li>   <li>Banking and finance</li>   <li>Construction and engineering</li>   <li>Energy</li>   <li>Information technology</li>   <li>Intellectual property</li>   <li>Investor state disputes</li>   <li>Insurance</li>   <li>IT</li>   <li>Life sciences</li>   <li>Oil and gas</li>   <li>Mining and environment</li>   <li>Natural Resources</li>   <li>Shipbuilding</li>   <li>Telecoms</li>  </ul>    <h3>Client Work</h3>    <p>The team&#39;s clients include major construction contractors, energy companies, clients in the technology and aerospace industries, and national governments. Recent highlights of our team members include:</p>    <ul>   <li>Acting for a Middle Eastern oil and gas company in ad hoc arbitration proceedings claiming multi-billion dollar damages against a national oil company in relation to its total failure to supply pursuant to a long-term gas supply agreement.</li>   <li>Acting for the Republic of Albania in two ICSID arbitrations pursuant to the Energy Charter Treaty and the Italy-Albania BIT relating to the alleged expropriation of a hydroelectric plant, a waste management project and a television station, as well as in two related ICC arbitration pursuant to a BOT Concession Agreement relating to the construction of a hydroelectric plant, with total claims exceeding US$1 billion.</li>   <li>Representing an international engineering contractor in a $100m dispute, arising out of time and monetary overruns arising in connection with the design and construction of an industrial facility in the Middle East.</li>   <li>Acting for the Respondent on an ICC Arbitration concerning the construction of a Nuclear Power Plant in Northern Europe (&euro;4 billion) and on two separate, connected adjudications.</li>   <li>Acting for a CIS-based high net worth individual in US$1 billion LCIA dispute against joint venture partners concerning mineral processing and mining assets, and involving the commencement of multiple related arbitrations relating to a complex corporate holding structure, applications to the Cypriot court for statutory relief, and to the US court for section 1782 discovery in support of foreign proceedings.</li>   <li>Acting for European pipeline gas and Middle Eastern LNG producers in price reviews under long term agreements subject to ICC arbitration.</li>   <li>Acting for an oil and gas major in a dispute against a national oil company subject to ICC arbitration for clarification of development rights under a North African production sharing contract.</li>   <li>Representing a high-profile international contractor in English High Court proceedings and in an ICC arbitration concerning a contract for work on a landmark energy research institution in Riyadh, for a claim in excess of US$150 million.</li>  </ul>  ",GWLG.UK,NULL,CBACBAC0-ABB0-4B36-A8FC-3A060A5EF154,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,
95,/Services/International-Trade-and-Customs/Canada,en-GB,C0475033-F7EE-4098-88EB-E4E8C2268E98,Canada,Canada,"To succeed in a complex global marketplace, organizations need a legal partner with hands-on experience who can help them use trade agreements to their strategic advantage - and provide effective advice and proven solutions for the complicated compliance issues these agreements create.",NULL,NULL,"<p>To succeed in a complex global marketplace, organizations need a legal partner with hands-on experience who can help them use trade agreements to their strategic advantage - and provide effective advice and proven solutions for the complicated compliance issues these agreements create.</p>    <p>From export controls and customs compliance to international trade litigation and government relations, the Gowling WLG International Trade Group takes the time to understand the unique challenges faced by each client, and creates customized solutions to help them achieve their business objectives.</p>    <h3>Comprehensive coverage</h3>    <p>Representing leading Canadian and foreign manufacturers, importers, exporters, industry associations and governments, our team delivers effective, practical solutions to a wide range of international trade issues, including:</p>    <ul>   <li>Anti-dumping and countervail inquiries</li>   <li>Customs classification</li>   <li>Valuation and AMPS penalties</li>   <li>Import and export controls</li>   <li>Strategic use of trade and investment agreements, including WTO and NAFTA</li>   <li>Investor-state provisions of NAFTA Chapter 11</li>  </ul>    <p>With particular expertise in trade-related intellectual property matters and issues related to the importation of food and natural health products, Gowling WLG is the right choice for complex international trade support.</p>    <h3>A proven track record</h3>    <p>As a client, you can be confident in our litigation track record of successfully representing clients before the Canadian International Trade Tribunal, the Federal Court of Canada, the Federal Court of Appeal and NAFTA panels.</p>    <p>As a result of our success, industry publications such as <em>Chambers Global</em>, <em>International Who&#39;s Who of Trade &amp; Customs Lawyers</em> and <em>The Canadian Legal Lexpert Directory</em> consistently recognize our team&#39;s leadership in trade and customs law.</p>    <h3>Unsurpassed experience</h3>    <p>With a practice that includes members who directly assisted in the negotiation and implementation of the North American Free Trade Agreement and the Canada-U.S. Free Trade Agreement, you can rely on the Gowling WLG International Trade Law Group to deliver unique, effective solutions to your trade concerns.</p>    <h3>Learn more</h3>    <p>To learn more about how we can support your international trade needs, please <a href=""~/en/people/?page=1&amp;services=463&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,afc382e9-2b75-4a26-9e20-0a8c68694164,BAC2F2F8-09C0-4D06-B0C8-98D9567ADFC7,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{5AFA17F4-B29F-4E20-A9C6-AFD5CDAE180D}
96,/Services/International-Trade-and-Customs/UK,en-GB,C1F6362F-482F-4489-B1A2-CBE101672401,UK,UK,"In an ever-more globalised world, international trade law is increasingly relevant to companies of all sizes, presenting new challenges and opportunities.",NULL,NULL,"<p>In an ever-more globalised world, international trade law is increasingly relevant to companies of all sizes, presenting new challenges and opportunities.</p>    <p>Primarily based in our Brussels and London offices, and working closely with our Chinese offices, Gowling WLG&#39;s EU, Trade and Competition team advises clients on a range of EU, WTO and global trade issues. Through our international reach, we are well positioned to provide our clients with commercial and effective solutions based on the very latest developments in international trade law and policy.</p>    <p>The Gowling WLG EU, Trade and Competition team advise on a range of international trade law issues, including:</p>    <ul>   <li>National, EU and WTO trade defence investigations, acting for both complainants and third country importers</li>   <li>EU Sanctions</li>   <li>Import and export controls</li>   <li>Incoterms and international trade contracts</li>  </ul>    <p>To learn more about the opportunities international trade law can offer you, please do contact us.</p>  ",GWLG.UK,2563a6d6-5f45-46c5-8698-e572a35f100b;ad056fcd-7211-4da7-a9e2-30612d332954;e33531f3-9132-4365-bdfc-fe6df95bab54,BAC2F2F8-09C0-4D06-B0C8-98D9567ADFC7,NULL,0,1,t-white,<p>Trading with certainty in uncertain times</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,40c2df88-693d-451b-8633-8eee3c76676f,NULL,NULL,{A81A1C5B-5720-46E3-A4D2-B244FDCE9F4B}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|e33531f3-9132-4365-bdfc-fe6df95bab54
97,/Services/Corporate-Investigations/UK,en-GB,65B9A5C7-3B22-4175-968B-DE4770C09B57,UK,UK,"Frauds, corruption, regulatory action, personal scandals and cyber incidents can cause immense reputational damage and lead to substantial losses and financial or criminal penalties for an organisation and its leaders.",NULL,NULL,"<p>Fraud, corruption, regulatory action, personal scandals and cyber incidents all have the potential to cause immense reputational damage, substantial losses and financial or criminal penalties both for an organisation and its leaders. Our team brings together multijurisdictional professionals with the right combination of expertise and experience to successfully represent corporations and individuals facing serious criminal or regulatory investigations and prosecutions.</p>    <p>How we help:</p>    <ul>   <li>An experienced litigation team   <ul>    <li>With extensive experience defending corporations and individuals in white collar and regulatory matters, our litigation expertise covers a full range of matters. As a full-service law firm, our corporate investigations specialists worked with lawyers from our pensions, property and employment teams to conduct an investigation into allegations of fraud, conspiracy and breach of duty by individuals at a not-for-profit regulated organisation.</li>   </ul>   </li>   <li>Effective corruption and anti-bribery expertise   <ul>    <li>The Bribery Act 2010 is one of the toughest pieces of anti-corruption legislation anywhere in the world, stricter in its terms than the US Foreign Corrupt Practices Act. Our team can guide you through this complex area of legislation and advise on everything from defending against regulatory actions/prosecutions and investigating allegations of wrongdoing, to managing high-risk situations (threats, extortion or blackmail) and developing policies and procedures to combat bribery.</li>   </ul>   </li>   <li>Key strategies on crisis management and investigations   <ul>    <li>Whether we&#39;re conducting an internal investigation, managing a crisis or facilitating an external investigation, we&#39;ll offer key insight on milestones, remedial actions and communications strategies to help keep you on track and out of the spotlight.</li>   </ul>   </li>   <li>Proactive training and education programmes   <ul>    <li>Taking a proactive approach to ethics and anti-corruption, we design and deliver comprehensive training programmes to directors, management teams, employees and other business partners.</li>   </ul>   </li>   <li>In-depth governance, enterprise risk management and internal controls   <ul>    <li>To strengthen and protect the integrity of your business, our team conducts rigorous risk assessments and develops in-depth governance frameworks that start at the board level and cascade down through your organisation.</li>   </ul>   </li>  </ul>    <h3>Client work</h3>    <ul>   <li>We conducted the investigation on behalf of the British Bankers&#39; Association into the LIBOR-rigging scandal.</li>   <li>On a national level, we have carried out investigations involving Her Majesty&#39;s Revenue and Customs, the Serious Fraud Office and the Office of Fair Trading.</li>   <li>On an international level, we have conducted investigations involving the European Commission, the US Department of Justice and the Securities and Exchange Commission.</li>   <li>We regularly conduct internal investigations on behalf of public institutions and major corporates concerning business failure, anti-bribery, cyber-crime and corruption.</li>  </ul>  ",GWLG.UK,fdb31259-dc1d-4722-ad16-6401036a1ddb;18c972b4-6383-49da-8645-30a3b18621a5;7c91aabd-360a-4f49-b094-7f9f51c78092,5F904DAC-EDF7-4F4A-8C59-8C0F5BBC0D7A,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2E342839-C11F-41E8-9244-0971BDED3553}|{38984250-866F-40B0-B3EB-85AEED73805A}|7c91aabd-360a-4f49-b094-7f9f51c78092
98,/Services/Investment/UK,en-GB,7F865E56-3A11-4B67-82D1-6EA1F4CE62CC,UK,UK,With the significant influx of overseas investment in UK property in recent years our investment specialists have the expertise and experience to advise on significant cross-border transactions.,NULL,NULL,"<p>With the significant influx of overseas investment in UK property in recent years our investment specialists have the expertise and experience to advise on significant cross-border transactions.</p>    <p>We advise on the full life cycle of an asset from acquisition, development (including large scale regeneration), management and lettings, through to sale of all types of property. These include mixed use offices, shopping centres, business and retail parks, hotels, industrial estates and logistics parks, residential, private rented sector, healthcare, retirement and student accommodation.</p>    <p>Our wide range of clients include national housebuilders, property companies, institutions, funds, social housing providers, and private clients. A trusted adviser to many of the UK&#39;s listed companies and landed estates, we are regularly brought in to lead on high value, and complex deals and projects.</p>    <p>Our principal offices are located in Birmingham and London with real estate specialists in each giving us geographical coverage and knowledge of markets across the country.</p>    <h3>Experience</h3>    <p>Our experience includes advising:</p>    <ul>   <li>Development Securities and joint venture partner Patron Capital on the &pound;82.1 million sale and purchase of Phones 4u Arena in Manchester. The joint venture acquired the 21,000 seat arena, which also boasts 128,000 sq ft office space, in 2010. Since acquisition, we have advised on a series of asset enhancement initiatives to help drive rental income and capital value</li>   <li>The Crown Estate on its acquisition of the &pound;81 million head leasehold interest in Cheshire Oaks and the 180,000 sq ft Coliseum Shopping Park</li>   <li>Intu Properties on its &pound;250 million acquisition of Midsummer Place Shopping Centre from Legal and General</li>   <li>Kohlberg Kravis Roberts &amp; CO LP on a 430,000 sq ft retail park portfolio acquisition from Resolution Property</li>   <li>Royal London on its acquisition of 131 Finsbury Pavement, London, occupied by the Swedish Stock Exchange</li>  </ul>    <h3>Asset management</h3>    <p>Our dedicated asset management team works alongside our market leading investment practice. Unlike many law firms, this is a core business for us which enables us to give asset management the right priority and resource. Our team is both motivated by and focused on asset management. Our priorities are not split with handling large investment acquisitions which ensures that lettings receive the focus they deserve.</p>  ",GWLG.UK,5a15d673-e73e-43f9-8551-dcf291247f4d,5939D7FB-9F5C-4E21-A04F-14CDC46B3C83,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{14626987-C3CA-477D-8FDD-56314FBF5B3D}
99,/Services/Investment-Funds/UK,en-GB,65743C5B-CF12-42D5-BAC6-C40538C74B5C,UK,UK,Our Investment Funds experts advise on all types of alternative investment funds in the UK and globally.,NULL,NULL,"<p>Our Investment Funds team is one of the leading advisers to the investment funds sector, and brings together a wealth of talent covering tax, corporate, finance, regulatory and dispute resolution - the core ingredients that enable it to provide a full legal service to our clients. With a long-established presence in the investment funds industry, we advise on all types of alternative investment funds in the UK and globally, which invest in a wide variety of asset classes. In addition, our Financial Services Regulatory team has experience of both contentious and non-contentious regulatory matters.</p>    <p>Clients include investment trusts and companies, private investment funds (both open and closed-ended), investment banks and brokers, institutional investors, professional investors, alternative asset funds, property funds (including real estate investment trusts (REITs)), wealth managers and family offices, pension providers and lenders.</p>    <p>We have considerable experience covering all aspects of a fund&#39;s lifecycle. We know and understand the current issues facing the market and we advise clients on the best way to deal with them.</p>    <p>Our areas of expertise include:</p>    <ul>   <li>Fund launches and formation - including initial public offerings (IPOs), tax and regulatory structuring advice, formation of feeder vehicles, co-investment vehicles and fund manager and carried interest vehicles</li>   <li>Structuring advice to clients looking to either establish a fund or joint venture structure, including choice of domicile and, if relevant, market for listing</li>   <li>Limited partnerships, limited liability partnerships, trust structures, contractual based structures and corporate structures (on and offshore)</li>   <li>Negotiating the terms of investment management agreements, fund management agreements and operator agreements</li>   <li>Ongoing advice including structuring of secondary offers for listed funds (including placing programmes and C share issues)</li>   <li>Regulatory advice including passporting, Alternative Investment Fund Managers Directive (AIFMD), Markets in Financial Instruments Directive (MiFID II) and Financial Conduct Authority (FCA) issues</li>   <li>Advice both &#39;for&#39; and &#39;against&#39; in terms of shareholder activism and disputes</li>   <li>Terms of sale or acquisition of interests in pooled funds, whether as cornerstone investor or otherwise</li>   <li>Dispute resolution - including disputes over fee arrangements, conflicts of interest, breach of contract, and fiduciary duties</li>  </ul>    <p>The team includes members and supporters of the Alternative Investment Managers Association, the Investment Property Forum, the British Venture Capital Association, the Chartered Institute for Securities &amp; Investment, and the British Property Federation.</p>    <h2>Client work</h2>    <ul>   <li>The investment funds team acted for Investec Bank plc, the sole sponsor and broker to Smithson Investment Trust plc, which raised a record-breaking &pound;822.5 million on <abbr title=""Initial public offering"">IPO</abbr>. Investec also acted as intermediaries adviser for the launch, raising &pound;152.4 million from the retail investment platforms. Smithson, which is managed by Fundsmith LLP, invests in small and mid-cap global entities and is the latest investment vehicle of Terry Smith, the renowned fund manager. The deal is the largest investment trust launch on record, beating the previous &pound;800 million raised by Neil Woodford&#39;s Patient Capital three years ago, a transaction which Gowling WLG also acted on.</li>   <li>The investment funds team have advised AIM quoted venture capital fund Draper Esprit since initial public offering, and in February 2019, advised on its &pound;100 million fundraising by way of a conditional placing new ordinary shares. The placing was oversubscribed. On a connected matter, in June 2018, the team advised Draper Esprit on its entry into a strategic partnership with German peer, Earlybird Digital West. The funds team dealt with a number of challenges that arose in advising on one of the most active venture capital partnerships in Europe which intends to deploy up to &euro;200 million a year in Seed, Series A, B and C technology companies.</li>   <li>The Investment Funds team acted for Universities Superannuation Scheme on the setup of a landmark &pound;100 million+ joint venture fund between USS and Morgan Sindall Investments Limited investing in specialist supported housing accommodation. The innovative transaction brought together USS, one of the largest pension schemes and real estate investors in the UK, with MSIL&#39;s market-leading expertise in social infrastructure development and investment. This asset class raised some novel issues to be resolved. The team provided advice on the structure of the venture at the outset, advice on the complex suite of documents and advice on the initial acquisition of the assets into the fund.</li>   <li>The team advised M&amp;G Real Estate on the setup and structuring of a c.&pound;105 million JV investment bringing together both national and international professional investors. The team provided advice on the complex suite of documents forming the joint venture and on the variety of legal issues that arose.&nbsp; The joint venture fund was established to acquire a highly sought after UK office space, situated in central Manchester.</li>  </ul>  ",GWLG.UK,a1fe7e34-3829-41bf-98cd-3a8d0897fc0b;d7a64117-fe8d-47a0-ace6-75c8607bfcdd;ecb81f51-9669-41bd-97ff-7a1e3df451a0;9d027350-aad9-4920-977d-ba5b18dc3a1a;faf162a4-9002-4c9b-abb0-1b7d67160d73,5C8DE03E-4190-49DA-8F78-F08C1C0443CB,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,c0791066-b1ca-48e4-be8b-0086d6051b23,NULL,NULL,{0C5A738F-F02D-4093-8D58-D631B54F80D7}|{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{559D6A71-F059-4452-9CA9-37C3C8A63C0C}|{688257F6-A368-469C-9FDE-A42751F77CD5}|{E827C458-41A6-4E35-8824-80282331C490}
100,/Services/IP-Litigation-Strategy/Overview,en-GB,9E04BE25-E976-4178-B50E-7D6F0CD553CD,Overview,Overview,"IP litigation is a core strength of our firm, and we know how to get results for our clients. From 'bet the company' IP litigation to the smallest skirmish, we work with you to obtain outcomes that fit your individual business objectives.",NULL,NULL,"<p>The protection and promotion of your intellectual property assets requires strategic thinking, careful planning and constant vigilance. When your intellectual property (IP) is threatened, you need a law firm with the global strength to pursue claims around the world.</p>    <p>If you want to engage a team that knows how to defend your <abbr title=""intellectual property"">IP</abbr> anywhere in the world, and takes a shoulder-to-shoulder approach to client relationships, Gowling WLG should be your first choice.</p>    <p><abbr title=""intellectual property"">IP</abbr> litigation is a core strength of our firm, and we know how to get results for our clients. From &#39;bet the company&#39; <abbr title=""intellectual property"">IP</abbr> litigation to the smallest skirmish, we work with you to obtain outcomes that fit your individual business objectives.</p>    <p>Gowling WLG has been a leading <abbr title=""intellectual property"">IP</abbr> litigation firm for over 100 years, and our professionals are ranked globally as leaders in their field. Many of our people have engineering or scientific backgrounds, which provides us with the critical technical analysis for patent and trade secret cases. From pharmaceuticals to software, our team understands your technology.</p>    <p>Our services include the following:</p>    <h3>Copyright, design and trade secrets</h3>    <ul>   <li>Copyright litigation and advocacy</li>   <li>Design right litigation</li>   <li>Trade secret enforcement and defence - both litigation and pre-litigation</li>  </ul>    <h3>Patents</h3>    <ul>   <li>Patent enforcement and defence</li>   <li>Patented medicines advice and litigation, including listing</li>   <li>Data package exclusivity</li>   <li>Product life cycle issues, including regulatory</li>   <li>Protecting innovator rights</li>   <li>Licensing - both litigation and pre-litigation</li>   <li>Related competition issues</li>  </ul>    <h3>Trademarks</h3>    <ul>   <li>Trademark enforcement and litigation</li>   <li>Border enforcement</li>   <li>Impeachment and cancellation</li>   <li>Anti-piracy and enforcement (civil and criminal)</li>   <li>Comparative advertising litigation</li>  </ul>    <p>We have professionals&nbsp;based in areas where you need them:&nbsp;&nbsp;</p>    <p>Our European team has won cases in the European Court of Justice, the UK courts, the German courts and the Paris courts.</p>    <p>In Canada, our litigators are counsel of record in more Federal Court proceedings than any other firm, and appear continuously in patent and trademark matters at all levels of Canadian courts.</p>    <p>Our team in China has vast experience enforcing patents, utility models, designs and trademarks in the Chinese courts. We use all available avenues - including administrative procedure and the customs system - to achieve results for our clients.</p>    <p>The team in the UAE has extensive experience enforcing and protecting <abbr title=""intellectual property"">IP</abbr> rights both in the UAE and throughout the Middle East, including before national courts and through enforcement authorities, including Customs.</p>    <p>Global protection by people who understand your business. You can trust Gowling WLG to protect your <abbr title=""intellectual property"">IP</abbr> - so please get in touch with us to find out how we can help you.</p>  ",GWLG.Global,6767b2fc-7817-42ae-a54e-05595fe6c1cd;ee5606d1-d055-43cc-95da-bb9b7b475f0b;a21f77d5-b08e-4dac-9b34-efe5dddc9db1,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;c0d9b4ff-0c67-4535-bb6f-75439876b016,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}|{EFF62D4B-100F-46CB-BC3A-2D2EC17FE28E}|{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}
101,/Services/IP-Litigation-Strategy/Canada,en-GB,75A5326B-2ADA-4D64-B9D5-851EF9A0A5A3,Canada,Canada,"Intellectual property litigation and strategy is a core strength at Gowling WLG. Our professionals have been protecting innovators' rights for over 100 years, and work with clients to provide legal strategies that meet their business objectives.",NULL,NULL,"<div style=""background-color:#D3d3d3;padding: 15px 15px 15px 15px"">  <h3 style=""color: 401C42;""><strong>GoXL: Intellectual Property for the digital era</strong></h3>    <p>Our <a href=""https://apps.fliplet.com/gowling-goxl?"" target=""_blank"">web-based platform</a> offers IP owners and advisers easy access to the knowledge they need to compete in today&#39;s global market, and features a rich library of resources to stay informed and connected.</p>    <p><a class=""c-button"" href=""https://apps.fliplet.com/gowling-goxl?"" target=""_blank"">Learn more about Go:XL</a></p>  </div>    <h3><br />  In-depth expertise</h3>    <p>Gowling WLG has the largest IP litigation practice dedicated to patent, trademark, copyright, life sciences, trade secret and advertising law in Canada. Our team of litigation professionals has the scientific, engineering and technical expertise to defend your technology and provide critical technical analysis for patent and trade secret cases. From pharmaceuticals to software, we understand your world.</p>    <h3>Trusted experience</h3>    <p>Members of our team serve as counsel of record in more patent infringement actions and more trademark proceedings than any other firm in Canada. We also appear in more intellectual property cases in the Federal Court of Canada than any other firm.</p>    <h3>Sector-focused support</h3>    <p>We work across a wide range of key sectors, including life sciences, technology, mining, energy, oil patch and chemicals, manufacturing and distribution, financial services, government and infrastructure.</p>    <h3>Comprehensive services</h3>    <p>Our team offers a comprehensive range of IP litigation services in the areas of patents, trademarks, copyright, design and trade secrets:</p>    <h4>Patents</h4>    <ul>   <li>Patent enforcement and defence</li>   <li>Patented medicines advice and litigation, including listing</li>   <li>Data package exclusivity</li>   <li>Product life cycle issues, including regulatory</li>   <li>Protecting innovator rights</li>   <li>Licensing (litigation and pre-litigation)</li>   <li>Related competition issues</li>   <li>Patent office validity and other proceedings</li>  </ul>    <h4>Copyright, design and trade secrets</h4>    <ul>   <li>Copyright litigation and advocacy</li>   <li>Design right litigation</li>   <li>Trade secret enforcement and defence (litigation and pre-litigation)</li>  </ul>    <h4>Trademarks</h4>    <ul>   <li>Trademark enforcement and litigation</li>   <li>Border enforcement</li>   <li>Expungement and cancellation</li>   <li>Anti-piracy and enforcement (civil and criminal)</li>   <li>Comparative advertising litigation</li>  </ul>    <h3>Learn more</h3>    <p>Ranked as a top-tier IP practice by the world&#39;s leading legal publications, Gowling WLG is home to a team that truly understands your business, and can provide the global legal support you need to defend it. Please get in touch with <a href=""~/en/people/?page=1&amp;services=472&amp;locations=GWLG.Canada"" target=""_blank"">any member of our team</a> to find out how we can help you.</p>  ",GWLG.Canada,ee5606d1-d055-43cc-95da-bb9b7b475f0b,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,1,t-white,"<p>Intellectual property litigation and strategy is a core strength at Gowling WLG. Our professionals have been protecting innovators&#39;&nbsp;rights for over 100 years, and work with clients to provide legal strategies that meet their business objectives.</p>    <p>From &quot;bet the company&quot;&nbsp;IP litigation to the smallest skirmish, we can work with you to deliver results that protect your innovation and investment.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{EFF62D4B-100F-46CB-BC3A-2D2EC17FE28E}
102,/Services/Legal-Translation/Canada,en-GB,8F662A18-31C7-4216-BD5B-F979B22FF2F6,Canada,Canada,Gowling WLG's legal translation team works with professionals across virtually all practice areas to help protect clients from language-related liability.,NULL,NULL,"<p>High-quality legal translation is critical to facilitating cross-jurisdictional deals and successfully marketing goods and services in new markets. A misrepresentation in a contract or a prospectus can give rise to lawsuits and significant financial losses.</p>    <p>Gowling WLG&#39;s legal translation team works with professionals across virtually all practice areas to help protect clients from language-related liability.</p>    <p>We work in numerous languages on all types of documents relating to public and private securities offerings, mergers and acquisitions, cross-border and international lease financings, securitizations and privatization transactions. Our practitioners apply their expertise in advertising, accounting, administration, litigation, tax, labour, real estate, insurance and Aboriginal affairs to fulfill our clients&#39; needs across Canada and around the world.</p>    <h3>Accuracy and compliance are key</h3>    <p>Language laws are extremely complex, and compliance is essential. Our team helps issuers and dealers meet their legal obligations by providing legal translation services in an efficient, effective manner, while ensuring the quality and accuracy of our work meets the highest standards. A legal opinion always supports our translations, particularly with respect to language requirements and securities issues.</p>    <h3>Doing business in Québec</h3>    <p>The Province of Québec has detailed language laws governing labelling with respect to intellectual property as well as business agreements. Gowling WLG&#39;s Montréal office has the expertise to assist businesses from around the world in navigating these requirements.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you with your legal translation needs, please contact <a href=""mailto:Nicolas.Verenka@gowlingwlg.com"">Nicolas Verenka</a>.</p>  ",GWLG.Canada,22e56976-2ece-4799-8002-7ebb191fb9be,85A97F93-C82D-464B-B239-E1AC05B2E1E0,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{9C5B32B3-0F22-4268-BC73-8856C414F1E5}
105,/Services/Litigation-Dispute-Resolution/Overview,en-GB,87D154CB-0FAD-41E7-BD1C-8A73DA61F0B0,Overview,Overview,"When disputes do happen, Gowling WLG is ready to assist. We understand how litigation can impact negatively on the day-to-day workings of your business.",NULL,NULL,"<p>Many events can draw your business into a dispute: a broken agreement, an investigation by a government agency, attendance before a regulatory tribunal, an unexpected loss or a clash with shareholders.</p>    <p>When disputes do happen, Gowling WLG is ready to assist. We understand how litigation can impact negatively on the day-to-day workings of your business. Our priority is to keep cost and inconvenience to a minimum and to protect your brand throughout any dispute - from the outset to its final conclusion.</p>    <p>Our knowledge of your business allows us to work with you to achieve solutions that reflect your commercial objectives. We&#39;re results-oriented and will find the most creative and efficient ways to support you through any challenges or opportunities that arise. Our dispute resolution services span the globe, and include effective cross-border litigation and seamless project management, with strategic, territory-specific advice.</p>    <p>We&#39;ll assist you at every stage of a dispute, from negotiation and mediation to arbitration and litigation. Alongside in-depth fact finding and risk analysis, our approach to each stage will be carefully considered and applied in-line with the strategy that we&#39;ve agreed on with you. We&#39;ll also ensure that tribunal and court attendances are managed effectively and used to your full advantage.</p>    <p>Throughout the process, we&#39;ll report and reassess regularly to ensure that we&#39;re meeting and exceeding your expectations.</p>    <p>We advise on all forms of litigation, including:</p>    <ul>   <li>Banking</li>   <li>Class actions</li>   <li>Commercial</li>   <li>Construction</li>   <li>Contract disputes</li>   <li>Crisis management</li>   <li>Directors&#39; and officers&#39; liability</li>   <li>Environmental/toxic torts</li>   <li>Fraud</li>   <li>Housing management</li>   <li>Insolvency</li>   <li>Insurance and reinsurance</li>   <li>International arbitration</li>   <li>Intellectual property</li>   <li>Information technology</li>   <li>Labour and employment</li>   <li>Product liability</li>   <li>Professional liability</li>   <li>Property damage</li>   <li>Regulatory/compliance/investigations</li>   <li>Securities</li>   <li>Shareholders&#39; disputes</li>   <li>Transportation</li>   <li>White collar defence and investigations</li>  </ul>    <p>We&#39;re also proven leaders in the development and adoption of timely, efficient, value-driven tools for the management of litigation in a manner that is both transparent and integral to your business needs. These tools include our customised legal project management platform, Practical LPM&trade;; project budgeting; knowledge management; and alternative fee/alternative billing arrangements, ranging from fixed fees, capped fees and blended rates to rewards-based/performance fees and contingency fees.</p>    <p>Whatever your situation or commercial objectives, Gowling WLG has the experience, international network and legal expertise to help you achieve your goals.</p>    <p>To learn more about how we can help you, please get in touch with <a href=""~/en/people/davinia-gransbury/"">Davinia Gransbury</a> (UK) or <a href=""~/en/people/scott-kugler/"">Scott Kugler</a> (Canada).</p>  ",GWLG.Global,90573229-adbc-497c-9e6e-7ee61952f25b;034fb16f-8b22-4291-afcd-7aaecfa025d5,82475447-1CF2-4AA7-9A23-24E5B1A7B3BD,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{DB180194-4B02-46F8-A0CE-0DFB051009EE}|{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
106,/Services/Litigation-Dispute-Resolution/Canada,en-GB,11951485-3AA9-477D-A225-6830C5342336,Canada,Canada,"Disputes are a fact of life for businesses. When they happen, you need a team on your side that can protect your interests, obtain a fair result, minimize your costs and ensure your business can continue to function.",NULL,NULL,"<p>Disputes are a fact of life for businesses. When they happen, you need a team on your side that can protect your interests, obtain a fair result, minimize your costs and ensure your business can continue to function.</p>    <p>Gowling WLG stands ready to assist. We&#39;re committed to protecting you in any dispute situation, from negotiation and mediation to arbitration and litigation.</p>    <p>Practical, responsive and cost-efficient, we&#39;ll partner with you to develop and execute an effective litigation strategy that results in the best possible outcome for your business. Our hands-on approach involves in-depth fact-finding and risk evaluation - with your specific needs and goals always top-of-mind.</p>    <p>As one of the largest and most experienced litigation teams in Canada, we can advise you on all forms of litigation, including:</p>    <ul>   <li>Banking</li>   <li>Class actions</li>   <li>Commercial</li>   <li>Construction</li>   <li>Contract disputes</li>   <li>Crisis management</li>   <li>Defamation and media</li>   <li>Directors&#39; and officers&#39; liability</li>   <li>Environmental/toxic torts</li>   <li>Insurance, including property damage and personal injury</li>   <li>Intellectual property</li>   <li>International arbitration</li>   <li>Labour and employment</li>   <li>Medical defence and health law</li>   <li>Product liability</li>   <li>Professional liability</li>   <li>Regulatory/compliance/investigations</li>   <li>Securities</li>   <li>Shareholders disputes</li>   <li>Transportation</li>   <li>White collar defence and investigations</li>  </ul>    <h3>Efficient tools and approaches</h3>    <p>To ensure your litigation file is managed most efficiently, we&#39;ve developed a range of innovative tools and approaches that can be applied to your matter, such as <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"">Practical LPM&trade;</a>, our customized legal project management and budgeting platform, and Go Plead&trade;, our in-house litigation knowledge management database.</p>    <p>To help you get the most value out of your legal spend, we also offer a range of alternative fee/billing arrangements, such as fixed fees, capped fees, blended rates, rewards-based/performance fee, contingency fees.</p>    <h3>Learn more</h3>    <p>Whatever your situation or commercial objectives, Gowling WLG has the experience, international network and unparalleled legal expertise to help your business succeed. To learn more, please <a href=""~/en/people/?page=1&amp;services=481&amp;locations=GWLG.Canada"" target=""_blank"">get in touch with any member of our team</a>.</p>  ",GWLG.Canada,034fb16f-8b22-4291-afcd-7aaecfa025d5,82475447-1CF2-4AA7-9A23-24E5B1A7B3BD,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
107,/Services/LLPs-Partnerships/UK,en-GB,EF3CB83D-D6EA-4AE6-AFB1-C85182AD8278,UK,UK,We advise clients in all sectors on the varying aspects of the setting up and operating of business through an LLP structure.,NULL,NULL,"<p>We advise clients in all sectors on the varying aspects of the setting up and operating of business through an LLP structure. We also assist and advise in relation to the Partnership Act 1890 (the Act) in relation to disputes between LLP members.</p>    <p>Individual LLP members need to understand the rights and obligations arising from membership and also how and why they might want to exit such a structure. Our cross-disciplinary LLP and partnership specialists can provide this advice.</p>    <p>Our team of experts can help you with corporate transactions involving LLP structures and on the creation and dissolution of structures as necessary.</p>    <p>Recent cases indicate an extension of statutory rights conferred on employees and workers. This is creating new obligations for LLPs towards their members. Such obligations include rights relating to disciplinary procedures and, potentially, inclusion in auto-enrolment processes for pension scheme membership.</p>    <p>We can advise on the impact of these extended rights and on the longer term trends suggested by recent decisions.</p>    <p>So if you think your business might be affected by these changes, then we&#39;re here to help. No matter what size your business is or the complexity of the advice you need, you can be sure you&#39;ll find the answers with us.</p>  ",GWLG.UK,fb60329f-6333-4f7e-b26b-4f9b106a32e7,97F5D0F6-E730-4D4F-9282-A2F7C6EAD9ED,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{436C8D12-0C94-497F-BAB2-F081F6782A9F}
108,/Services/Mergers-Acquisitions/Overview,en-GB,E41D9738-BAD0-466B-8F2A-29F8E0621F0C,Overview,Overview,The global mergers and acquisitions market has been buoyant in recent years. As the driving force behind many significant global transactions - particularly in the mid-market - we have the experience and expertise you need to attain your goals.,NULL,NULL,"<p>The global mergers and acquisitions market has been buoyant in recent years. As the driving force behind many significant global transactions - particularly in the mid-market - Gowling WLG offers the experience and expertise you need to attain your goals.</p>    <p>Through the strength of our offices in Canada, the UK, Europe, Asia and the Middle East, we assist on a large number of transactions across a range of key industries. We&#39;re one of the busiest law firms in mid-market mergers and acquisitions (M&amp;A), and understand the challenges you face because we&#39;re immersed in them every day.</p>    <p>Our professionals have a deep knowledge of various industries and are on top of the latest trends and developments in <abbr title=""mergers and acquistions"">M&amp;A</abbr>, including in the US market. Add to this our entrepreneurial spirit and Gowling WLG&#39;s numerous recognitions, we offer the best possible service driven by our clients&#39; needs and success.</p>    <p>Working closely with targets, acquirers - including private equity funds and strategic buyers - financial advisers, special committees and other related parties, we provide a full suite of public and private <abbr title=""mergers and acquistions"">M&amp;A</abbr> services, including:</p>    <ul>   <li>Share and asset purchase, and sale transactions</li>   <li>Mergers, amalgamations, plans of arrangement and takeovers</li>   <li>Auction bid processes</li>   <li>Private equity downstream investments, such as buyouts</li>   <li>Corporate governance and directors&#39; duties</li>   <li>Escrow agreements</li>   <li>Issuer bids, insider bids, business combinations and related party transactions</li>   <li>Launching and defending hostile takeovers</li>   <li>Reverse takeovers</li>   <li>Shareholder subscription and escrow agreements</li>  </ul>    <p>Ultimately, it&#39;s all about what works best for you. All of our legal, cultural, linguistic and commercial experience will be applied on your behalf. Although we advise on a high volume of deals, being responsive to your needs remains our top priority. We listen to your concerns, ask questions to understand fully your objectives and help you analyse challenges in order to structure and execute successful transactions.</p>    <p>We also rely on our tax, competition law, regulatory, employment, intellectual property, environmental and other experts to assist on all of our deals, facilitating the most effective deal structures, industry leading due diligence and efficient deal execution.</p>    <p>Efficiency is key to getting your deal done, which is why we use customised tools and technology to support your success whilst always delivering high quality work. This includes the use of our innovative legal project management platform, Practical LPM&trade;, which helps keep your legal matters on track, on time and on budget - with no surprises along the way.</p>    <p>We also offer enhanced value through alternative fee arrangements based on tailored cost structures rather than hourly rates, so you&#39;ll always have access to pricing that is transparent, competitive and predictable.</p>    <p>Wherever you are and whatever you want to achieve, we&#39;ll manage your <abbr title=""mergers and acquistions"">M&amp;A</abbr> matter using the best Gowling WLG team in place. Please get in touch with a member of our group to discuss how we can help you.</p>  ",GWLG.Global,532e53ff-a7e9-451d-ad5d-5dfdfc681712;2377a67c-1e57-4514-9b6e-aee6bfab3640;414ac382-6045-48c9-8797-b778fbe6164d,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{DBEEA1B1-FBD9-41CC-A2EA-39D36CC3DB0E}|{571BDAE6-EC43-4509-9FD5-1D14CED8B0FC}|{0A35E7F0-4054-4828-AEAE-E83D218832CF}
109,/Services/Mergers-Acquisitions/Canada,en-GB,AF180EC6-5C75-4DC8-84EB-1C95B164B130,Canada,Canada,Mergers and acquisitions can be complicated. Getting the right legal advice shouldn't be. Our team of top-tier M&A lawyers are at the forefront of their field - in Canada and internationally - with a proven track record of working side-by-side with our clients to get the best deals done.,NULL,NULL,"<p>Mergers and acquisitions can be complicated. Getting the right legal advice shouldn&#39;t be. At Gowling WLG, our team of top-tier M&amp;A lawyers are at the forefront of their field - in Canada and internationally - with a proven track record of working side-by-side with our clients to get the best deals done.</p>    <p>We do this by combining our legal knowledge and strategic acumen with an in-depth understanding of your business and sector. However you define it, your success is our ultimate goal.</p>    <h3>A tailored approach to help you succeed</h3>    <p>Whether domestic or cross-border, large-cap or small-cap, every deal is different and requires a thoughtful, unique approach.</p>    <p>Our team has served as trusted M&amp;A advisers to a range of Canadian and multinational clients - both publicly traded and privately held - across all major industry sectors, including energy, mining, infrastructure, life sciences, financial services and technology.</p>    <p>The common denominator in each? We always take the time to understand the unique nature of our clients&#39; businesses and the specific circumstances at play. We then develop a customized approach that will serve as a pathway to their success.</p>    <h3>A Canadian and&nbsp;global M&amp;A leader</h3>    <p>Over the last four years, our team of 150-plus M&amp;A lawyers has advised on more Canadian M&amp;A deals than almost any other law firm in the world. As a result, the Gowling WLG M&amp;A Group is one of the busiest and most in-demand practices of its kind in Canada.</p>    <p>A key factor that sets us apart is our culture. We take the time to build productive, meaningful relationships with you and with each other. This allows us to deliver personal, responsive service and cohesive support across offices, borders and regions.</p>    <h3>A full suite of M&amp;A services</h3>    <p>Whether you&#39;re an acquirer, a target, a financial adviser, or another party in a public or private M&amp;A transaction, Gowling WLG can advise you on a host of matters, including arrangements, amalgamations, takeover bids and other change-of-control transactions.</p>    <p>We also have in-depth expertise in competition/antitrust and foreign investment to support you in reviews, filings, clearances and other regulatory proceedings as needed, as well as extensive tax support to ensure your transaction is optimally structured.</p>    <p>To facilitate the above, we leverage a range of customizable technologies to support your objectives. This includes tailored extranets and data rooms that allow you and all parties involved to exchange documents and monitor progress 24/7, any time and anywhere.</p>    <h3>Learn more</h3>    <p>To learn more about our services and how we can support you in your success, we encourage you to <a href=""~/en/people/?page=1&amp;services=486&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>. You can also stay up to date on the latest legal developments in the M&amp;A field by <a href=""~/en/footer/updates/subscribe-canada/"">subscribing to our free MarketCaps newsletter</a>.</p>  ",GWLG.Canada,2377a67c-1e57-4514-9b6e-aee6bfab3640,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;d896df63-32c1-4a54-9b80-87a8d00e2b06;3610471d-04bb-4ccb-ade5-de9fe91c446b,NULL,NULL,{571BDAE6-EC43-4509-9FD5-1D14CED8B0FC}
110,/Services/Mediation/UK,en-GB,146AEC38-22E7-4799-A909-DD41FC7F5509,UK,UK,Mediation is a valuable tool for achieving a cost-effective solution to disputes outside the constraints of the win/lose court process.,NULL,NULL,"<p>Mediation is a valuable tool for achieving a cost-effective solution to disputes outside the constraints of the win/lose court process.</p>    <p>In the right case, mediation provides a flexible and confidential process, giving all parties control to decide (potentially at a very early stage in a dispute) whether to settle and, if so, on what terms.</p>    <p>With more than 170 lawyers all trained in mediation, our focus is to resolve disputes quickly, enabling, if possible, commercial relationships between parties to continue with minimum disruption.</p>    <p>We have the expertise and experience to advise on a range of disputes, including contract and commercial, pensions, construction, IP and international dispute resolution.</p>    <p>As founder members of the Centre for Effective Dispute Resolution (CEDR) our team includes acknowledged leaders in the field.</p>    <p>We have more than 20 qualified mediators in the team.</p>    <p>Mediations and mediation clients are by definition confidential but one reported decision we can talk about is when the Court of Appeal refused to approve a settlement reached at mediation, and our experience helped the client to victory.</p>    <p>The case, <em>Thakrar v Ciro Citterio Menswear PLC (In Administration) and Others</em> is the leading authority on the binding nature of agreements reached in mediation.</p>  ",GWLG.UK,18c972b4-6383-49da-8645-30a3b18621a5,3EBDB6E8-188B-473E-8CC5-7A24E0C040FE,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{38984250-866F-40B0-B3EB-85AEED73805A}
111,/Services/Medical-Defence-Health-Law/Overview,en-GB,DE7BE534-8C09-469D-B18A-87888AC1A596,Overview,Overview,"At Gowling WLG, we're focused on protecting health professionals and health-related enterprises. Our team has over 100 years of experience in medical defence and health sciences, and over 100 professionals immersed in your sector.",NULL,NULL,"<p>At Gowling WLG, we&#39;re focused on protecting health professionals and health-related enterprises. Our team has over 100 years of experience in medical defence and health sciences, and over 100 professionals immersed in your sector.</p>    <p>We can support the complexities of your reality - whether you&#39;re a health professional or a pharmaceutical, medical device or biotechnology company.</p>    <p>For health professionals, we follow you during your practice, and we protect your professional goals and reputation throughout. If you&#39;re an innovative life sciences company, we&#39;ll support you throughout your product&#39;s lifecycle - from the first steps of research through regulatory approvals, commercialisation and market impact.</p>    <p>With our in-depth background in medical and scientific knowledge, we speak your language. Many of our professionals have been trained in science, medicine and related technologies, making us best-placed to defend you against allegations that impact your professional life or your product.</p>    <p>We&#39;ve helped shape the regulatory framework that impacts your activities, always working in your best interests, whether before self-regulating colleges or governmental regulatory bodies. Each case enhances our knowledge base. As your world evolves, so do we.</p>    <p>We&#39;re also proven leaders in the development and adoption of efficient, value-driven tools and approaches for the management of litigation files in a manner that&#39;s both transparent and in tune with your business needs. These include our customised legal project management platform, <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"">Practical LPM&trade;</a>; electronic file and case management; project budgeting; knowledge management; and alternative fee/alternative billing arrangements, ranging from fixed fees, capped fees and blended rates to rewards-based/performance fees and contingency fees.</p>    <p>Areas of focus for our team include:</p>    <ul>   <li>Agricultural products</li>   <li>Biologics</li>   <li>Biotech/bioengineering</li>   <li>Care and treatment in the clinical setting</li>   <li>Cosmetics</li>   <li>Crisis and media management</li>   <li>Data breach management and trans-border health data management</li>   <li>Drug pricing &amp; reimbursement</li>   <li>Electronic health records management</li>   <li>Food and beverages</li>   <li>Medical device and drug approval processes</li>   <li>Natural health products including supplements</li>   <li>Pharmaceuticals</li>   <li>Product liability</li>   <li>Product research &amp; CROs</li>   <li>Professional regulation and liability</li>   <li>Public health recalls and investigation</li>   <li>Regulatory compliance</li>   <li>Risk management</li>  </ul>    <p>We care deeply about the contributions you and your colleagues make to improving the quality of life for all, and we&#39;d be proud to be a part of your team. To learn more, please contact us.</p>  ",GWLG.Global,54584e1a-f44e-4d61-9efe-eeecf78d7cc1,55B82F16-382D-4D6B-8BBB-590924E54046,NULL,0,1,t-white,"<p>In the evolving area of medicine and health, you need expert protection. Whether it&#39;s defending your professional rights, a regulatory investigation or an attack on your reputation or product, it&#39;s essential to have someone on your side who understands the law and, crucially, understands your world.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{68E51A97-CE73-432D-A521-DE68604E9DCE}
112,/Services/Medical-Defence-Health-Law/Canada,en-GB,B10F8349-48F3-48C4-BD97-1B0B2413C13B,Canada,Canada,"In the evolving world of medicine and health, you need expert protection. Whether it's defending your professional rights, an attack on your reputation, or product or regulatory investigations, it's essential to have someone on your side who understands the law and, crucially, understands your world.",NULL,NULL,"<p>At Gowling WLG, we focus on protecting health professionals and health-related enterprises. Our team has more than a century of experience in medical defence and health sciences, and over 100 professionals immersed in your sector.</p>    <p>We can support the complexities of your reality - whether you&#39;re a health professional or a pharmaceutical, medical device or bio-technology company. For health professionals, we follow you throughout your practice, protecting your professional goals and reputation. If you&#39;re an innovative life sciences company, we&#39;ll support you throughout your product&#39;s life cycle - from the first steps of research through to regulatory approvals, commercialization and market impact.</p>    <p>We speak your language, with many of our professionals having been trained in science, medicine and related technologies. We&#39;ll defend you against allegations that impact your professional life or your product. We&#39;ve helped shape the regulatory framework that impacts your activities, always working in your best interests, whether before self-regulating colleges or governmental regulatory bodies. Each case enhances our knowledge base. As your world evolves, so do we.</p>    <p>We&#39;re also proven leaders in the development and adoption of efficient, value-driven tools designed to manage litigation files in a manner that is both transparent and in tune with your business needs. These include:</p>    <ul>   <li>customized legal project management software</li>   <li>electronic file and case management</li>   <li>knowledge management</li>   <li>project budgeting</li>   <li>AFA/ABA: fixed fees, capped fees, blended rates, rewards-based/performance fees</li>  </ul>    <h3>Areas we focus on include:</h3>    <ul>   <li>agricultural products</li>   <li>biologics</li>   <li>biotech/bioengineering</li>   <li>care and treatment in the clinical setting</li>   <li>cosmetics</li>   <li>crisis and media management</li>   <li>data breach management and trans-border health data management</li>   <li>drug pricing and reimbursement</li>   <li>electronic health records management</li>   <li>food and beverages</li>   <li>Health Canada and other health devices and drug approval processes</li>   <li>medical devices</li>   <li>natural health products including supplements</li>   <li>pharmaceuticals</li>   <li>product research &amp; CROs</li>   <li>product liability</li>   <li>professional regulation and liability</li>   <li>public health recalls and investigation</li>   <li>regulatory compliance</li>   <li>risk management</li>   <li>seamless interprovincial/international coverage</li>  </ul>    <p>We care deeply about the contributions you and your colleagues make to improving the quality of life for all, and we&#39;d be proud to be a part of your team. To learn more, please contact us.</p>  ",GWLG.Canada,54584e1a-f44e-4d61-9efe-eeecf78d7cc1;bfe6f11a-4213-4822-80cd-21740b842391;3ae82526-329e-41d7-8e7e-7b14a7af12bc,55B82F16-382D-4D6B-8BBB-590924E54046,NULL,0,1,t-white,"<p>In the evolving world of medicine and health, you need expert protection. Whether it&#39;s defending your professional rights, an attack on your reputation, or product or regulatory investigations, it&#39;s essential to have someone on your side who understands the law and, crucially, understands your world.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{68E51A97-CE73-432D-A521-DE68604E9DCE}|{76CD0A85-1DC5-4B50-A635-1847FA12F1E4}|{3275D488-797C-47CE-A9DE-98A8ABFED5A2}
114,/Services/Occupational-Health-Safety/Canada,en-GB,3AA9D4F5-DBE7-4480-8BF5-F4CCE768BF19,Canada,Canada,"Across all Canadian jurisdictions, employers are subject to rigorous occupational health and safety (OHS) and workers' compensation legislation.",NULL,NULL,"<p>Across all Canadian jurisdictions, employers are subject to rigorous occupational health and safety (OHS) and workers&#39; compensation legislation.</p>    <p>To ensure compliance, avoid costly litigation and proactively manage workplace risks, you need a legal team that offers strategic solutions, extensive OHS litigation experience and broad industry insight.</p>    <p>With one of Canada&#39;s foremost occupational health and safety and workers&#39; compensation law practices, Gowling WLG provides employers across all industries with comprehensive training, valuable consulting and exceptional legal solutions to manage national and provincial legislative requirements.</p>    <p>We counsel employers, senior executives, supervisors, and health and safety committee members on a full range of OHS-related matters, including compliance, due diligence, defence and appeals.</p>    <h3>Learn more</h3>    <p>We&#39;re here to help you succeed. To learn more about our services, please contact any member of our team.</p>  ",GWLG.Canada,886b6d1b-5464-413a-8d96-04927adf9307,1DDD9194-936D-44F1-A8B2-7811CAD6F62C,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,886b6d1b-5464-413a-8d96-04927adf9307
115,/Services/Offices/UK,en-GB,35A691A4-C320-4631-89C3-2FC24C509050,UK,UK,"Acting for clients including institutions, property companies, banks and occupiers, we have dealt with many millions of square feet of offices. We advise on buying, selling, leasing, development, construction, planning, funding and asset management.",NULL,NULL,"<p><strong>The office environment is constantly changing to meet the demands of the workforce. With an increased need to innovate and to provide greater flexibility, tailored amenities and sustainable solutions, it is essential that you choose real estate lawyers who genuinely understand the commercial aspects and technical complexities of your transaction.</strong></p>    <p>We have advised on millions of square feet of office space across the full real estate lifecycle. Our experience covers representing UK and overseas institutional investors, asset managers, developers, banks, public bodies and corporations in their HQ relocation projects, office pre-lets, investments, disposals, developments and general corporate real estate. Drawing on the knowledge of professionals from across our many practice areas, we offer full-service support and work in partnership with you to ensure we meet your objectives.</p>    <p>Our services are underpinned by real estate related tech, and we have heavily invested in developing technology to deliver efficient and results-driven solutions to everyday legal challenges. We have created several bespoke real estate information systems and technology to manage transactions, due diligence processes and data transfer more efficiently, reducing the time, risk and cost for due diligence and leasing transactions to be completed.</p>    <p>As Environmental, Social and Governance (ESG) continues to be at the forefront of business priorities, our team will work with you to ensure you are meeting your targets, advising on the regulation of office projects, environmental regulation and reporting standards and sustainable portfolios.</p>    <h3>Services for the office asset class</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/investment/#uk"">Acquisitions, disposal and lettings</a></li>   <li><a href=""~/en/services/asset-management/#uk"">Asset management</a></li>   <li><a href=""~/en/services/commercial/#uk"">Commercial contracts and outsourcing</a></li>   <li><a href=""~/en/services/construction/#uk"">Construction</a></li>   <li>Corporate real estate and <a href=""~/en/services/governance-risk-and-compliance-grc/#global"">corporate governance</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#uk"">Employment</a> and <a href=""~/pensions/#uk"">pensions</a></li>   <li><a href=""https://gowlingwlg.com/en/services/environmental-social-and-governance-esg/#global"">ESG</a></li>   <li><a href=""~/en/services/investment-funds/#uk"">Funds</a></li>   <li>Health and safety</li>   <li><a href=""~/en/services/real-estate-litigation/#uk"">Litigation</a></li>   <li>Loans and financing agreements</li>   <li><a href=""~/en/services/planning/#uk"">Planning</a> and <a href=""~/en/services/climate-change-and-environmental-law/#global"">Environmental</a></li>   <li><a href=""~/en/services/tax/#uk"">Tax and structuring</a></li>  </ul>    <h3>Client work</h3>    <blockquote style=""text-align:center;"">  <p>They are my go-to lawyers as they understand our business and its key performance indicators, and always do a thorough job. <cite>Chambers and Partners</cite></p>  </blockquote>    <p>Some of our most recent deals have included:</p>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)One+Braham|(Copy1)Advising+leading+commercial+developer%2c+Aldgate+Developments+on+the+15-year+headquarters+pre-let+of+the+One+Braham+office+development+to+UK+telecoms+giant+BT.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Stamford+Land|(Copy2)Advising+Singapore+based+investment+company+and+luxury+hotel+owner+Stamford+Land+Corporation+Ltd+on+its+%c2%a3260+million+acquisition+and+subsequent+management+of+a+multi-let+office+building+in+London.|(LinkText2)Read+more|(BgHover2)colour-darkblue|(Headline3)30+Broadwick+Street|(Copy3)On+behalf+of+a+client+of+Savills+Investment+Management%2c+advising+on+the+%c2%a3190million+acquisition+and+debt+funding+of+30+Broadwick+Street+in+Soho%2c+a+recently+developed+mixed-use+building.|(LinkText3)Read+more|(BgHover3)colour-lightred|(widget_displayname)Three+Block+Widget^}</p>    <h3>Awards and accolades</h3>    <p>We are consistently ranked as a top tier real estate firm by <em>Chambers &amp; Partners</em> and <em>The Legal 500</em>. Our team has also been recognised by a host of industry awards including <em>The Times Best Law Firms</em>, <em>The British Legal Awards</em> and <em>The Lawyer Awards</em>.</p>    <h3>Contact our team</h3>    <p>We understand that the office environment is changing, and we can work with you to extract maximum value from your space. <strong>Contact us today for more information on how our team can support you with your next project.</strong></p>    <p><a href=""https://gowlingwlg.com/en/people/felicity-lindsay/"">Felicity Lindsay</a><br />  Partner</p>  ",GWLG.UK,eb89bd05-a1c7-4f2a-82cc-2ed724c83314,479E2C47-E068-4949-9B88-7B181392D3F6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,ace3d5d8-9af3-469f-ae66-1ce2cfbabc35,NULL,NULL,{D4F7FFA0-5CB5-4365-8852-92C6E00D4E11}
116,/Services/Outsourcing/UK,en-GB,7AC2CD68-32D8-44F9-9C21-F2825F8F09A6,UK,UK,Securing the best possible deal with cost certainty is a guaranteed outcome of working with the Gowling WLG outsourcing team.,NULL,NULL,"<p>Securing the best possible deal with cost certainty is a guaranteed outcome of working with the Gowling WLG outsourcing team.</p>    <p>This substantial and well-established team of 30 experts advises private and public sector clients, both as customers and suppliers, on the full range of outsourcing needs, including information technology, business processes, facilities management and logistics.</p>    <p>Some of the world&#39;s most complex, high-value and multi-jurisdictional outsourcing deals have been made possible because of the advice given by the Gowling WLG Outsourcing team, which, according to Chambers, &quot;should win a prize for patience and skill in keeping things moving because they ensured that everyone was on side and able to drive it through&quot;.</p>    <p>Clients also value that the team is &quot;flexible, engaged and willing to understand the context. They combine this with commercial awareness, pragmatism and communication&quot; (Chambers UK).</p>    <p>Choosing this team gives you the advantages of:</p>    <ul>   <li><strong>Sector specialists</strong> - the size of the team means clients can call upon a critical mass of sector expertise including food and drink, financial services, health and life sciences, retail and aviation. Chambers draws particular attention to the team&#39;s specific sector expertise, noting that it is &quot;known for handling IT infrastructure outsourcings, with notable sector experience across telecoms, health and utilities&quot;</li>   <li><strong>Confidence</strong> - a team that has completed 30 outsourcing deals in the last five years brings an indispensable level of confidence to any deal, especially in negotiation and finding creative solutions. The team &quot;provides great advice to get things done&quot; and &quot;their drafting makes all our contracts consistent so anyone in our business can use them. They are clear and concise&quot; (Chambers UK)</li>   <li><strong>International reach</strong> - Saudi Arabian Airlines turned to the team for advice on a major project to outsource the design, build and operation of a modern 400-bed general hospital in Saudia City. Several international airlines, including Air Pacific, Brussels Airlines, Garuda Indonesia, Malaysia Airlines, Norwegian Air, Olympic Air and Oman Air have called on the team&#39;s expertise on the outsourcing of their passenger systems services</li>  </ul>    <p>Clients include Anglian Water, BT, Capgemini UK, Coventry City Council, GlaxoSmithKline, Malaysia Airlines, Marks &amp; Spencer, Merrill Lynch, Sandwell Borough Council and Universal Music Group.</p>    <h3>Specialisms</h3>    <ul>   <li><strong>Business process outsourcing</strong> - advising on outsourcing of complex and transformation business-critical processes, such as accountancy, accounts payable and receivable and funds management</li>   <li><strong>Business support services</strong> - advising on outsourcing of a wide range of business support services such as print management, cleaning, post room, security and logistics</li>   <li><strong>HR outsourcing</strong> - advising on outsourcing of HR and payroll functions</li>   <li><strong>IT Services outsourcing</strong> - advising on outsourcing of IT systems and supporting processes, including data centres, shared service centres, network and infrastructure services and applications development, implementation and support</li>   <li><strong>Property and facilities management</strong> - advising on enterprise-wide property and facilities management outsourcing arrangements</li>  </ul>  ",GWLG.UK,NULL,E1231766-C10A-4BFD-8CA5-DA35934085E2,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,40c2df88-693d-451b-8633-8eee3c76676f,NULL,NULL,
117,/Services/Patents/Overview,en-GB,0856F682-DBC0-42FF-9DE8-8E049EE40FC5,Overview,Overview,The Gowling WLG patents team enjoys an unrivalled international reputation for industry insight and effective representation on all aspects of patent work.,NULL,NULL,"<p>Rapid advances in new technologies have led to a host of unique and unprecedented challenges to protecting your innovations. To stake a claim and mitigate long-term risk, you need a highly-skilled team of legal problem-solvers with extensive patent law experience and an established track record of successfully protecting and enforcing intellectual property rights worldwide.</p>    <p>The Gowling WLG patents team enjoys an unrivalled international reputation for industry insight and effective representation on all aspects of patent work.</p>    <p>From startup innovators, universities and research institutes to multi-national corporations, our patent team works to file, commercialise and enforce patents and industrial designs in a wide range of areas. With this experience, we can help you deal with any complex issue - in a language you&#39;ll understand.</p>    <p>We provide a full suite of prosecution-related services in Canada,&nbsp;China and the UAE, and contentious and transactional services in Canada, Europe, China and the UAE. In addition, we co-ordinate with our established and extensive network of associate firms to give you a truly global reach.</p>    <p>Responsive, dedicated, results-driven, and always client-focused, we serve as trusted advisers to the most sophisticated and exacting innovators in the world - providing protection and strategies to help you achieve success.</p>    <p>Our patents team covers:</p>    <ul>   <li>Prosecution of patents and industrial designs</li>   <li>Litigation, arbitration and mediation</li>   <li>Competition</li>   <li>Licensing and transactional</li>   <li>Patent listing</li>   <li>Plant breeders&#39; rights</li>   <li>Tax</li>   <li>Technology</li>   <li>Trade secrets and confidential information</li>   <li>Translations (China)</li>   <li>Utility models (China)</li>  </ul>    <p>By engaging Gowling WLG, you&#39;ll be working with an award-winning group of lawyers and patent agents that has earned a reputation as the go-to team for innovators seeking iron-clad protection and enforcement/defence of their rights.</p>    <p>Our patent services are backed by experience covering all technology areas, including biotechnology, pharmaceuticals, telecommunications, electronics, semiconductor manufacturing, consumer products and energy. This also includes the latest technologies, including cloud computing, wearables and nanotechnologies.</p>    <p>Our geographic reach enables us to co-ordinate your work through our global offices to advise on complex issues, including managing foreign filing, multi-jurisdictional litigation, licenses and other technology export requirements, sanctions, and all other compliance issues. Through our network of international associates, we also co-ordinate and direct the prosecution of patent and design applications worldwide.</p>    <p>Your intellectual property rights are invaluable, and Gowling WLG is the team that can protect, enforce and defend them, thereby maximising their value. To learn more about how we can help you do so, please contact us.</p>  ",GWLG.Global,6767b2fc-7817-42ae-a54e-05595fe6c1cd;b55438db-477b-4480-985a-4350054b759a,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;c0d9b4ff-0c67-4535-bb6f-75439876b016,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}|{C04A3DC6-B201-4743-B4AC-EE663C0A7C14}
118,/Services/Patents/Canada,en-GB,2C0611B2-35D3-4E5E-861B-56AF818849EA,Canada,Canada,"To confidently stake a claim and mitigate long-term risk, organizations need a highly skilled team of legal problem-solvers with extensive patent law experience and a history of successfully protecting and enforcing intellectual property rights.",NULL,NULL,"<p>Gowling WLG&#39;s award-winning group of patent agents and patent lawyers have earned a reputation as the go-to team for those seeking ironclad protection for their most valuable innovations.</p>    <p>Working with domestic and international companies, universities, and research institutes, our Canadian team provides expert counsel and effective representation to successfully file, commercialize and enforce patents and industrial designs. In conducting this work, we&#39;re committed to being conscientious, responsive, results-driven and, above all, client-focused.</p>    <p>From startups to multinational organizations, our team has an unrivalled reputation for industry insight. Many of our legal professionals hold advanced scientific, medical and engineering degrees, which enables us to provide you with tailored, effective solutions across a broad spectrum of complex technologies.</p>    <p>Through our extensive network of international associates, we regularly co-ordinate and direct the prosecution of patent applications worldwide, and frequently represent leading national and global technology companies before the Canadian Intellectual Property Office (CIPO).</p>    <p>Our patent expertise covers:</p>    <h3>Prosecution</h3>    <ul>   <li>Drafting and filing patent applications</li>   <li>Customized strategies for national and international patent prosecution</li>   <li>Patent portfolio management</li>   <li>Patent audits</li>  </ul>    <h3>Patent litigation/enforcement (contentious)</h3>    <ul>   <li>Opinions and counselling (validity, infringement, FTO/market clearance)</li>   <li>Competition law issues (patent misuse)</li>   <li>Arbitration and mediation</li>   <li>Alternative dispute resolution (ADR)</li>   <li>Patent disputes</li>  </ul>    <h3>Licensing and transactional</h3>    <ul>   <li>Patent portfolio management and monetization</li>   <li>Due diligence</li>   <li>Patent mining and mapping (landscaping)</li>   <li>Open source</li>   <li>Standard essential patents and FRAND</li>   <li>Licensing and other commercialization strategies</li>   <li>Negotiating and preparing licenses and agreements</li>   <li>M&amp;A, purchase/sale, financing and other transactions involving IP assets</li>  </ul>    <h3>Industrial designs</h3>    <h4>Trade secrets and confidential information (NDAs)</h4>    <p><strong>Related patent expertise</strong></p>    <p>Gowling WLG offers the right level of experience and expertise to help you realize the full value of your IP. In addition to prosecution and litigation, we can also assist you with strategies for commercialization, portfolio management and more. Our related services include:</p>    <ul>   <li>Providing assistance in acquiring, developing, financing, and commercializing innovative technologies</li>   <li>Advising on tax issues that relate to acquiring or developing a patent</li>   <li>Strategic patent portfolio management: adjusting the emphasis and expense of portfolio management to match changing priorities within an innovative and evolving organization</li>   <li>Recognizing strengths and weaknesses in a portfolio, and anticipating threats and opportunities - for example, in the context of corporate mergers and acquisitions</li>  </ul>    <h3>Learn more</h3>    <p>Your intellectual property rights are invaluable, and Gowling WLG has the right team to protect, enforce and defend them. To learn more about how we can help you do so, please <a href=""~/en/people/?page=1&amp;services=502&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,b55438db-477b-4480-985a-4350054b759a,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,t-white,"<p>Rapid advances in new technologies have led to a host of unique and unprecedented challenges to protecting innovation. To confidently stake a claim and mitigate long-term risk, organizations need a highly skilled team of legal problem-solvers with extensive patent law experience and a history of successfully protecting and enforcing intellectual property rights.</p>  ",Featured Insights,e4978aa4-69df-4223-ba3f-77ca77bf429e;9e6f029b-0b6c-4a94-8266-a567ae465ee6;2798cefb-f17d-4e89-aa7c-89b9d3dab777;38324b76-ed7c-438b-8f7e-68d0808c28f8,View all Patents articles,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,/en/insights-resources/?page=1&locations=GWLG.Canada&services=502,NULL,{C04A3DC6-B201-4743-B4AC-EE663C0A7C14}
119,/Services/Patents/UK,en-GB,521EFB05-B10F-4AAF-91F9-13D410576129,UK,UK,"From start-up innovators, universities and research institutes to multi-national corporations, our patent team works to file, commercialise and enforce patents and industrial designs in a wide range of areas.",NULL,NULL,"<p>Rapid advances in new technologies have led to a host of unique and unprecedented challenges when protecting innovations. To stake a claim and mitigate long-term risk, you need a highly-skilled team of legal problem-solvers with extensive patent law experience and an established track record of successfully enforcing intellectual property rights worldwide.</p>    <p>The Gowling WLG patents team enjoys an unrivalled international reputation for industry insight and effective representation on all aspects of patent work.</p>    <p>From start-up innovators, universities and research institutes to multi-national corporations, our patent team works to file, commercialise and enforce patents and industrial designs in a wide range of areas. With this experience, we can help you deal with any complex issue - in a language you&#39;ll understand.</p>    <p>Our geographic reach enables us to co-ordinate your work through our global offices, to advise on complex, multi-jurisdictional litigation and licensing.</p>    <p>Our award-winning team provides contentious and transactional services in Canada, the UK, Germany, France, the United Arab Emirates, and China, and a full suite of prosecution-related services in Canada and China. In addition, we co-ordinate our established and extensive network of associate firms to give you a truly global reach.</p>    <p>Responsive, dedicated, results-driven, and always client-focused, we serve as trusted advisers to the most sophisticated and exacting innovators in the world - providing protection and strategies to help achieve success.</p>    <h3>The Unified Patent Court</h3>    <p>The Unified Patent Court (UPC) is a brand new court system for owners of European Patents and Unitary Patents (UPs). With a single judgment, the court is able to determine validity and infringement of a patent across nearly all EU member states.</p>    <p>Gowling WLG&#39;s award winning patent litigation team draws on its extensive experience patent litigation in the UK, Germany, France and beyond to provide clients with comprehensive guidance as to the opportunities and challenges presented by this new court system.</p>    <p>To find out more, visit our <a href=""~/en/insights-resources/articles/2016/the-unified-patent-court/""><abbr title=""Unified Patent Court"">UPC</abbr> information hub</a>.</p>    <h3>Our UK patents team covers:</h3>    <ul>   <li>Litigation, arbitration and mediation</li>   <li>Licensing and transactional</li>   <li>Competition</li>   <li>Trade secrets and confidential information</li>   <li>Advice on industry standards</li>   <li>Co-ordination of and strategy for international litigation</li>   <li>Opinions on freedom to operate</li>   <li>Opinions on patentability</li>   <li>Prior art checking</li>   <li>Technology</li>  </ul>    <p>Our patent services are backed by experience covering all technology areas, including biotechnology, pharmaceuticals, telecommunications, electronics, semiconductor manufacturing, consumer products and energy.</p>    <p>Your intellectual property rights are invaluable, and Gowling WLG is the team to develop your strategy for protection, protect, enforce and defend them, thereby maximising their true value. To learn more about how we can help you do so, please contact us.</p>  ",GWLG.UK,6767b2fc-7817-42ae-a54e-05595fe6c1cd;d960a618-a196-404c-b795-b884bc90e603;a21f77d5-b08e-4dac-9b34-efe5dddc9db1,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}|{AD4D3F97-80D7-4280-9634-F885370C3930}|{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}
120,/Services/Pensions/Overview,en-GB,68E43E2E-36AF-4636-A44F-17E2FD16C674,Overview,Overview,"Our pensions team is renowned for communicating in plain English, delivering pragmatic, robust advice and giving a clear view on grey areas.",NULL,International pensions experts,"<p>The law governing pensions and benefits is complex and constantly evolving. The actions of employers, trustees, plan administrators and their service providers are subject to regulatory review and legal challenges - and the need for sophisticated, practical pensions and benefits advice has never been greater.</p>    <p>Gowling WLG can provide this advice. Our&nbsp;team is renowned for communicating in plain English, delivering pragmatic, robust advice and giving a clear view on grey areas. Our lawyers are bright and able to deal with the technicalities of pensions law - but always remain focused on finding commercial solutions.</p>    <p>You often need access to wider counsel, and our team can quickly call upon in-depth expertise in funds, tax, corporate, real estate, banking, derivatives, energy, infrastructure and financial services. The pensions areas we cover include:</p>    <ul>   <li>Benefit change</li>   <li>Funding negotiations</li>   <li>Investment matters, including direct investment in alternatives such as infrastructure projects</li>   <li>Liability management exercises</li>   <li>Risk transfer at all levels</li>   <li>Mergers and corporate restructuring</li>   <li>Scheme closures, design and governance</li>  </ul>    <p>We&#39;ll work with you to determine what you need, and then deliver exactly that. We aim not just to answer legal questions, but to consider whether you&#39;ve asked us the right questions, whether there&#39;s a less costly way forward and whether you&#39;ve considered all the potential consequences of a specific route. You&#39;ll get practical and innovative help, presented in a way that&#39;s clear and to the point.</p>    <p>Because we act for all sides on pensions, often on an international scale, we see pensions from all angles. Amongst our clients are trustees, sponsors of schemes, national and regional governments and agencies, actuaries, consultants/administrators, industry bodies (including regulators) and insurance companies.</p>    <p>Our experience means there&#39;s little we haven&#39;t seen and dealt with before, so you&#39;ll be engaging lawyers who&#39;ll alert you to issues before they arise. For security, clear advice and in-depth knowledge on pensions, contact our team.</p>  ",GWLG.Global,91c9c57f-d1b5-4113-862f-60addeffaa4f;b932ec2d-5f3e-413d-a75f-2269018135a2,A19C4C5E-C05A-4FA5-95AA-C5A274279D8C,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{C9573CE8-3032-4368-A2F6-75C972CC3708}|{A4F26BC7-4AD5-4286-A317-3A49C6C3EAAE}
121,/Services/Pensions/Canada,en-GB,B54696A0-09BD-4ADE-B6C8-287EE01C9330,Canada,Canada,"The actions of employers, plan administrators and their service providers are subject to regulatory review and legal challenges, including class actions. The need for sophisticated, timely and practical advice related to pension and benefits matters has never been greater.",NULL,NULL,"<p>The actions of employers, plan administrators and their service providers are subject to regulatory review and legal challenges, including class actions. The need for sophisticated, timely and practical advice related to pension and benefits matters has never been greater.</p>    <p>Gowling WLG provides strategic legal advice on all pension matters - in relation to both registered and non-registered plans - to a full range of industry clients, including employers, employees, sponsors, administrators, beneficiaries, custodians/trustees and investment/fund managers, among others.</p>    <h3>A unique perspective</h3>    <p>What makes us distinct from many of our competitors is that we don&#39;t act solely for the ""employer side"" or the ""employee side"". Our unbiased perspective, the broad nature of our clientele and the fact that we don&#39;t have a public position to defend makes us best-placed to provide effective pensions advice to all clients.</p>    <h3>A broad clientele</h3>    <p>We act for several of Canada&#39;s larger single and multi-employer pension plans, both in the private and public sectors. We also act on behalf of promoters of investment products and investment managers, and assist them in structuring their products and services to appeal to pension fund investors.</p>    <h3>In-depth experience and expertise</h3>    <p>Our team has a broad range of experience and expertise, including lawyers formerly on staff at a pension regulator. In dealings with pension regulators and government officials/agencies, we provide our clients with the benefit of invaluable historical insight and practical experience. We also work closely with other practice groups to deliver seamless service in other key legal areas.</p>    <p>We provide advice and assistance on a wide range of pension matters, including:</p>    <ul>   <li>Plan governance and fiduciary obligations</li>   <li>Benefit administration</li>   <li>Investment matters, including contract review, comments to SIP&amp;Ps and compliance opinions</li>   <li>Asset transfers, plan mergers and plan conversions</li>   <li>Plan terminations and annuity purchases</li>   <li>Pension and benefit issues in the context of mergers, acquisitions and insolvencies</li>   <li>Surplus management issues, including contribution holidays, surplus withdrawals and plan expense issues</li>   <li>Supplementary pension plans (SERPs and RCAs)</li>   <li>Negotiating and drafting contracts with third party service providers, including investment advisers, consultants, custodians, trustees and others</li>   <li>Plan amendments, including compliance amendments, benefit changes and extraordinary changes (e.g., plan closure, freezes, etc.)</li>   <li>Preparation and review of employee communications</li>   <li>Strategic advice with respect to regulatory examinations and investigations</li>   <li>Representation before pension regulatory authorities and all levels of court</li>   <li>Pension tax issues</li>  </ul>    <h3>Learn more</h3>    <p>To learn more about how we can support your pension needs, please <a href=""~/en/people/?page=1&amp;services=506&amp;locations=GWLG.Canada"" target=""_blank"">reach out to any member of our team</a>.</p>  ",GWLG.Canada,b932ec2d-5f3e-413d-a75f-2269018135a2,A19C4C5E-C05A-4FA5-95AA-C5A274279D8C,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{A4F26BC7-4AD5-4286-A317-3A49C6C3EAAE}
122,/Services/Pensions/UK,en-GB,E94DF1F7-44CE-4AEA-8B4E-487A2F21DFF0,UK,UK,"Our team of pension lawyers provide expert, authoritative pension law advice which anticipates clients needs to achieve your pension objectives.",~/en/insights-resources/podcasts/2020/the-month-in-pensions-june-2020/?ext=.,NULL,"<p>We do more than just answer your legal questions. Clients, including employers, pension managers, pension fund chairs, independent trustees, employers&#39; HRDs and FDs, advisers and statutory bodies turn to our &quot;superb pensions practice&quot; (Chambers UK) for advice.</p>    <p>One of the &quot;jewels in the [firm&#39;s] crown&quot;, the team combines &quot;excellent, direct and pragmatic advice&quot; with &quot;in-depth understanding&quot; and a &quot;friendly approach&quot; (Legal 500).</p>    <p>Why you should choose us:</p>    <ul>   <li><strong>A tailored, efficient service</strong> - With more than 40 dedicated pensions lawyers, including 11 partners, and several specialist sub teams, clients can expect a team tailored to their exact requirements. The chances are that this team has seen it before, so you&#39;ll be using lawyers who alert you to the issues before they arise (and you won&#39;t be paying for learning on the job)</li>   <li><strong>Easy access to wider legal advice</strong> - To provide the comprehensive service now essential to trustees, this team can quickly call upon expertise in funds, tax, corporate, real estate, banking and financial services</li>   <li><strong>Delivering what you really need</strong> - We&#39;ll work with you to work out what you really need, and then deliver that. We aim not just to answer legal questions but to consider whether you have asked us the right question, whether there is a less costly way forward and all the potential consequences of a specific route</li>   <li><strong>Keeping clients abreast of the latest legal developments</strong> - our pensions experts are immersed in the latest regulatory changes and so are well-placed to advise on the hot topics effecting the industry. Through events, workshops, alerts and digital media they ensure clients have the information and guidance they need.</li>  </ul>    <p>Team members take an active role in the Pension and Lifetime Savings Association, The Society of Pension Professionals and Association of Pension Lawyers. We also host a bi-annual seminar on current pension issues, webinars on new issues as they arise, and roundtable discussions for small groups of clients with a common interest.</p>    <p>We regularly work on an international scale and are well used to dealing with the unique governance and covenant issues that arise when a sponsoring employer is part of an international group.</p>    <p>All of this is why clients, including ICL Group Pension Plan of Fujitsu UK and Ireland, Rothesay Life, Thales UK Pension Scheme, Pirelli Schemes, Finning Pension Schemes, Pension Protection Fund, Mitchells &amp; Butlers Pension Plans, NFU Mutual, Rolex, Hitachi Data Systems Retirement Benefits Plan, Twentieth Century Fox Film Pension Scheme, Volvo Penta UK Retirement Benefits Scheme and Stanley Gibbons, choose us.</p>    <h3>Results for clients</h3>    <h4>Innovative protection structure</h4>    <p>One of our pension fund clients&#39; sponsoring employer had a parent company that wanted to give it &pound;300 million worth of shares. But there were liabilities attaching to those shares, which would have exposed the rest of the pension fund to the risk of claims. A remote risk, but not one a trustee could take. The trustees wanted the asset in the fund, but not the risk.</p>    <p>Our Pensions team designed an innovative protective structure around the shares, so that the fund could take the economic benefit without the liability risk. The shares (a large minority holding in a NASDAQ listed company) have since increased very substantially in value and been sold, a great result for the fund.</p>    <h4>First ever AE-compliant cash balance scheme</h4>    <p>A very large employer client was in the first wave of the auto-enrolment obligations. It had a corporate culture which did not want to move completely away from defined benefit provision for the workers coming into the new arrangement, most of whom were being pensioned for the first time.</p>    <p>We designed and wrote (in a very short time) the first ever AE-compliant cash balance scheme, which gives tens of thousands of moderately paid workers access to a defined benefit lump sum on retirement.</p>    <p>The investment risk has been taken away from the employees, who are not well placed to take it. And the long term unknown of a major longevity risk has been taken away from the employer. More than 25,000 members signed up to the &#39;half way house&#39; scheme.</p>  ",GWLG.UK,91c9c57f-d1b5-4113-862f-60addeffaa4f,A19C4C5E-C05A-4FA5-95AA-C5A274279D8C,NULL,0,1,t-white,"<p>Our team of pension&nbsp;lawyers provide expert, authoritative pension law advice which anticipates clients needs to achieve your pension objectives.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,f6e274b2-7251-46b1-999b-72a42c49fe00;8d059378-6b75-4105-b57d-3bafa12bb15d;c0791066-b1ca-48e4-be8b-0086d6051b23;ad81e3ca-373e-4cd9-b75d-e5f9b53af1ab;0eaa0790-eb13-4982-a309-ea91a9dfa505,NULL,NULL,{C9573CE8-3032-4368-A2F6-75C972CC3708}
123,/Services/Pensions-Disputes/UK,en-GB,830ED96B-3FD4-4CF5-8F74-A776B4C85FDE,UK,UK,"Pensions disputes solicitors that anticipate and resolve pensions disputes with practical, cost-effective advice tailored to your specific needs.",NULL,NULL,"<p><strong>With high-value stakes, pensions litigation can be complex, costly and time-consuming. Understanding that every matter is unique, our pensions disputes solicitors will help you to anticipate and resolve pensions disputes with practical, cost-effective advice tailored to your specific needs.</strong></p>    <p>Sitting within one of the largest pensions practices in the UK, our Pensions Disputes team is made up of highly skilled lawyers who focus exclusively on resolving pensions disputes arising out of occupational pension schemes. This level of experience allows us to provide our clients with a dedicated service that draws on technical excellence and a deep level of knowledge.</p>    <p>Most of our clients are trustees or employers of occupational pension schemes, both in the private and public sector (where our clients include charities, borough and city councils, as well as overseas governments with pensions schemes in England). Many of the pensions disputes and uncertainties on which we help our clients are complicated and of significant financial value to them.</p>    <p>We always try to resolve issues arising out of pension schemes without resorting to litigation and will look for creative, cost-effective and innovative solutions wherever possible. For example, if a pensions dispute can be resolved by consent through what is called a summary disposal hearing, we have a lot of experience of doing so that we bring to bear.</p>    <p>However, if it is not possible to do this, we have considerable experience resolving pensions disputes in the High Court, whether that be through applications by employers or trustees to rectify the rules of pension schemes, or claims asking the Court to rule on the meaning and effect of provisions in pensions schemes or pensions legislation.</p>    <p>Our team has substantial experience of advising on professional negligence litigation, particularly in relation to claims brought by pension scheme employers and trustees arising out of ineffective rule amendments, indexation and revaluation (RPI/CPI) and inappropriate investment strategies.</p>    <p>We have a wealth of experience advising on disputes with The Pensions Regulator, including supporting international pension scheme employers and trustees with UK pension schemes.</p>    <p>We regularly act for schemes members as representative beneficiaries in proceedings brought by employers and trustees. We have been involved in many of the leading cases in this area (including <em>Colorcon v Huckell</em>, <em>Industrial Acoustics Ltd v Crowhurst</em> and <em>Sogefi Filtration Ltd v Havard</em>).</p>    <p>We take a sensible, pragmatic and proportionate approach to our role, while ensuring the advice we give to the representative beneficiary is clear and easy to understand. Cases are dealt with efficiently and at a proportionate cost by identifying key issues to focus on to limit the areas in dispute.</p>    <p>In addition to complex pensions disputes in the High Court and the Court of Appeal, we also handle complaints by members under schemes&#39; Internal Dispute Resolution Procedures and to the Pensions Ombudsman for over 400 employer and trustee clients.</p>    <p>We also actively monitor the Pensions Ombudsman&#39;s decisions and have harnessed innovative technology to assist our clients in preparing responses to Ombudsman complaints. This means we can help pension schemes head off the risk of claims before they develop, or agree at the outset an appropriate strategy to contest the claim.</p>    <p>As one of the leading pensions disputes practices in the UK, we are proud to have acted on some of the most significant cases in recent years, including <em>Axminster, Britvic </em>and <em>Mitchells &amp; Butlers</em>.</p>    <h3>How we resolve pensions disputes</h3>    <p>We have substantial experience in:</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>High Court litigation seeking to rectify mistakes in pensions scheme documentation</li>   <li>Applying to the High Court to resolve uncertainties with scheme documentation</li>   <li>Handling professional negligence claims</li>   <li>Pensions Ombudsman and PPF (Pension Protection Fund) Ombudsman complaints</li>   <li>Court-approved compromises</li>   <li>Pensions dispute resolution with The Pensions Regulator</li>  </ul>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Gowling WLG covered all angles as the case evolved pre-trial and then expertly briefed Counsel to ensure the Trustee&#39;s case was best represented in Court. The Trustee has consistently felt it was in proactive and safe hands. <cite>Mitchells &amp; Butlers Pensions Limited</cite></p>  </blockquote>    <p>Our team has experience in handling some of the most high profile and complex pensions cases in the industry, our litigation work has included:</p>    <p>{^widget|(copy1)Acting+for+the+trustee+of+the+Mitchells+%26+Butlers+Pension+Plan+in+its+successful+claim+to+rectify+three+deeds+on+behalf+of+22%2c000+members+after+a+three-week+trial+during+the+pandemic.|(copy3)Acting+for+the+trustee+of+the+Plan+in+a+leading+case+on+limitation+and+forfeiture+in+a+pensions+context.|(linktext4)Read+more|(copy2)Acting+for+the+trustee+of+the+Britvic+Pensions+Plan+in+the+Court+of+Appeal+case+on+the+approach+to+take+when+interpreting+pension+deeds+and+rules.|(copy4)Acting+for+the+employer+of+the+CMG+UK+Pension+Scheme+in+a+leading+case+on+forfeiture+and+recoupment+in+a+pensions+context.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Four+Block+Widget|(bghover1)colour-aubergine|(bghover3)colour-darkblue|(headline1)MITCHELLS+%26+BUTLERS+PENSIONS+LIMITED|(headline3)TRUSTEE+OF+THE+AXMINSTER+CARPETS+RETIREMENT+BENEFITS+PLAN|(headline2)BRITVIC+PENSIONS+LIMITED|(name)FourBlockWidget|(headline4)CMG+UK+Pension+Scheme|(bghover2)colour-lightred|(bghover4)colour-darkred|(width)|(height)^}</p>    <p>Other significant cases in which we have acted include <em>Steria Limited v Hutchison</em> (Court of Appeal). <em>Smithson v Hamilton</em>, <em>Foster Wheeler Limited v Hanley</em>, <em>CEMEX Marine UK Limited v MNOPF</em>, <em>ITS v Knell</em>, <em>Capita ATL Pension Trustees Ltd v Gellately</em>, <em>Beaton v PPF</em>, <em>Police and Crime Commissioner for Greater Manchester v Butterworth</em>, <em>Thales UK Ltd v Thales Pension Trustees Ltd</em> and <em>G4S plc v G4S Trustees Limited</em>.</p>    <h3>Awards and recognition</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Specific knowledge combined with the broader view of the client&#39;s activities. <cite>Chambers &amp; Partners</cite></p>  </blockquote>    <p>We are proud to be regularly recognised by the legal directories for our work in the pensions industry. <em>The Legal 500</em> ranks the team in Band 2 for &#39;Pensions: Dispute Resolution&#39; in London and <em>Chambers &amp; Partners </em>places us in Band 2 for UK-wide Pensions Litigation.</p>    <p>Ian Gordon is ranked in Band 2 by <em>Chambers &amp; Partners</em>, with <em>The Legal 500</em> commenting, &quot;Ian Gordon always gives in-depth analysis and can explain the big picture issues to trustees<em>&quot;. </em>Charlotte Scholes (now a legal director) was recognised as an &quot;Associate to Watch&quot; by <em>Chambers &amp; Partners</em> and a &quot;Rising Star&quot; by <em>The Legal 500</em>. Aaron Dunning-Foreman was also named a &quot;Rising Star&quot; by <em>The Legal 500</em>.</p>    <p>Both Charlotte and Aaron were named in <em>Best Lawyers</em> in 2022 as &quot;Ones to Watch&quot;, making our pensions disputes practice the only team to have two commendations in this category nationally.</p>    <p>Our pensions team was also named &quot;Pensions Law Firm of the Year 2022&quot; by <em>Pensions Age</em> and shortlisted as one of five firms for <em>Professional Pensions</em> &quot;Pensions Litigation Firm of the Year&quot; in 2022.&nbsp;In recognition of the strength of our practice, we also&nbsp;won the UK Pensions Award 2022 for &quot;Pensions Litigation Firm of the Year&quot;.</p>    <h3>Contact our team</h3>    <p>Contact us today for more information on how our team can support you with pensions disputes.</p>    <p><strong><a href=""~/en/people/ian-gordon/"">Ian Gordon</a></strong><br />  Partner, head of Pensions Disputes team</p>  ",GWLG.UK,bf7e646c-1700-472b-bf57-0e36f3a56ab6,D2158C36-B0A3-4E47-8B27-8B1D3D1EB6EC,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,c0791066-b1ca-48e4-be8b-0086d6051b23,NULL,NULL,{5D943E5A-FEE1-45EB-93A7-7ECADF3546A5}
124,/Services/Planning/UK,en-GB,ECF3BCCC-FF29-4369-B1EF-222AF3E87697,UK,UK,"Our planning team represents landowners, developers and public authorities in relation to all aspects of planning law, policy and procedures across the UK and advises on some of the UK's highest profile commercial, residential and infrastructure projects.",NULL,NULL,"<p>We have extensive experience in dealing with planning applications, planning obligations and infrastructure agreements in relation to major development sites. We bring a practical, commercially-focused and cost-effective approach to every kind of planning issue. We achieve a negotiated solution wherever possible, but we also have considerable experience of planning appeals and call-in inquiries, examinations into local plans, compulsory purchase orders and judicial review litigation.</p>    <p>Our clients have included&nbsp;the Malaysian developers of Battersea Power Station, The Crown Estate and London City Airport.</p>  ",GWLG.UK,NULL,53EED55A-EA34-4FD0-ADFC-9306E97EAAC6,NULL,0,1,t-white,"<p>Our planning team represents landowners, developers and public authorities in relation to all aspects of planning law, policy and procedures across the UK and advises on some of the UK&#39;s highest profile commercial, residential and infrastructure projects.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,c0791066-b1ca-48e4-be8b-0086d6051b23;ad81e3ca-373e-4cd9-b75d-e5f9b53af1ab,NULL,NULL,
125,/Services/Practical-LPM-by-Gowling-WLG/Canada,en-GB,8242B076-5882-4763-886F-BBCA884DE1E2,Canada,Canada,"We think you deserve more from your law firm - more cost-certainty, more efficiency and more value. That's why we created Practical LPM, a groundbreaking approach to legal project management that helps keep your legal matters on track, on time and on budget.",NULL,NULL,"<p>We think you deserve more from your law firm - more cost-certainty, more efficiency and more value.</p>    <p>That&#39;s why we created Practical LPM, a groundbreaking approach to legal project management that helps keep your legal matters on track, on time and on budget.</p>    <p>With the help of a collaborative software platform designed specifically for the legal environment - the first of its kind in Canada - Practical LPM provides a clear road map for all types of legal issues, from sophisticated corporate-commercial matters to complex litigation, in Canada and around the world.</p>    <p>With Practical LPM, you always know who&#39;s working on your file, how it&#39;s progressing and how much it&#39;s expected to cost. No surprises. Just results.</p>    <p>{^widget|(name)GWLG.Video|(VideoId)qHgMXPY3woU|(VideoTitle)Watch+the+video+-+Practical+LPM+by+Gowling+WLG|(TranscriptText)%3cp%3e%3cstrong%3eNarrator%3a%3c%2fstrong%3e%26nbsp%3bWhat+would+happen+if+other+businesses+operated+the+way+most+law+firms+do%3f%3c%2fp%3e%0d%0a%0d%0a%3cp%3eAirlines+wouldn%26%2339%3bt+tell+you+the+price+of+your+ticket+until+after+the+plane+had+landed%2c+builders+wouldn%26%2339%3bt+bother+using+blueprints+they+just+start+breaking+ground.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eBroadway+shows+wouldn%26%2339%3bt+assign+roles+until+after+the+curtain+had+gone+up.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eIt%26%2339%3bs+time+to+get+practical.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eAt+Gowling+WLG%2c+we+think+you+deserve+more+from+your+law+firm+-+more+cost+certainty%2c+more+efficiency%2c+and+more+value.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eThat%26%2339%3bs+why+we+created+Practical+LPM%2c+a+better+approach+to+legal+project+management+that+helps+keep+your+legal+matters+on+track%2c+on+time%2c+and+on+budget.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eUsing+a+collaborative+software+platform+designed+specifically+for+the+legal+environment+-+Practical+LPM+provides+a+clear+road+map+for+all+types+of+legal+issues.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eHere%26%2339%3bs+how+it+works%3a%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eStep+1%3a%3c%2fstrong%3e+Define.+You+tell+us+what+you+need+your+expectations%2c+your+deadlines+and+what+success+looks+like+to+you.+We+listen.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eStep+2%3a%3c%2fstrong%3e+We+determine+the+most+efficient+path+and+the+best+use+of+resources+to+achieve+your+goals.+You%26%2339%3bll+get+a+clear+sense+of+what+your+file+will+cost%2c+who+will+work+on+it%2c+and+how+long+it+will+take.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eStep+3%3a%3c%2fstrong%3e+Monitor+and+manage.+You%26%2339%3bll+receive+regular+updates+on+the+status+of+your+file+should+something+unexpected+occur+that+could+affect+timing+or+cost.+We+immediately+bring+it+to+your+attention+allowing+you+to+make+decisions+right+away+and+avoid+unpleasant+feeling+surprises+down+the+road.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eStep+4%3a%3c%2fstrong%3e+Review+and+improve.+Our+end+of+matter+review+is+the+key+to+finding+new+efficiencies+and+ways+to+improve+value.+If+there%26%2339%3bs+something+we+can+do+better%2c+we+want+to+do.+In+short+with+practical+LPM%2c+you+know+who%26%2339%3bs+working+on+your+file%2c+how+it%26%2339%3bs+progressing%2c+and+how+much+is+expected+to+cost.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eNo+surprises%2c+just+results.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eLearn+more+at+gowlingwlg.com%2fpractical+or+email+%3ca+href%3d%22mailto%3agetpractical%40gowlingwlg.com%22%3egetpractical%40gowlingwlg.com%3c%2fa%3e%3c%2fp%3e%0d%0a|(image_guid)0e502820-04ca-4904-bb36-27eed2f52336|(widget_displayname)Video^}</p>    <h3>How it works</h3>    <p>Practical LPM is rooted in a simple yet powerful four-step process:</p>    <ol>   <li><strong>Define:</strong> At the outset, you tell us your expectations - what you need, when you need it and how you define success. We listen.</li>   <li><strong>Plan:</strong> We leverage our knowledge, precedents, project plan templates and decades of experience to determine the most efficient path and allocation of resources to achieve your goal. We anticipate costs and potential hurdles, and identify which aspects of your file require the expertise of a senior professional and which can be handled by lower-cost resources. The result? A plan that gives you a clear sense of how much your file is going to cost - based on clear assumptions - and how long it will take to complete.</li>   <li><strong>Monitor and manage</strong>: Practical LPM allows us to monitor the progress of your file in real time. It&#39;s not a crystal ball, and unexpected events can occur in all legal matters. However, Practical LPM helps ensure that any issue that could affect your budget or timeline is immediately flagged and brought to your attention - allowing you to make decisions right away and avoid billing surprises.</li>   <li><strong>Review and improve</strong>: At the heart of Practical LPM is the concept of &quot;practical excellence&quot;, which we define as achieving excellence not only in the quality of our legal services, but in delivering those services on time and within your budget. Our mandatory end-of-matter review is the key to finding new efficiencies and ways to improve value. If there&#39;s something we can do better, we want to do it.</li>  </ol>    <p><img alt=""Practical LPM - How it works - Define, Plan, Monitor &amp; manage, Review &amp; improve"" src=""~/getmedia/9d0b3f0a-7e9e-4bae-a15c-dbcdeb8b7cb8/practical-lpm-how-it-works.gif.xml"" style=""align:centre"" /></p>    <h3>Why choose Practical LPM?</h3>    <p>Practical LPM is for you if:</p>    <ul>   <li>You want to get more for your legal spend.</li>   <li>You want to avoid billing surprises.</li>   <li>You want a clear sense of who will work on your file, how much it&#39;s expected to cost and how long it will take to complete.</li>   <li>You want more accountability and transparency from your law firm in delivering value and results.</li>   <li>You want all of the above without sacrificing the level of quality or service.</li>  </ul>    <h3>Ready to get practical?</h3>    <p>To learn more about Practical LPM, send us an email at <a href=""mailto:getpractical@gowlingwlg.com?subject=Practical%20LPM"">getpractical@gowlingwlg.com</a>, or contact <a href=""~/en/people/?page=1&amp;services=514&amp;locations=GWLG.Canada"" target=""_blank"">one of our firm-wide team leaders</a>.</p>  ",GWLG.Canada,ac24e0d0-9356-490c-a7a8-8c21a73564e6;1a66e5a9-fefa-4a12-bda8-48e8281bcc20,1B8FE12A-0095-43F3-B58B-2FEBD2F7E8A0,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{11A78167-7F06-437B-8776-6107E8AAFCE2}|{92DDEAC1-71F6-4C18-9B43-9E04D58806AD}
128,/Services/Private-Client-Services/Overview,en-GB,EEC9A60A-3622-4A2F-9E06-6160C039FC36,Overview,Overview,"At Gowling WLG our leading Private Client Services team advises the world's wealthiest families and the family offices, banks and offshore trustees who work with them.",NULL,NULL,"<p>Many high net worth individuals share similar concerns: ever-changing tax rules, succession issues and asset protection, to name but a few. At Gowling WLG, we understand this because our leading Private Client Services team advises the world&#39;s wealthiest families and the family offices, banks and offshore trustees who work with them.</p>    <p>To guide you through this ever-changing maze, you need a legal team that&#39;s:</p>    <ul>   <li><strong>Experienced</strong>: Acquired over many generations, our depth of experience in advising wealthy individuals enables us to avoid the learning curve that can cause delays and add costs. If a problem arises, we&#39;ll find the answer. You can expect timely solutions tailored to your specific circumstances, but based around what we know has worked for other families.</li>   <li><strong>Commercial:</strong> Technical excellence is a given, but acting for some of the world&#39;s wealthiest individuals and families demands commercial rigour. Many own large enterprises and require expertise on innovative wealth structuring.</li>   <li><strong>International:</strong> Our international offices and network of contacts in the &quot;offshore world&quot; mean that wherever you&#39;re based, you&#39;ll be working with a team fully versed in local tax and succession laws. We have particular expertise in the Middle East and Far East, where we have offices in Dubai, Beijing, Guangzhou and Singapore. With offices across Europe and Canada, we also have strong links with the Channel Islands, the Isle of Man, Switzerland, Bermuda, the Caribbean, and South America.</li>  </ul>    <p>Our team is best known for its international work and advice on: cross-border, tax efficient asset holding structures for high net worth individuals, family governance and succession planning; UK and Canadian tax-planning; international estate planning; contentious trusts and estates issues; immigration; international estate administration; and high-value residential conveyancing.</p>    <h3>Bespoke solutions for high net worth individuals</h3>    <p>How do I transfer my business to the next generation? What&#39;s the best structure to put in place before selling my company? Whatever your concerns or objectives as a high net worth individual, our internationally renowned lawyers will find the best solution for your personal and business needs. It&#39;s why global clients - including 35 billionaires - choose to work with us.</p>    <p>Wealth management institutions and trustees turn to us for expert advice on implementing robust international tax and succession planning structures. We also help private banks&#39; clients and other philanthropically minded individuals to meet their philanthropic objectives by establishing charitable structures.</p>    <h3>Fighting in your corner</h3>    <p>Our team also offers specialist trust and estate expertise in both onshore and offshore conflicts. The team helps clients avoid litigation through the formation of secure trust structures, family constitutional arrangements and providing advice on marital property regimes. Specialist advice on administrative risk and regulatory rules are also relevant in avoiding and managing clients&#39; exposure to potential disputes.</p>    <p>When litigation is unavoidable, we are highly experienced in project managing cross-jurisdictional court actions, negotiating situations where different laws conflict and managing reputational damage.</p>    <p>To find out how we can support your needs, please contact any member of our team.</p>  ",GWLG.Global,b58865ed-7b8c-4e68-9c8b-2cc784b86022,231F78A0-0796-40D1-A428-F3F450094B7B,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{CD93C30C-2001-4E22-85F4-975343171C51}
129,/Services/Private-Client-Services/Canada,en-GB,D2FF2936-D971-47CC-ACC4-00DC7EB8A1E3,Canada,Canada,"Few practice areas demand the high level of sensitivity, far-sightedness and cognizance required for estate and business succession planning for high-net-worth individuals. We deliver on all counts by offering a diverse range of services in estate administration, litigation and mediation.",NULL,NULL,"<p>Few practice areas demand the high level of sensitivity, far-sightedness and cognizance required for estate and business succession planning for high-net-worth individuals. Gowling WLG&#39;s Private Client Services Group delivers on all counts by offering a diverse range of services in estate administration, litigation and mediation.</p>    <p>Immersed in all areas of succession planning and estates, our team of experts is keenly aware of the often difficult - and sometimes contentious - decisions our clients have to make.</p>    <p>Our expert team provides creative, effective solutions in the following areas:</p>    <ul>   <li>Wills and powers of attorney</li>   <li>Personal tax and estate planning for high-net-worth individuals, including family trusts, estate freezes, cross-border estate planning, and immigration/emigration planning</li>   <li>Succession planning for entrepreneurs and family businesses, including corporate reorganizations, shareholder agreements, the effective use of life insurance and tax-advantaged sales</li>   <li>Private company taxation</li>   <li>Charitable donation planning</li>   <li>Administration and variation of trusts</li>   <li>Estate administration, including post-mortem tax planning</li>   <li>Passing of accounts for trusts, estates and attorneys under powers of attorney</li>   <li>Removal and replacement of executors, trustees and attorneys</li>   <li>Mental incapacity matters</li>   <li>Estate litigation</li>  </ul>    <p>​We assist our clients in developing comprehensive estate plans that are sensitive to their needs. This typically includes the drafting of wills, powers of attorney and family trust agreements. Depending on a client&#39;s situation, more sophisticated estate planning might include estate freezes, probate planning and private foundation planning.</p>    <h3>Effective tax minimization strategies</h3>    <p>Whether you&#39;re an entrepreneur or family-owned business, we can help develop and implement tax-effective business succession plans, maximizing the use of tax advantages, such as the capital gains exemption, eligible dividends, capital dividends and the small business deduction.</p>    <p>We also excel in estate administration, including probate matters, transfer of assets, post-mortem tax planning and personal and estate tax filings. Interpretation of wills and trust agreements, contested wills, lost wills, and testamentary capacity issues are handled with discretion and compassion. Our experienced estate lawyers also manage mediation and litigation of estate disputes.</p>    <h3>Learn more</h3>    <p>To find out more about how we can support your private client service needs, please <a href=""~/en/people/?page=1&amp;services=519&amp;locations=GWLG.Canada"" target=""_blank"">reach out to any member of our team</a>.</p>  ",GWLG.Canada,b58865ed-7b8c-4e68-9c8b-2cc784b86022;e38a0711-3996-414c-947a-fbb07364d884,231F78A0-0796-40D1-A428-F3F450094B7B,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,3502d5d5-ed0a-4312-9f53-0af124b08c94,NULL,NULL,{CD93C30C-2001-4E22-85F4-975343171C51}|{1C430C73-BC1E-4C86-817E-0B6075DF2B01}
131,/Services/Private-Equity/Canada,en-GB,7C30FD31-6838-4791-91F9-38D6EF6BFC73,Canada,Canada,"Deeply ingrained in all aspects of the alternative investing world, Gowling WLG is at the forefront of a sector that is increasingly global - with fund managers, investors and other market participants seeking out new investment opportunities that address the need for diversified returns on capital.",NULL,NULL,"<p>There&#39;s a reason Gowling WLG is the go-to law firm for fund managers, pension funds, sponsors and institutional investors: we offer an exceptional combination of sophisticated expertise and in-depth insight. We&#39;ve built a reputation as one of Canada&#39;s leading fund formation and fund investment teams, and provide ongoing advice at all stages of the fund life cycle.</p>    <p>Applying our deep knowledge of the market and its trends to provide tailored, cost-effective legal advice and superior service, our team has advised on the formation of - and investment in - hundreds of funds across a broad range of areas, such as private equity, real estate, venture capital, infrastructure, distressed investing, hedge funds and other sector and specialty-focused funds.</p>    <h3>Breadth of experience</h3>    <p>We&#39;re here to help you every step of the way. Our team holds broad fund formation and investment expertise, and can leverage its deal experience and best practices to execute your transactions seamlessly. We advise funds and investors at all fund stages, including:</p>    <ul>   <li>Fund structuring</li>   <li>Negotiation and drafting of partnership, trust, management and other principal fund agreements</li>   <li>Drafting and addressing securities law, tax and other regulatory compliance matters associated with confidential information memoranda and fund marketing documentation</li>   <li>Fund review and due diligence mandates in support of potential investments</li>   <li>Negotiating subscription agreements and side letters</li>   <li>Secondary sale transactions</li>   <li>Securities law registration matters for fund sponsors</li>   <li>Advice with respect to fund-level and investor-level issues in connection with acquisitions, financings and co-investments</li>   <li>Fund wind-up mandates</li>   <li>Structuring and negotiating acquisitions, both domestic and cross border, from large-cap to mid-market and smaller tuck-in acquisitions</li>   <li>Drafting and negotiating shareholder, co-investor and other investment agreements</li>   <li>Secured and unsecured debt financing transactions</li>   <li>Implementing management incentive mandates, including equity, option and other compensation plans, employment and consulting agreements and related tax-planning and regulatory compliance requirements</li>   <li>Ongoing governance, management and oversight of portfolio business investments</li>   <li>Liquidity event transactions, including public and private M&amp;A exits, initial public offerings, reverse take-overs and transactions leading to an exit for fund investors</li>  </ul>    <h3>Downstream investing and portfolio business transactions</h3>    <p>We help domestic and global fund managers and investors achieve their investment goals, with a particular focus on downstream investing and portfolio business transactions. Our team advises on all aspects of this dynamic market.</p>    <h3>Effective resource management</h3>    <p>We&#39;re committed to helping you maximize the value and predictability of your legal spend by implementing alternative fee arrangements, offering competitive rates and anticipating costs as far in advance as possible. We keep our core teams small and include specialists on a select, as-needed basis.</p>    <h3>Committed to your success</h3>    <p>Immersed in your world, Gowling WLG is dedicated to applying the necessary energy, time and resources to ensure your success. With a personal, responsive approach and an unwavering commitment to delivering superior service, our goal is to establish lasting relationships with our fund management and fund investor clients.</p>    <h3>Learn more</h3>    <p>We know you have choices when it comes to selecting your legal advisers, and understand that any successful relationship begins with a great conversation about the challenges and opportunities you face. Please <a href=""~/en/people/?page=1&amp;services=523&amp;locations=GWLG.Canada"" target=""_blank"">contact any other member of our team</a> to find out how we can help you.</p>  ",GWLG.Canada,678aea5d-575d-4bfe-a70b-141e91bed09c,FC6B9A02-14AD-48CF-829A-375DC13F44AC,NULL,0,1,t-white,"<p>Deeply ingrained in all aspects of the alternative investing world, Gowling WLG is at the forefront of a sector that is increasingly global - with fund managers, investors and other market participants seeking out new investment opportunities that address the need for diversified returns on capital.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1,NULL,NULL,{0A78EF63-3A1D-46E1-B4AB-0045FC4DF45C}
132,/Services/Private-Equity/UK,en-GB,911FD3DA-2384-4430-9ADB-0193012D9DDF,UK,UK,"Gowling WLG's team of private equity experts advises private equity and venture capital investors on a broad range of investments, acquisitions, reorganisations and exits in the mid-market and lower mid-market.",NULL,NULL,"<p>Gowling WLG&#39;s team of private equity experts advises private equity and venture capital investors on a broad range of investments, acquisitions, reorganisations and exits in the mid-market and lower mid-market.</p>    <p>Just like you, we want to get the deal done efficiently and effectively, achieving the desired outcome with minimum fuss. Working closely with our leading sector teams ensures that our clients benefit from lawyers who understand the issues in their industry.</p>    <p>In a 12-month period, we complete more than 20 UK deals on average, with a combined value of over &pound;750 million, across a broad range of sectors including healthcare, software, digital services, financial services and retail.</p>    <p>Working alongside our debt finance, tax, investment funds and structuring specialists, we&#39;re able to advise on all aspects of multifaceted transactions. The firm&#39;s dedicated Transaction Services team provides due diligence support to ensure that you get the full picture and to improve efficiency on complex and speculative transactions.</p>    <p>From key players in private equity and venture capital to family offices, we&#39;re trusted by a diverse range of clients, including August Equity Partners, the Business Growth Fund, Cairngorm Capital, CBPE Capital, Frog Capital, H2 Equity Partners, H.I.G, Livingbridge, LDC, Mobeus Equity Partners, NVM Private Equity, Octopus Investments and SEA Equity.</p>    <p>High-profile work includes advising CBPE on the &pound;186 million disposal of Rosemont Pharmaceuticals (having acted on CBPE&#39;s &pound;93 million initial acquisition in 2006) and acting for LDC on the sale of its stake in Kee Safety Group in a &pound;90 million deal with Dunedin.</p>    <p>Highly innovative work includes advising MxP Partners on the deal specific LP funding as well as the more customary acquisition, investment, due diligence and senior and mezzanine banking aspects of the &pound;80 million buyout of Amber Taverns.</p>    <p>Investee companies receive advice on acquisitions, further investments and disposals. The team advised Mountain Warehouse on the buy-out of its stake from LDC, valuing Mountain Warehouse at &pound;85 million. We also act for Equiom on its continuing buy and build programme, supported originally by Livingbridge and now LDC.</p>    <p>We have strong experience acting on both sides of corporate venturing transactions, assisting clients such as Intel and GlaxoSmithKline with acquisitions and investment projects.</p>    <p>Our team delivers an experienced and knowledgeable legal and commercial service to clients, time after time. Understanding the market and what clients need and expect is our definition of great client service.</p>  ",GWLG.UK,d6f14048-cc38-4a70-8971-d2b56629ece9,FC6B9A02-14AD-48CF-829A-375DC13F44AC,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1B00E24A-0D86-4A0A-B576-C740871F5A55}
135,/Services/Procurement/Canada,en-GB,00D6F75D-C2EA-48A4-BE15-86E7AD47FDD0,Canada,Canada,"Whether you're a purchaser, supplier or vendor, the procurement process can be complex. Gowling WLG can help put your mind at ease by advising on strategies that are right for your business, from proposal preparation and tendering to contract dispute resolution and litigation.",NULL,NULL,"<p>Whether you&#39;re a purchaser, supplier or vendor, the procurement process can be complex. Gowling WLG can help put your mind at ease by advising on strategies that are right for your business, from proposal preparation and tendering to contract dispute resolution and litigation.</p>    <blockquote>  <p><strong>They&#39;re a great team - professional and highly knowledgeable.</strong>&quot; - Chambers Canada&nbsp;</p>  </blockquote>    <p>Our involvement in government procurement extends back to the first Free Trade Agreement between Canada and the United States. Since then, we&#39;ve developed unparalleled expertise in bid protests, the application of international and domestic trade agreements, and litigation over public tenders. We also have significant expertise in advising and assisting in the preparation and conduct of RFP and tenders.</p>    <h3>Navigating the procurement process</h3>    <p>Public and private procurements are subject to a wide range of regulations, laws, policies and customs. With a team of professionals who rank among Canada&#39;s top procurement lawyers, we can help you master the complexities of government procedures, understand the requirements of RFP and bid processes, follow ethical obligations, and achieve your procurement and government contracting goals.</p>    <h3>Advocates on your side</h3>    <p>When it comes to disputes related to an RFP or a contract administration&nbsp;issue, let us help you choose the best approach. Home to some of Canada&#39;s top litigators, Gowling WLG has successfully represented clients in bid protests and challenges before all levels of court, including the Canadian International Trade Tribunal (CITT), the Federal Court, the Federal Court of Appeal and the Ontario Superior Court of Justice.</p>    <h3>Easing your compliance worries</h3>    <p>When bidding for work, there are numerous domestic and international agreements you need to comply with. Having provided opinions on all major trade agreements, we can ensure your bidding actions are fully compliant so that you can focus on moving your procurement efforts forward.</p>    <h3>Learn more</h3>    <p>To learn more about how we can support your procurement needs, please <a href=""~/en/people/?page=1&amp;services=530&amp;locations=GWLG.Canada"" target=""_blank"">reach out to any member of our team</a>.</p>  ",GWLG.Canada,85069c1c-8d45-4a66-b56b-128c6ee41680,311E6350-B4A5-4F58-8201-230AC9FC70B5,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2B55D6D2-206B-46CA-804B-0292FFBC6F94}
136,/Services/Product-Liability/Canada,en-GB,84B9796C-6B79-4B74-9D18-BCD52EAA73CC,Canada,Canada,"With the increase in recent product liability actions, organizations need a team of lawyers with proven product litigation experience, hands-on regulatory insight and the ability to provide an immediate and sustained response - no matter what the issue.",NULL,NULL,"<p>Product failure resulting in personal injury or property loss can lead to costly and disruptive litigation. With the increase in recent product liability actions, organizations need a team of lawyers with proven product litigation experience, hands-on regulatory insight and the ability to provide an immediate and sustained response - no matter what the issue.</p>    <p>As part of one of the leading litigation firms in Canada, the Gowling WLG Product Liability Group works with major Canadian manufacturers, importers, sellers and distributors to successfully identify, mitigate and defend against a wide variety of complex liability issues. Our extensive experience across industry sectors allows us to provide the most appropriate and effective legal solutions to meet each client&#39;s unique circumstances.</p>    <p>Our team is seamlessly integrated with the firm&#39;s class actions and crisis management groups. We consistently provide superior client solutions, leveraging Gowling WLG&#39;s proven leadership in related practices, including insurance law, stakeholder relations and government affairs. Regardless of how large or small the product failure may be, we understand that you need to focus on their primary business objectives.</p>    <p>Our clients recognize our track record of successfully defending - or altogether avoiding - expensive and damaging product liability cases. Industry experts agree: the <em>Canadian Legal Lexpert Directory</em> noted that we&#39;re &quot;repeatedly recommended&quot; for our product liability work, and many of our lawyers are recognized in other key publications, such as <em>Benchmark Canada</em> and <em>The Best Lawyers in Canada</em>.</p>    <p>With an extensive roster of independent subject matter experts, innovative case management technologies and unparalleled hands-on litigation experience, our team is always prepared to provide insightful and actionable counsel - around the world and around the clock.</p>    <h3>Learn more</h3>    <p>From the immediate first response to the close of litigation, you can count on Gowling WLG to help you get back to business as quickly as possible. To learn more, please <a href=""~/en/people/?page=1&amp;services=532&amp;locations=GWLG.Canada"" target=""_blank"">contact a member of our team</a>.</p>  ",GWLG.Canada,5d3ffd40-9f34-464a-ac35-74035908df13,92A37753-1CD3-4195-907C-ADF48E358CA7,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{898B80E7-C149-4AEB-88AF-F8F7F50DF9F9}
139,/Services/Projects/Overview,en-GB,C100E8BB-F18A-4BB4-B84C-60863B557C5B,Overview,Overview,"Every project has its own commercial and legal nuances. For a project to be completed, each of these aspects has to be taken into consideration.",NULL,NULL,"<p>Every project has its own commercial and legal nuances. For a project to be completed, each of these aspects has to be taken into consideration. You need to anticipate risks and roadblocks - and you want strong leadership to ensure all parties are working in tandem.</p>    <p>Gowling WLG offers legal services that address all aspects of your project, whatever its nature. As leaders in legal project management, we apply our in-depth understanding of the world in which you work to ensure that your matter is completed on time and on budget. Going beyond the law, we can also play a major role in bringing parties together, ensuring your project deadlines are met and that the necessary approvals are obtained.</p>    <p>We take a holistic view that&#39;s drawn from our experience in working for all project parties: governments, contractors, EPC/EPCM contractors, design-builders, operators, banks and underwriters, consultants, advisers and debt providers, amongst others. Our deep resources ensure you&#39;ll receive seamless service, no matter what expertise is needed - or where it needs to be applied.</p>    <p>With substantial experience in all related service areas, we provide full lifecycle assistance to your infrastructure team. Our broad skill set reflects our deep sector experience in areas such as infrastructure/P3, PPP concessions, energy, mining, oil and gas and all types of conventional construction and engineering.</p>    <p>The services we offer include:</p>    <ul>   <li>Construction and engineering</li>   <li>Corporate structuring</li>   <li>Dispute resolution</li>   <li>Government and regulatory advisory</li>   <li>Land rights and development: acquisitions, leasing, licensing, expropriations, zoning</li>   <li>Procurement: RFQs, RFPs, selection/decision process, procurement disputes</li>   <li>Project funding (debt and equity)</li>   <li>Project planning and strategy</li>   <li>Structuring, drafting and negotiating all types of contracts, operations and management</li>  </ul>    <p>Before, during or following development and construction, our team can also help sell or otherwise monetise a project. Conversely, whether you&#39;re a strategic or financial buyer, we can help you on the buy-side of a project, regardless of stage of development.</p>    <p>Because our team operates globally, we&#39;re able to handle the complications that may arise from cross-border projects. Wherever you operate, you can trust us to manage your project efficiently and effectively.</p>    <p>To learn how we can help you with your project, please contact any member of our team.</p>  ",GWLG.Global,dd6fafb1-ecf7-491d-ac34-0e0f405cea0d;ce26ed51-95b0-44fd-86b0-2667fae0d46e,96FB7E9F-2D22-40A2-B6F6-5122615347A6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}|{D56A07D1-3171-48B1-B4C1-D123FC657893}
140,/Services/Projects/UK,en-GB,58033F2D-A69D-4A48-B090-64A3B8940DB0,UK,UK,"When it comes to choosing lawyers to handle large, complex projects anywhere in the world, Gowling WLG offers a winning combination.",NULL,NULL,"<p>When it comes to choosing lawyers to handle large, complex projects anywhere in the world, Gowling WLG offers a winning combination:</p>    <ul>   <li><strong>Experience</strong> - we advise on the most challenging and complex infrastructure and PPP projects being undertaken in the UK and internationally.</li>   <li><strong>Trusted advisers</strong> - our lawyers are established advisers to government bodies, contractors, sponsors and funders, and have a strong track record of delivering strategically important and high value projects.</li>   <li><strong>Commercial</strong> - we understand the full range of procurement models and advise on bid tactics and strategic procurement issues. Our team regularly advises on the sale and purchase of equity in PFI/PPP projects, different contracting structures including PFI/PPP, alliancing and partnering, wider markets initiative, outsourcing, prime contracting and long-term collaboration agreements.</li>  </ul>    <h3>PFI/PPP</h3>    <p>Ranked a first tier firm by Legal 500, we benchmark international best practice from our experience in the UK (which is a world leader in PFI and PPP) added to our work in the Middle East and Africa on PPP projects.</p>    <p>Team members have acted for the UK Government for nearly 20 years and have successfully closed a number of PPPs for the Department of Health Commercial Directorate, the Ministry of Justice and the Ministry of Defence.</p>    <p>Our lawyers are among the leading names for PFI/PPP work, with partner Stephen Kenny described as &quot;... a deal doer and solution finder, and he knows a lot about the subject&quot;, while partner David Fennell is &quot;diligent and commercial&quot;.</p>    <p>For international projects, partner Jonathan Brufal is considered a &quot;great lawyer&quot;, who is &quot;impressive, confident, articulate and knowledgeable&quot;.</p>    <p>Our expertise covers the following sectors:</p>    <h3>Transport and ports</h3>    <p>For organisations involved in transport infrastructure projects, our team has a strong track record including ports, highways, rail and light rail projects. We advised on three of the largest highways PPP schemes: the &pound;2.7 billion Birmingham Highways PFI, the &pound;2 billion Sheffield Highways PPP, and March&#39;s &pound;500 million M8 Project in Scotland.</p>    <p>Current international mandates include advising the Government of Rwanda on the development of several trade logistics PPP projects. Our lawyers are also working with the Kenya Ports Authority on restructuring the legal and regulatory framework for the ports sector in Kenya.</p>    <p>We won the Kenya mandate thanks to an impressive track record of advising on domestic and international maritime transactions, including the London Gateway Port and the Dakar, New Doha and Sokhna ports development projects.</p>    <h3>Waste</h3>    <p>The Gowling WLG team is at the forefront of waste infrastructure development in the UK, making it the ideal choice for cutting-edge advice in this developing area. Skills and experience have been honed waste management and treatment projects, including energy from waste.</p>    <p>Stephen Kenny advised the South London Waste Partnership on the development of an energy-from-waste PPP at Beddington. This project won the &quot;Best Waste/Energy/Water Project&quot; Award at the 2013 Partnerships Awards.</p>    <p>Our team also advised Waste Recycling Group (part of FCC) on its successful bid to design, build and operate a landmark &pound;145 million Energy from Waste facility for Lincolnshire County Council. Elsewhere in the UK, we act for bidders and funders on bids for waste PFI projects.</p>    <p>Internationally, team members advised CNM on the Bahrain Solid waste PPP project, the first project financed waste project in the Gulf Cooperation Council.</p>    <h3>Defence</h3>    <p>Clients choose our team for its market-leading knowledge of the defence sector, developed over time on a number of high-profile projects.</p>    <p>We acted for the UK Ministry of Defence on the CVF Carrier Project, the nuclear submarine programme and significant defence estates contracts. Our team also helped the MoD complete a major Air Traffic Services project to provide long-term air traffic management capability for the safe operation of all the MoD&#39;s main bases, airfields and air weapon ranges in the UK and overseas.</p>    <p>Further afield, our experts advised Organisation Conjointe de Coopération en matière d&#39;Armement (OCCAR) on the re-negotiation of a ground-breaking contract for the development and supply of up to 170 A400M military transport aircraft from Airbus Military S.L.</p>    <h3>Social infrastructure</h3>    <p>Acting on PFI/PPP projects in the health, social care, leisure and, social housing and serviced accommodation sectors gives our team an in-depth understanding of the legal and commercial issues and opportunities. We advised Lovell on the &pound;300 million North Tyneside Social Housing PFI and have extensive experience of acting on courts and secure accommodation PPP projects.</p>    <p>Our health expertise is bolstered by an ever-growing client list, which includes the biggest names among private sector healthcare providers, social care providers, life sciences, pharmaceuticals and the NHS. We advised the Worcestershire Acute Hospital NHS Trust on a project for the construction and operation of a new radiotherapy unit. The firm&#39;s healthcare team distinctive expertise and specialisms which set it apart from other healthcare practices.</p>    <p>Infrastructure clients include Abengoa, Amec, Amey, BNP Paribas, Equitix, Gloucestershire County Council, Government of Rwanda, Government of Kenya, Health Authority of Abu Dhabi, International Finance Corporate, London Borough of Croydon, Ministry of Defence, Morgan Sindall, National Health Service, Shropshire Council, South London Waste Partnership and TradeMark East Africa.</p>    <h3>Recognition</h3>    <p>The Projects team won the award for Infrastructure Projects Team of the Year category at The Lawyer 2017 after advising South London Waste Partnership on a programme of infrastructure works that will deliver significant investment in waste treatment infrastructure (including Energy from Waste) on one of the largest municipal waste services programmes in Europe.</p>  ",GWLG.UK,612ac63e-b8e8-4615-beb9-be3097aed2cf;ce26ed51-95b0-44fd-86b0-2667fae0d46e,96FB7E9F-2D22-40A2-B6F6-5122615347A6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d;c0791066-b1ca-48e4-be8b-0086d6051b23,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{D56A07D1-3171-48B1-B4C1-D123FC657893}
141,/Services/Public-Law-Regulation/UK,en-GB,B28BF4E5-4776-409E-958C-26F179A26530,UK,UK,"A centre of excellence in public law, with a strong track-record in creating regulatory frameworks and a reputation for showing companies how to successfully navigate their way through them. This is what you can expect from the Gowling WLG public law and regulation team.",NULL,NULL,"<p>A centre of excellence in public law, with a strong track-record in creating regulatory frameworks and a reputation for showing companies how to successfully navigate their way through them. This is what you can expect from the Gowling WLG public law and regulation team.</p>    <p>Our specialist team provides a complete service in regulation, public administrative law, constitutional law, human rights and judicial review for central and local government, regulators and private companies. Having acted in a number of the UK&#39;s leading cases, both for and against the government and regulators, the team is equipped with the necessary experience and expertise to give clients a competitive edge.</p>    <p>The team handles contentious and non-contentious work, the development of law from policy formation and drafting through to its successful application, as well as making and defending challenges against the decisions of public authorities in judicial reviews or tribunals. It is also expert in economic regulation and able to use considerable experience in the transposition and application of EU law in the UK to clients&#39; advantage.</p>    <p>All of which means you can count on:</p>    <ul>   <li><strong>Strategic advice</strong> - thoroughly understanding the legal, commercial, policy and practical issues that clients deal with on a daily basis, we always take a strategic approach to legal advice. Insider experience of working for government and regulators such as Ofgem gives us, and therefore you, an edge.</li>   <li><strong>Sector expertise</strong> - extensive knowledge of regulatory regimes in several sectors means clients get specialist insight and rigorous, practical advice. The team has particular expertise in the highly regulated sectors of energy, healthcare, education, financial services, rail, telecommunications, pharmaceuticals, food and drink, and transport.</li>   <li><strong>Strong relationships</strong> - our experts focus on developing strong client relationships and becoming an extension of their team. They&#39;re on hand, whenever they&#39;re needed.</li>  </ul>    <p>Want to try something that&#39;s never been done before? We can help. When the Health Authority of Abu Dhabi required help designing its healthcare regime, it turned to Gowling WLG - a project for which we won an FT Innovative Lawyers Award.</p>    <p>Other longstanding clients include the Northern Ireland Authority for Utility Regulation, Ofqual, Ofwat, the Department of Energy and Climate Change and the Dubai Roads and Transport Authority.</p>    <h3>Defence of judicial review for Local Government Association</h3>    <p>In this successful defence of a judicial review brought against the government&#39;s implementation of the Waste Framework Directive <em>(R (UK Recyclate Ltd &amp; Others) v Secretary of State for Environment, Food and Rural Affairs</em> [2013] EWHC 425 (Admin)), the team advised the Local Government Association (LGA) (as an interested party).</p>    <p>The team was on hand to help LGA take an active part in the case, including successfully making representations against the claimant&#39;s application to refer the matter to the European Court of Justice, making proposals on draft amending regulations, submitting a detailed consultation response on behalf of local government and ensuring that the significant interest of local government was represented before the court.</p>    <h3>A leading case in the qualifications sector</h3>    <p>Working to a highly-expedited timetable, the team successfully upheld the integrity and validity of Ofqual&#39;s decision making processes and the grades given to pupils, by defending a challenge brought by 167 pupils, 150 schools, 42 local authorities and six professional bodies to overturn GCSE English grades awarded in summer 2012 (<em>R (LB of Lewisham &amp; Others v AQA &amp; Others</em> [2013] EWHC 211 (Admin)). The judicial review proceedings were successfully defended before the Divisional Court in what is now one of the leading cases in the qualifications sector.</p>    <h3>First award of damages for breach of the Human Rights Act against a regulator</h3>    <p>Now regarded as leading case authority, (<em>Gas and Electricity Markets Authority v Infinis plc</em> [2013] EWCA Civ 70), the team represented Infinis in its successful judicial review in the High Court and the Court of Appeal. The team&#39;s challenge was against a decision by Ofgem not to accredit two generating stations under the Renewables Obligation Order. The case also resulted in the first award of damages for breach of the Human Rights Act made against a regulator.</p>  ",GWLG.UK,93b5e080-2149-4ac7-8aa4-d1358ee79d55,2B77428D-A062-4314-9FCB-F5EA9E62DFC8,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0eaa0790-eb13-4982-a309-ea91a9dfa505,NULL,NULL,{B7322038-99F6-4837-96BE-D348F35076D0}
142,/Services/Public-Procurement/UK,en-GB,9F7FF244-0D48-4246-B16B-6C783A92CDCA,UK,UK,"If you're connected with public procurement in any way, you'll probably realise just how complex, awkward and difficult to understand the EU procurement rules can be.",NULL,NULL,"<h3>Regulated procurement</h3>    <p>If you&#39;re connected with public procurement in any way, you&#39;ll probably realise just how complex, awkward and difficult to understand the EU procurement rules can be.</p>    <p>Yet public procurement accounts for nearly 20% of GDP across the EU - it&#39;s big business, and is vital to the achievement of value for money in public purchasing.</p>    <p>Nor is its remit confined to the public sector - utilities have their own EU procurement rules to comply with, and many third sector organisations have to follow public procurement rules.</p>    <p>Getting it right is not easy. Procurement law is a developing jigsaw, with some parts of the picture more complete than others. New procurement directives, adopted in April 2014, are now being implemented across the EU at national level, with the Public Contracts Regulations 2015 having come into force in the UK in February 2015 and new rules for utilities, health sector bodies and concessions likely to be implemented soon. These herald the biggest change in procurement law for more than 20 years.</p>    <p>The aim of the new laws is to clarify and add flexibility, although the extent to which this actually happens remains to be seen. There is little doubt that the waters will be choppy for some time to come.</p>    <h3>State aid</h3>    <p>Even though they are different disciplines and are watched over by different parts of the European Commission, state aid rules and the procurement regime are, for various reasons, bedfellows. Getting one of them wrong can mean that the other becomes a big issue, too.</p>    <p>It&#39;s for this reason that our lawyers are dual experts in both state aid and procurement law, ensuring that you can tap straight into a complete one-stop shop of advice and support.</p>    <h3>Why choose us?</h3>    <p>We practice the art of the possible. Our aim isn&#39;t to tell you why an objective isn&#39;t achievable; it&#39;s to work out how it is, and to help you get there quickly, simply, and economically.</p>    <p>You might be a purchaser required to comply with the EU rules, a supplier having to incur time and expense in responding to OJEU notices and bidding for business through EU-regulated tendering processes, or a bidder in a moment of raw emotion, incredulous at the news that your bid has just been unsuccessful.</p>    <p>Whatever the situation, there are ways in which the EU rules can be made to deliver the positives - to work in your favour, rather than against. Based in our UK offices, our experts will help you get there.</p>    <h3>Experience</h3>    <p>With Gowling WLG, you can tap into a long track record of helping many organisations achieve their objectives. If you are a public body, a third-sector organisation or a utility, we will help you navigate the complexities of this regime and to steer you to the right outcome.</p>    <p>We help purchasers (public, third-sector or utilities) to:</p>    <ul>   <li>plan their procurements effectively, so that there are no last-minute afterthoughts</li>   <li>get evaluation criteria right, and articulate them in the right way and at the right time</li>   <li>defend themselves against challenges by unsuccessful bidders, or decide on their options</li>   <li>run hassle-free, compliant procurements from end to end</li>   <li>mitigate procurement risks if an existing contract has to be modified</li>   <li>be alert to issues that may create the risk of state aid, and avoid running that risk</li>  </ul>    <p>We help suppliers by:</p>    <ul>   <li>acting as a &#39;critical friend&#39; for them as they prepare their bids, stress-testing them against the evaluation criteria and helping them work out what will stand them with a good chance of success</li>   <li>advising them on what to do if they feel that a procurement is being unfairly run, but where everyone is still in the running</li>   <li>if they win a tender but the procurement is challenged, helping them manage their position effectively</li>   <li>if they are unsuccessful, helping them work out whether it is in their best interests to challenge the decision, and if so, how</li>   <li>helping them spot (and avoid) situations where they may end up in receipt of illegal State aid.</li>  </ul>    <p>Some of our notable achievements include:</p>    <ul>   <li>getting the NHS Midlands and East Strategic Health Authority through the first franchising of an NHS hospital in the country - Hinchingbrooke in Cambridgeshire</li>   <li>advising on a multi-local authority residual waste treatment PPP for a grouping of London boroughs</li>   <li>supporting the preferred bidder in a major, high-profile central London development project, which was halted following a challenge by an unsuccessful bidder. Even though our client did not join in the litigation, we succeeded in persuading the court to impose enhanced protection measures into the disclosure process, specifically to preserve the confidentiality of our client&#39;s bid</li>   <li>advising an employee-led mutual on how to structure its bid for the Audit Commission&#39;s local audit work</li>   <li>helping a group of six local authorities identify the optimum model for establishing a shared services arrangement for revenues and benefits services</li>   <li>helping a London Borough set up and successfully maintain a Dynamic Purchasing System for the supply of assisted living aids, operated through a Local Authority Trading Company</li>   <li>advising NHS Strategic Projects Team (formerly part of NHS Midlands and East) on the East of England &quot;Transforming Pathology Services&quot; project</li>  </ul>    <h3>Testimonials</h3>    <p>&quot;[The] enthusiasm for the subject is infectious.&quot;</p>    <p>&quot;Very helpful... an overwhelming subject!&quot;</p>    <p>&quot;A refreshingly common-sense approach.&quot;</p>    <h3>Clients</h3>    <p>Public, private and third sector organisations choose Gowling WLG to advise on procurement and state aid issues. These include:</p>    <ul>   <li>St. Modwen Properties plc</li>   <li>Sanctuary Group</li>   <li>The Local Government Association</li>   <li>A multitude of local authorities across England, including metropolitan boroughs</li>   <li>NHS Greater East Midlands Commissioning Support Unit</li>   <li>Numerous NHS commissioners, providers and umbrella organisations</li>  </ul>  ",GWLG.UK,1ca237c0-eb32-40df-ba06-268230275f34;503e49eb-bfc5-4803-a856-7fcbac77a38a;fdb31259-dc1d-4722-ad16-6401036a1ddb,A7BA0B1B-CBE3-4B6D-BB8E-5835B1FBB08A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6B557C33-A81E-4EB3-A849-0BC0CECD797A}|{AE4ACBFF-E611-4C59-A440-1B912F2D6FDD}|{2E342839-C11F-41E8-9244-0971BDED3553}
143,/Services/Public-Sector-Pensions/UK,en-GB,C9A20F0C-388F-44D9-AEA2-297103BD640C,UK,UK,"We give clients clear, comprehensive pensions support, delivered efficiently and cost-effectively, thanks to our team's in-depth understanding and experience of the public sector.",NULL,NULL,"<p>We give clients clear, comprehensive pensions support, delivered efficiently and cost-effectively, thanks to our team&#39;s in-depth understanding and experience of the public sector.</p>    <p>We&#39;re one of very few law firms offering a dedicated sector-focused pensions practice. The seven-strong team, led by partner Paul Carberry, advises local authorities, NHS bodies, contractors, central government, housing associations and charities on all aspects of public sector pensions law.</p>    <p>The overlap of specialisms and sector experience of the wider Pensions team provides us with a unique depth and breadth of expertise. We&#39;re not learning on the job and typically we will have seen an issue before. This means clients can be confident we will provide innovative solutions, with all angles considered, as well as value for money.</p>    <p>Our clients include the London Borough of Croydon, NHS Midlands and East, Care UK, Amey PLC, the Isle of Man Government, Sanctuary Housing Association and Sense.</p>    <p>We help our clients by:</p>    <ul>   <li>advising on the requirements of New Fair Deal, enabling those involved with commissioning or bidding for services to understand the new obligations and associated cost and risks</li>   <li>guiding them through applications for &#39;New Fair Deal Directions&#39; to participate in the NHS Pension Scheme as well as the complex and potentially costly area of second generation transfers from an incumbent provider&#39;s broadly comparable pension scheme back to the NHS Pension Scheme</li>   <li>equipping those with broadly comparable schemes with future options and strategies for bringing members back into the appropriate public sector pension scheme mid-contract</li>   <li>drawing on our extensive experience of advising on governance of pension schemes to assist administering authorities in meeting the new governance requirements placed on them</li>   <li>drafting policies, advising on and managing disputes connected with ill-health early retirement from the Local Government Pension Scheme</li>   <li>reviewing investment management agreements and hedge fund documents for administering authorities on investment re-organisations</li>   <li>advising administering authorities in relation to employers in their fund and admission bodies directly on strategies for managing an exit from the Local Government Pension Scheme</li>  </ul>    <h3>Results for clients</h3>    <p>Paul led our team that worked with the Isle of Man Government to help design, deliver and draft the Rules for the new Unified Scheme for 10,000 public servants on the Island, replacing 15 of the island&#39;s existing public service pension arrangements.</p>    <p>The Unified Scheme was awarded &quot;Public Sector Pension Scheme of the Year&quot;, recognising the team&#39;s commitment, dedication and first-rate technical expertise.</p>    <h3>Preparing clients for change</h3>    <p>The public sector pensions landscape is undergoing a period of radical change. From New Fair Deal (and its implications for outsourcing bodies and contractors alike) to the introduction of the CARE based public service schemes, our experts are well placed to help clients keep up-to-date with these changes and to prepare and respond accordingly.</p>    <h3>National <abbr title=""Local Government Pension Scheme"">LGPS</abbr> Framework for legal services</h3>    <p>Our public sector credentials are affirmed an appointment to the national legal services procurement framework for <a href=""http://www.nationallgpsframeworks.org/"" target=""_blank"">Local Government Pension Scheme (LGPS) Funds</a>.</p>    <p><abbr title=""Local Government Pension Scheme"">LGPS</abbr> Funds can use the Framework to procure legal services matched to their own specific requirements on pre-agreed terms and conditions. From smaller or one-off pieces of advice of work to longer term, single supplier arrangements.</p>    <p>Following a rigorous competitive tender process, we were appointed to the framework&#39;s full-service, investment and benefit administration panels. We can provide specialist advice to <abbr title=""Local Government Pension Scheme"">LGPS</abbr> Funds on benefit issues, disputes, investment, governance, outsourcings, admission agreements, funding and employer debt.</p>    <p>We are also appointed as a provider of legal services under the Buying Solutions Framework Agreement.</p>  ",GWLG.UK,1831387a-7fe4-4dae-a75d-beb91a4afbc8,77A48A94-53B0-48DA-A854-7C4553726627,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{98BCC9A9-B1CE-46DB-B659-26032F62FCF2}
144,/Services/Rail/UK,en-GB,AD536A63-AC3A-4E30-A1F5-505D4DB39210,UK,UK,"We have advised UK and international clients, including governments, private sector operators, developers, joint ventures and financiers, on all aspects of rail and transport law for over 20 years.",NULL,NULL,"<p>Gowling WLG&#39;s rail team of more than 25 lawyers across the firm works for a range of clients in the rail industry. The team is led by <a href=""~/en/people/giles-clifford/"">Giles Clifford</a>, who has personally been involved in the rail sector for 20 years, and is a leading specialist in station-related development and interfaces with the UK National Rail network.</p>    <p>We have advised UK and international clients, including governments, private sector operators, developers, joint ventures and financiers, on all aspects of rail and transport law for over 20 years. Our work covers all aspects of railway law, and includes a number of large, complex projects in several countries, acting for clients to devise strategy, procure and bid for projects.</p>    <p>We help both those who are regularly involved in the rail world, and those for whom contact is a novelty - if you don&#39;t know the sector, we can help de-mystify it so you can deal successfully with its complexities.</p>    <p>We have advised on all types of rail and transport contracts including concessions, passenger franchises, IT solutions for passenger transport, new stations, park and ride stations, new freight routes and rail freight terminals, upgrading infrastructure, metro concessions and new trains and whole life rolling stock service, primary and secondary legislation, safety and economic regulation, competition law, dispute resolution and mergers, acquisitions and joint ventures within the sector.</p>    <p>We specialise in providing strategic advice and risk analysis, and procuring and designing appropriate contractual delivery models to make the documentation fit the transaction. We provide relevant commercial advice in a timely and easy to understand way.</p>    <p>We offer a full service in rail law including:</p>    <ul>   <li>Strategic options and project procurement;</li>   <li>Real estate, financing and commercial contracts;</li>   <li>Regulatory advice;</li>   <li>Corporate structuring and transactions;</li>   <li>Technology protection and licensing.</li>  </ul>    <h3>Examples of our work include:</h3>    <p>Advising <strong>London Underground</strong> and <strong>Transport for London</strong> on a number of projects for the development and reconfiguration of stations in connection both with commercial developments and Network Rail projects, including recently at Waterloo (for the Shell Centre redevelopment), Tottenham Hale, Finsbury Park and London Bridge (for the News Building and Network Rail&#39;s Thameslink Upgrade).</p>    <p>Advising <strong>Crossrail Limited</strong> on a variety of work in connection with the acquisition of land for Crossrail (the Elizabeth Line) in London, and on related overstation developments, including development agreements and land acquisition for stations and facility sites, securing options, leases, utility rights and transfers.</p>    <p>Advising on a number of schemes to construct stations on the National Rail network, including advice <strong>to Warwickshire County Council</strong> on parkway stations with associated transport interchanges including Stratford on Avon Parkway station, <strong>Coventry City Council</strong> on the development of new stations at Coventry Arena and Bermuda Park and on the regeneration of the main Coventry Station gateway, <strong>West Northampton Development Corporation</strong> on the development of the new Northampton Station including the negotiation of an implementation Agreement with Network Rail and the <strong>London Borough of Barnet</strong> on the reconfiguration of rail freight facilities at Cricklewood and creation of a new Thameslink station as part of the Brent Cross regeneration scheme.</p>    <p>Acting for Pittsburgh-based railway investment and management company <strong>Railroad Development Corporation</strong> on its investment in Vivarail Limited, a newly formed UK company set up to manufacture a new class of &quot;D-trains&quot; using the body shells and bogies from surplus London Underground trains combined with new diesel engines and modern control systems to create Diesel Multiple Units</p>    <p>Providing advice to <strong>Goodman Logistics Developments</strong> on all aspects of the development of the East Midlands Intermodal Park and Etwall terminal, both rail connected logistics development schemes</p>    <p>Advising <strong>Société du Grand Paris</strong>: Implementation of the property projects adjacent to the line 16 railways stations of the Grand Paris Express, establishing real estate projects relating to new railways stations on line 16 of the Grand Paris Express (Chelles - Saint-Denis Pleyel section).</p>    <p>Advising the <strong>Ile-de-France Region</strong> on the Extension of tramway T1 (from Noisy-le-Sec to Val de Fontenay) a transport involving negotiation with several municipal authorities and the establishment of a &quot;tool box&quot; to enable the client to realise value from development land along the tramway route.</p>  ",GWLG.UK,19ad8356-af2f-4962-8d57-e7d0ee3371a8,DA9BC0BB-B7D2-4953-87D2-BB387443E344,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{5264CDE1-49F0-4227-9CC5-A2514149A75C}
145,/Services/Real-Estate/Overview,en-GB,1CAB01B8-38C6-4919-978C-BE27091702EE,Overview,Overview,Global real estate law firm with real estate lawyers offering a wide range of services for all stages of a project's lifecycle and across multiple asset classes.,NULL,NULL,"<p>Alongside the current demand for more traditional assets, there is an ongoing change in the use of some real estate, with growing online retail and logistics facilities and the need for more flexible office space. Combined with the introduction of technological advances and the importance of Environmental, Social Governance (ESG) initiatives, you need trusted advisers to help you navigate this fast-moving industry.</p>    <p>We provide integrated legal solutions to the most complex transactions, as well as on-going advice on day-to-day issues relating to property investments and developments. We are able to advise you through all stages of a project&#39;s lifecycle, offering a wide range of services across our real estate practice. Our full service offering across commercial, residential and public sector real estate is here to support you as you navigate the potential opportunities and risks of decision-making in this fast-paced sector.</p>    <h2>Meet our international team</h2>    <p>Our global network is home to around 460 real estate lawyers across our offices in Canada, London, Birmingham and Paris, advising some of the biggest organisations in the international real estate market. We also have a well-established best friend network of law firms that allows us to support you across all jurisdictions, delivering a global service with local expertise.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/real-estate/#canada"" target=""_blank"">Canada</a></li>   <li><a href=""~/en/services/real-estate/#france"" target=""_blank"">France</a></li>   <li><a href=""~/en/services/real-estate/#uk"" target=""_blank"">UK</a></li>  </ul>  ",GWLG.Global,28adebbb-5239-4131-b123-eb860852ce0c;157cef8d-3bda-45e7-9dcd-bc32b082fa17,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,"<p>The global real estate market is dynamic and complex, and our international real estate legal practice focuses on our clients, local markets and their industries. Our real estate lawyers have an outstanding track record of working on matters spanning all aspects of this multi-faceted sector.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d;c2d1de28-02ad-49e7-9310-49bfe0264b4e,NULL,NULL,{78D88FC3-0344-402B-85ED-AF69D1596497}|{BF4EB340-343D-418B-A98B-DB773A3A50D1}
146,/Services/Real-Estate/Canada,en-GB,365957BE-B7B0-42DF-AFB7-F97D68FDA440,Canada,Canada,Global real estate law firm with real estate lawyers offering a wide range of services for all stages of a project's lifecycle and across multiple asset classes.,NULL,NULL,"<p>By combining a deep understanding of domestic and foreign real estate markets with an eye to related global trends, our clients benefit from our forward-thinking solutions to help build their businesses.</p>    <p>At every juncture, members of our Canadian Real Estate Group work with clients to develop creative solutions, implement efficient fee strategies, and maximize investments. As a result, our real estate lawyers are able to optimize a client&#39;s legal spend and help further their commercial objectives in a timely and efficient manner.</p>    <h2>Understanding the market</h2>    <p>The Canadian commercial real estate market is fast-paced and constantly evolving. This is in no small part due to rapid digital transformation, emerging trends in the logistics, retail and office sectors and the widespread impact of an ongoing global pandemic.</p>    <p>The real estate industry&#39;s leading players, who are driving growth in Canada&#39;s largest urban areas, turn to our team. With offices in major economic centres in Canada and across our global platform, our team is well-positioned to offer guidance in a range of settings, on a variety of real estate matters.</p>    <h2>How we can help</h2>    <p>From conception to completion, we offer a full suite of real estate services that cover the life cycle of any real estate project keeping our clients&#39; business objectives, challenges, and opportunities at the forefront.</p>    <p>Whether refinancing a loan, acquiring an asset, developing a large scale commercial project, negotiating a lease or completing a sale, industry leaders turn to us for our breadth of knowledge and decades of experience as well as timely and trusted advice paired with a distinctive client experience.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fReal-Estate%2fCanada-Services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Real+Estate+Services+in+Canada|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Client Work</h2>    <p>{^widget|(name)FourBlockWidget|(Headline1)Innovation+parks|(Copy1)Advising+Canada%27s+premier+research+innovation+park%2c+with+respect+to+negotiations+for+a+land+exchange+to+expand+the+park%27s+footprint+and+enable+critical+holdings+for+a+light+rail+transit+project.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Investment|(Copy2)Advising+one+of+the+world%27s+leading+real+estate+investment+firms%2c+with+respect+to+the+launch+of+a+flagship+open-ended+core+real+estate+fund+in+Canada.|(LinkText2)Read+more|(BgHover2)colour-lightred|(Headline3)Hospitality|(Copy3)Advising+the+Canadian+division+of+the+world%27s+largest+coffeehouse+chain%2c+home+to+more+than+1%2c400+locations+across+the+country.+Our+team+oversees+multiple+mandates+including+real+estate+and+leasing.|(LinkText3)Read+more|(BgHover3)colour-darkblue|(Headline4)Cannabis+companies|(Copy4)Advising+one+of+the+world%27s+largest+cannabis+companies+on+planning%2c+real+estate%2c+construction%2c+environmental%2c+and+IP+matters+associated+with+the+production%2c+storage%2c+and+distribution+of+cannabis.|(LinkText4)Read+more|(BgHover4)colour-darkred|(widget_displayname)Four+Block+Widget^}</p>    <h2>Recognition in Canada</h2>    <p>Our real estate team is continuously recognized by a host of legal directories. These include <em>Chambers Canada</em>, the <em>Canadian Legal Lexpert Directory</em> and <em>Best Lawyers in Canada</em>. We were recognized as a &#39;Leading Real Estate Firm&#39; by&nbsp;<em>The Legal 500 Canada</em>.</p>    <h2>Meet the Canadian team</h2>    <p>Your strategic business objectives are important, no matter how simple or complex the transaction. Let&#39;s take the next step together.</p>    <p><strong><a href=""~/en/people/joel-camley/#panel-button1"">Joel Camley</a></strong><br />  Partner, Real Estate Practice Group Leader (Canada)</p>  ",GWLG.Canada,NULL,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,"<p>Home to an integrated network of real estate lawyers with extensive market knowledge, we deliver practical legal advice, customized business solutions, and rapid results to give our clients an edge in Canada&#39;s commercial real estate market.</p>  ",Featured Insights,28090170-87e9-4ad1-9472-2129123bf712;97e45363-1f5f-4275-b226-47e10849d4b6;d3cd3b6b-2645-4b66-944d-bd7e6e144bdb;99d2a13b-7769-4a6b-8e99-8b0e143c2ac6,View all Real Estate articles,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,/en/insights-resources/?page=1&locations=GWLG.Canada&services=549,NULL,
147,/Services/Real-Estate/UK,en-GB,28A34A35-81F6-4F97-A029-61B4B2803D60,UK,UK,Global real estate law firm with real estate lawyers offering a wide range of services for all stages of a project's lifecycle and across multiple asset classes.,NULL,NULL,"<p><strong>With some of the best technical real estate lawyers in the UK, we focus on the legal complexities and risk mitigation on any project, and work seamlessly as a single cross-sector team.</strong></p>    <p>Our team can work with you across all stages of an asset&#39;s life cycle and can support you throughout a project, from inception and planning, funding, development and investments, structuring and regulatory advice, to leasing, asset management and ultimate disposal.</p>    <p>Our real estate solicitors are dedicated to providing exceptional client service, and thrive on teamwork, working hard to understand your priorities and help you to achieve your objectives. We provide clear, concise and pragmatic advice alongside fresh ideas and innovative solutions to legal and commercial challenges.</p>    <h2>Real Estate Services in the UK</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/investment/#uk"">Acquisitions, disposal and lettings</a></li>   <li><a href=""~/en/services/asset-management/#uk"">Asset management</a></li>   <li><a href=""~/en/services/commercial/#uk"">Commercial contracts and outsourcing</a></li>   <li><a href=""~/en/services/construction/#uk"">Construction</a></li>   <li>Corporate real estate and <a href=""~/en/services/governance-risk-and-compliance-grc/#global"">corporate governance</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#uk"">Employment</a> and <a href=""~/en/services/pensions/#uk"">pensions</a></li>   <li><a href=""~/en/services/investment-funds/#uk"">Funds</a></li>   <li>Health and safety</li>   <li><a href=""~/en/services/real-estate-litigation/#uk"">Litigation and dispute resolution</a></li>   <li>Loans and financing agreements</li>   <li><a href=""~/en/services/planning/#uk"">Planning</a> and <a href=""~/en/services/climate-change-and-environmental-law/#global"">Environmental</a></li>   <li><a href=""~/en/services/tax/#uk"">Tax and structuring</a></li>  </ul>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fReal-Estate%2fUK-Asset-Classes%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Asset+classes|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Client work</h2>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Avison+Young|(headline3)Royal+London|(headline2)Blackstone|(copy1)Advising+the+world%27s+fastest+growing+commercial+real+estate+services+firm+on+its+acquisition+of+GVA%2c+one+of+the+UK%27s+leading+and+most+diverse+real+estate+advisory-led+businesses.|(copy3)Retained+to+provide+legal+services+for+the+business%27+offices+portfolio%2c+which+is+valued+at+%c2%a34+billion%2c+our+relationship+with+Royal+London+goes+back+more+than+15+years.|(copy2)Advising+the+private+equity+firm+on+the+%c2%a34.66+billion+acquisition+of+UK+student+accommodation+company+IQ+from+Goldman+Sachs.+IQ%27s+portfolio+includes+76+student+accommodation+sites.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-darkred|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)M%26G+Real+Estate|(headline3)Sanctuary+Group|(headline2)Ecoworld|(copy1)Advising+on+the+%c2%a394.3+million+acquisition+of+a+UK+logistics+portfolio+from+Mountpark+Logistics+EU%2c+which+included+five+buildings+in+key+distribution+locations.|(copy3)Advising+one+of+the+UK%27s+leading+providers+of+housing+on+numerous+strategic+transactions+to+support+its+%c2%a3750+million+national+development+programme+to+deliver+more+than+5000+new+homes.|(copy2)Advising+Ecoworld+on+the+acquisition+and+development+of+the+Aberfeldy+scheme+in+Tower+Hamlets%2c+providing+233+new+homes+comprising+private+rental+accommodation+and+affordable+social+housing.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h2>Recognition in the UK</h2>    <blockquote style=""text-align:center;"">  <p>They are the best team we work with&hellip;they are professional and customer-oriented.&quot; <cite>Chambers &amp; Partners</cite></p>  </blockquote>    <p>We are consistently ranked as a top tier real estate law firm by <em>Chambers UK 2022</em> and <em>The Legal <a href=""tel:500 2022"">500 2022</a></em>. Our team has also been recognised by a host of industry awards including <em>The Times Best Law Firms</em>, <em>The British Legal Awards</em> and <em>The Lawyer Awards</em>. In 2021, for example, the team achieved &#39;Commended&#39; status at <em>The Lawyer Awards</em> for <a href=""~/en/insights-resources/client-work/2020/new-legal-structure-to-support-plans-for-new-town/"">its work with Thakeham Homes to bring a new town in South Cambridgeshire to life &ndash; the UK&#39;s first zero-carbon community</a>. The team was named &#39;Property Law Firm of the Year&#39; at the <em>Insider West Midlands Property Awards 2022</em>.</p>    <h2>Meet the UK team</h2>    <p><strong><a href=""~/en/people/clive-chalkley/"">Clive Chalkley</a></strong><br />  Partner,&nbsp;Real Estate Sector Head</p>    <p><strong><a href=""~/en/people/chris-hunt/"">Chris Hunt</a></strong><br />  Partner, Head of Real Estate</p>    <p><strong><a href=""~/en/people/sally-pinkerton/#panel-button1"">Sally Pinkerton</a></strong><br />  Partner, Head of International Real Estate</p>    <p id=""anc-dubai""><strong><a href=""~/en/people/anuj-johar/"">Anuj Johar</a></strong><br />  Senior Associate (Dubai Office)</p>  ",GWLG.UK,157cef8d-3bda-45e7-9dcd-bc32b082fa17;b7890916-3b8b-4d64-82cc-40655a7c1fe2;4a850b45-1170-4e82-b74a-02cc3ef81775,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,NULL,Expertise in Real Estate,NULL,See more articles,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d;f5e472a5-d069-4b98-b204-a27ad34f6747;ace3d5d8-9af3-469f-ae66-1ce2cfbabc35;b9f5611a-b0ff-4008-8925-d0fe838da1fd,/en/insights-resources/?page=1&locations=GWLG.UK&services=549,NULL,{BF4EB340-343D-418B-A98B-DB773A3A50D1}|{0E523408-82CF-4489-A9A3-19E70E2BB418}|{7C8114D2-DA1E-4953-AD71-C42015FB3127}
148,/Services/Real-Estate-Finance/UK,en-GB,F6CBEDCD-EAF4-472A-AA13-A74BD2017C6C,UK,UK,"Our dedicated real estate finance team combines the experience of our banking, structured finance and debt restructuring specialists with the highly regarded expertise of our real estate, planning and construction practice.",NULL,NULL,"<p>Our dedicated real estate finance team combines the experience of our banking, structured finance and debt restructuring specialists with the highly regarded expertise of our real estate, planning and construction practice.</p>    <p>Our team is one of the largest and most respected in the UK with many top name clients who have been with us for many years.</p>    <p>We also have strength-in-depth support from our corporate, tax, indirect real estate and property funds teams.</p>    <p>We are specialists in structuring complex real estate investment, development and financing transactions for all stakeholders across all major jurisdictions, as well as delivering restructuring and recovery solutions across all sectors.</p>    <p>We also advise on both distressed and par debt trading and funding transactions, and the structuring and implementation of loan-to-own strategies.</p>    <h3>Clients</h3>    <p>Our clients include UK clearing banks, private banks and financial institutions, mezzanine and other debt funds, conduit lenders, German and European banks, Indian banks, US and other overseas banks, and servicers/special servicers. They also include some of the UK&#39;s, Europe&#39;s and US&#39;s largest real estate developers, investors, asset managers and funds, both listed and private.</p>    <h3>Real estate investment and development finance origination</h3>    <p>Bilateral and syndicated property secured lending transactions in the UK and Europe, including:</p>    <ul>   <li>commercial real estate loans</li>   <li>commercial and residential development facilities</li>   <li>loans originated for securitisation</li>   <li>loans to operating companies</li>  </ul>    <p>We have a particular sector focus on offices, shopping centres, high end residential, private sector rental/BTR, industrial, distribution centres, investment and development properties, and portfolio transactions.</p>    <p>We are active advising UK and European financial institutions, loan servicers and overseas investors, on the debt financing, sale and purchase of prime and City offices and other trophy assets.</p>    <p>We act for traditional and debt fund providers of development finance for:</p>    <ul>   <li>commercial real estate and hotel development</li>   <li>residential development including private rental sector/BTR</li>  </ul>    <h3>Alternative lenders</h3>    <p>We act for senior and junior/mezzanine lenders on:</p>    <ul>   <li>senior whole loans and senior bridge facilities</li>   <li>AB loans</li>   <li>mezzanine lending</li>   <li>preferred equity investments</li>   <li>related intercreditor arrangements and mezzanine priority arrangements</li>   <li>equity buy-out rights, equity control and profit share/exit fee arrangements</li>  </ul>    <h3>Specialist asset classes</h3>    <h4>Healthcare</h4>    <p>Our healthcare finance practice acts for lenders, borrowers and investors on care home, learning disability, domiciliary care, and specialist unit acquisitions and developments, on capital expenditure programmes, and on the financing and development of hospital assets.</p>    <h4>Hotels</h4>    <p>Our dedicated hotel finance practice advises all stakeholders on UK, EU and international transactions, including:</p>    <ul>   <li>acquisition and development financing facilities for full service luxury hotels and other trophy/strategic assets</li>   <li>financing of hotel portfolios</li>   <li>mezzanine financing and equity JV arrangements for hotel projects</li>  </ul>    <p>We are specialists in restructuring debt finance arrangements secured on hotel assets, and advise on loan-to-own, non-disturbance and direct agreements, franchise and management arrangements, and on formal enforcement assignments.</p>    <h4>Student accommodation</h4>    <p>We act for lenders and borrowers on the acquisition and development financing of campus, out-of-town, and city student accommodation schemes, including purpose-built properties and portfolios, and on associated asset management, lease, and nominations arrangements.</p>    <h3>International real estate</h3>    <p>The team&#39;s work is increasingly cross-border, and we have acted for clients on lending transactions secured on property assets across Europe and wider afield.</p>    <p>Our experience includes advising on hotel developments and acquisitions in Poland, Switzerland and Germany; industrial and retail investments in Switzerland and Germany; retail and office portfolios in Germany and France; high-end residential in France; and hotels in the Czech Republic.</p>    <p>We also have extensive experience advising foreign interests and fund management on inwards investment and financing into the UK.</p>    <h3>Islamic finance</h3>    <p>Our London and Dubai offices work closely together on Sharia compliant transactions for the financing and development of real estate in England.</p>    <h3>Debt restructuring, loan-to-own and alternative investment strategies</h3>    <p>During the recession and recovery we acted for numerous borrowers and financial institutions, investors, new money providers, and servicers/special servicers, on debt finance restructurings and recapitalisations secured on real estate in the UK and Europe, advising on:</p>    <ul>   <li>covenant resets through to complex balance sheet/cashflow restructurings</li>   <li>standstill arrangements</li>   <li>enforcement options and security reviews, security issues on insolvency, exit strategies, and directors&#39; duties</li>   <li>debt-for-equity swaps and upside profit arrangements</li>   <li>&quot;controlled sale&quot; realisation agreements</li>   <li>mezzanine and new money intercreditor, structuring, and related issues</li>   <li>syndicate disputes and inter-creditor relations</li>   <li>debt buy backs</li>  </ul>    <p>We are now using our experience to advise investors and funder to deliver:</p>    <ul>   <li>Loan-on-loan/loan-to-fund transactions</li>   <li>Loan-to-own and alternative investment strategies</li>   <li>Distressed asset and loan transfers to new investor / lender-sponsored or JV vehicles.</li>  </ul>    <h3>Debt trading - sales/purchases and funding</h3>    <p>We advise on:</p>    <ul>   <li>LMA and bespoke loan sales, sub/risk-participations, and associated transactions, including security and security trust arrangements, as well as on anti-embarrassment and ongoing upside-arrangements</li>   <li>debt buy-backs and borrower-affiliate loan acquisitions</li>   <li>performing and non-performing portfolio sales and acquisitions, structuring and regulation</li>  </ul>    <p>We also have experience of advising lenders on par loan trades and sub-participations, on the sell and the buy sides, documented both on the LMA forms and on a bespoke basis.</p>    <p>The team advises:</p>    <ul>   <li>debt and opportunity funds, and other lenders, on the funding of debt acquisitions and discounted pay-offs, both secured on the debt-securities and receivables, and on ancillary support assets</li>   <li>purchasers on the acquisition financing of loan assets (including portfolios)</li>   <li>on alternatives to security in hostile subordinated structures, including golden shares and the hard-wiring of rights through constitutional documentation</li>  </ul>    <p>We provide a bespoke loan, security and property review and reporting service for banks and opportunistic debt purchasers seeking positions in secured and syndicated real estate debt deals, and have particular expertise advising German banks in this area.</p>    <p>We also advise on enforcement options and security reviews, exit solutions, and loan-to-own strategies and transactions.</p>    <h3>Servicing, structured finance and Intercreditors</h3>    <p>The team advises on various aspects of distressed CMBS/structured finance transactions in the UK and Europe, including:</p>    <ul>   <li>servicing/special servicing matters</li>   <li>warehousing and note issuance arrangements</li>   <li>enforcement and restructuring</li>   <li>consensual sale and exit solutions</li>   <li>AB structures and intercreditors</li>   <li>borrower- and issuer-level hedging and collateral arrangements</li>  </ul>    <p>In addition to our market-leading work for mezzanine lenders on new real estate debt originations, we have built up significant experience acting for both senior and junior creditors reviewing and negotiating sell-down/syndication intercreditors, AB intercreditors, and servicer intercreditors (both CMBS and inter-lender), on a myriad of different lending and ownership structures.</p>    <p>This provides us with the tools to review and advise on all creditor relations on a fully informed basis, as well as to identify potential &#39;hot-spots&#39; and blocking/leverage positions in the debt stack, and between creditors.</p>    <h3>Derivatives</h3>    <p>We advise financial institutions and corporates on ISDA swap/cap transactions, related collateral arrangements, and FX/swap-line facilities.</p>    <h3>Real estate funds, tax and structuring</h3>    <p>Our indirect real estate team complements the mainstream real estate work undertaken by Gowling WLG and various of our team are active on finance mandates on such transactions.</p>  ",GWLG.UK,cc9aacda-a260-4db5-ab44-27eda57cdf44,679ED8D9-29FB-40AF-9B27-98B2DD69E1E8,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B4715431-E458-4F9C-83D3-E8E1703F65C1}
149,/Services/Real-Estate-Litigation/UK,en-GB,D6BEA961-7D3E-470C-935D-3F50CDEF6641,UK,UK,Our real estate litigation lawyers work closely with all our real estate teams to try and ensure that issues do not turn into disputes.,NULL,Experts in litigation law and real estate litigation,"<p>Our litigation lawyers work closely with all our real estate teams to try and ensure that issues do not turn into disputes. Where disputes are unavoidable they devise appropriate strategies to meet our client&#39;s business needs and to resolve those disputes as quickly and commercially as possible.</p>    <p>Our highly experienced team includes some of the best known names amongst real estate litigation lawyers and has acted on many of the leading cases over the last 10 years to include reported cases on rights to light, options, lease renewals, service charges, lease consents, rent reviews, the operation of the Landlord and Tenant (Covenants) Act, restraining protestor activity and the Electronic Communications Code. The team also has an enviable track record of using different methods of alternative dispute resolution to settle cases.</p>    <p>The team advises residential and commercial developers, institutional investors, fund managers, leading retailers, major corporate occupiers, property companies, public bodies, insolvency practitioners and telecoms operators.</p>  ",GWLG.UK,b7890916-3b8b-4d64-82cc-40655a7c1fe2,532B8867-E1BA-43DA-9DA7-D458C396E288,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{0E523408-82CF-4489-A9A3-19E70E2BB418}
152,/Services/Recovery-Services/Canada,en-GB,6EE5C14C-07F4-47DF-A513-639606019CEB,Canada,Canada,"By providing a comprehensive file management and outsourcing program to assist mortgage lenders, we help clients ensure a speedy and effective resolution of their defaulting mortgages.",NULL,NULL,"<p>By providing a comprehensive file management and outsourcing program to assist mortgage lenders, we help clients ensure a speedy and effective resolution of their defaulting mortgages. Through our mortgage portfolio management solution, all enforcement, property management and real estate marketing is handled by Gowling WLG - at no risk or cost to the client.</p>    <p>We offer our clients 24/7 access to their files online with no interim billing. Legal fees are paid only when mortgages are redeemed or properties are sold.</p>    <p>Our goal is to save our clients time and money. We&#39;ll ensure you have a high level of comfort by using well-defined benchmarks to handle matters such as legal and property management costs and enforcing minimum acceptable time frames.</p>    <p>Our full suite of services includes:</p>    <ul>   <li>Mortgage enforcement services</li>   <li>Demands for payment</li>   <li>Notice of sale</li>   <li>Petition/statement of claim</li>   <li>Judgment</li>   <li>Foreclosure</li>   <li>Writ of seizure and sale</li>   <li>Writ of possession</li>   <li>Eviction</li>   <li>Property inspection</li>   <li>Appoint and manage property manager</li>   <li>Secure premises</li>   <li>Enforce judgment for deficiency</li>   <li>Real estate sales/NHA claim filing</li>   <li>Obtain appraisals</li>   <li>Arrange listing of property</li>   <li>Review pricing and market value assessments</li>   <li>Review, sign back, negotiate offers to purchase</li>   <li>Complete real estate transactions</li>   <li>Assign judgment to CMHC/Genworth</li>   <li>Process report and claim</li>   <li>Finalize supplementary claims to CMHC/Genworth (if applicable)</li>  </ul>    <p>​We also indemnify lenders against improvident sale actions and any NHA claim disallowance attributable to our file management.</p>    <p>Gowling WLG is an industry leader in applying inventive technological and service solutions to our mortgage enforcement practice. In turn, we provide you with complete satisfaction. To learn more about our services and how we can help you, please <a href=""~/en/people/?page=1&amp;services=561&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,db4ed4a3-0f51-4369-bc2a-3fc67c3af57f,820C20E1-84D8-4B34-96CD-EA4E74310518,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B6F9F453-F0C6-4F67-B03B-BC1FABE580F5}
153,/Services/Regulatory-Crime/UK,en-GB,A4A2A0D6-B8D2-4EAB-B026-FBC6AA5468EF,UK,UK,"Criminal investigations lead to business interruption, adverse publicity, lost management time, cost and potentially fines or even prison. Avoiding, managing, reducing and mitigating those consequences saves money and protects a brand.",NULL,NULL,"<p>Criminal investigations lead to business interruption, adverse publicity, lost management time, cost and potentially fines or even prison. Avoiding, managing, reducing and mitigating those consequences saves money and protects a brand.</p>    <p>The time immediately after an incident - whether that&#39;s an accident, pollution event or raid by a regulator - is critical in the final outcome of an investigation. Establishing what happened and why it happened at an early stage, and building a constructive relationship with the investigator is essential.</p>    <p>Looking after those involved, managing the press, dealing with the disclosure of documents and interviewing witnesses are all necessary to achieve the best outcome possible.</p>    <p>Understanding what it is like to be in that situation, we expect to drop everything to help when it happens to our clients. Our philosophy is to stand alongside them and come up with a strategy to achieve the best possible outcome.</p>    <p>For example, we attended the scene of a fatal accident on a construction site on the day it happened. We gathered crucial evidence from the scene, prevented the generation of potentially damaging documents and persuaded the Health and Safety Executive not to take formal enforcement action against our client, the principal contractor. Ultimately no criminal charges have been brought against it.</p>    <p>Vital time can be saved if we already understand our client&#39;s business and the systems procedures and culture that it has in place to manage risk. We therefore invest time at our expense with our clients before an event, helping them to prevent incidents where possible, so that we can hit the ground running if something happens.</p>    <p>We spent time touring a client&#39;s manufacturing sites, for example, and speaking in detail to its head of risk management so that we were fully familiar with the business and the sector. We also give bespoke training sessions or attend our client&#39;s own sessions as part of our commitment to help manage risk.</p>    <p>Establishing a relationship of trust with our clients so that they feel able to contact us with quick queries or for a discussion, knowing that there will be no charge, also allows us to add value while learning about their business.</p>    <p>With one client, for example, which operates in the housing and care sectors, we help the risk management team with inquests. The client knows that we will only suggest that we get involved formally if some of the consequences outlined above are likely.</p>    <p>We discuss the details of the case and agree a strategy based on risk. Sometimes we need to do very little, and remain in the background but occasionally, the circumstances require us to take a more prominent role.</p>    <p>Throughout our cases, we remain focused on achieving the best possible outcome from our clients. Each member of the team is passionate about helping them through what can be a difficult and stressful experience, one which they may well never have been through before and which they will never want to repeat.</p>    <h3>Emergency response</h3>    <p>When an incident occurs, it needs a rapid and thorough response. Our experts are available 24/7 to help protect your business&#39; interests immediately following an incident and throughout any subsequent investigation. We are available to help you respond to any regulatory investigations including by the Police, Health and Safety Executive (HSE), Environment Agency, European Commission and the Competition and Markets Authority (CMA).</p>    <h4>Health and Safety Executive, Environment Agency, Police and Local Authority</h4>    <p>For assistance, please contact:</p>    <p>Andrew Litchfield, Telephone: <a href=""tel:+441213930400"" style=""border-color: #401C42!important;"">+44 (0)121 393 0400</a>; Mobile: <a href=""tel:+447921881409"" style=""border-color: #401C42!important;"">+44 (0)7921 881 409</a>; email: <a href=""mailto:andrew.litchfield@gowlingwlg.com"">andrew.litchfield@gowlingwlg.com</a></p>    <h4>Do&#39;s and don&#39;ts for staff under investigation</h4>    <p>When dealing with the Police, HSE, Environment Agency or Local Authority Investigators you must comply with the following (failure to comply may be a criminal offence):</p>    <ul>   <li>Allow an inspector access to the premises and permit them to carry out any examinations and investigations reasonably necessary for the purposes of their inquiries</li>   <li>Adhere to any instruction from an inspector to leave defined areas or equipment undisturbed for a reasonable period of time to enable them to investigate</li>   <li>Allow an inspector to take measurements and photographs and make such records as they consider necessary for their investigation</li>   <li>Allow an inspector to take samples if they so require</li>   <li>Adhere to any instruction from an inspector to dismantle (but not destroy) or test any item or substance if they reasonably believe it may have caused or is likely to cause danger to health and safety</li>   <li>Produce to the inspector any specific documents they require which may assist their investigation</li>   <li>They are not entitled to access any correspondence or advice to and from in-house or external legal advisors. Keep a list (and ideally a copy) of any documents or items removed from site</li>   <li>Comply with any prohibition or enforcement notice served. It will be a criminal offence not to.</li>  </ul>    <h4>Statements to the HSE, Environment Agency or Local Authority investigators</h4>    <ul>   <li>Voluntary oral statements - An inspector may ask for informal oral replies to questions about an incident. Keep to the facts and what you know, and don&#39;t be tempted to offer an opinion. These statements are entirely voluntary. Your oral statement cannot be used against you in evidence.</li>   <li>Voluntary written statements - You are not obliged to give a written statement but inspectors often request one. If you do provide a voluntary statement then be honest and again, stick to the facts - don&#39;t speculate about what might have happened or offer opinion in relation to matters of which you are not directly aware. Make sure that what you are asked and your answers, are taken down verbatim. Since these statements are voluntary, you can insist that you are given a copy as a condition of providing the statement. Check your statement very carefully before signing.</li>   <li>Compulsory written statements - An inspector must be clear about the authority under which this statement is requested (e.g. Section 20 of the Health &amp; Safety at Work Act 1974). You must answer questions posed which are relevant to their investigation. You will be asked to sign a declaration of truth concerning your answers. Your evidence cannot be used against you, but may be used against the company. Be honest and stick to the facts. You can ask for, but may not be provided with, a copy of your statement. You can also ask for someone to be with you when you provide the statement (e.g. a union rep or lawyer).</li>   <li>Compulsory statements under caution (PACE interviews) - These are formal statements taken when you are suspected of an offence. Seek legal advice before attending. You don&#39;t have to attend, and you don&#39;t have to say anything, but it is important that you put forward any defence that may be available to you. The interview is recorded and may be used against you in proceedings. Ensure you know in advance what offences you are suspected of committing, and are given a summary of the evidence against you. You are entitled to a transcript of your statement.</li>  </ul>    <h4>Competition</h4>    <p>For assistance, please contact Bernardine Adkins, Telephone: <a href=""tel:+448707330649"" style=""border-color: #401C42!important;"">+44 (0) 870 733 0649</a>; Mobile: <a href=""tel:+447841899302"" style=""border-color: #401C42!important;"">+44 (0)7841 899 302</a>; email: <a href=""mailto:bernardine.adkins@gowlingwlg.com"">bernardine.adkins@gowlingwlg</a></p>    <h4>Competition Dawn Raids... your first response should be to:</h4>    <ul>   <li>Keep calm.</li>   <li>Your receptionists should:   <ul>    <li>Take the names of the officials, check their identification, and ask if any other officials will be attending.</li>    <li>Call the most senior member of staff on-site (the &#39;Manager&#39;), explain the situation, and confirm to the officials the name of the Manager who is coming to meet them.</li>    <li>Take the officials to an empty meeting room as soon as possible.</li>    <li>Have the officials sign-in, issue them with visitor passes, and take a scanned copy of their documents.</li>    <li>Email the scanned copy to your company&#39;s &#39;Dawn Raid Distribution List&#39; set up on your system, so that your senior staff and the Dawn Raid Response Team at Gowling WLG receive this - the email should be marked as &#39;URGENT - Private &amp; Confidential&#39;.</li>   </ul>   </li>   <li>Following the call from your receptionists, the Manager should:   <ul>    <li><em data-redactor-tag=""em"">Immediately</em> contact Bernardine Adkins, or their usual contact at Gowling WLG, who will confirm the ETA for the Dawn Raid Response Team.</li>    <li>Delegate the task of assembling a team of the company&#39;s staff to act as &#39;shadows&#39; - their role will be to observe the officials during the course of the investigation.</li>    <li>Meet with the officials as quickly as possible, and have a member of staff take a note of the meeting.</li>    <li>Confirm to the officials that the company&#39;s policy is to cooperate fully with the investigation, and explain that lawyers from Gowling WLG are on their way.</li>    <li>Give an ETA for your lawyers, and ask if the officials will wait for their arrival.</li>   </ul>   </li>   <li>If the officials are not prepared to wait for your lawyers to arrive (and they are not required to do so), the Manager should:   <ul>    <li>Offer a call with Gowling WLG.</li>    <li>Review the officials&#39; authorisation or warrant to confirm the relevant scope of the investigation (e.g. business area, and whether the investigation is civil or criminal), and extent of the officials&#39; powers.</li>    <li>Ask the officials how they wish to conduct their investigation, what type of documents they are looking for, and who they wish to talk to - seek to agree a &#39;modus operandi&#39; under which staff may continue with their work.</li>    <li>Offer an overview of the business and premises to help officials to focus their investigation.</li>    <li>Send an email informing staff of the investigation, explaining that it is company policy to cooperate fully, reminding them not to remove or destroy any documents (including emails and text messages), and confirming that the investigation should not be discussed with anyone outside of the company.</li>   </ul>   </li>   <li>Finally, the Manager should confirm whether any staff have failed to report for work that day - if so, it could be that they are currently being interviewed at a police station and potentially facing criminal charges. The company will need to confirm this as soon as possible.</li>  </ul>  ",GWLG.UK,3d0d2ba1-fe4c-43cd-81d1-f7265baecea0,D23FEED9-3463-4CE9-A4D8-12B0915D90E9,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}
154,/Services/Relocation-Services/Canada,en-GB,74C98CAB-E0B3-48B1-8B44-A129FD472B18,Canada,Canada,"Regardless of your reasons for moving your foreign business and/or employees to Canada, you need to engage a law firm that can help you solve a full range of challenges involved in the relocation process - from immigration and corporate matters to commercial and residential real estate.",NULL,NULL,"<p>Given the recent changes to U.S. immigration policy and the low Canadian dollar, many businesses are choosing to relocate all or part of their operations and workforce to Canada. At the same time, international companies are recognizing the strategic advantages of establishing an on-the-ground presence in the Canadian market.</p>    <p>Regardless of your reasons for moving your foreign business and/or employees to Canada, you need to engage a law firm that can help you solve a full range of challenges involved in the relocation process - from immigration and corporate matters to commercial and residential real estate.</p>    <p>Gowling WLG is ready to assist, offering a full suite of relocation-related legal services to help you and your staff get up and running quickly in Canada.</p>    <p>With industry-leading legal expertise, offices in Canada&#39;s commercial and tech hubs of Toronto, Waterloo Region, Ottawa, Montréal, Calgary and Vancouver, and strong connections with the service providers you&#39;ll need to work with during your transition, Gowling WLG is well-positioned to support your relocation -&nbsp;no matter where you&#39;re coming from.</p>    <h3>Immigration and employment</h3>    <p>You&#39;ll need to consider immigration and employment matters well in advance of your desired entry into Canada. Our seasoned lawyers can advise employers, employees and their families on:</p>    <ul>   <li>Navigating the Canadian immigration system - from work permit requirements and application package preparation to admissibility rules and business structure considerations</li>   <li>Following the Canadian scheme for payroll deductions and remittances, health coverage and medical premiums, entitlements and more</li>   <li>Complying with applicable employment and labour laws, human rights codes, and workers&#39; compensation and occupational health and safety standards</li>  </ul>    <h3>Real estate</h3>    <p>Our team can advise on a full range of real estate matters, including:</p>    <ul>   <li>Negotiating commercial leases for all classes of premises, including office, retail, technology development and industrial sites - particularly in the context of data centers, tech companies and their unique requirements</li>   <li>Assisting employees with the rental or purchase of their new homes through our network of relocation services partners and real estate brokers</li>   <li>Other essential real estate-related issues, from land acquisition and brownfield redevelopment to project and credit facility financing</li>  </ul>    <h3>Tax and accounting</h3>    <p>With tax considerations at the top of the list for any business relocating or sending employees to Canada, we can provide sound advice to help you manage key tasks including, among other things:</p>    <ul>   <li>Advising on how to structure a new Canadian operation, taking into account federal and provincial income and sales taxes</li>   <li>Managing the Canadian taxation of employees relocating to or working in Canada, including the taxation of stock-option compensation</li>   <li>Assessing the exposure to foreign buyer taxes on residential and industrial real estate</li>   <li>Linking clients to accounting professionals for assistance with Canadian tax filings</li>  </ul>    <h3>Corporate, financial and business services</h3>    <p>From banking and credit to general corporate advice, we can help you establish your Canadian operations quickly by:</p>    <ul>   <li>Connecting employers and employees with leading financial institutions to handle business and personal banking needs</li>   <li>Drafting corporate governance, privacy and other essential policies, with a focus on local legislation</li>   <li>Preparing model business forms and agreements</li>  </ul>    <p>Gowling WLG is ready to help you relocate your business and employees to Canada. To learn more, please <a href=""~/en/people/?page=1&amp;services=565&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,26fb12df-b407-4553-9451-a9880a4c2e8b;28adebbb-5239-4131-b123-eb860852ce0c;425a9689-d70c-46ff-b7b6-8994bb782c5f,55AA3FB1-5A21-483E-B771-5E1ABFCEDF59,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{30ED970C-05AD-4E69-90A3-6F73AA3F6E86}|{78D88FC3-0344-402B-85ED-AF69D1596497}|{680CF4CA-5812-4762-A9E4-D3A93109F739}
156,/Services/Restructuring-Insolvency/Overview,en-GB,36DDFE30-84FF-48AC-998D-4AAADEC6C7C4,Overview,Overview,"Whether you need early or late-stage restructuring advice, Gowling WLG can work to resolve your issues quickly, pragmatically and cost-effectively - with as little damage to reputation as possible.",NULL,NULL,"<p>Even in a healthy economic environment, some companies will face challenges. Whether you need early or late-stage restructuring advice, Gowling WLG can work to resolve your issues quickly, pragmatically and cost-effectively - with as little damage to reputation as possible.</p>    <p>Insolvency cases often involve complex and constantly evolving legal issues, so you need an adviser who not only understands the law and how it affects your situation, but also delivers practical, commercial solutions. By getting to know you and understanding your situation quickly, we&#39;ll act as an extension of your team.</p>    <p>We specialise in complex, high-profile and confidential restructurings and advisory work. Our commercial perspective on legal issues is combined with first-class client service, speed of response and an ability to anticipate issues.</p>    <p>Using the talents and skills of our most senior and experienced team members, we tackle the most challenging issues faced by our clients. Our holistic approach combines expertise in areas such as real estate, labour law and tax to achieve optimal solutions.</p>    <p>Our services include:</p>    <ul>   <li>Advising lenders and other stakeholders on distressed and recovery situations</li>   <li>Bankruptcy and liquidation</li>   <li>CCAA and BIA proposal</li>   <li>Corporate restructuring</li>   <li>Creditor, supplier and customer negotiations</li>   <li>Directors&#39; liability and duties (including independent advice to the board of directors)</li>   <li>Distressed M&amp;A transactions (including due diligence on the target)</li>   <li>Early-stage financial and operational restructurings enforcing guarantees and security</li>   <li>Forbearance and accommodation arrangements</li>   <li>Insolvency risks in structured transactions</li>   <li>Interim and permanent financing solutions</li>   <li>Lender liability issues</li>   <li>Regulatory compliance</li>   <li>Structuring and executing sales process</li>  </ul>    <p>With legal professionals in Canada, UK, Europe, Asia and the Middle East, we&#39;ve developed a broad practice with a high level of expertise in multi-jurisdictional, cross-border insolvencies and restructurings, and act for lenders and other creditors, debtors, court appointed officers, interim lenders (DIP financing) and purchasers (distressed M&amp;A transactions).</p>    <p>Our experience spans the broadest cross-section of industries, notably: automotive, agriculture, aquaculture, aviation, bottling, cannabis, care homes, construction, financial services, food and beverage, healthcare, hospitality, housing, media, mining and resources, pensions, plastics, professional services, recreational products, real estate, retail, shipping/logistics and telecom.</p>    <p>We also assist in dealing with intellectual property rights in restructuring situations, helping you to minimise the risks and ensuring that these rights are managed properly.</p>    <p>Gowling WLG can help you weather the pressures and complexities that apply to restructurings and insolvencies, protect your brand and bring about the best possible outcome. Please contact a member of our team to learn more.</p>  ",GWLG.Global,c87f99c4-6d5c-4e17-8e93-2a857c86682a;31589b1d-8773-40f3-b07d-0b7a1a5eee2f,CB3477A6-C725-4D55-8FA9-194ABC3A4EC4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{61BAC7DF-E3FA-4DC2-B953-6889A9143244}|{4611A725-FCDD-493D-9FD2-487B932D5A80}
158,/Services/Restructuring-Insolvency/UK,en-GB,B17A145E-919C-4F5A-B1F3-7CED4EB03A72,UK,UK,"Restructurings and insolvency cases often involve complex and evolving legal issues. Your adviser has to understand the law and how it affects your situation. We provide guidance quickly, pragmatically and cost-effectively.",NULL,NULL,"<h3>We are with you - through it all</h3>    <p>From time to time, businesses face financial challenges, or have to deal with risk because the companies they are dealing with run into difficulties or have collapsed. This can present both threats and opportunities. To make the best of these situations, you will need specialists to help navigate the various challenges. However complex, high-profile or sensitive the scenario, our restructuring experts are experienced in finding realistic and optimal solutions. Restructurings and insolvency cases often involve complex and evolving legal issues. Your adviser has to understand the law and how it affects your situation. We provide guidance quickly, pragmatically and cost-effectively. Our team consists of dedicated specialists in complex, high-profile and confidential restructurings, advisory and insolvency work. We do this work day in, day out.</p>    <p>The specialist teams work in the UK, Canada, Europe, Asia and the Middle East and have a broad practice which includes a high level of expertise in multi-jurisdictional, cross-border insolvencies and restructurings. The team act for boards of directors, all types of lenders, private equity and other funders, government and public bodies, sponsors, pension and other trustees, creditors, debtors, court appointed officers, interim lenders, insolvency practitioners, receivers and purchasers.</p>    <p>As specialists we are immersed in our industry and both the technical and policy aspects of restructuring and insolvency. Members of the team have spent time in government departments helping shape policy, provide regular technical updates, host the Gowling WLG Annual Restructuring &amp; Insolvency Conference and are members of R3, the IFT and the TMA.</p>    <h3>How we help</h3>    <h4>Holistic approach</h4>    <p>Using the talents and skills of our most senior and experienced team members, we tackle a range of issues facing our clients. We will call on our experts in our real estate, employment, and tax teams who regularly work with us in distressed situations, to identify and help implement the best solutions for you.</p>    <h4>Dedicated support</h4>    <p>We will get to know you and understand your situation, your risk and your opportunity quickly. We will act as an extension of your team and we will work to your time pressures and the demands of your business. Our combined technical and commercial perspective on legal issues will provide you with first-class client service, speed of response and an ability to anticipate issues.</p>    <h4>Adding value</h4>    <p>Working as part of your team, we can help to devise strategies and innovative structures to protect against insolvency risk in relation to development contracts, mergers, outsourcing and other commercial contracts. We also deal with intellectual property rights in restructuring situations, ensuring that these rights are managed and protected.</p>    <h4>Multi-jurisdictional, cross-sector knowledge</h4>    <p>Practised in multi-jurisdictional, cross-border insolvencies and restructurings, our experience spans the broadest cross-section of sectors. Notably: automotive, agriculture, aquaculture, aviation, care homes, construction, financial services, healthcare, retail and leisure, real estate, technology, natural resources and pensions.</p>    <blockquote>  <p>&quot;The team combines breadth of specialist expertise with first class client service and rapid response. The team felt like part of our team. Above all they are commercially astute and don&#39;t lose sight of the commercial aspects when providing legal advice, with a fair and flexible approach to fees.&quot;<br />  <cite>Deloitte UK LLP.</cite></p>  </blockquote>    <h3>Areas of expertise</h3>    <ul>   <li>Administration, liquidation, receivership and bankruptcy</li>   <li>Company voluntary arrangements</li>   <li>Corporate restructuring</li>   <li>Creditor, supplier and customer negotiations</li>   <li>Directors&#39; liability and duties</li>   <li>Distressed sale and purchase transactions</li>   <li>Advice on security and enforcement</li>   <li>Pensions restructuring and covenant advisory</li>   <li>Insolvency risks in structured transactions</li>   <li>Security reviews and pre-insolvency contingency planning</li>  </ul>  ",GWLG.UK,c87f99c4-6d5c-4e17-8e93-2a857c86682a;453e01a7-5d2e-4ac3-93d5-96ff46cb4607,CB3477A6-C725-4D55-8FA9-194ABC3A4EC4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,e37fc7fb-2cf9-453c-a841-9f228d86f66e,NULL,NULL,{61BAC7DF-E3FA-4DC2-B953-6889A9143244}|{AE8484C3-6126-4C59-B6D3-ADA8CF11F29D}
159,/Services/Restructuring-Insolvency/Canada,en-GB,B98FBCEF-D994-4204-A19F-D162A0F03495,Canada,Canada,"Even in a healthy economic environment, there are sectors in trouble. Whether a company needs early- or late-stage restructuring advice or a secured or unsecured creditor needs immediate counsel, we work to resolve issues quickly, pragmatically and cost-effectively.",NULL,NULL,"<p>Even in a healthy economic environment, there are sectors in trouble. Whether a company needs early- or late-stage restructuring advice or a secured or unsecured creditor needs immediate counsel, members of Gowling WLG&#39;s Restructuring, Bankruptcy &amp; Insolvency Group work to resolve issues quickly, pragmatically and cost-effectively.</p>    <p>As one of the largest groups of its kind in Canada, our team delivers a full range of services from our offices across the country. We&#39;ve developed a significant practice for creditors and debtors alike, with a high level of expertise in cross-border insolvencies and restructurings.</p>    <p>Our experience spans a broad range of industries, notably including: aquaculture, agriculture, automotive, aviation, banking and finance, biotech, cannabis, construction and development, energy, infrastructure, food and beverage, franchising, health care, hospitality, housing, income trust, life sciences, manufacturing, media, mining and natural resources, publishing, recreational products, retail, real estate, technology, telecom, and transportation and logistics.</p>    <h3>A track record of success</h3>    <p>Gowling WLG is recognized both nationally and internationally for its creative approach to complex restructuring and insolvency challenges. We expertly represent creditors, debtors, receivers, trustees, monitors, acquirers, suppliers, customers and other restructuring professionals and stakeholders, providing unrivalled service and innovative solutions.</p>    <p>Our services include the following.</p>    <h4>Restructuring, bankruptcy and insolvency</h4>    <ul>   <li>Advising on early stage financial and operational restructurings</li>   <li>CCAA and BIA proposal proceedings</li>   <li>Bankruptcy and liquidation proceedings</li>   <li>Enforcing guarantees and security</li>   <li>Negotiating forbearance and accommodation arrangements</li>   <li>Advising on insolvency risks in structured transactions</li>   <li>Mitigating lender liability issues</li>   <li>Assessing directors&#39; liability</li>   <li>Advising regulatory agencies on regulatory compliance</li>  </ul>    <h4>Distressed M&amp;A</h4>    <ul>   <li>Structuring and executing sales process whether in or out of court</li>   <li>Creditor, supplier and customer negotiations</li>   <li>Retaining investment bankers and advisers to assist in the distressed M&amp;A&nbsp;process</li>   <li>Sourcing, negotiating and documenting interim and permanent financing solutions</li>   <li>Timely due diligence on the target</li>  </ul>    <h4>Corporate restructuring</h4>    <ul>   <li>Advising on the most complex national, cross-border and multi-jurisdictional insolvencies and restructurings</li>   <li>Bringing the talents and skills of our most senior and experienced team members to bear on the most challenging issues faced by our clients</li>   <li>Using the respect, trust and experience our corporate restructuring team has earned in the marketplace to leverage the best results for our clients</li>   <li>Applying the considerable corporate, securities, financial, litigation, international, real estate, governmental, labour, employment, pension, tax, environmental and other skills in a holistic way to achieve optimal solutions</li>  </ul>    <h3>Learn more</h3>    <p>To find out how we can support your restructuring, bankruptcy or insolvency needs, please contact a <a href=""~/en/people/?page=1&amp;services=573&amp;locations=GWLG.Canada"">member of our team</a>.</p>  ",GWLG.Canada,31589b1d-8773-40f3-b07d-0b7a1a5eee2f,CB3477A6-C725-4D55-8FA9-194ABC3A4EC4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,137491af-bfff-4f00-b1dc-fa4677b85c35,NULL,NULL,{4611A725-FCDD-493D-9FD2-487B932D5A80}
160,/Services/Risk-Transfer/UK,en-GB,5291E96F-FBD8-4CAE-A6F7-D65F97330BF1,UK,UK,Transferring all or a significant proportion of a pension scheme's risk to an insurer is one of the most important events in a pension scheme's lifetime.,NULL,NULL,"<p>Transferring all or a significant proportion of a pension scheme&#39;s risk to an insurer is one of the most important events in a pension scheme&#39;s lifetime.</p>    <p>For trustees, risk transfer transactions mean making a series of critical decisions. We can support trustees in making them and ensuring the relevant risks are definitely transferred on favourable terms.</p>    <p>Our expert team, led by partner <a href=""~/en/people/paul-feathers/"">Paul Feathers</a>, has a wealth of experience, as well as a detailed understanding of the pensions insurance market and the legal issues arising in relation to risk transfer contracts.</p>    <p>Our approach to advising trustees ensures they:</p>    <ul>   <li>minimise the risk of legal issues adversely affecting pricing or blocking the transaction through effective preparation</li>   <li>enjoy increased execution certainty by working in partnership with a team which knows the market and the insurers well and has a proven track record of working constructively and efficiently with the insurers and their advisers to overcome challenges and complete transactions</li>   <li>have the peace of mind of knowing that they are transferring risk with legal certainty, almost always on more favourable terms than the insurers initially propose</li>   <li>understand the terms of the contract they are signing: risk transfer contracts are often complex, but we explain the provisions clearly, in plain English</li>  </ul>    <h3>Expertise and experience covering all transaction sizes</h3>    <p>Regardless of your scheme&#39;s size, we will have experience of similar sized risk transfer transactions. As we have seen most issues before, clients can expect to receive effective solutions and to avoid delays (which can be fatal to this type of transaction).</p>    <h4>Smaller transactions</h4>    <p>For small and medium sized schemes (up to &pound;250 million asset value) we can provide access to LCP&#39;s streamlined process for buy-ins and buy-outs. It provides trustees with:</p>    <ul>   <li>access to market leading risk transfer employee benefits consultants and lawyers</li>   <li>increased execution certainty through an expedited process</li>   <li>materially better terms than those which are routinely available for similar sized transactions</li>   <li>cost certainty because the fees are fixed up front</li>   <li>the benefit of the experience arising from providing the first streamlined risk transfer process in the market and having successfully competed more transactions than other, similar offerings in the market</li>  </ul>    <p>We are equally happy working with trustees&#39; incumbent employee benefit consultants and have strong working relationships with all the leading providers in the market.</p>    <h4>Larger scheme transactions</h4>    <p>Risk transfer transactions for larger schemes often require a very different approach to smaller transactions. This is because trustees of larger schemes are typically in a stronger negotiating position. Careful planning is essential to ensure trustees benefit from improved transaction terms.</p>    <p>Our wide experience of advising both trustees and insurers on larger transactions means that we are ideally placed to work closely with the trustees&#39; employee benefit consultants to formulate preferred terms for a transaction (based on our knowledge of what is obtainable in the market) and to ensure that those terms are accurately documented in the contract.</p>    <p>We advised the Delta Pension Plan trustees on the legal structure for the &pound;450 million partial buyout of its pensioners. The structure of this transaction ensured the sponsoring employer achieved its objective of removing significant pensions liabilities from its balance sheet quickly, while protecting the members&#39; interests.</p>    <h4>Specialist transactions</h4>    <p>We&#39;ve helped numerous clients with specialist transactions too, including &quot;all risks&quot; transactions and &quot;Pension Protection Fund (PPF) plus&quot; transactions.</p>    <p>The concept of &quot;all risks&quot; insurance has different meanings to different insurers and trustees. But, essentially, they require an insurer to assume a degree of risk over and above the payment of benefits for the lifetime of each known beneficiary, calculated in accordance with a benefit specification.</p>    <p>We have advised the Trustees of a &pound;3 billion scheme on a number of buy-ins with different insurers which will be converted to &quot;all risks&quot; trades when a pre-agreed trigger event takes place. We ensured they were fully aware of the options for insuring different types of risk and subsequently that the negotiated terms transferred effectively the appropriate risks to the insurer.</p>    <p>&quot;<abbr title=""Pension Protection Fund"">PPF</abbr> plus&quot; transactions involve pension schemes which have exited the Pension Protection Fund because they have sufficient assets to buy-out benefits at least equal in value to <abbr title=""Pension Protection Fund"">PPF</abbr> compensation but insufficient assets to secure benefits in full. Trustees must make a number of key decisions over and above those in &quot;vanilla&quot; transactions, such as the &quot;shape&quot; of benefits to buy for members.</p>    <p>We have advised on five of these transactions, including advising the Trustees of the UK Can Scheme on the first transaction of this type and Rothesay Life on the &pound;830 million buyout of the Uniq Pension Scheme.</p>    <p>Our experience leaves us ideally placed to ensure trustees understand the key legal issues and are in a position to make informed choices at the right time.</p>    <h4>Longevity hedging</h4>    <p>Longevity hedging transactions enable trustees to hedge against the additional liabilities arising because pension scheme members live longer than anticipated. They remain relatively complicated and, to a large extent, the preserve of larger schemes.</p>  ",GWLG.UK,6955126a-7996-42c8-bc91-a225220db6e8,818C09C8-9CFE-464D-8B6C-4F9222A95CDF,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1124055D-CA13-4FEE-9888-4E3E65279B7A}
161,/Services/Securities-Litigation/Canada,en-GB,91C824B6-905B-4E55-916B-197BCA88CF51,Canada,Canada,"With securities litigation and enforcement cases on the rise, and an increasingly complex securities regulatory framework to deal with, you need a litigation team to help you navigate the capital markets - expertly and efficiently.",NULL,NULL,"<p>With securities litigation and enforcement cases on the rise, and an increasingly complex securities regulatory framework to deal with, you need a litigation team to help you navigate the capital markets - expertly and efficiently.</p>    <p>As one of the strongest and most diverse litigation teams in Canada, the Gowling WLG Securities Litigation Group has served as trusted legal adviser to the majority of Canada&#39;s Schedule I banks, as well as Canada&#39;s top corporations and other market participants - including TSX-listed public companies, startup private issuers, investment dealers and advisers, directors and officers, investment funds, insurers, compliance personnel, and other registrants.</p>    <p>We&#39;ve handled a range of litigation issues for each of these clients, including:</p>    <ul>   <li>Securities class actions</li>   <li>Shareholder activism cases</li>   <li>Securities enforcement matters, including OSC, IIROC, MFDA, SEC and other regulatory investigations</li>   <li>Compliance issues</li>   <li>Shareholder disputes and oppression</li>   <li>Derivatives litigation</li>   <li>Broker/dealer litigation</li>   <li>Contested M&amp;A/corporate transactions</li>   <li>Accounting/auditing issues</li>   <li>Corruption/foreign bribery matters</li>   <li>Corporate governance issues</li>   <li>White collar crime</li>   <li>Crisis/risk management</li>   <li>Internal investigations</li>   <li>Cross-border investigation</li>  </ul>    <p>In every case, our mission is simple: to formulate litigation strategies that best align with our clients&#39; business interests. Whether through a negotiated settlement, alternative dispute resolution or the courtroom, the Gowling WLG team is committed to working with you to achieve the best possible results.</p>    <h3>An unmatched legal team</h3>    <p>The Gowling WLG team comprises seasoned professionals who are well-versed in securities litigation, including practitioners who have held senior positions at Canadian securities regulators - such as deputy director of enforcement, chief litigation counsel, prosecutors and litigation specialists at several Branches (Compliance/Registrant Regulation and Corporate Finance), as well as the insider trading/market manipulation unit of the Ontario Securities Commission.</p>    <p>Our team also includes former assistant Crown attorneys who have prosecuted securities matters. These experiences have enabled us to develop extensive expertise in Canada&#39;s complex securities laws and regulations, and have also allowed us to build exceptionally strong relationships with government agencies - to the direct benefit of our clients.</p>    <h3>Highly credentialed litigators</h3>    <p>Regularly ranked among the very best litigators by Canada&#39;s leading legal directories, including <em>Chambers Global</em>, <em>Lexpert</em>, <em>Best Lawyers</em> and <em>Benchmark Litigation</em>, Gowling WLG is known as a top securities litigation firm. Our practitioners have served on precedent-setting cases involving securities class actions, insider trading/tipping, contested M&amp;A transactions, market manipulation, securities frauds, NI 43-101 obligations, auditor liability and white collar crime.</p>    <p>In light of their credentials, our practitioners are also frequently called on to lecture at leading securities law conferences and seminars, as well as at Canada&#39;s top universities.</p>    <h3>Full-service support</h3>    <p>Whether it be multi-jurisdictional securities class actions, wrongful dismissal claims by departing investment advisers, managing international investor fraud recovery matters or handling complex structured product litigation, we offer timely, effective solutions that will meet and exceed your needs.</p>    <p>Working seamlessly with you from offices across Canada, as well as in the U.K., Europe, Asia and the Middle East, our litigators also work closely with Gowling WLG&#39;s securities solicitors to draw from their expertise on take-over strategies, shareholder activism cases, insider reporting obligations and other requirements.</p>    <h3>Key industry roles</h3>    <p>Our practitioners have occupied key leadership positions in the Canadian securities industry. These positions include memberships on the OSC&#39;s Securities Advisory Committee (SAC) and its Securities Proceedings Advisory Committee (SPAC) and the Canadian Securities Administrators (CSA) Enforcement Committee. Members of our team also serve as chair of The Advocates&#39; Society Securities Litigation Practice Group - one of the largest collective of securities litigators in Canada -&nbsp;and as the inaugural chair of the American Bar Association&#39;s Securities Litigation Sub-Committee responsible for Canada.</p>    <p>These key positions allow us to keep on top of the latest securities litigation trends - and keep our fingers on the pulse of the Canadian capital markets.</p>    <h3>Cost-effective approach</h3>    <p>We ensure you get the most value from your legal spend through the use of our in-house legal project management platform, <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"">Practical LPM</a>. By seamlessly managing the scope, costs, tasks and resources associated with your file, we help keep your legal matter on track, on time and on budget. We also reduce costs and ensure efficiency through the use of Go.Plead, a legal research and precedents tool built and maintained by our team.</p>    <h3>Learn more</h3>    <p>To learn more about how we can help you succeed, please <a href=""~/en/people/?page=1&amp;services=577&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,300e471b-5cfe-45e3-bb75-6cc00bbdf27b,0F28B1C6-81AB-458B-B5A2-7F11725C7923,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{D9D98D49-7A54-4962-95E8-DF07C57D093A}
163,/Services/Smart-Raise-Streamlined-Private-Placements/Canada,en-GB,D427D9C3-A77A-4734-9E71-30238D7476B6,Canada,Canada,"By automating private placements through our Smart Raise&trade; platform, Gowling WLG is enabling issuers, agents and other market participants to generate and deliver legal documents to investors quickly and with confidence.",NULL,NULL,"<p>When it comes to raising capital, you need a law firm that applies an efficient, cost-effective approach that&#39;s in line with all regulatory requirements.</p>    <p>By automating private placements through our Smart Raise&trade; platform, Gowling WLG is enabling issuers, agents and other market participants to generate and deliver legal documents to investors quickly and with confidence.</p>    <p>With Smart Raise&trade;, you&#39;ll receive exceptional value, seamless service and reliable results - delivered in much less time than a traditional private placement.</p>    <p>Our specialized software applies an innovative, automated process to generate high-quality legal documents, and cuts out many of the mundane, repetitive tasks typically associated with raising capital.</p>    <p>Built on Gowling WLG&#39;s extensive precedents database and overseen by an experienced team of legal professionals, Smart Raise produces all of the legal documents associated with private placements quickly and accurately - while meeting compliance requirements across Canada.</p>    <p>{^widget|(name)GWLG.Video|(VideoId)uF_Nfee1CgQ|(VideoTitle)Watch+the+video+-+Smart+Raise+by+Gowling+WLG|(TranscriptText)%3cp%3ePrivate+placement+transactions+require+many+complex+documents+that+take+most+legal+firms+a+substantial+amount+of+time+to+complete.+This+can+delay+the+time+it+takes+to+get+to+market+with+your+offering.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eThat%26%2339%3bs+why+we+built+Smart+Raise%2c+an+automated+private+placement+tool+that+enables+Gowling+WLG+to+significantly+reduce+the+time+it+takes+for+us+to+generate+reliable+and+accurate+documents+for+our+clients.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eHere%26%2339%3bs+how+it+works%3a%3c%2fp%3e%0d%0a%0d%0a%3cp%3eGowling+WLG+templates+for+all+private+placement+documents+are+stored+in+our+internal+Smart+Raise+system%2c+including+the+Term+Sheet%2c+Subscription+Agreement+and+Agency+Agreement.+These+stored+templates+are+monitored+and+regularly+updated+by+our+dedicated+team+of+legal+professionals+so+they+stay+current+with+changing+regulations.+That+means+they%26%2339%3bre+always+up+to+date+and+fully+compliant!%3c%2fp%3e%0d%0a%0d%0a%3cp%3eWe+start+our+process+of+generating+documents+for+you+by+entering+data+for+a+specific+deal+into+the+Term+sheet.+Our+system+identifies+all+the+data+we+need+from+you%2c+including+the+dealer%2c+compensation+and+reimbursement%2c+and+security+and+offering+details.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eAll+the+data+we+enter+into+the+Term+Sheet+automatically+populates+other+documents+for+us%2c+eliminating+the+need+for+redundant+data+entry.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eThroughout+the+process%2c+Smart+Raise+offers+us+the+opportunity+to+preview+your+documents+and+double-check+them.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eIf+there%26%2339%3bs+a+change+to+the+deal+terms%2c+we+can+easily+make+that+change+in+our+system.+In+this+example%2c+we%26%2339%3bll+change+the+price+from+%242+to+%245.+All+relevant+documents+are+updated+and+recalculated+with+that+single+entry%2c+making+our+revisions+fast+and+easy.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eOnce+the+data+has+been+entered%2c+the+generated+documents+can+be+saved+and+printed+for+Gowling+WLG%26%2339%3bs+final+review.+With+less+of+our+time+spent+on+multiple+manual+updates%2c+we+can+focus+your+legal+costs+on+more+substantive+matters+like+comprehensive+review+and+consideration+of+your+deal.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eSmart+Raise+helps+us+put+your+deal+one+step+ahead+by+leveraging+technology+to+complete+your+private+placement+documents+more+efficiently%2c+more+accurately%2c+and+in+full+compliance+with+the+law.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eSmart+Raise+is+one+more+reason+that+Gowling+WLG+is+the+recognized+leader+for+innovation+in+the+legal+field+today.%3c%2fp%3e%0d%0a|(image_guid)0e502820-04ca-4904-bb36-27eed2f52336|(widget_displayname)Video^}</p>    <h3>Why choose Gowling WLG and Smart Raise for your private placement?</h3>    <ul>   <li><strong>Access to quality work done faster</strong>: Your timeline could be reduced from weeks to just a few days.</li>   <li><strong>Peace of mind</strong>: You can rest easy knowing that the legal documents produced by Smart Raise are reliable and compliant with all securities regulatory requirements across the country.</li>   <li><strong>Cost-effective service</strong>: Your legal team will remain focused on substantive matters, as opposed to the repetitive tasks that can be handled by Smart Raise.</li>  </ul>    <h3>How Smart Raise works</h3>    <p>Smart Raise, our automated private placements document generation and management system, is rooted in an efficient, three-step process:</p>    <ol>   <li><strong>Input: </strong>Gowling WLG inputs the key data points from your negotiated term sheet.</li>   <li><strong>Document generation: </strong>Drawing on our library of precedents, Smart Raise generates draft legal documents.</li>   <li><strong>Review</strong>: Our professionals review the draft documents to confirm accuracy and completeness.</li>  </ol>    <h3>What can it be used for?</h3>    <p>Smart Raise can be used to complete a wide range of legal documents related to raising capital and private placements, including:</p>    <ul>   <li>Agency agreements</li>   <li>Subscription agreements</li>   <li>Warrant certificates</li>   <li>Board resolutions</li>   <li>Legal opinions</li>   <li>Exchange reporting</li>  </ul>    <h3>Why Gowling WLG?</h3>    <h4>A passion for innovation</h4>    <p>We&#39;re proud of our strong reputation as an innovator in the legal field. This reputation has been developed over many years of working closely with our clients to implement a number of tools that deliver enhanced value and increased efficiency. By using automated systems, centralized templates and well-defined procedures, we&#39;re able to offer you greater cost control, predictability and savings.</p>    <p>Smart Raise is one of our most recent innovations, built on our in-depth experience and commitment to listening closely to our clients and anticipating their distinct needs.</p>    <p>Through tools such as <a href=""~/en/services/practical-lpm-by-gowling-wlg/#canada"" target=""_blank"">Practical LPM</a>, our groundbreaking approach to legal project management, Go.Plead, our extensive legal research and precedents database, Virtual In-House Counsel, Smart Raise and many more, Gowling WLG is reshaping the legal industry.</p>    <h4>One of Canada&#39;s busiest business law firms</h4>    <p>Gowling WLG&#39;s business law practice is one of the busiest in Canada. We&#39;re consistently identified as a leader among Canadian law firms for our capital markets activity. Given this unparalleled experience, you can trust us to handle your matter expertly - and, most importantly, close the deal.</p>    <h3>Want to learn more?</h3>    <p>To learn more about how Smart Raise can help you raise capital quickly and cost effectively, contact one of our firm-wide leaders:</p>  ",GWLG.Canada,NULL,D93EC41E-4AF4-4BF4-8165-E6F0C701C4F3,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
164,/Services/XClaim-Portfolio-Claims-Management/Canada,en-GB,1A77E498-D947-4AB3-93AB-56D89A609A9F,Canada,Canada,"Gowling WLG has redefined the traditional lawyer-client relationship with XClaim, an innovative portfolio claims management system that combines our market-leading mortgage recovery service practice with our records management and technological expertise.",NULL,NULL,"<p>Managing portfolios of claims can result in significant internal costs and administrative burdens for insurers and companies with large numbers of self-retained claims.</p>    <p>Gowling WLG has redefined the traditional lawyer-client relationship with XClaim&trade;, an innovative portfolio claims management system that combines our market-leading mortgage recovery service practice with our records management and technological expertise.</p>    <p>The XClaim&trade; approach improves information flow by allowing clients to monitor the progress of their files electronically at any time, reduces clients&#39; internal costs and provides greater external cost predictability through the use of innovative staffing and billing models.</p>    <h3>Working together</h3>    <p>The XClaim&trade; portfolio claims management system enhances the collaborative relationship between client and counsel, resulting in improved efficiencies in claims management, reduced resolution times and lower indemnity payments.</p>    <h3>Understanding your claims portfolio</h3>    <p>The unique XClaim&trade; extranet platform gives clients the opportunity to assess their entire claims portfolio. It provides sophisticated portfolio analytics, enabling the identification of trends, inefficiencies and opportunities within a portfolio of claims.</p>    <h3>24/7 access to secure file information</h3>    <p>XClaim&trade; gives clients direct, real-time access to all claims-related information so that they can monitor the progress of files remotely in a secure environment - 24 hours a day, 7 days a week.</p>    <h3>Value</h3>    <p>Our approach to claims management extends beyond new technology to encompass flexible and value-based billing models that create incentives for efficiency, reduce costs and establish greater cost certainty.</p>    <p>To learn more about how we can help you succeed, please contact us.</p>  ",GWLG.Canada,0dcf807e-9a72-4e91-a1d1-746438c45877,0A3DCB0E-C64D-44B6-9B01-05C133AF7F01,NULL,1,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{8D6FF9BD-33B1-431E-BDFC-9083C4C01AAF}
165,/Services/Tax/Overview,en-GB,DDCA2CA8-E8A8-4C6C-8E7E-84C39CF2B9CA,Overview,Overview,"The international tax landscape is changing at a faster pace than ever before, which is why it's essential to seek help from seasoned tax advisers who know your industry.",NULL,NULL,"<p>The international tax landscape is changing at a faster pace than ever before, which is why it&#39;s essential to seek help from seasoned tax advisers who know your industry.</p>    <p>By planning ahead and engaging the right team, you&#39;ll obtain efficient, tailored tax solutions that enable your business to grow and thrive.</p>    <p>At Gowling WLG, we communicate detailed, complex tax analysis in clear, straightforward language. Our professionals work with you to develop tax and business structures that are effective and customised to your unique needs.</p>    <p>For us, it&#39;s all about taking a pragmatic approach and making it easier for you to remain focused on your business.</p>    <p>We bring the advanced skills of experienced tax lawyers, accountants and economists to the table, and can advise you on a wide range of tax matters, including:</p>    <ul>   <li>Mergers &amp; acquisitions (M&amp;A)</li>   <li>International transactions</li>   <li>Investment funds</li>   <li>Real estate</li>   <li>Private client services</li>   <li>Indirect tax</li>   <li>Tax dispute resolution</li>   <li>Transfer pricing</li>  </ul>    <p>The broad coverage of Gowling WLG means you&#39;ll always have access to the right expertise from the right professionals with the right experience in your sector. We understand your tax requirements, and are on the ground with solutions to help you.</p>    <p>To learn more about how our tax team can assist you, please contact us.</p>  ",GWLG.Global,d60ac666-57c3-41c0-a0e6-88626659b060;7e1b55ce-2531-4035-b309-0c8dafb3e1e8,5E7A4C28-1F41-45D6-9485-1A23041B34F6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{1BCB2B88-1239-415F-A645-7C57FBB13590}|{29C8CF6A-A8D7-4F9D-AF5C-11ED03D3663B}
166,/Services/Tax/Canada,en-GB,73E413C7-3DF2-47F9-B662-6C68313D88CA,Canada,Canada,"The tax landscape is changing at a faster pace than ever before, which is why you need an innovative law firm with the expertise to keep you one step ahead.",NULL,NULL,"<p>With over 30 tax professionals in offices across Canada, Gowling WLG&#39;s Tax Group is recognized by <em>Chambers Global</em> and the <em>International Tax Review</em> as a leading law firm in the areas of tax, transfer pricing, tax planning and indirect tax.</p>    <p>Our extensive experience advising clients - from small entrepreneurs and mid-sized businesses to Fortune 500 companies - means we have the right background to meet your unique tax needs. We counsel both Canadian and international clients, and have an in-depth understanding of a wide range of industries, including apparel, banking, energy, finance and leasing, insurance, manufacturing, payments, real estate, traditional and Internet retail, telecommunications and transportation.</p>    <p>We implement Canadian in-bound investments for multinational corporations, tax-exempt entities, foreign sovereign entities, and high net worth individuals, and tailor outbound tax structures for Canadian entities doing business abroad. Our tax professionals can work with you to provide specialized advice to meet all of your tax requirements, from corporate reorganizations, executive compensation and international trade to private client services, tax dispute resolution and transfer pricing.</p>    <p>Our tax group includes lawyers, accountants, economists and former senior officers of the Canada Revenue Agency. We have the resources and first-hand experience to anticipate the problems you may face - and offer creative, practical solutions that deliver effective tax results for your business.</p>    <h3>Automated tax advice</h3>    <p>Are you a foreign business that plans to render services in Canada? If so, the income you receive for these services may be subject to withholding (known as Regulation 105 withholding), even if you might not ultimately have any tax payable in Canada. You may also be required to fulfill other tax-related obligations.</p>    <p>We invite you to use our automated Tax Adviser service - at no cost - to determine the extent of your obligations and any available Regulation 105 waivers.</p>    <p><a class=""c-button"" href=""https://ca.gowlingwlg.com/taxadviser/"" target=""_blank"">Access Tax Adviser now</a></p>    <p>To learn more about how we can assist you with your tax issue, please <a href=""~/en/people/?page=1&amp;services=585&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our tax team</a>.</p>  ",GWLG.Canada,7e1b55ce-2531-4035-b309-0c8dafb3e1e8,5E7A4C28-1F41-45D6-9485-1A23041B34F6,NULL,0,1,t-white,"<p>The tax landscape is changing at a faster pace than ever before, which is why you need an innovative law firm with the expertise to keep you one step ahead.</p>  ",Featured Insights,a85d25de-8d0e-49a9-a767-0970e4bd32a6;5d035db1-f3d3-48e6-b48d-d1d453aa8698;24f9899d-5ed5-41fe-921d-5396bc6235b1;30014458-f8de-4b15-b82d-f03cfafe6a04,View all Tax insights,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,/en/insights-resources/?page=1&locations=GWLG.Canada&services=585,NULL,{29C8CF6A-A8D7-4F9D-AF5C-11ED03D3663B}
167,/Services/Tax/France,en-GB,60A6F15B-EE96-4C0B-985F-9F9BD3E34AA9,France,France,"We can minimize the exposure you face when it comes to tax audit and litigation from a transfer pricing, profit allocation and withholding tax perspective.",NULL,NULL,"<p>You face a complex challenge. You want to optimize the tax planning of your investments and divestures in an environment which is constantly changing due to local, EU and OECD standards. You need to ensure a structure which is consistent and seen as appropriate by all relevant tax authorities.</p>    <p>Gowling WLG can help. We can minimize the exposure you face when it comes to tax audit and litigation &ndash; notably on international, intragroup and flows &ndash; from a transfer pricing, profit allocation and withholding tax perspective.</p>    <p>Our team has significant experience in establishing policies and documentation for transfer pricing and cross-border tax structures, as well as implementing French stock option plans and other employee share-based incentives.</p>    <p>The team can assist on:</p>    <ul>   <li>M&amp;A and internal restructuring tax support</li>   <li>Tax audit and disputes representation</li>   <li>Tax planning of in and outbound investments for corporations</li>   <li>Tax planning on relocations and expatriations for individuals (HNW individuals or managers of multinational enterprises)</li>   <li>Transfer pricing documentation</li>  </ul>    <p>Our constant monitoring of tax changes and the legal environment means that we can offer you clear, comprehensive, pragmatic and personalised advice and innovative solutions.</p>    <p>You can also benefit from our deep experience in R&amp;D-intensive and IP-rich industries, from life sciences to technology companies. We use the expertise of our specialist tax colleagues in Europe and Canada to provide integrated, cross-border tax advice.</p>    <h3>Learn more</h3>    <p>Face up to your tax challenge. Our team is ready to take the issues on our shoulders and maximise your profits.</p>  ",GWLG.France,2a23e6a6-0155-4f2f-aaaa-e614eae99bec,5E7A4C28-1F41-45D6-9485-1A23041B34F6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,2a23e6a6-0155-4f2f-aaaa-e614eae99bec
168,/Services/Tax/UK,en-GB,7BBEC41C-45E5-4A75-94A5-7ED80BF656CD,UK,UK,"When it comes to tax, you want to be sure you're getting it right first time. And, of course, you want to pay less tax while maintaining a robust compliance reputation.",NULL,NULL,"<p>When it comes to tax, you want to be sure you&#39;re getting it right first time. And, of course, you want to pay less tax while maintaining a robust compliance reputation.</p>    <p>Our team is on hand to help, with comprehensive and clear advice on what is often a challenging and complex area of law.</p>    <p>Combining the skills of lawyers and chartered tax advisers, the eight-strong team advises on the full range of tax issues including corporate, real estate, dispute resolution, funds, individuals and trustees, private capital, employment. Clients can also count on our specialist tax teams in Paris and Monaco.</p>    <p>So, no matter how complex or international your tax situation, choosing Gowling WLG gives you access to a team that is:</p>    <ul>   <li><strong>Technically excellent</strong> - clients describe team members as &quot;highly professional&quot;, &quot;a quick, no-nonsense lawyer&quot; and &quot;very good technically&quot;. Ranked as a stand-alone tier one practice in Legal 500 in the West Midlands, it is known for being &quot;practical and commercial&quot; and able to &quot;quickly understand issues&quot;.</li>   <li><strong>Proactive</strong> - by planning ahead, the team can ensure the efficient, practical and tailored application of tax legislation to your situation. This pragmatic approach is highlighted by Legal 500&#39;s description of partner Lee Nuttall&#39;s ability to handle &quot;detailed and complex tax analysis in a client-friendly way&quot;.</li>   <li><strong>Immersed in your chosen sector</strong> - the size of the team means you can call upon the right expert, including industry sector, who will be on the ground with you in any deal or situation.</li>  </ul>    <p>Corporate and private clients alike turn to our team to solve their most pressing challenges. These include Development Securities plc, J Sainsbury plc, The Crown Estate, Cape plc, LaSalle Investment Managers, Circle Health plc, Whitbread plc, Sanctuary Housing, St Modwen Properties plc, Intu Properties plc, Threadneedle, Royal London and various international multi-million and billionaires.</p>    <h3>Complex sale and leaseback</h3>    <p>The team advised Peugeot Motor Company and Citroen UK on a &pound;30 million complex sale and leaseback of a nine-property portfolio of showrooms including advice on TOGC treatment and SDLT reliefs.</p>    <h3>UK&#39;s first-ever social impact venture capital trust</h3>    <p>The team advised not-for-profit Social Finance on the launch of the UK&#39;s first-ever social impact venture capital trust. Set up to raise up to &pound;20 million for onward investment in social enterprises, the fund is a joint initiative between Social Finance and the FSE Group. It is the first investment vehicle to allow retail investors to invest in businesses that put social impact at the heart of their objectives.</p>    <h3>Student Accommodation Fund</h3>    <p>Advised Coral Student Accommodation Fund on its joint venture with student accommodation provider Victoria Hall for the development of a new student accommodation scheme involving land swaps and the establishment of an offshore fund.</p>    <h3>Innovative tax structures</h3>    <p>The firm recently implemented a series of innovative structures on behalf of Middle Eastern, Bahamian, South East Asian and Latin American clients.</p>    <h3>&#39;Patent Box&#39; tax relief</h3>    <p>The UK&#39;s &#39;Patent Box&#39; regime offers companies an attractive lower rate of UK corporation tax on worldwide profits earned from their patents and other qualifying IP rights. The effective rate of tax will gradually be reduced and, by 1 April 2017, will be as low as 10%. You can benefit from the Patent Box if your company is liable to UK corporation tax and makes a profit from exploiting patented inventions. Our intellectual property and tax experts can assist you and your patent attorneys in making the most of the Patent Box. Please contact <a href=""~/en/people/luke-kempton/"">Dr Luke Kempton</a>to find out more.</p>  ",GWLG.UK,d60ac666-57c3-41c0-a0e6-88626659b060,5E7A4C28-1F41-45D6-9485-1A23041B34F6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d;40c2df88-693d-451b-8633-8eee3c76676f;e37fc7fb-2cf9-453c-a841-9f228d86f66e,NULL,NULL,{1BCB2B88-1239-415F-A645-7C57FBB13590}
169,/Services/Living/UK,en-GB,426CF975-AFE3-4412-8DF1-65593C8D98DB,UK,UK,"Issues such as funding and meeting the rising demand for affordable housing are high on the political agenda. Against this backdrop, clients need legal advisers with a passion to deliver solutions.",NULL,NULL,"<p>Issues such as funding and meeting the rising demand for affordable housing are high on the political agenda. Against this backdrop, clients need legal advisers with a passion to deliver solutions.</p>    <p>This is exactly what our social housing experts provide. Our strong track record in the sector means that we can provide the full range of services required - providing trusted advice on issues ranging from property development, finance and governance, through to contentious and non-contentious housing management - demonstrated by the fact that we are the primary, full service legal adviser to Sanctuary Group, the largest registered provider of social housing in the country.</p>    <p>The team boasts a client list of registered providers of social housing, local authorities, investors and funds, including:</p>    <ul>   <li>Sanctuary Group</li>   <li>Legal &amp; General Affordable Homes</li>   <li>London &amp; Quadrant</li>   <li>Clarion Housing Group</li>   <li>Metropolitan Thames Valley</li>   <li>Bournville Village Trust</li>   <li>London Borough of Barnet</li>   <li>London Borough of Ealing</li>   <li>LaSalle Investment Management</li>   <li>Triple Point Social Housing REIT</li>   <li>Horizon Infrastructure Partnership</li>   <li>Alpha Real Capital</li>   <li>Fox Hound Capital</li>   <li>Universities Superannuation Scheme</li>  </ul>  ",GWLG.UK,e930ef66-9c7a-4e26-9cd5-648936fea926,509C08BA-ECD3-4E2B-8A6E-94B148E9534F,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{36B600D2-B7F4-44DA-8484-283BF7D3CADB}
171,/Services/Supreme-Court-of-Canada-Services/Canada,en-GB,6524503C-DABB-4E86-8B9D-7414607E8713,Canada,Canada,"Dealing with matters before the Supreme Court of Canada calls for experienced legal counsel, renowned expertise, deep insight into relevant practices and precedents - and a proven track record of success.",NULL,NULL,"<p>Dealing with matters before the Supreme Court of Canada calls for experienced legal counsel, renowned expertise, deep insight into relevant practices and precedents - and a proven track record of success.</p>    <p>When it comes to the Supreme Court of Canada, let Gowling WLG be your trusted legal partner in Ottawa.</p>    <p>With a team of leading Supreme Court counsel and agents, we&#39;ve offered a full suite of services to support lawyers involved in Supreme Court cases for over 30 years. Our group provides effective appellate counsel and agency representation on a wide range of matters, motions, appeals and applications, helping clients navigate the complexities of the Court and win their cases.</p>    <h3>Achieving successful outcomes</h3>    <p>National and global clients frequently seek our skilled counsel on all issues related to the Supreme Court, including:</p>    <ul>   <li>Whether and how to seek leave to appeal or how to respond to an opponent&#39;s application for leave</li>   <li>The preparation of persuasive arguments and written materials that comply with the Rules of the Supreme Court of Canada</li>   <li>Service and filing of all materials required by the Court</li>   <li>The filing of motions before the Court (to stay proceedings, to admit new evidence, for extensions of time, to state constitutional questions)</li>   <li>Associated agency services</li>  </ul>    <p>Our lawyers can also assist counsel with the preparation and delivery of oral arguments before the Court, or act as counsel or co-counsel as required on a particular case.</p>    <h3>Expertise and insight</h3>    <p>Gowling WLG&#39;s Supreme Court of Canada professionals are unsurpassed experts in their field and include partners, associates and clerks with extensive expertise in Supreme Court advocacy and agency services.</p>    <p>Members of our group are the authors of the Supreme Court of Canada Practice, published by Thomson Reuters. Now in its fourteenth edition, the book is the only publication to provide a fully annotated review and analysis of changes to the Supreme Court Act and Rules, and has been cited by the Court in several significant decisions.</p>    <p>In addition, our professionals prepare the Supreme Court Bulletin - a newsletter delivering immediate updates on all judgments and leave applications decided by the Court as well as all federal judicial appointments. It also provides periodic insight into recent Supreme Court judgments and practice matters. To receive this newsletter, <a href=""~/en/footer/updates/"">visit our subscribe page</a>.</p>    <h3>Learn more</h3>    <p>To find out how we can support your Supreme Court matters, please <a href=""~/en/people/?page=1&amp;services=594&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,049d9654-364c-4726-b20d-cfc097add38b,6B15483F-4808-41B6-8E72-B1BF310A5BE3,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F12112B9-3065-4B86-8A0F-C1A1D92D1644}
172,/Services/Tax-Dispute-Resolution/Canada,en-GB,B4E583FC-5100-4E9D-A97C-6DF0C6C7B85F,Canada,Canada,"At best, tax disputes are distracting and stressful. At worst, they can lead to financial ruin. Gowling WLG's Tax Dispute Resolution Group is home to some of Canada's most highly regarded tax dispute advisers. With specialized legal expertise in Canadian tax law, our team will minimize your stress and the time it takes to resolve complex disputes.",NULL,NULL,"<p>At best, tax disputes are distracting and stressful. At worst, they can lead to financial ruin. Gowling WLG&#39;s Tax Dispute Resolution Group is home to some of Canada&#39;s most highly regarded tax dispute advisers. With specialized legal expertise in Canadian tax law, our team will minimize your stress and the time it takes to resolve complex disputes.</p>    <h3>Comprehensive service offering</h3>    <p>Our team combines broad tax dispute expertise with extensive experience to advise on a range of matters, including with respect to:</p>    <ul>   <li>Audits</li>   <li>Objections</li>   <li>Court appeals</li>   <li>Tax collection and other enforcement actions</li>   <li>Rectification applications</li>   <li>Remission</li>   <li>Taxpayer relief</li>   <li>Judicial review</li>   <li>Transfer pricing</li>   <li>Rescission</li>   <li>Voluntary disclosures</li>   <li>Competent authority requests under the MAP article of Canada&#39;s tax treaties</li>  </ul>    <p>Whether you&#39;re a tax director, chief financial officer, business entrepreneur or an individual with a personal tax issue, we can help you achieve the best possible outcome at every stage of a tax dispute. While our aim is to avoid litigation whenever possible, when necessary,&nbsp;we&#39;re well-equipped to take your dispute to court.</p>    <h3>Experience you can trust</h3>    <p>Regularly ranked as leaders in their field by the <em>Best Lawyers in Canada</em>,&nbsp;<em>International Tax Review </em>and <em>Chambers</em>, our professionals have high-level experience in both private and public sectors. Members of our team have served in the Canada Revenue Agency&#39;s Income Tax Rulings Directorate, International and Large Business Directorate, Aggressive Tax Planning Division, Legislative Policy Division, and the Canadian Competent Authority Services Division - as well as in the legal department of Revenu Québec.</p>    <h3>Tailored advice</h3>    <p>Our professionals have in-depth expertise across a number of sectors - from energy, mining, infrastructure and life sciences to government affairs, financial services, technology and manufacturing - and are well-positioned to advise on the challenges and opportunities unique to your business.</p>    <h3>Virtual counsel services for accounting professionals</h3>    <p>Professional accountants helping clients resolve tax disputes inevitably encounter complex substantive and/or procedural tax questions that can best be answered after a &quot;check-in&quot; for expert advice. Gowling WLG can help.</p>    <p>Our top-ranked team is just a phone call or email away from providing you with legal advice on all types of tax dispute resolution matters to share with your clients. <a href=""~/getmedia/3d7257aa-3398-403f-a239-f901f013bd98/Gowling-WLG-Virtual-Advisory-Services-Tax-Dispute-Resolution.pdf.xml"" target=""_blank"">Learn more about our Tax Dispute Resolution Virtual Counsel Services</a>.</p>    <h3>Client service highlights</h3>    <p>Some recent tax disputes wins for our clients include:</p>    <ul>   <li>Non-resident internet corporation&#39;s GST/HST appeal allowed: Successfully resolved disputes for internet electronic commerce service providers, engaging novel and precedent-setting issues, including whether a non-resident electronic commerce enterprise provided taxable services and was carrying on business in Canada.</li>   <li>International sporting event tax disputes resolved: Successfully resolved withholding tax reassessments on payments from a Canadian broadcasting company to its foreign parent, involving high-level interrelated negotiations with CRA audit and appeals, the Department of Justice, the Office of the Taxpayers&#39; Ombudsman, and the Department of Finance, in conjunction with an appeal to the Tax Court of Canada.</li>   <li>Rectified structure for non-resident energy production acquisition: Successfully obtained a rectification order to correct the structure for an acquisition of Canadian clean energy facilities, avoiding unintended adverse tax consequences and involving novel issues, including the complex <em>Income Tax Act</em> subsection 88(1) &quot;bump&quot; rules.</li>   <li>Non-resident not taxable: Successfully overturned substantial assessments against family members of a high-net-worth foreign national, by convincing the CRA that the individual was not a Canadian resident for tax purposes.</li>   <li>Vacated extraordinary penalties for offshore investments: Successfully defended taxpayers assessed extraordinarily onerous civil penalties, including under <em>Income Tax Act</em> provisions never previously litigated.</li>   <li>Helping disadvantaged taxpayers: Gives back to the community by providing <em>pro bono</em> legal help to disadvantaged people, saving marginalized individuals from bankruptcy or poverty by vacating or reducing tax reassessments.</li>  </ul>    <h3>Learn more</h3>    <p>If you&#39;d like to ask a tax dispute resolution question on a strictly confidential basis, please <a href=""~/en/people/?page=1&amp;services=596&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our team</a>.</p>  ",GWLG.Canada,6b8f6eff-0e11-457f-a5fb-13663ac51e49;2de02f2d-4a7f-490a-8a3b-73ebf0c8073f,FA76A598-E571-4940-95E3-81B4CC0C7FE6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{364E2BB1-0867-4CE5-831C-43AE0617963D}|{1F689D48-2700-4C33-BD5A-E43FD302AB75}
174,/Services/IT-Litigation/UK,en-GB,76F691A1-F745-4699-BB42-5B903EB96DD3,UK,UK,"Whether you are a supplier or a purchaser of IT systems, software and services our specialist IT litigation team have the knowledge and skills to help identify those threats and guide you through a commercial dispute if things go wrong.",NULL,NULL,"<p>We live in an exciting, ever-evolving technological and digital world. But, with increasing dependency on social media, cloud computing and the merging of the physical with the digital, businesses are constantly being exposed to new threats. Whether you are a supplier or a purchaser of IT systems, software and services our specialist IT litigation team have the knowledge and skills to help identify those threats and guide you through a commercial dispute if things go wrong.</p>    <p><strong>How we help:</strong></p>    <ul>   <li><strong>Cyber incident management and data protection</strong>     <ul>    <li>we can help you minimise and/or mitigate the effects of a cyber incident, identify the culprits responsible and deliver fast, effective solutions. Some of our work includes producing a <strong><a href=""~/digital-risk-calculator"">Digital Risk Calculator</a></strong> which provides an insight into a company&#39;s digital risk across a range of industries.</li>   </ul>   </li>   <li><strong>Dispute avoidance</strong>   <ul>    <li>Prevention is always better than cure. Our team can offer robust, commercial advice on dispute avoidance. Identifying problems at the outset of a project helps to manage potential risks and ensure that expensive disputes don&#39;t arise in the first place;</li>   </ul>   </li>   <li><strong>Dispute management</strong>   <ul>    <li>When disputes can&#39;t be avoided, we will work with you to resolve them. From managing multimillion pound contractual disputes in relation to service or outsourcing agreements to advising in relation to allegations of professional negligence and dealing with software licensing disputes, our specialist team has the experience and skills to guide you through to the resolution of any IT dispute.</li>   </ul>   </li>  </ul>    <h3>Client work</h3>    <p>Our team has wide ranging experience and recent cases include:</p>    <ul>   <li>Assisting a local authority with an early exit from a 15-year &pound;300 million IT and business process outsourcing (BPO) contract, devising a strategy that enabled the client to avoid any liability for early termination charges;</li>   <li>Helping a global publishing house resolve, through arbitration, a complex dispute over the failed design, build and implementation of a new, highly automated distribution centre;</li>   <li>Settling, at mediation, a &pound;50 million damages claim for a global IT services provider in a claim for alleged performance problems experienced in the bespoke CRM system developed by the client.</li>   <li>Helping a nationwide wholesaler to terminate its agreement with its provider of network services and transition the services to a new provider in order to maintain business critical service continuity;</li>   <li>Advising numerous public and private sector organisations in connection with under-licensing claims relating to their enterprise software.</li>   <li>Advising on a major high profile data breach of over 100,000 data subjects&#39; personal data caused by a security breach in a hosted on line retail site.</li>  </ul>  ",GWLG.UK,NULL,00A2BFFE-3CA1-49DD-A9E2-1EDAE97AC1D7,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
175,/Services/Trade-Unions/UK,en-GB,CBD7591E-BCA2-4A1E-AE01-228196C6FCC9,UK,UK,Our specialist expertise in the area of trade union recognition and industrial action is based on many years of advising a wide range of clients in all sectors.,NULL,NULL,"<p>Our specialist expertise in the area of trade union recognition and industrial action is based on many years of advising a wide range of clients in all sectors.</p>    <p>From public sector bodies with established union recognition to start ups in the new economy being faced with requests for recognition for the first time, there is nothing that we have not had to consider.</p>    <p>Issues such as a union with apparent support in your business demanding that you allow them to negotiate, or receipt of a ballot notice on email are complex and can be unexpected or unwelcome. If you want to know what action to take, then our experts are the people you need to call.</p>    <h2>Union recognition</h2>    <p>For some employers this is established; it works well and allows things to be discussed and progressed. For others the opposite is true - they do not want a union in their business and want to know how it can be avoided. The challenge then is that there is a legal right, if they have sufficient support, for the union to be recognised whether you like it or not.</p>    <p>So, it becomes a question of risk management, of what you can do either to fight the call for recognition or to identify the issue driving it and get to the heart of the matter.</p>    <p>Some cases are easily resolved - the union is bluffing about its support on the ground or membership; there is a distortion in the numbers which reflects a recent recruiting drive or, a bit more legalistically, the bargaining unit proposed by the union simply does not reflect the way the business works or is managed.</p>    <p>To get to the heart of the issues requires expertise; time may be short, support may be rising. So, you need people who know how it fits together.</p>    <h2>Strikes and industrial action</h2>    <p>The ultimate step for any workforce is to stop work - the impact on a business can be huge. But the rules around strike action and picketing, dating from the 1980s, are designed to make things difficult, take time and leave the union exposed if they are not done properly.</p>    <p>The law is complex and has a political aspect missing in some other areas. It may sound attractive to rush to court if the ballot paper is defective or the result of the ballot is not sent to all the voters as the strict wording of the legislation requires. But, perhaps more importantly is the question of whether it is the right thing to do.</p>    <p>It might stop the action for now, but does it give the union leverage for the next ballot or simply create an even more toxic industrial relations environment?</p>    <p>In cases like this, you need lawyers with a wider perspective - not just the procedural understanding but one which allows you and them to see the bigger picture.</p>    <p>When is the right time to challenge the process? What advantage do you gain by contesting the status of the action or the numbers on the picket line? Questions like these need careful consideration, from a legal and a business perspective. That&#39;s where we can help. We know that once the dispute is over, you still have to work with those people, so we aim to help clients resolve disputes with a view to the long term.</p>    <p>Like all campaigns, pick your battles, understand the other side&#39;s motivations; that way you&#39;re far more likely to win.</p>  ",GWLG.UK,fb60329f-6333-4f7e-b26b-4f9b106a32e7;799cf040-59c7-4986-825a-e4b909364823,107EA54F-B837-4B91-8454-78C527105CCB,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{436C8D12-0C94-497F-BAB2-F081F6782A9F}|{E105E1FE-58D4-44E0-B32B-4367806B155E}
176,/Services/Trademarks-Brands-Designs/Overview,en-GB,9AAED1AA-2B2E-4425-A2A5-D0B03074E5A9,Overview,Overview,"From conception and development through to exploitation and enforcement, Gowling WLG works with clients on all facets of branding, including trademarks, designs, copyright, domain names, licensing and enforcement.",NULL,NULL,"<p>Your brands are the face of your organisation. They embody your reputation and reputation is everything. With over 100 years&#39; experience in the field, we understand the critical importance of your branding needs and deliver the highest level of practical, creative advice.</p>    <p>From conception and development through to exploitation and enforcement, Gowling WLG works with clients on all facets of branding, including trademarks, designs, copyright, domain names, licensing and enforcement.</p>    <p>Directly through our offices in Canada, China and the UAE, as well as through our extensive network of trusted international associates, we expertly clear new marks, strategically manage local and international portfolios, and secure registered rights in a manner that is both commercially practical and cost-effective.</p>    <p>Our professionals offer you unparalleled experience in trademark and design enforcement, including opposition proceedings, infringement, cancellations and invalidations, passing off, dilution, anti-counterfeiting, trans-shipping and parallel import matters. We regularly appear before all levels of court in the UK, Europe,&nbsp;China and Canada, and manage and co-ordinate litigation in other jurisdictions.</p>    <p>Our industry expertise is boundless, and includes an array of both internationally famous and local brands covering everything from consumer goods to financial services.</p>    <p>Above all, we shape our service to match your needs. We don&#39;t take a one-size-fits-all approach, but work with you to tailor strategies and fee arrangements that best suit your business.</p>    <p>From helping startups devise a cost-effective protection strategy, to spearheading leading cases, to managing global trademark, design and copyright enforcement programs across multiple continents, you can be sure we have the experience to help you in the most appropriate way.</p>    <p>Our team serves as trusted advisers to some of the most valuable brands in the world and can assist you with all of your branding legal needs. Please get in touch with any member of our group to learn how we can help you.</p>  ",GWLG.Global,9ff8fd1a-c2f5-4084-b72e-4aa02fdf3312;41742f49-9549-47bb-ae1f-ab536cd5ba62,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{ECE09691-7479-40FB-B560-2AA2DF299B85}|{0F7EFD39-BFD4-424E-8E14-14E0CB550371}
177,/Services/Trademarks-Brands-Designs/Canada,en-GB,64009CDA-CB75-4394-9DDC-18BE69FB10B5,Canada,Canada,"Trademarks, brands and designs are key assets for any business in Canada. Developing a strategy, clearing use, obtaining registration, and ensuring effective protection and exploitation of these assets are essential components to your success.",NULL,NULL,"<p>Gowling WLG&#39;s internationally renowned, award-winning team of trademark professionals has a long-standing reputation as the go-to firm for organizations seeking trademark and branding advice, and is the largest group of its kind in Canada.</p>    <p>We consistently file more trademark applications and have more registrations under management than any other Canadian firm, which speaks to the experience and trust our clients have in us to deliver the highest level of practical, effective advice. We understand the challenges and opportunities of brand management, and apply legal expertise and commercial insight to your advantage.</p>    <h3>Industry-specific experience</h3>    <p>Our industry expertise is vast, and includes an array of global and local brands covering consumer goods, food and beverage, retail and professional services, chemical, manufacturing, technology, and financial services, among others. We also hold a deep understanding of the issues facing pharmaceutical brands, including clearance, regulatory approvals, look alike/sound alike issues, trans-shipping and online sales, and protection of get-up and infringement issues.</p>    <h3>Comprehensive brand strategy</h3>    <p>From conception and development through to exploitation and enforcement, our group has the necessary experience and expertise in all facets of branding, from trademarks through to designs, copyright, domain names, licensing and enforcement.</p>    <h3>Trademark clearance</h3>    <p>Whether locally, regionally or internationally, we can assist you in clearing the use and registration of new brands across all business spectrums.</p>    <h3>Trademark registration and portfolio management</h3>    <p>Directly through our offices in Canada and China, and through a network of trusted firms in other jurisdictions, we have the experience and tools to seek registration of your trademarks and manage your portfolio in a manner that&#39;s both commercially practical and cost-effective.</p>    <h3>Trademark enforcement and anti-counterfeiting</h3>    <p>We hold unparalleled experience in trademark enforcement, including opposition proceedings, infringement, passing off, dilution, anti-counterfeiting, trans-shipping and parallel import matters. We regularly appear before all levels of court in Canada, and manage and co-ordinate litigation files in international jurisdictions.</p>    <h3>Domain name disputes</h3>    <p>We have extensive experience acting on domain name disputes before WIPO, Nominet and CIRA.</p>    <h3>Licensing and IP transactional work</h3>    <p>We can work with you to maximize brand exploitation through licensing and sales, and will collaborate seamlessly with our corporate colleagues on your IP and due diligence issues in multifaceted commercial transactions.</p>  ",GWLG.Canada,41742f49-9549-47bb-ae1f-ab536cd5ba62,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,1,t-white,"<p>Trademarks, brands and designs are key assets for any business in Canada. Developing a strategy, clearing use, obtaining registration, and ensuring effective protection and exploitation of these assets are essential components to your success.</p>  ",Featured Insights,37b28cae-8d86-4c41-9781-7c7325793a1e;1da06675-e144-4c65-a227-68de6d3cdcc1;cfc94d26-a70d-452d-a4e7-e96cf15a6a5e;9f1463af-53ed-4366-ae1d-b604d1c97ab5,"View all Trademarks, Brands & Designs articles",Learn more,"<p>We partner with many of the world&#39;s leading organizations to create and execute thoughtful, effective branding strategies. Please get in touch with <a href=""~/en/people/?page=1&amp;services=604&amp;locations=GWLG.Canada"" target=""_blank"">any member of our group</a> to learn how we can help you.</p>  ",Sign-up for insights,"<p><a href=""~/en/footer/updates/subscribe-canada/"">Subscribe to our <em>IP Report</em> newsletter</a> to receive our updates on the latest IP developments that matter most to you.</p>  ",34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,/en/insights-resources/?page=1&locations=GWLG.Canada&services=604,NULL,{0F7EFD39-BFD4-424E-8E14-14E0CB550371}
178,/Services/Transfer-Pricing-Competent-Authority/Canada,en-GB,442C0060-2FD2-488F-829F-54BCE1BD0AB2,Canada,Canada,"Gowling WLG is the go-to choice for multinational corporations seeking expert advice, innovative solutions and responsive documentation relating to a wide range of transfer pricing issues.",NULL,NULL,"<p>Gowling WLG is the go-to choice for multinational corporations seeking expert advice, innovative solutions and responsive documentation relating to a wide range of transfer pricing issues.</p>    <p>In conjunction with Gowling WLG&#39;s Tax Group, our Transfer Pricing Group helps organizations optimize their global tax position and reduce exposure to unfavourable audit assessments through in-depth tax planning and innovative implementation strategies.</p>    <p>Our transfer pricing team has worked with the Canada Revenue Agency for over 20 years, and has first-hand experience in the analysis and negotiation of hundreds of competent authority requests. We&#39;ve also advised on advanced pricing agreements with competent authorities around the world.</p>    <h3>Strategic solutions that mitigate risk</h3>    <p>We can help you develop a strategic approach to transfer pricing. Our solutions will minimize your exposure to fiscal burdens, such as double taxation and non-compliance penalties.</p>    <p>The services we offer include:</p>    <ul>   <li>Planning and advisory services</li>   <li>Comprehensive risk assessments</li>   <li>Review of existing policies and documentation</li>   <li>Preparing contemporaneous documentation - functional and economic analyses</li>   <li>Representation during the audit process</li>   <li>Appeals representation</li>   <li>Competent authority representation to relieve double taxation</li>   <li>Preparing and negotiating APAs</li>   <li>Confidential discussions with non-resident related parties</li>   <li>Adapting foreign transfer pricing studies to Canadian rules</li>   <li>Valuation of intangibles</li>   <li>Cost contribution arrangements</li>   <li>Management fees and intragroup services</li>   <li>Identifying and advising on other international tax issues</li>  </ul>    <h3>Learn more</h3>    <p>To learn more about how we can support your transfer pricing needs, please <a href=""~/en/people/?page=1&amp;services=607&amp;locations=GWLG.Canada"" target=""_blank"">reach out to any member of our team</a>.</p>  ",GWLG.Canada,d0468a8c-0c81-431f-9b75-f04bbb8414bd,D1ECCE1D-AAF3-428A-8B29-3697DF36FCDE,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B87A2CE3-9DFE-415C-AEA1-C49AEF0E1D89}
181,/Services/White-Collar-Defence-Investigations/Canada,en-GB,1220DEC2-CC8C-4180-ACE7-D00C6A3C7488,Canada,Canada,Our White Collar Defence & Investigations Group brings together multijurisdictional professionals to minimize corruption risk and successfully represent corporations and individuals facing serious criminal or regulatory investigations and prosecutions.,NULL,NULL,"<p>To ensure compliance with complex laws, regulations and governance requirements - and to detect and prevent potential violations - businesses need the help of renowned legal problem-solvers and experienced investigators with national and international capabilities.</p>    <p>Our White Collar Defence &amp; Investigations Group brings together multijurisdictional professionals with the right combination of experience and expertise to minimize corruption risk and successfully represent corporations and individuals facing serious criminal or regulatory investigations and prosecutions.</p>    <h3>An experienced litigation team<strong> </strong></h3>    <p>With extensive experience defending corporations and individuals in significant white collar criminal and regulatory matters, our litigation expertise covers a full range of matters related to Canada&#39;s&nbsp;<em>Corruption of Foreign Public Officials Act</em>,&nbsp;<em>Competition Act</em>&nbsp;and&nbsp;<em>Criminal Code</em>, as well as security regulation. This expertise has been consistently recognized by&nbsp;<a href=""~/en/news/awards-recognition/2016/gowling-wlg-earns-42-listings-in-chambers-canada-2/""><em>Chambers Canada 2017</em></a>-2020, with the group and its leader,&nbsp;<a href=""~/en/people/glen-jennings/"">Glen Jennings</a>, ranked in the White-Collar Crime &amp; Government Investigations category.</p>    <h3>Effective bribery and corruption prevention</h3>    <p>To ensure compliance and uncover potential risks, we&#39;re well-equipped to design and implement comprehensive compliance programs and review your existing policies, procedures and controls. We also advise on - and help establish - whistle-blowing venues and the entire underlying process regime to support this key governance tool.</p>    <h3>Key crisis management and investigations strategies</h3>    <p>Whether we&#39;re conducting an internal investigation, managing a crisis or facilitating an external investigation, we&#39;ll offer key insight on milestones, remedial actions and communications strategies to help keep you on track and out of the spotlight.</p>    <h3>Business transactions - with no surprises</h3>    <p>We can provide expert due diligence, negotiate effective deals and structure tailored agreements to ensure your transactions don&#39;t hold any post-closing corruption surprises.</p>    <h3>Proactive training and education programs</h3>    <p>Taking a proactive approach to ethics and anti-corruption, we design and deliver comprehensive training programs to directors, management teams, employees, customers, suppliers and other business partners.</p>    <h3>In-depth governance, enterprise risk management and&nbsp;internal controls</h3>    <p>To strengthen and protect the integrity of your business, our team conducts rigorous risk assessments and develops in-depth governance frameworks that start at the board level and cascade down through your organization.</p>  ",GWLG.Canada,1af96e1d-70ea-4127-a64b-5aa72590536d,E3C87DB8-3809-4B15-864B-9A1AADCD1E81,NULL,0,1,t-white,"<h3>Government Investigations in Canada</h3>    <p>Almost every day, the media reports on another government investigation into corruption, bribery or collusion. In Canada, and around the world, regulators and enforcement agencies are taking a hard stand against improper or unethical business practices.</p>  ",NULL,NULL,NULL,Learn more,"<p>To find out how we can support your needs, please contact any member of our team.</p>  ",Stay connected,"<p><a href=""~/en/footer/updates/subscribe-canada/"">Sign up</a> to receive our White Collar Defence &amp; Investigations newsletter.</p>  ",f096817c-914a-48af-8a3e-0ade98d26dc6,NULL,NULL,{2DDD468E-4B8E-43DC-9888-109746A7D8E9}
182,/Services/Workplace-Pension-Reform/UK,en-GB,CD7B790F-497A-48A6-BBAE-3B97385B69F1,UK,UK,"Legal obligations for employers to provide pensions are now a reality for many organisations. Workplace pension reform (WPR) will affect all UK employers, irrespective of size or type of business.",NULL,NULL,"<p>Legal obligations for employers to provide pensions are now a reality for many organisations. Workplace pension reform (WPR) will affect all UK employers, irrespective of size or type of business.</p>    <p>For the first time, certain workers will have to be automatically enrolled into a pension scheme that meets the quality criteria and pay a minimum level of contributions. This obligation can have challenging and wide-ranging implications for businesses and failure to comply could mean stringent penalties.</p>    <p>Our <a href=""~/en/services/combined-human-resources-solutions/#uk"">Combined Human Resources Solutions team</a> can help businesses prepare, to remain compliant and manage auto-enrolment in an efficient, legally compliant and cost-effective way. We offer a unique combination of pensions, employment and HR law and understand the complex legal, HR, payroll and IT issues.</p>    <h3>A one-stop-shop for advice</h3>    <p>With the support of 70 dedicated employment and pensions experts behind us, we&#39;re ideally placed to advise on the implications of these landmark changes in pensions law for public and private sector employers and pension schemes, including:</p>    <ul>   <li>advising on the range of new duties that employers will have to comply with under the reforms</li>   <li>helping employers and pension schemes to implement the reforms in respect of existing and new pension provision</li>   <li>supporting on the administration issues employers and pension schemes will need to consider</li>   <li>helping businesses with administering new enrolment processes, paying for mandatory contributions and monitoring their workforces to ensure compliance with the new employer duties</li>  </ul>    <h3>Our clients</h3>    <p>We&#39;ve been the legal advisers of choice for many businesses needing to successfully comply with their automatic-enrolment duties, ranging from some of the largest retailers to international airlines and master trust providers.</p>    <p>We provided cutting edge pensions advice to the National Employment Savings Trust (NEST) to help it prepare for launch. NEST now has over one million members and provides thousands of employers with an automatic enrolment scheme.</p>    <p>Our team also worked with the HR, pensions and payroll teams at a top five supermarket to ensure the successful on-time introduction of a new auto-enrolment compliant cash balance scheme for 130,000 employees. This involved a new pension scheme being set up, along with a ground-breaking communication exercise encouraging the workforce to understand more about financial planning and saving for retirement. Team experience, including secondment at the DWP and NEST, gave the client clear advice as the legislation was unfolding.</p>    <h3>Online resources to help your organisation</h3>    <h4>The Pensions Regulator&#39;s guidance</h4>    <p>The Pensions Regulator has issued a series of <a href=""http://www.thepensionsregulator.gov.uk/employers/detailed-guidance.aspx"" target=""_blank"">detailed guidance notes on workplace pension reform</a> along with <a href=""http://www.thepensionsregulator.gov.uk/en/employers"" target=""_blank"">summaries for pension providers and employers</a>. The detailed guidance notes cover all aspects of workplace pension reform and are written in plain English and have practical examples.</p>    <h4>The Pensions Regulator&#39;s interactive tools</h4>    <p><a href=""http://www.thepensionsregulator.gov.uk/employers/your-step-by-step-guide-to-automatic-enrolment.aspx"" target=""_blank"">The Pensions Regulator&#39;s online tools</a> allow a user to quickly and easily identify an employer&#39;s staging date, the extent of employer duties in respect of their staff, the minimum amount an employer will have to pay for an individual staff member, and also provides an explanation of the process an employer will need to follow to automatically enrol its staff.</p>    <h4>The Department for Work and Pensions</h4>    <p>The DWP has produced a <a href=""http://www.gov.uk/workplace-pensions"" target=""_blank"">useful workplace pension reforms toolkit</a> which offers guidance and fact sheets and also case studies to show how individuals may be affected by the changes.</p>  ",GWLG.UK,a6b9248c-acc9-4e7b-847f-9e566931b8f9,33D70F43-FE64-4FE8-A74B-AE24F9E914DF,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C1F6D472-13F6-429E-93DE-723782732293}
183,/Services/Intellectual-Property-Law/China,en-GB,57C71014-40DF-43B2-9E1A-0927F9AB236C,China,China,"We provide rapid, strategic advice for IP filing and prosecution work in China. Our quality service is conducted on-the-ground on a daily basis, backed up by extensive local knowledge and a wide network of local patent and trademark attorneys.",NULL,NULL,"<p>In China, <abbr title=""intellectual property"">IP</abbr> infringement remains a strategic concern for many companies. We have years of experience working with local counsel and investigative agents. Our experts can work with you to overcome the challenges of doing business in China and achieve your business goals.</p>    <blockquote style=""text-align:center;"">  <p>[Gowling WLG] is trusted with the global <abbr title=""intellectual property"">IP</abbr> portfolios of many famous brands, which recognise the immense value of attorneys who can offer Chinese advice with a global perspective.<cite>World Trademark Review 1000</cite></p>  </blockquote>    <h2>Awards and accolades in China</h2>    <ul>   <li>&#39;China and SARS: China: Foreign&#39;, WTR 1000</li>  </ul>  ",GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013;bb6e4e98-2d11-42a4-a949-3c3e7a8225f0,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,"<p>Intellectual property (IP) should not just be a legal right but a valuable business asset. We understand the investment that goes into developing these assets appreciate how critical it is to keep your <abbr title=""intellectual property"">IP</abbr> protected and exploited to its full potential.</p>  ",NULL,70685c88-525c-4717-995d-7a784ac952db;9fd1344f-67b3-4b50-ae89-79e2dfe0d533,See more insights,Get to know us,"<p>Find out more about our award-winning work with our selection of case studies.</p>    <p><a class=""c-button-red"" href=""~/en/contact-us/"">View client work</a></p>  ",Contact us,"<p>Send us an email to tell us more about your <abbr property="""" title=""intellectual"">IP</abbr> query.</p>    <p><a class=""c-button-red"" href=""mailto:ipinfo@gowlingwlg.com"">Contact our IP team</a></p>  ",34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013|{E15A097F-C847-448B-9878-1702A07540D4}
184,/Services/Intellectual-Property-Law/UAE,en-GB,690E4C4F-0D5B-4996-ADA3-75CAD648A901,UAE,UAE,"Intellectual property (IP) protection in the Middle East can be costly, but not having the protection in place can cost you your business.",NULL,NULL,"<p>We understand that your IP needs never stop at the border &ndash; and neither do we. Our global IP platform enables us to support you wherever your commercial interests may lead you. Our industry expertise is vast, and includes an array of both internationally famous and local brands covering everything from consumer goods to financial services.</p>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">[Jon Parker&#39;s] ...management of the portfolios of top-drawer clients draws praise from all quarters.<cite>WTR 1000</cite></p>  </blockquote>    <h2>Awards and accolades in the UAE</h2>    <ul>   <li>Recommended experts (Jon Parker), <em>WTR 1000</em></li>   <li>Firms - UAE (Gold Tier), <em>WTR 1000</em></li>   <li>Trademarks (Jon Parker), <em>Managing IP Stars 2020</em></li>   <li>UAE (Jon Parker),&nbsp;<em>IAM Global Leaders 2020</em></li>   <li>Intellectual Property - UAE -&nbsp;Band 1 (Jon Parker), <em>Chambers and Partners</em></li>   <li>&#39;Middle East Firm&nbsp;to Watch&#39;, <em>MIP EMEA Awards 2019</em></li>  </ul>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944;dd727450-7a16-496e-85c6-f49662ae2c14,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,<p>Our team in the UAE has extensive experience in managing and developing large and complex IP portfolios. We provide expert commercial intellectual property (IP) advice alongside litigation and enforcement services in the MENA region.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}|dd727450-7a16-496e-85c6-f49662ae2c14
185,/Services/Intellectual-Property-Law/France,en-GB,A94B283C-5769-4B17-87BC-AA9AE56CB05E,France,France,"Our Paris IP team offers advice on litigation as well as a holistic service with pragmatic solutions for every sector. We can handle questions relating to competition and tax, and our advice often goes well beyond traditional IP issues.",NULL,NULL,"<p>We have a deep knowledge of French litigation procedures and the ability to handle complex Pan-European litigation and disputes. We take a pragmatic and strategic approach that pairs tailored legal solutions with commercially focused advice.</p>    <p>We have renowned experience in both contentious and non-contentious matters, both before the French courts and in the drafting and negotiating of contracts. Our team also has expertise in enforcing <abbr title=""intellectual property"">IP</abbr> rights worldwide, in particular in customs procedures. We offer a fully integrated service to assist you with all your <abbr title=""intellectual property"">IP</abbr> matters.</p>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The French base of Gowling WLG repeatedly proves its might on knotty contentious and transactional briefs... It considers itself akin to a boutique within a global law firm, leveraging international expertise while retaining flexibility and adapting to clients&#39; needs in real-time.<cite>IAM Patent 1000</cite></p>  </blockquote>    <h2>Awards and accolades in France</h2>    <ul>   <li>&#39;Litigation&#39;, <em>IAM Patent 1000 2020</em></li>   <li>&#39;Transactions&#39;, <em>IAM Patent 1000 2020</em></li>   <li>Trademarks (Céline Bey), <em>Managing IP Stars 2020</em></li>   <li>Silver Tier (Céline Bey), <em>IAM Patent 1000&nbsp;2020</em></li>  </ul>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3;c7845de1-72de-4e9d-bad4-859a8d00311c,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,<p>Your priorities and objectives are essential when it comes to protecting your intellectual property (IP) portfolio.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}|{405A6882-3B8C-40C3-9AB6-FDB671BF9A98}
186,/Services/Intellectual-Property-Law/Germany,en-GB,3F08F3BD-A144-404F-B81F-27876A123737,Germany,Germany,"By working with Gowling WLG, you can be sure that your patents, trademarks, brands, copyrights and other intangible assets are both secure and delivering on their potential.",NULL,NULL,"<p>From clearance and strategic portfolio advice through to exploitation and enforcement, we advise on all aspects of branding including trademarks, designs, copyright and domain names. We also advise on licensing as well as product piracy, enforcements and patent infringement.</p>    <h2>Awards and accolades in Germany</h2>    <ul>   <li>Trademarks (Manuela Finger), <em>Managing IP Stars 2020</em></li>   <li>Recommended Lawyer (Manuela Finger), <em>WTR 1000</em></li>  </ul>  ",GWLG.Germany,bc89113e-4507-4a3d-812a-d8d8a9d9573e;573d1455-ea45-45db-a443-9b45707a1db2,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,"<p>When it comes to your intellectual property (IP), you need to be able to act quickly to protect your assets while also playing the long game to maximise your revenue. Our team in Germany is passionate about using <abbr title=""intellectual property"">IP</abbr> to add value to your business by developing <abbr title=""intellectual property"">IP</abbr> exploitation strategies and enforcing rights against infringers.</p>  ",NULL,NULL,NULL,Sign up for updates,"<p>Subscribe to our <em><abbr title=""intellectual property"">IP</abbr> Report</em> newsletter to receive our updates on the latest <abbr title=""intellectual property"">IP</abbr> developments that matter most to you.</p>    <p><a class=""c-button-red"" href=""~/en/footer/updates/"">Sign up for IP Report</a></p>  ",Contact us,"<p>Send us an email to tell us more about your <abbr property="""" title=""intellectual"">IP</abbr> query.</p>    <p><a class=""c-button-red"" href=""mailto:ipinfo@gowlingwlg.com"">Contact our IP team</a></p>    <p>&nbsp;</p>  ",34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,bc89113e-4507-4a3d-812a-d8d8a9d9573e|573d1455-ea45-45db-a443-9b45707a1db2
191,/Services/Commercial/Germany,en-GB,D8926684-379C-4EB8-8B4B-B1500AAEB1E1,Germany,Germany,"Choose Gowling WLG for all your commercial law needs. Responsive and approachable, we're committed to delivering premium legal services at a reasonable cost.",NULL,NULL,"<p>Your business relies on a range of agreements and contracts that allow you to operate efficiently and profitably across the supply chain. With global markets becoming increasingly regulated, getting these agreements right is crucial to your success.</p>    <p>What you need are sector-focused lawyers who don&#39;t just understand the small print but see the bigger picture when it comes to what you&#39;re trying to achieve.</p>    <p>That&#39;s why you should choose Gowling WLG for all your commercial law needs. Responsive and approachable, we&#39;re committed to delivering premium legal services at a reasonable cost.</p>    <p>With offices in Stuttgart and Munich, we know how to steer clients - including those who have little experience doing business in Germany - through their projects successfully. Our lawyers hold comprehensive experience in private practice and have also worked in-house, giving us a broad understanding of how corporates work and what they expect.</p>    <p>Whether you need assistance on a negotiation or a complex contractual scheme, we&#39;re just as comfortable in managing your high-volume, day-to-day contracting requirements as we are in handling your specific projects.</p>    <p>You can count on us for timely, high-quality legal advice relating to matters such as research and development, engineering, tech, procurement and supply chain, tooling, manufacturing, sales, merchandising, advertising and marketing, e-commerce, logistics, sponsorship, property and facility management.</p>    <p>Our specialty areas include commercial work relating to:</p>    <ul>   <li>Nomination letters and agreements</li>   <li>Procurement contracts and (framework) supply agreements</li>   <li>Quality assurance agreements</li>   <li>Warranty agreements</li>   <li>Interface agreements and &quot;back-to-back&quot;&nbsp;(supply chain)</li>   <li>Logistic and consignment stock agreements</li>   <li>Tool contracts and tool transfer agreements</li>   <li>Agency, distribution and franchise agreements</li>   <li>General terms and conditions, CISG, Incoterms</li>   <li>Cross-border business</li>   <li>Business process outsourcing</li>   <li>Distribution schemes</li>   <li>Product roll-outs</li>  </ul>    <p>We have particular in-depth industry expertise in the automotive sector - a natural fit, with Stuttgart being home to numerous major auto manufacturers and suppliers. Our specialty areas include commercial work relating to manufacturing, tooling, engineering and tech.</p>    <h3>Learn more</h3>    <p>For a hands-on, partner-led service that offers you quality in every aspect, then get in touch and let&#39;s talk about how we can help you achieve more.</p>  ",GWLG.Germany,bc89113e-4507-4a3d-812a-d8d8a9d9573e;199becac-9a85-4082-aec2-fd0969f7da84;ff81fa74-4ef9-46a0-af1d-21f561ef7806,549CBE28-F188-44CD-85C0-0F4E23A23817,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,bc89113e-4507-4a3d-812a-d8d8a9d9573e|{B836F4F7-16A5-4E2A-9907-2341BCC30D29}|{B4C93BD5-071C-4E85-8099-C1A161D90259}
194,/Services/Corporate/Germany,en-GB,CEC7557E-DA53-4715-B890-C5F471607F54,Germany,Germany,"At Gowling WLG, we know how to steer international clients within Germany and beyond through the challenges associated with German corporate law.",NULL,NULL,"<p>Corporate law is practised the world over. But laws are different in every jurisdiction. How can you be sure that you&#39;re both complying with the law and getting the best deal when operating in Germany?</p>    <p>You need lawyers who understand both the local law and the global landscape.</p>    <p>At Gowling WLG, we know how to steer international clients within Germany and beyond through the challenges associated with German corporate law. With on-the-ground corporate teams in Stuttgart and Munich, we&#39;re also tightly integrated with our offices across Europe, Canada, the Middle East and Asia.</p>    <p>Many of our lawyers have worked in-house, and truly understand the needs and demands of corporates. We&#39;re committed to giving you our total focus through a service that&#39;s both hands-on and partner-led.</p>    <p>We regularly support major listed (domestic and foreign) companies, medium-sized businesses and financial investors. We advise many of the family-controlled Mittelstand companies, many of which are true hidden champions.</p>    <p>We&#39;re also sector experts, particularly in the automotive field: Stuttgart is home to many industry titans, including hundreds of suppliers and big players in other related sectors, such as mechanical engineering, tech, banking and insurance. We understand the unique requirements of our clients in their respective sectors.</p>    <p>Areas we cover include:</p>    <ul>   <li>Change of management</li>   <li>Compliance</li>   <li>Corporate governance</li>   <li>Corporate secretarial</li>   <li>General management and supervisory board matters</li>   <li>Reorganisations and restructurings</li>   <li>Shareholders&#39; meetings</li>   <li>Succession</li>  </ul>    <h3>Learn more</h3>    <p>If you want lawyers with the cultural awareness and legal skills required to give you the service you need in Germany, then let&#39;s work together.</p>  ",GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,CA126CE8-3692-45E8-A1BE-AA0808B0C37E,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
196,/Services/Banking-Finance/UAE,en-GB,EBD83957-CA9F-4E53-A66D-ABCF7F67B45D,UAE,UAE,The Gowling WLG team can provide the security you need when it comes to financing your growth and expansion.,NULL,NULL,"<p>Security: it matters a great deal to you - particularly when it comes to financing your growth and expansion. In an uncertain world, where technology is disrupting the way everything is done, you need to ensure that you have the finances in place to meet your ambitions across the Middle East region.</p>    <p>The Gowling WLG team can provide you with that security. We&#39;ve been based in Dubai for more than 10 years, and have a full grasp of the area&#39;s financial landscape. Our professionals possess a detailed understanding of your competitive, regulatory and legislative environments, as well as their emerging economic trends.</p>    <p>Drawing from the expertise of our cross-disciplinary industry groups, our team will always innovate on your behalf to offer creative solutions that are tailored to your specific goals.</p>    <p>We offer a wide range of finance services and collaborate with our corporate team to advise on equity, hedge fund and venture capital financing, as well as facility agreements.</p>    <p>In addition, we have an unmatched breadth of experience in the essential areas of Islamic, conventional and project financing. You can count on our on-the-ground advice to be efficient and, above all, accurate.</p>    <h3>Learn more</h3>    <p>If you&#39;re looking for a team with a commercial and pragmatic approach that&#39;s fully embedded in the Middle East, then we&#39;re fully primed to offer you the security you demand.</p>  ",GWLG.UAEDubai,NULL,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,
197,/Services/Banking-Finance/France,en-GB,E1625BAF-124D-4BDC-96BC-7A351351637E,France,France,"With renowned expertise in finance transactions and regulations, our team in Paris can provide you with professional advice quickly and cost effectively.",NULL,NULL,"<p>Risk: it&#39;s inherent in any financial transaction. Whether you&#39;re a borrower or a lender, you need to properly manage that risk. Doing so requires lawyers who can prepare loan and security documentation that addresses the issues common to all credit transactions and those specific to your project. The legal advice you receive needs to be exhaustive, fair and consistent with market practice.</p>    <p>You should also expect your lawyers to find innovative solutions for reducing transaction costs and, as the case may be, increasing cross-collateralisation to the greatest extent permitted by law -&nbsp;all in an efficient manner and at a fair price.</p>    <p>That&#39;s why hiring Gowling WLG as your law firm makes good sense. With renowned expertise in finance transactions and regulations, our team in Paris can provide you with professional advice quickly and cost effectively.</p>    <p>Our in-depth experience allows us to advise on all sides of a transaction. The scope of our practice encompasses:</p>    <ul>   <li>Real estate finance</li>   <li>Project finance</li>   <li>Corporate acquisition finance</li>   <li>Trade finance</li>   <li>Asset finance</li>   <li>Account receivable finance</li>   <li>Banking and financial regulations</li>   <li>Insolvency and pre-insolvency proceedings</li>   <li>Bonds</li>   <li>Guarantees and security interests</li>   <li>Legal opinions</li>  </ul>    <p>Our team comprises lawyers who speak both French and English and are qualified in multiple jurisdictions. Our banking and finance team is fully integrated with our M&amp;A and real estate transactional groups around the world.</p>    <p>With Gowling WLG, you&#39;ll find all the expertise and international experience you need in one place.</p>    <h3>Learn more</h3>    <p>Let&#39;s take the risk out of your transactions. Work with us to meet the financial challenges you face.</p>  ",GWLG.France,33b93abb-1bb6-434b-85c6-f63c9b0dd4eb;b0a7b3fc-4cb7-4be6-926c-4b5e385f1bb1;a1b0cd26-4d64-4ff5-9932-c95e2a1e8a51,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{CE60BA36-414C-479C-B9BD-DF95AABD4949}|{DE8EAE4B-1D4C-4084-B1C9-A00852B8C205}|{6C605183-41D8-4795-84D2-96B89CF31531}
199,/Services/Real-Estate/UAE,en-GB,32F18749-8510-4F56-AAD0-FABEA877BA34,UAE,UAE,"We offer legal support in all areas of real estate, from development and investment to litigation. In particular, we offer in-depth knowledge of the logistics sector across the Gulf and wider Middle East.",NULL,NULL,"<p>Our award winning Real Estate Group is the thirteenth largest real estate practice globally and one of the UK&#39;s largest real estate practices. With more than 290 lawyers working across 15 specialist areas, we offer a full service across the whole of the UK real estate sector, acting for high net worth individuals, public and private companies, institutions and the public sector alike.</p>    <h3>Our services include:</h3>    <ul>   <li>Planning</li>   <li>Industrial &amp; logistics</li>   <li>Transport-related development</li>   <li>Offices</li>   <li>Student accommodation</li>   <li>Build to Rent</li>   <li>Retail</li>   <li>Regeneration</li>   <li>Assisted living</li>   <li>Affordable housing</li>   <li>Corporate real estate/Corporate occupiers</li>   <li>Commercial leasing</li>   <li>Hotels</li>   <li>Investment</li>   <li>Asset management</li>   <li>Real Estate litigation</li>  </ul>    <p>The team can offer advice on an array of issues including: the tax implications of purchasing UK property, acquisition structures as well as guiding you through the exchange and completion process.</p>    <p>We also provide the following additional services:</p>    <ul>   <li>Real estate operations in France through our Paris office and other European jurisdictions via our network of top Real Estate firms across Europe.</li>   <li>Real estate operations in Canada through our Canadian offices.</li>  </ul>    <p>Anuj Johar is a UK qualified solicitor and Senior Associate in our Real Estate Group based in our Dubai office. Please contact Anuj for any further real estate queries on +971 (0)4 437 5100.</p>  ",GWLG.UAEDubai,eac73bdc-a467-487e-b9f1-8597c0787be1,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,<p>The UK Real Estate market has always been an attractive place for investment for international investors.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{14A5D5E0-BCC1-40EF-B0ED-8B9D13E03407}
200,/Services/Real-Estate/France,en-GB,021CF0F7-8188-42ED-9136-3576E305E478,France,France,Global real estate law firm with real estate lawyers offering a wide range of services for all stages of a project's lifecycle and across multiple asset classes.,NULL,NULL,"<p>When navigating the complexities of the real estate market, you need advice from real estate lawyers who understand both local markets and international matters. Our team in Paris offers a combination on in-depth market knowledge and agile expertise to advise clients across the real estate market.</p>    <p>We regularly work with private and institutional investors, developers, investment funds, asset managers and service providers on their investments and related services in France and overseas. If you operate globally, you will benefit from our excellent reputation for complex cross-border transactions. Whatever the project, we deliver quality that enables you to derive maximum value from your deals and resolve your transactions quickly and efficiently.</p>    <h3>Real Estate Services in France</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/mergers-acquisitions/#france"">Acquisition and disposal</a> (asset deals and share deals)</li>   <li>Asset management</li>   <li>Construction</li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Environmental law</a></li>   <li>Leasing</li>   <li><a href=""~/en/services/commercial-litigation/#global"">Litigation</a></li>   <li>Planning</li>   <li>Real estate <a href=""~/en/services/banking-finance/#france"">finance</a></li>   <li>Real estate <a href=""~/en/services/tax/#france"">tax</a></li>  </ul>    <h3>Recognition in France</h3>    <p>A host of legal awards and directories have recognised or team for its work in real estate. In Paris, <em>The Legal 500</em> has recognised Sylvain Canard-Volland as a &#39;Rising Star&#39;.</p>    <h3>Meet the team in France</h3>    <h4><a href=""~/en/people/sylvain-canard-volland/""><strong>Sylvain Canard-Volland</strong></a><br />  Partner</h4>    <h4><a href=""~/en/people/julie-vuagnoux/""><strong>Julie Vuagnoux</strong></a><br />  Of Counsel</h4>  ",GWLG.France,7380956f-4124-4a63-9447-0b55994ab100;3283b963-3314-4ded-90fe-50ab013e55d9,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{156406F2-9809-4D4B-A29E-4AE884429447}|{E8CDFE4E-59C7-4505-9136-0ADF1348F9F1}
202,/Services/Competition-Law-Antitrust/France,en-GB,C5878543-7924-44AE-BBC3-6342039B2A09,France,France,"Our team of lawyers in France combines advanced business knowledge with in-depth expertise, and can advise you on the management of commercial risks inherent in your national, European or international activities.",NULL,NULL,"<p>When it comes to competition and antitrust law, you want to avoid litigation. Disputes can be costly, time consuming and, ultimately, a threat to your business. This means you need lawyers who can help you to avoid the risk of prosecution. At the same time, they must be able to defend you during high-stakes, complex litigation.</p>    <p>Our team of lawyers in France combines advanced business knowledge with in-depth expertise, and can advise you on the management of commercial risks inherent in your national, European or international activities.</p>    <p>Areas we can guide you on include:</p>    <ul>   <li>Anti-competitive practices and restrictions on competition</li>   <li>Arbitration and alternative dispute resolution</li>   <li>Business concentrations</li>   <li>Compliance programmes</li>   <li>Domestic and multijurisdictional litigation</li>   <li>Inspections by the Direction générale de la concurrence, de la consommation et de la répression des fraudes (DGCCRF)</li>   <li>Management of commercial relations</li>   <li>Negotiations and drafting of contracts</li>   <li>Relations between suppliers and distributors</li>   <li>Risk management</li>   <li>Negotiation with the French competition authority (ADLC)</li>  </ul>    <p>Our team also assists in creating effective contracts - from contract formation to the termination of established business relations. We can help you develop strategies or solutions that will help you avoid litigation or come out on top during high-stakes disputes.</p>    <p>In short, we&#39;ll look out for your best interests at all times.</p>    <h3>Learn more</h3>    <p>For the experience, strength and understanding of French law that you need, Gowling WLG offers you an outstanding service. It would be great to hear from you.</p>  ",GWLG.France,ee86af6e-e106-4e72-8f7b-f812bed8d711;c7845de1-72de-4e9d-bad4-859a8d00311c,B3F9FCE6-B77C-4E15-978E-EAA664C609DC,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{06B40793-0442-4531-AD63-1BE29FF66358}|{405A6882-3B8C-40C3-9AB6-FDB671BF9A98}
204,/Services/Mergers-Acquisitions/France,en-GB,C94A1902-4249-4DF0-B68E-18F12B002327,France,France,"Our corporate team consists of lawyers who cover all areas of M&A, venture capital and private equity, from big projects to day-to-day challenges.",NULL,NULL,"<h3>M&amp;A and private equity</h3>    <p>Corporate activity has reached high levels in recent years. When you&#39;re looking to deliver your business strategy though activities such as mergers and acquisitions (M&amp;A) and investment, you need advice that&#39;s technically sound, risk-aware and, in many cases, relevant to multiple jurisdictions.</p>    <p>At Gowling WLG, we have immense experience of handling these issues for our clients. Our corporate team consists of lawyers who cover all areas of M&amp;A, venture capital and private equity, from big projects to day-to-day challenges.</p>    <p>Our typical approach involves getting familiar with your unique work environment and corporate culture, and then finding innovative solutions that are aligned with your vision. Whatever your needs, we&#39;ll help you research and negotiate with industrial or financial partners, and work with you to implement strategies that are optimised for success.</p>    <h3>Full service</h3>    <p>We cover all areas of M&amp;A, assisting with negotiations and liaising with purchasers and sellers, administrative and supervisory authorities, financial and corporate partners, and carrying out full-service legal work for French and cross-border deals. Our team is backed by other specialists from both our Paris office and our other locations around the world.</p>    <p>Our lawyers have regularly advised on listed securities issues, public to private transactions and flotations, either on the company or sponsor side. When it comes to private equity, we provide legal advice on all aspects of transactions on a daily basis.</p>    <h3>Learn more</h3>    <p>Whether you&#39;re a French or international business, we can ensure that your corporate dealings are a great success. Talk to our experts today.</p>  ",GWLG.France,627cfa87-baaa-4187-a801-0423872978b6;f2155dcb-a964-4080-b470-ef41ab438fbf,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{CAF923E3-BC30-4770-AE72-4DF2A5FDD7F1}|{812F4EFB-DAB9-4CD1-8C6C-53D850103492}
205,/Services/Mergers-Acquisitions/Germany,en-GB,96D1434B-7187-40CE-8614-F1BC6F4AF6B6,Germany,Germany,"Through our close ties with partner law firms, we offer services across all areas of law related to M&A. The depth of our capabilities means that we're always able to assign the right lawyers at the right level to the right job. ",NULL,NULL,"<p>Mergers and acquisitions can be the best way to drive the growth of your business. But in today&#39;s business environment, M&amp;A deals are more complicated than ever before.</p>    <p>Cross-border matters are often a part of any transaction. To handle the complexities of these deals, you require lawyers who have strong expertise in the sector in which you operate -&nbsp;and have an equally strong grasp of the bigger international picture.</p>    <p>At Gowling WLG, we offer you first-class legal service whenever and wherever you need it throughout the M&amp;A process. We do this by combining in-depth sector knowledge with an unparalleled understanding of the scope of services required in your transaction.</p>    <p>We regularly support major listed (domestic and foreign) companies, medium-sized businesses and financial investors. We advise a number of the family-controlled Mittelstand companies, many of which are true hidden champions.</p>    <h3>The bigger picture</h3>    <p>Our offices in Stuttgart and Munich have&nbsp;significant strengths and expertise in all things international and cross-border. We&#39;re comfortable working in multiple jurisdictions and cultures, and have a great deal of success in steering international clients - many of whom have never done business in Germany - through projects in the country and beyond.</p>    <p>Through our close ties with partner law firms, we offer services across all areas of law related to M&amp;A. The depth of our capabilities means that we&#39;re always able to assign the right lawyers at the right level to the right job. Partner-led and sector-focused, we&#39;ve worked in-house, and know how corporates operate and what they expect.</p>    <p>Areas we cover include:</p>    <ul>   <li>Anti-trust and merger control</li>   <li>Commercial</li>   <li>Corporate</li>   <li>Employment and pension</li>   <li>Export control</li>   <li>Finance</li>  </ul>    <p>We have particular sector expertise, which is not limited to the automotive sector. Our other specialty areas include manufacturing, tooling, engineering and tech.</p>    <h3>Learn more</h3>    <p>Let us guide you through your complex M&amp;A transactions in Germany and beyond. Our team is ready and able to advise you, so let&#39;s start a conversation.</p>  ",GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
214,/Services/Litigation-Dispute-Resolution/Singapore,en-GB,CB9A26B5-4A6D-4B5B-9B19-40886FBFCA29,Singapore,Singapore,,NULL,NULL,<p>Singapore</p>  ,GWLG.Singapore,NULL,82475447-1CF2-4AA7-9A23-24E5B1A7B3BD,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
217,/Services/Employment-Labour-Equalities/Overview,en-GB,3C1D61D7-332B-4E89-8DCF-5CC81D24EE88,Overview,Overview,"You want to know how to get to where you want to be with an acceptable level of risk for your organisation. We bring that knowledge and our creativity to the employment service we provide, giving you advice that is timely, focused and practical.",~/getmedia/c242e2ba-f02a-401c-b34e-2fcf3670782f/employment_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p>Whether you&#39;re a major multinational, a not-for-profit organisation or a small company, managing people can be difficult. We understand that you not only want to be an employer who knows how to comply with a multitude of rules and regulations - you also want to be an employer who attracts top talent and motivates people to exceed their potential and drive your business forward.</p>    <p>At Gowling WLG, we know that you don&#39;t want to be told why you can&#39;t do something. You want to know how to get to where you want to be with an acceptable level of risk for your organisation. We bring that knowledge and our creativity to the employment service we provide, giving you advice that is timely, focused and practical. We won&#39;t sit on the fence, but will give you our clear view of the options and our recommended way to achieve your objectives.</p>    <p>Managing professionals is different from managing sales people or production workers. Our experience and industry knowledge allows us to tailor our advice to your workforce. From complex Court and Tribunal litigation to challenging change management, restructuring and business protection, our broad, proactive approach allows us to work alongside you as trusted advisers to minimise risks and maximise opportunities in your workforce. We work to build strong and lasting relationships with you, and are able to use our shared corporate knowledge of your organisation to deliver real value for money.</p>    <p>We also have a global view. Our international client base provides us with the experience and expertise to understand human resources law in many jurisdictions. We&#39;ve developed the ability to compare, contrast and explain the differences in local laws in a way that allows our clients to apply their expertise in our local context.</p>    <p>Our services include strategic advice, hands-on support and in-depth training on:</p>    <ul>   <li>Alternate work arrangements</li>   <li>Development and implementation of workplace policies</li>   <li>Dispute resolution (litigation, mediation and arbitration)</li>   <li>Disability accommodation and adjustments</li>   <li>Drug and alcohol testing</li>   <li>Employment contracts/agreements</li>   <li>Equal pay</li>   <li>Executive compensation</li>   <li>Health and safety</li>   <li>Human rights and equalities issues</li>   <li>Independent contractor agreements and employment status issues</li>   <li>Managing absenteeism</li>   <li>Managing acquired and successor rights in reorganisations/outsourcing/M&amp;A</li>   <li>Managing whistle-blowing in the workplace</li>   <li>Performance management</li>   <li>Pre-terminations</li>   <li>Privacy and data protection</li>   <li>Recruitment and hiring protocols</li>   <li>Restrictive covenants and business protection</li>   <li>Unfair and wrongful dismissal (<a href=""~/en/services/employment-labour-equalities/#uk"">England &amp; Wales unfair and wrongful dismissal claims - pricing models</a>)</li>   <li>Union organisation, certification, organising and industrial action disputes</li>   <li>Workplace tort claims</li>   <li>Workplace investigations</li>  </ul>    <p>We genuinely care about the health and well-being of your business. We know workplace issues don&#39;t always arise between the hours of 9 and 5: they often can&#39;t wait until tomorrow, and need urgent attention and decisive action. We work at your pace to ensure you receive the support you need to thrive.</p>    <p>To talk to the people who can help your people achieve more, please contact any member of our team.</p>  ",GWLG.Global,799cf040-59c7-4986-825a-e4b909364823;64c86b79-7dc4-409e-8260-f244f6349dc3,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{E105E1FE-58D4-44E0-B32B-4367806B155E}|{17790B52-E739-4337-9D61-2932CE6785D0}
218,/Services/Employment-Labour-Equalities/Canada,en-GB,211BC4B6-48B4-4A24-B9BC-200471496D8B,Canada,Canada,"People are critical to the success of your business - and they're just as critical to our success. At Gowling WLG, our team of 40+ employment and labour law professionals can help you manage your people so you can capitalize on opportunities and achieve your goals.",NULL,NULL,"<p>Whether you&#39;re a multinational company, a mid-sized operation managing its growth or a local entrepreneur just starting out, we have the specialized knowledge and skills to help you manage your people and resolve your legal issues.</p>    <p>Our comprehensive experience spans a range of key sectors, including manufacturing, energy and natural resources, financial services, life sciences, media and advertising, professional services, projects and infrastructure, retail, technology and many more.</p>    <p>With lawyers in business centres across Canada, we hold in-depth expertise in areas that are essential to your commercial success, such as:</p>    <ul>   <li>Employment law</li>   <li>Labour relations</li>   <li>Health and safety</li>   <li>Human rights and discrimination</li>   <li>Workplace privacy</li>   <li>Absence management</li>   <li>Disability accommodation</li>   <li>Workers&#39; compensation</li>   <li>M&amp;A</li>   <li>Termination advice and strategy</li>   <li>Employment litigation and alternate dispute resolution</li>  </ul>    <p>We also work closely with our firm colleagues in the areas of immigration, health &amp; safety, pensions, tax, privacy and capital markets to ensure you benefit from the value of our combined knowledge, experience and skills.</p>    <h3>Timely advice, seamless service</h3>    <p>Workplace issues often require urgent attention and decisive action. They don&#39;t always arise between 9 and 5, and they often can&#39;t wait until tomorrow. Our top-tier team understands your need for timely and practical advice, and works at your pace to ensure you always receive the support you need -&nbsp;right when you need it.</p>    <p>And we don&#39;t just work for you. We&#39;ll work with you by becoming a part of your team, improving your capacity to manage your workplace issues. Regardless of whether you&#39;re based in a single location or in multiple regions, we&#39;ll collaborate seamlessly with you, drawing on the collective strength of our group to develop practical solutions for your organization.</p>    <h3>Industry leadership</h3>    <p>Our labour and employment success stories speak for themselves:</p>    <ul>   <li>We represented the government of the province of Québec in its negotiation of multiple collective agreements involving 500,000 civil servants.</li>   <li>We act for a leading financial institution defending a class action lawsuit brought for payment of overtime pay.</li>   <li>We act for a global retailer defending a high-profile, $1 million+ claim involving allegations of discrimination and harassment.</li>   <li>Every day, we negotiate favourable resolutions to disputes, and help our clients avoid the time, cost, and effort of litigation.</li>   <li>We also help our clients expand their businesses through acquisitions by advising on the myriad issues that arise in complex deals.</li>   <li>Our clients speak highly of us and refer us to their colleagues in other businesses. To us, there is no greater compliment.</li>  </ul>    <p>Gowling WLG is home to more than 40 employment and labour professionals - among them, some of the most highly ranked lawyers by leading national and international rating agencies, including <em>Chambers Global </em>and <em>The Best Lawyers in Canada</em>. We deliver unrivalled expertise and service to our clients. But what we also offer them is a competitive advantage.</p>    <h3>Learn more</h3>    <p>As a leader in our industry, our team shares one goal: to make sure you&#39;re a leader in yours. To find out how we can help your business succeed, please <a href=""~/en/people/?page=1&amp;services=651&amp;locations=GWLG.Canada"" target=""_blank"">contact any member of our group</a>.</p>  ",GWLG.Canada,64c86b79-7dc4-409e-8260-f244f6349dc3,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,"<p>People are critical to the success of your business -&nbsp;and they&#39;re just as critical to our success. At Gowling WLG, our team of 40+ employment and labour law professionals can help you manage your people so you can capitalize on opportunities and achieve your goals.</p>    <p>From hiring practices, complying with legislation and managing challenges, to ending the relationship or protecting your assets, we know the law - and we also understand the employment and labour challenges facing your business.</p>  ",Featured Insights,879a73ef-009d-4018-b451-f73a695e9e3c;406ad1b6-8af9-4a17-a2fb-99d36d26c541;56d04dc2-f0a7-4e45-9fb5-138bc353e7ac;79d7fc0a-0afa-44c4-95d3-66b15fa398ca,"View all Employment, Labour & Equalities articles",NULL,NULL,NULL,NULL,05d3106d-8d6c-42a8-adf9-c2b433237aef;34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,/en/insights-resources/?page=1&locations=GWLG.Canada&services=651,NULL,{17790B52-E739-4337-9D61-2932CE6785D0}
219,/Services/Employment-Labour-Equalities/France,en-GB,865ED966-4B2E-408F-A5F9-7D93800B6AC7,France,France,"Our team has expertise in all aspects of human resources matters, working hard to provide minimal risk through straightforward, honest answers. We always seek the most pragmatic solutions in the most complex legal cases for both French and international clients.",NULL,NULL,"<p>The French employment landscape has become increasingly complex - which means that you need clear, pragmatic legal advice rather than just facts and uncertainties. You want your employment lawyers to provide a definitive view of the options and a recommended plan to achieve your objectives.</p>    <p>Meet Gowling WLG. Our team has expertise in all aspects of human resources matters, working hard to provide minimal risk through straightforward, honest answers. We always seek the most pragmatic solutions in the most complex legal cases for both French and international clients.</p>    <p>Areas we cover include:</p>    <ul>   <li>Collective work relationships</li>   <li>Compensation policy</li>   <li>Consideration of employment-related data</li>   <li>Individual work relationships</li>   <li>Financial risk amendments</li>   <li>Labour disputes</li>   <li>Mergers and acquisitions (M&amp;A) and transfer of undertakings</li>   <li>Migration and international mobility</li>   <li>Restructuring</li>  </ul>    <p>You&#39;ll find that we&#39;re always keen to offer concrete solutions adapted to the wide variety of situations that you face.</p>    <h3>Learn more</h3>    <p>We want to build a strong, long-term working relationship with you to deliver the first-class service you expect. Get in touch and let&#39;s started.</p>  ",GWLG.France,2e9cce1d-5a73-4414-8896-ae63d0ac29d1,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{6D0676DC-0865-4A4E-8580-9C5655094D14}
220,/Services/Employment-Labour-Equalities/UK,en-GB,BA26CFA6-5275-480D-B83F-ADBC69F5DF6B,UK,UK,"When it comes to employment law, the best option is always to avoid problems in the first place. Our team will make sure you do that, and we will also help you to reduce risk while ensuring managers act more commercially.",~/getmedia/c242e2ba-f02a-401c-b34e-2fcf3670782f/employment_desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p><strong>The world of employment law is complex and ever changing. While the best option is to avoid problems before they arise, we understand that a pro-active approach is not always possible. Our employment lawyers will work with you to reduce risk and plan for the future, while also advising you during difficult times.</strong></p>    <p>From the everyday to the strategic, our team advises businesses and organisations on the full range of employment issues. Operating as one unit from our offices in Birmingham and London, our team has a standalone reputation when it comes to employment law in the UK. As part of a full-service law firm, we also regularly collaborate with lawyers from across our other practice areas such as tax, health and safety, and financial services regulation.</p>    <p>We have worked on a multitude of time-sensitive, large and complex projects, investigations and restructuring exercises while also delivering business as usual operational HR, advisory and litigation advice.</p>    <p>Our contentious experience covers High Court business protection litigation through to complex discrimination and whistleblowing tribunal claims, with experience in equal pay litigation, agency worker disputes, national minimum wage compliance and holiday pay.</p>    <p class=""has-text-large""><strong>As the needs of employers continue to evolve and environmental, social and governance (ESG) issues become increasingly important, there are key areas where we can offer particular employment law advice.</strong><br />  {^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fEmployment-labour-equalities%2fKey-areas-UK-Employment%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Key+areas|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Our full suite of employment law services</h3>    <ul>   <li>Agency and atypical worker structures</li>   <li>Business protection</li>   <li>Business re-structurings and redundancies</li>   <li>Discrimination in employment</li>   <li>Discrimination in goods and services</li>   <li>Employee investigations</li>   <li>Employment and equalities law training</li>   <li>Employment benefits/bonuses</li>   <li>Employment litigation</li>   <li>Employment terminations (including senior executives)</li>   <li>On-boarding and managing employees in the workplace</li>   <li>Structural pay issues (equal pay / National Minimum Wage Compliance / Agency worker rights)</li>   <li>Trade unions and worker representation</li>   <li>Whistleblowing and ESG</li>   <li>Senior Managers Regime compliance</li>  </ul>    <p><strong>For the defence of a claim for unfair or wrongful dismissal in an Employment Tribunal please see our <a href=""~/getmedia/5422d5b8-0e4e-4f26-a043-ce280ee48313/unfair-and-wrongful-dismissal-claims-gowling-wlg.pdf.xml"" target=""_blank"">example pricing model document</a>.</strong></p>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Gowling WLG really knows our business and makes sure it delivers its advice according to our needs.<cite>The Legal 500</cite></p>  </blockquote>    <p>Working with UK and international private and public sector clients, we have in-depth experience across a range of sectors including manufacturing, <a href=""~/en/sectors/real-estate/global/"">real estate</a>, <a href=""~/en/sectors/life-sciences/global/"">life sciences</a>, <a href=""~/en/sectors/financial-institutions-services/global/"">financial services</a>, <a href=""~/en/sectors/tech/global/"">technology</a>, <a href=""~/en/sectors/retail-leisure-hotels/global/"">retail</a>, <a href=""~/en/sectors/aviation-aerospace-defence/global/"">aviation</a>, <a href=""~/en/services/living/social-housing/"">social housing</a>, <a href=""~/en/sectors/health-care/global/"">healthcare</a> and central and local <a href=""~/en/sectors/government-contracting-public-sector/global/"">government</a>. Some of our past and current projects include:</p>    <p>{^widget|(copy1)Advising+on+all+workforce+issues%2c+including+updating+template+employment+contracts+and+HR+policies%2c+providing+TUPE+and+contractor+continuity+advice+and+advising+on+the+social+values+charter.|(bghover2)colour-lightred|(copy3)Advised+on+its+%c2%a37+million+investment+into+Chemigraphic%2c+the+leading+provider+of+Electronic+Manufacturing+Services+(EMS).+|(copy2)Acted+in+relation+to+a+complex+and+multi-faceted+employment+tribunal+claim+brought+by+members+of+its+Public+Health+team.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)BIRMINGHAM+2022+COMMONWEALTH+GAMES|(headline3)NVM+PRIVATE+EQUITY|(headline2)LONDON+BOROUGH+OF+CROYDON|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-darkblue|(width)|(height)^}</p>    <h3>Recognition and reputation</h3>    <p>We are proud to be recognised as a highly respected team in the legal and wider business market. Our team achieved the top <em>The Legal 500</em> and<em> Chambers &amp; Partners </em>rankings for Employment in the Midlands in 2021, as well as National Leaders outside London for the latter.</p>    <p>We regularly host our own seminars and events, as well as for the Industrial Law Society (ILS) and Employment Lawyers Association (ELA). The <abbr title=""Industrial Law Society"">ILS</abbr> is a &#39;not-for-profit&#39; charity; set up to promote the understanding of employment law and industrial relations and to stimulate debate in these fields. Members of our team also sit on the LexisPSL Employment Editorial Board and the Birmingham Law Society Employment Law Committee.</p>    <h3>Contact our team</h3>    <p>With extensive knowledge of the intricacies of employment law across the full spectrum of issues, we offer creative, decisive, and trusted legal advice that gives clients access to tried and tested strategies, unique in-house experience, and innovative solutions. <strong>Contact our Employment team today for further guidance and support.</strong></p>    <p><a href=""~/en/people/jane-fielding/#panel-button1""><strong>Jane Fielding</strong></a></p>    <p>Partner, Head of Employment, Labour &amp; Equalities</p>  ",GWLG.UK,799cf040-59c7-4986-825a-e4b909364823,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,c0791066-b1ca-48e4-be8b-0086d6051b23;ad81e3ca-373e-4cd9-b75d-e5f9b53af1ab;ace3d5d8-9af3-469f-ae66-1ce2cfbabc35;e37fc7fb-2cf9-453c-a841-9f228d86f66e,NULL,NULL,{E105E1FE-58D4-44E0-B32B-4367806B155E}
221,/Services/Advertising-Product-Regulatory/Canada,fr-CA,FF3D9631-208D-4458-ABEA-CCF069BE4F19,Canada,Canada,"Fort de l'effectif le plus grand, le plus réputé et le plus expérimenté en son genre au Canada, le groupe Publicité et réglementation des produits de Gowling WLG sait ce que requiert la création d'une bonne publicité. ",NULL,NULL,"<p>Une publicité réussie demande une grande perspicacité et une créativité débridée. Elle exige aussi une équipe de professionnels juridiques tout aussi perspicaces et créatifs, qui peuvent s&#39;assurer que vos campagnes respectent les contraintes de l&#39;industrie et les exigences juridiques, tout en préservant l&#39;intégrité et l&#39;originalité de vos idées.</p>    <p>Fort de l&#39;effectif le plus grand, le plus réputé et le plus expérimenté en son genre au Canada, le groupe Publicité et réglementation des produits de Gowling WLG sait ce que requiert la création d&#39;une bonne publicité. Conseillers de confiance de bon nombre des agences de publicité, de médias et d&#39;annonceurs de premier plan au Canada, les membres de notre équipe allient une compréhension exceptionnelle de l&#39;industrie et une expertise inégalée pour offrir au client toute une gamme de solutions efficaces et novatrices.</p>    <p>Qu&#39;il s&#39;agisse de révision de textes publicitaires ou d&#39;implication dans les différends commerciaux, nos clients apprécient notre expérience concrète et notre démarche à la fois souple et efficace dans la résolution des problèmes particuliers auxquels ils font face. Notre équipe d&#39;experts juridiques chevronnés et au fait de l&#39;industrie collabore étroitement avec tous nos clients, afin de comprendre leurs objectifs, de déterminer les risques propres à leur situation et d&#39;y apporter des solutions sur mesure et fiables qui respectent et favorisent le processus créatif.</p>    <p>Partie intégrante de l&#39;un des principaux cabinets canadiens multiservices, le groupe Publicité, marketing et affaires réglementaires de Gowlings est fréquemment sollicité pour faciliter les lancements de produits nationaux ainsi que l&#39;adaptation des publicités et des emballages de sociétés américaines ou étrangères désireuses de percer le marché canadien.</p>    <h3>Une expérience qui a fait ses preuves</h3>    <p>Nos professionnels sont régulièrement invités à titre de conférenciers dans le mode entier et ont co-écrit le manuel canadien de référence, Advertising and Marketing Law in Canada, publié par LexisNexis. Le groupe exploite sa connaissance poussée du milieu en jetant un regard éclairant sur certaines décisions juridiques, législations et politiques canadiennes récentes dans le bulletin électronique gratuit AdBytes (<a href=""~/fr/footer/updates/subscribe-canada"">s&#39;abonner</a>).</p>    <p>Huit avocats dont les noms figurent dans le Best Lawyers in Canada 2016 à titre de spécialistes du droit de la publicité (y compris Avocat de l&#39;année en droit de la publicité et du marketing de Toronto), avocats les plus fréquemment et souvent recommandés par le Canadian Legal Lexpert Directory : nos professionnels sont reconnus par certaines des publications juridiques les plus respectées du monde entier.</p>  ",GWLG.Canada,bdad9de9-7ee2-4acc-bee7-e9e5bae30ed7,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3455D157-67A8-4B92-B9EA-583111483AE2}
222,/Services/Banking-Finance/Canada,fr-CA,0A7C6C5F-FAC1-4378-8A80-C0741AB98BB3,Canada,Canada,"Les acteurs importants de la finance doivent pouvoir compter sur un cabinet qui possède une expérience exceptionnelle, un savoir éprouvé et une connaissance approfondie du marché en constante évolution dans lequel ils exercent leurs activités. ",NULL,NULL,"<p>Les acteurs importants de la finance doivent pouvoir compter sur un cabinet qui possède une expérience exceptionnelle, un savoir éprouvé et une connaissance approfondie du marché en constante évolution dans lequel ils exercent leurs activités. Notre clientèle comprend plus de cinquante banques et compagnies d&#39;assurances nationales et internationales qui font appel à nos professionnels pour mener à bien une vaste gamme d&#39;opérations, d&#39;une valeur allant de un million à trente-quatre milliards de dollars.</p>    <p>Nous adaptons nos services aux besoins particuliers de nos clients. Nous sommes à la fine pointe des tendances et de l&#39;évolution de la législation dans les différents secteurs d&#39;activité qu&#39;ils servent. Travaillant au sein d&#39;équipes clients multidisciplinaires, nos professionnels mettent en commun leurs connaissances sur les différentes juridictions pour élaborer des solutions ciblées et originales, qui répondent aux exigences d&#39;un marché financier évolutif et complexe.</p>    <p>Outre notre vaste expertise, nous offrons à nos clients des services hautement spécialisés et novateurs. Nos programmes de gestion de portefeuille, par exemple, permettent de réduire les risques pour le client en assumant l&#39;entière responsabilité de tous les aspects des différents types de réclamations, notamment les réclamations d&#39;assurance et les actions pour défaut de paiement d&#39;hypothèques ou d&#39;emprunts. Nous possédons une connaissance approfondie des mécanismes de financement non traditionnels, comme le prêt mezzanine, le financement reposant sur les actifs ou par créance subordonnée et le financement du débiteur-exploitant (financement DIP). Nous proposons aussi des services en matière de réglementation du secteur financier pour aider nos clients à obtenir les autorisations nécessaires et à s&#39;assurer que leurs opérations respectent les exigences réglementaires de tous les ordres de gouvernement canadien.</p>    <p>Mettant à profit son envergure nationale et son réseau diversifié, notre équipe est en mesure de donner des conseils pratiques et avisés sur le marché canadien. Nous collaborons fréquemment avec des sociétés américaines et internationales établies au Canada, afin de les aider à maximiser leurs occasions d&rsquo;affaires tout en réduisant les risques.</p>    <p>Grâce à notre connaissance approfondie du paysage concurrentiel et des environnements réglementaire et législatif canadiens, ainsi qu&#39;à notre expérience pratique à l&#39;échelle nationale et internationale, nous offrons une gamme complète de services dont:</p>    <ul>   <li>Le financement reposant sur les actifs</li>   <li>L&#39;emprunt obligataire / la dette publique</li>   <li>Le crédit aux particuliers et les cartes</li>   <li>L&#39;assurance commerciale</li>   <li>La restructuration d&#39;entreprise et de la dette</li>   <li>Les transactions nationales et transfrontalières</li>   <li>Les prêts à vue et exécution des conditions</li>   <li>Les fusions et les acquisitions de sociétés en difficulté</li>   <li>Le droit du travail et de l&#39;emploi</li>   <li>L&#39;insolvabilité et les restructurations</li>   <li>Les litiges en procédures d&rsquo;insolvabilité</li>   <li>La location</li>   <li>Le financement de projets</li>   <li>Les prêts immobiliers</li>   <li>Les mises sous séquestre, les faillites et les procédures de mise à exécution afférentes</li>   <li>Les contrats de renégociation de prêts et de garanties</li>   <li>Les prêts principaux garantis et non garantis</li>   <li>Le financement conforme à la Shari&#39;a</li>   <li>Les créances subordonnées, les prêts mezzanines et les créances de deuxième rang</li>   <li>Les transactions de consortiums, de groupes et de coentreprises</li>   <li>Le droit fiscal</li>   <li>Le financement commercial</li>  </ul>  ",GWLG.Canada,45042386-e87e-4fa2-8f87-101784526d0a,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
223,/Services/Banking-Finance/Overview,fr-CA,DD89078C-5C98-4A59-B70A-9564AF5C998F,Aperçu,Aperçu,"Dans le monde bancaire, la confiance prime avant tout et pour aller de l’avant d’un pas sûr, vous avez besoin de l’assurance que seule peut procurer une équipe de juristes ayant un cumul de succès et habituée à conseiller les principaux acteurs mondiaux de la finance. ",NULL,NULL,"<p>Dans le monde bancaire, la confiance prime avant tout et pour aller de l&rsquo;avant d&rsquo;un pas sûr, vous avez besoin de l&rsquo;assurance que seule peut procurer une équipe de juristes ayant un cumul de succès et habituée à conseiller les principaux acteurs mondiaux de la finance.</p>    <p>Gowling&nbsp;WLG est une équipe sur laquelle vous pouvez compter pour obtenir des conseils bancaires pratiques et avisés du point de vue commercial. Nous aidons plusieurs des grandes banques mondiales à gérer les opérations les plus sophistiquées de façon efficiente et efficace.</p>    <p>Vous pouvez vous fier à une équipe qui conseille de nombreuses institutions financières mondiales et grand public en Europe, en Asie et en Amérique du Nord où les cinq&nbsp;plus grandes banques canadiennes font appel à nos services.</p>    <p>Bien établis dans des bureaux situés dans les principaux centres financiers ainsi que dans des centres mondiaux de prestation de services à moindres coûts, nous fournissons des conseils sur le terrain et des gains en matière d&rsquo;efficacité. Nous innoverons toujours en votre nom, en nous appuyant sur l&rsquo;expertise de nos groupes sectoriels multidisciplinaires afin d&rsquo;offrir des solutions créatives et pratiques adaptées à vos objectifs spécifiques. Nos professionnels connaissent bien vos concurrents, les environnements réglementaires et législatifs et les tendances économiques émergentes.</p>    <p>En retenant les services de Gowling&nbsp;WLG, vous travaillerez avec certains des principaux acteurs du droit bancaire. Notre équipe de spécialistes en réglementation possède une vaste expérience du secteur financier et institutionnel, tandis que notre équipe spécialisée en financement par emprunt entreprend des projets financiers particulièrement axés sur les secteurs de l&rsquo;énergie et de l&rsquo;infrastructure. Nous sommes aussi des chefs de file en matière d&rsquo;exigences bancaires du secteur automobile.</p>    <p>Nous offrons une gamme complète de services bancaires, notamment en matière de&nbsp;:</p>    <ul>   <li>Capital d&rsquo;investissement</li>   <li>Capital de risque, fonds spéculatifs et opérations de banque d&rsquo;affaires</li>   <li>Financement à effet de levier et d&rsquo;acquisition&nbsp;</li>   <li>Financement automobile</li>   <li>Financement commercial</li>   <li>Financement de première qualité</li>   <li>Financement de projet</li>   <li>Financement par émission d&rsquo;obligations et de dérivés</li>   <li>Financement par emprunt</li>   <li>Lettres de crédit et ententes de garantie</li>   <li>Litiges</li>   <li>Marchés de capitaux et dérivés</li>   <li>Marchés de capitaux propres</li>   <li>Prêts garantis et non garantis</li>   <li>Prêts immobiliers</li>   <li>Prêts subordonnés, prêts mezzanines et prêts de deuxième rang</li>   <li>Prêts syndiqués</li>   <li>Prix de transfert</li>   <li>Procédures de rappel de prêt et de réalisation</li>   <li>Réglementation dans les secteurs bancaire et institutionnel</li>   <li>Réglementation financière</li>   <li>Services bancaires aux entreprises</li>   <li>Services bancaires généraux et prêts aux entreprises</li>   <li>Technologie financière (fintech)</li>   <li>Titres garantis par actifs et ententes d&rsquo;affacturage</li>   <li>Transactions nationales et transfrontalières</li>   <li>Transactions/opérations bancaires</li>  </ul>    <p>Vous accordez de l&rsquo;importance au service à la clientèle? Nous aussi. Nous mettons en place des équipes spécifiques pour chacun de nos principaux clients bancaires et nous encourageons l&rsquo;adoption de programmes de détachement chez ces derniers.</p>    <p>Gowling&nbsp;WLG est une équipe qui comprend bien votre univers juridique d&rsquo;affaires. N&rsquo;hésitez pas à communiquer avec nous pour discuter des moyens par lesquels nous pouvons vous aider.</p>  ",GWLG.Global,45042386-e87e-4fa2-8f87-101784526d0a;b2b3de7a-f860-4024-b95f-ea25cf063893,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}|{F08710E4-1845-4B15-8141-8AA2021598DC}
225,/Services/Banking-Litigation/Canada,fr-CA,1FCC8C53-6863-414B-9D5E-F284BCDBAA1C,Canada,Canada,"Faisant partie des équipes de ce type les plus solides et les plus diversifiées au Canada, le groupe de litige bancaire de Gowling WLG possède une longue et remarquable histoire de litiges en justice pour le compte de clients de services d’entreprise et de services financiers.",NULL,NULL,"<p>La complexité et la variété de problèmes auxquels font face les banques et autres institutions financières sont considérables. Alors qu&#39;il est de plus en plus ardu de naviguer les méandres de l&#39;industrie et de la réglementation financières, il vous faut une équipe de litige possédant de solides connaissances juridiques et une compréhension approfondie des développements juridiques récents pour régler avec succès vos différends financiers.</p>    <p>Le groupe Litige bancaire de Gowling WLG, l&#39;un des plus chevronnés et diversifiés au Canada, possède une impressionnante feuille de route. Notre équipe a représenté avec succès la plupart des banques de l&#39;annexe I du Canada de même que d&#39;importantes sociétés canadiennes et autres participants de l&#39;industrie financière - des banques étrangères aux sociétés de fiducie, en passant par les intermédiaires d&#39;assurance et les courtiers en valeurs mobilières, jusqu&#39;aux fonds de pension et aux organismes de réglementation gouvernementaux.</p>    <p>Notre expertise en fait de litige bancaire comprend</p>    <ul>   <li>Le litige en services bancaires de détail, y compris les différends aux termes de la Loi sur les banques et de la Loi sur les lettres de change</li>   <li>Les recours civils contre les fraudes et le recouvrement en cas de fraudes internationales</li>   <li>Les recours collectifs, y compris les questions d&#39;emploi et de cartes de crédit</li>   <li>La réalisation de droits hypothécaires</li>   <li>Les différends contractuels</li>   <li>Les litiges en valeurs mobilières, y compris les recours collectifs</li>   <li>Les différends réglementaires, y compris les enquêtes de l&#39;Organisme canadien de réglementation du commerce des valeurs mobilières (OCRCVM) et du Centre d&#39;analyse des opérations et déclarations financières du Canada (CANAFE)</li>   <li>La responsabilité des courtiers en placements et en valeurs mobilières</li>  </ul>    <h3>Une équipe sans pareil en litige bancaire</h3>    <p>Notre groupe comprend des professionnels ayant déjà occupé des rôles clés au gouvernement, tels que sous-commissaire principal du Bureau de la concurrence Canada, procureur adjoint de la Couronne, et des postes de premier plan dans plusieurs Directions (de la réglementation des personnes et des compagnies inscrites ainsi que de la conformité et du financement des sociétés) et Unités mixtes (délit d&#39;initiés/manipulation du marché) de la Commission des valeurs mobilières de l&#39;Ontario (CVMO) et au sein de l&#39;Autorité des marchés financiers (AMF). Notre groupe comprend également des professionnels de la réglementation financière qui ont agi à titre d&#39;avocats-conseils à l&#39;interne à la Banque du Canada, ainsi qu&#39;en tant que coauteurs de l&#39;ouvrage Annotated Bank Act de 2015.</p>    <p>Ces avocats ont non seulement acquis une expertise approfondie de la réglementation financière complexe qui touche vos affaires et votre industrie, ils ont aussi tissé des liens solides avec des organismes gouvernementaux (p.ex., la CVMO, le BSIF, l&#39;OCRCVM, la MFDA, le Bureau de la concurrence Canada, la SEC et l&#39;AMF) - des avantages dont bénéficient directement nos clients.</p>    <h3>Une compétence reconnue</h3>    <p>Régulièrement classés parmi les meilleurs avocats plaidants au Canada, les membres de notre équipe de litige bancaire sont reconnus pour leurs capacités à trouver des solutions créatives aux différends qui touchent leurs clients. Notre expertise a été fréquemment reconnue par des répertoires juridiques prestigieux (y compris Chambers, Lexpert, Best Lawyers et Benchmark Canada) dans des domaines comme la résolution de différends, le droit bancaire et la finance, les litiges en droit des sociétés et en droit commercial, les enquêtes et le droit pénal des affaires, le droit des valeurs mobilières, le droit de l&#39;emploi et les recours collectifs. Ces classements témoignent de notre approche axée sur les résultats et de notre aptitude exceptionnelle à comprendre les besoins d&#39;affaires complexes de votre entreprise.</p>    <h3>Une approche collaborative</h3>    <p>Nos avocats plaidants œuvrent en étroite collaboration avec le groupe Institutions financières et services de Gowling WLG. Qu&#39;il s&#39;agisse de recours collectifs multiterritoriaux en valeurs mobilières, de réclamations pour congédiement injustifié de conseillers en placements, ou d&#39;assurer la conformité aux lois contre le blanchiment d&#39;argent (LBC), gérer des dossiers de recouvrement liés à des fraudes internationales ou traiter des différends contractuels à enjeux élevés, nos professionnels ont agi en tant qu&#39;avocats principaux dans plusieurs des plus importants et récents dossiers de droit bancaire et de réglementation du Canada. Nous œuvrons comme une seule et même équipe afin de vous assurer les meilleurs résultats.</p>    <p>Par exemple, notre équipe a récemment eu gain de cause pour le compte d&#39;une banque de l&#39;annexe I du Canada dans le cadre d&#39;une poursuite de multimillions de dollars à l&#39;encontre d&#39;anciens employés pour manquement à des obligations fiduciaires et détournement d&#39;occasions favorables pour l&#39;entreprise. Dans un autre dossier, notre équipe a uni ses forces pour défendre avec succès une série d&#39;institutions financières dans le cadre d&#39;une réclamation de 20 millions $ qui alléguait des manquements à des obligations fiduciaires quant à l&#39;administration d&#39;une fiducie successorale.</p>    <h3>Des rôles clés dans l&#39;industrie</h3>    <p>Les membres de notre équipe occupent des postes de direction dans l&#39;industrie de la réglementation et de la conformité, dont le Comité consultatif des valeurs mobilières de la CVMO, l&#39;Association sur l&#39;accès et la protection de l&#39;information, et l&#39;Institut des administrateurs de sociétés. Nous sommes aussi souvent invités à prononcer des conférences sur les questions de conformité lors d&#39;importants colloques de l&#39;industrie, y compris la Conférence de l&#39;OCRCVM sur la conformité. Ces postes clés permettent à nos professionnels de mieux vous servir en demeurant au fait des dernières tendances en matière de litige au sein de l&#39;industrie financière.</p>    <h3>Une valeur accrue et des résultats probants</h3>    <p>En travaillant avec nous, vous pourrez aussi tirer profit de notre plate-forme interne de gestion de projets juridiques, Avantage pratique [update name]. En assurant une gestion cohérente de la portée, des coûts, des tâches et des ressources liés à votre dossier, nous aidons à ce que la progression de ce dernier se fasse dans le respect de l&#39;échéancier et du budget. Nous sommes également à même de réduire les coûts et d&#39;assurer l&#39;efficacité au moyen de notre outil de recherche juridique et de précédents en litige, Go.Plead&trade;, lequel a été élaboré et est alimenté par notre équipe.</p>    <p>Nous pouvons vous aider. N&#39;hésitez pas à <a href=""~/fr/people?page=1&amp;services=275&amp;locations=GWLG.Canada"" target=""_blank"">communiquer avec n&#39;importe quel membre de notre équipe</a> pour de plus amples détails.</p>  ",GWLG.Canada,0dea1395-883b-4534-a606-1a943c240748,4E4B575A-899D-4F37-8949-57BBC621534A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C91BBD3A-7B3F-4EC3-80C2-0CDDBD90686A}
226,/Services/Capital-Markets/Canada,fr-CA,30F453BB-67DA-418D-8A5F-6CB06C85ECD2,Canada,Canada,"Qu'il s'agisse d'entrer en Bourse ou de conserver votre inscription à la cote, ou bien de rechercher ou de procurer du financement, vous avez besoin de conseils juridiques fiables de la part d'avocats chevronnés qui possèdent une expérience pertinente et qui savent comment s'y prendre.",NULL,NULL,"<p>Qu&#39;il s&#39;agisse d&#39;entrer en Bourse ou de conserver votre inscription à la cote, ou bien de rechercher ou de procurer du financement, vous avez besoin de conseils juridiques fiables de la part d&#39;avocats chevronnés qui possèdent une expérience pertinente et qui savent comment s&#39;y prendre.</p>    <p>Chez Gowling WLG, nous sommes forts d&#39;une vaste expérience en projets de financement et&nbsp;représentation de participants aux marchés financiers canadiens et étrangers, et nous tirons une grande fierté de ce que nous aidons nos clients à accomplir.</p>    <p>Nous sommes tout à fait conscients des aspects uniques de votre entreprise et nous prenons le temps de bien cerner vos objectifs. De plus, nous savons que le contrôle des coûts, une prévisibilité accrue et l&#39;évitement des risques sont essentiels à la réussite de vos projets. C&#39;est pourquoi, dans le cadre de vos transactions, nous adoptons une approche qui tient compte de votre budget : nous mettons en œuvre des ententes efficaces en matière d&#39;honoraires, offrons des taux avantageux et prévoyons les risques et les coûts pour que votre tiriez le meilleur de votre investissement en frais juridiques.</p>    <p>Nous proposons aussi des outils personnalisés pour favoriser votre réussite. Mentionnons notre approche novatrice en gestion de projets juridiques, GPJ Pratique, qui permet de gérer sans heurt la portée, les coûts, les tâches et les ressources associés à votre dossier, de façon à mener votre projet à bien dans le respect de vos délais et de votre budget.</p>    <p>Nos services liés aux marchés financiers comprennent des conseils juridiques pratiques et stratégiques sur ce qui suit :</p>    <ul>   <li>Activisme des intervenants</li>   <li>Autres opérations de financement de&nbsp;sociétés, dont les placements privés, les modes alternatifs de&nbsp;financement et le financement transfrontalier</li>   <li>Création de sociétés de capital de démarrage et transactions admissibles connexes</li>   <li>Émissions publiques, dont les prises fermes et les reclassements</li>   <li>Inscription en Bourse, dont les inscriptions multiples sur des Bourses étrangères</li>   <li>Opérations de restructuration&nbsp;du capital</li>   <li>Opérations portant sur les titres d&#39;emprunt et les titres de participation</li>   <li>Représentation auprès d&#39;organismes de réglementation des valeurs mobilières et d&#39;intervenants des marchés boursiers</li>   <li>Vérification diligente</li>  </ul>    <p>Nous conseillons des sociétés cotées en Bourse et des sociétés privées, dont leurs conseils d&#39;administration et leurs comités spéciaux, des investisseurs, des conseillers financiers, des agents et des preneurs fermes.</p>    <p>En plus de donner des conseils sur la conformité aux exigences de la réglementation des valeurs mobilières et des marchés boursiers, nous vous informerons de manière proactive sur les nouvelles tendances quant aux obligations de divulgation, à la gouvernance d&#39;entreprise et aux obligations des administrateurs. Nous tenons le haut du pavé en ce qui concerne l&#39;évolution de la réglementation des marchés financiers au Canada et nous y contribuons grandement.</p>    <p>Notre équipe est particulièrement reconnue pour sa vaste expérience à l&#39;échelle internationale, ayant géré des opérations de financement au nom de sociétés menant leurs activités dans de nombreux pays de l&#39;Europe, de la Russie et de la Communauté des États indépendants, de l&#39;Asie, des Amériques, de l&#39;Afrique et de l&#39;Australasie.</p>    <h3>En savoir plus</h3>    <p>En faisant affaire avec nous, vous bénéficierez d&#39;un service personnalisé offert par une équipe de spécialistes qui s&#39;intéressent réellement à votre entreprise et à sa réussite. <a href=""~/fr/people?page=1&amp;services=277&amp;locations=GWLG.Canada"" target=""_blank"">Communiquez avec un membre de notre équipe</a> pour savoir comment nous pouvons vous aider.</p>  ",GWLG.Canada,a2b7b2e1-b2ce-441b-8021-2c65bd258ef7,60BB1A30-82DE-4038-AA38-9B01A87215C6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F3420C43-8321-4BBF-A6E7-D2AA815C7420}
227,/Services/Charities-Not-for-Profits/Canada,fr-CA,0F5BB002-7069-42F0-8BCF-02FEAFF89509,Canada,Canada,"Si de nombreux clients de ce secteur se tournent vers notre équipe spécialisée, c'est qu'ils savent que notre réflexion stratégique et notre approche créative de la résolution de problème les aideront à y faire face.",NULL,NULL,"<p>Nous comprenons les nombreux défis qui se posent aux œuvres caritatives et aux organismes sans but lucratif, et nous connaissons leurs besoins. Si de nombreux clients de ce secteur se tournent vers notre équipe spécialisée, c&#39;est qu&#39;ils savent que notre réflexion stratégique et notre approche créative de la résolution de problème les aideront à y faire face.</p>    <h3>Nous partageons vos intérêts</h3>    <p>Notre expertise couvre toute la gamme des intérêts et des activités de nos clients, y compris les soins de santé, le développement international, les services sociaux, la protection de l&#39;environnement, les arts et la culture, l&#39;éducation et la religion.</p>    <p>Nous possédons une vaste expérience et collaborons avec plusieurs types d&#39;organismes sans but lucratif, parmi lesquels les organismes de bienfaisance, les entités étrangères, les associations communautaires, les organismes quasi-gouvernementaux, les clubs philanthropiques, les organismes religieux, les associations corporatives, les cercles de loisirs, les organisations engagées dans des initiatives conjointes avec des entreprises, et d&#39;autres organismes sans but lucratif, ainsi que de multiples groupes d&#39;intérêt spéciaux.</p>    <h3>Nous jouons un rôle actif dan nos collectivités</h3>    <p>Bon mbre des professionnels de Gowling WLG font don de leur temps et s&#39;engagent activement dans des organismes communautaires et de bienfaisance à titre de bénévoles, de conseillers principaux et d&#39;administrateurs, améliorant ainsi grandement les compétences individuelles et collectives du groupe.</p>    <p>Nous proposons un large éventail de services aux œuvres de bienfaisance et aux organismes sans but lucratif, et ce, dans tous les secteurs du droit, entre autres, la fiscalité, la propriété intellectuelle, le droit des affaires, le litige, l&#39;immobilier, l&#39;emploi et les questions de politique gouvernementale. Voici quelques-uns de ces services :</p>    <ul>   <li>La constitution et les demandes d&#39;enregistrement d&#39;un organisme de bienfaisance</li>   <li>Les structures d&#39;organismes internationaux et d&#39;organismes nationaux ayant des bureaux provinciaux et locaux</li>   <li>Les conseils sur les avantages et sur les aspects fiscaux de la création d&#39;un organisme de bienfaisance</li>   <li>La mise au point de solutions en matière de gouvernance pour des œuvres caritatives et des organismes sans but lucratif en situation complexe</li>   <li>Les dons structurés, les fondations, les collectes de fonds, les jeux de bienfaisance et le mécénat</li>   <li>La gestion du risque, la protection des biens et les problèmes d&#39;assurance</li>   <li>La gouvernance, les conflits d&#39;intérêts, la déontologie, et les questions de responsabilité des dirigeants</li>   <li>Le mécénat, l&#39;emprunt, le financement, l&#39;octroi de licence et les autres ententes</li>   <li>Les conseils aux organismes de bienfaisance canadiens œuvrant à l&#39;étranger</li>   <li>Les conseils aux organismes de bienfaisance étrangers œuvrant au Canada</li>  </ul>    <p>Nous donnons des conseils utiles et opportuns aux administrateurs et aux fiduciaires ainsi qu&#39;aux membres de la direction et aux représentants de tous les niveaux de gestion, en plus d&#39;assurer leur représentation. Nous prodiguons également de la formation continue aux membres de conseils, aux directeurs principaux et au personnel d&#39;organismes sans but lucratif et d&#39;œuvres de bienfaisance, soutenant ainsi leurs efforts pour défendre leurs politiques auprès des gouvernements et leurs stratégies à cet égard.</p>    <p>Quel que soit le défi relevé, nous ne considérons avoir atteint notre objectif que lorsque nos solutions dépassent les attentes de nos clients.</p>  ",GWLG.Canada,5a819d5f-4c09-4d15-b4e8-79f4aafbed10,8275EC85-9F76-4C4F-8774-D44AD01F4531,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{D901EEB1-C001-4692-934C-9A899B134FB8}
228,/Services/Chemicals/Canada,fr-CA,73FF5E62-A285-4710-8831-78F74CB8067B,Canada,Canada,La protection de l'environnement est au cœur des préoccupations; il est donc primordial que les entreprises connaissent les lois et les réglementations régissant l'importation ou la fabrication de produits chimiques ainsi que l'effet de ces derniers sur les humains et la planète.,NULL,NULL,"<p>La protection de l&#39;environnement est au cœur des préoccupations; il est donc primordial que les entreprises connaissent les lois et les réglementations régissant l&#39;importation ou la fabrication de produits chimiques ainsi que l&#39;effet de ces derniers sur les humains et la planète. Les produits chimiques doivent en effet se conformer à une panoplie d&#39;enjeux réglementaires, y compris ceux ayant trait à l&#39;impact sur l&#39;environnement de même qu&#39;à l&#39;élimination des substances en fin de cycle de vie.</p>    <p>Gowling WLG possède une des plus réputées pratiques en réglementation de l&#39;environnement du Canada relativement aux produits chimiques, aux produits à la consommation - y compris les médicaments et les produits de santé naturels -, aux cosmétiques, aux aliments, aux produits antiparasitaires et aux substances toxiques, ainsi qu&#39;aux questions environnementales y afférentes. Nous nous distinguons du reste parce que notre équipe réunit les plus talentueux professionnels de nos groupes spécialisés en réglementation et en publicité.</p>    <p>Nous avons des professionnels possédant une expertise spécialisée en produits chimiques dans tous nos bureaux au Canada. Gowling WLg veille à la pleine satisfaction des clients, grâce à sa prestation de solutions adaptées aux besoins de ces derniers.</p>    <p>Nos praticiens œuvrent de concert avec des sociétés de toutes les tailles en les guidant à toutes les étapes liées à la conformité réglementaire des produits dans plusieurs industries, y compris :</p>    <ul>   <li>Les produits chimiques</li>   <li>Les produits à la consommation</li>   <li>Les cosmétiques</li>   <li>Les médicaments</li>   <li>Les aliments</li>   <li>Les produits antiparasitaires</li>   <li>Les engrais</li>  </ul>    <p>Gowling WLG donne des conseils à toutes les étapes du cycle de commercialisation des produits, y compris la classification, la gestion des demandes de licences à l&#39;égard de produits auprès de Santé Canada ou d&#39;Environnement Canada, les enjeux suivant l&#39;octroi de licences, dont la protection et le respect des droits, les évaluations de risques, les stratégies afférentes au risque, de même que les obligations de production de rapport et de conservation de registres. Nous conseillons également les sociétés en ce qui a trait à l&#39;importation, à la fabrication, à l&#39;emballage et à l&#39;étiquetage de produits chimiques, et de tous les médicaments et produits de santé naturels. En ce qui a trait à ces derniers, nous examinons, dans le cadre de l&#39;examen du produit, chaque ingrédient particulier du produit (médicinal et non médicinal) afin de déterminer s&#39;il existe des enjeux réglementaires spécifiques à chacun des ingrédients.</p>    <p>Gowling WLG a agi et continue d&#39;agir pour le compte de fabricants, d&#39;importateurs, de transporteurs et d&#39;utilisateurs de produits chimiques relativement à des questions de réglementation provinciale et fédérale. Nous conseillons régulièrement des clients relativement à l&#39;enregistrement, à la fabrication, à l&#39;importation, à l&#39;utilisation et l&#39;élimination des substances.</p>    <h3>Mandats représentatifs</h3>    <ul>   <li>Nous avons représenté un client dans le cadre de l&#39;acquisition d&#39;une importante société de produits de consommation, une transaction qui comprenait l&#39;atteinte de la conformité aux exigences réglementaires canadiennes de ses produits. La vaste gamme de produits de consommation comprenait entre autres des produits antibactériens.</li>   <li>Une organisation non gouvernementale a fait appel à notre expertise en matière de révision et de rédaction législatives relativement à la rédaction de la nouvelle Loi sur les produits antiparasitaires.</li>   <li>Nous avons représenté les fabricants lors de la tenue de la toute première commission de révision en vertu de la Loi canadienne sur la protection de l&#39;environnement (1999).</li>   <li>Nous avons représenté des fabricants relativement aux inscriptions et aux annulations d&#39;inscription proposées en vertu de la Loi sur les produits antiparasitaires.</li>   <li>Nous avons obtenu des inscriptions pour de nouveaux produits aux termes de la Loi sur les engrais.</li>  </ul>    <p>Nous avons fourni des conseils en matière de réglementation et de publicité de cosmétiques à sept sociétés de cosmétiques figurant parmi les 20 plus importantes du monde, relativement à la vente de produits au Canada. Nous guidons nos clients afin que l&#39;étiquetage de leurs produits soit réussi et conforme aux exigences réglementaires canadiennes. Nous offrons nos conseils éclairés continus relativement à la conformité de certains ingrédients de produits &ndash; c&#39;est-à-dire en veillant à ce que les ingrédients en question respectent les normes de protection environnementale canadienne.</p>  ",GWLG.Canada,a7981dca-18b5-4064-b9ea-340d3fba1862,1E77F0A5-009E-4B72-A836-9C12A665A930,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}
229,/Services/Class-Actions/Canada,fr-CA,CF0C930A-C003-473B-A4C8-D1394B4B8DA7,Canada,Canada,"Gowling WLG est un chef de file dans le domaine de la défense des recours collectif. Reconnus par Chambers, Lexpert, Best Lawyers in Canada, Benchmark Canada et d'autres répertoires importants, nos avocats se distinguent par leur capacité à obtenir les meilleurs résultats en situation difficile.",NULL,NULL,"<p>Gowling WLG est un chef de file dans le domaine de la défense des recours collectif. Reconnus par Chambers, Lexpert, Best Lawyers in Canada, Benchmark Canada et d&#39;autres répertoires importants, nos avocats se distinguent par leur capacité à obtenir les meilleurs résultats en situation difficile.</p>    <h3>Voici comment nous pouvons vous aider</h3>    <p>Des avocats chevronnés en matière de recours collectif: Les avocats en recours collectifs de Gowling WLG ont défendu leurs clients dans le cadre de plus de 100 recours collectifs, dans l&#39;ensemble du Canada. Nous sommes des avocats plaidants d&#39;expérience et possédons de l&#39;expertise dans une multitude de domaines, dont les suivants :</p>    <ul>   <li>le droit des valeurs mobilières</li>   <li>le droit de la concurrence</li>   <li>le droit de l&#39;environnement</li>   <li>le droit de la responsabilité du fait des produits</li>   <li>le droit de la protection des consommateurs</li>   <li>le droit bancaire</li>  </ul>    <p><strong>Un succès qui parle de lui-même</strong> : Vous défendre face à un recours collectif ne doit pas forcément rimer avec coûts élevés, difficultés pour votre entreprise, ni atteinte à votre réputation. Nos avocats ont défendu leurs clients et obtenu d&#39;excellents résultats dans le cadre d&#39;affaires comptant parmi les plus risquées au pays. Nous avons remporté des victoires considérables en ce qui concerne l&#39;obtention du rejet de demandes d&#39;autorisation de recours collectif, l&#39;obtention du rejet sommaire de réclamations et, lorsqu&#39;il s&#39;agit de l&#39;option préférée par le client, la prompte négociation de règlements à l&#39;amiable comportant des conditions très favorables.</p>    <p><strong>Une approche collaborative </strong>: Nous travaillons avec vous afin d&#39;élaborer une stratégie de défense fondée sur une évaluation consciencieuse et stratégique qui tient compte de vos objectifs d&#39;affaires, des faits et des options de défense dont vous disposez. Nous nous assurons que vous compreniez les questions clés de la poursuite, ainsi que les risques et les possibilités associés aux différentes stratégies de défense. Que ce soit au moyen d&#39;une vigoureuse défense en litige ou d&#39;une habile négociation, vous obtiendrez dans tous les cas la meilleure approche juridique, le meilleur service et les meilleurs résultats.</p>    <p><strong>Un soutien homogène, partout au Canada </strong>: Comptant en nos rangs des avocats chefs de file en matière de recours collectif dans l&#39;ensemble du territoire canadien, nous sommes à même d&#39;offrir une coordination homogène en ce qui a trait aux questions d&#39;ordre multi-provincial. En outre, nous collaborons efficacement avec des conseillers juridiques des États-Unis afin de nous assurer de l&#39;intégration des stratégies et d&#39;éviter de faire le travail en double.</p>    <p><strong>Service, valeur et résultats exceptionnels</strong> : Les clients de Gowling WLG bénéficient également d&#39;Avantage pratique, une approche nouvelle et innovatrice à la gestion de projets juridiques qui fournit plus de certitude quant aux coûts, plus d&#39;efficacité et plus de valeur lorsque vous faites des dépenses juridiques. Nous savons que vous n&#39;aimez pas les surprises et que vous voulez l&#39;assurance que votre mandat sera traité dans le respect du budget et de l&#39;échéancier, sans aucun compromis quant à l&#39;excellence du service. Avantage pratique permet de satisfaire toutes ces attentes.</p>  ",GWLG.Canada,034fb16f-8b22-4291-afcd-7aaecfa025d5,7C3910A6-FC85-49D7-A166-419893444FDC,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
231,/Services/Commercial-Litigation/Canada,fr-CA,A061EA5E-8D07-40DC-8BF5-4118D03764FB,Canada,Canada,"Classé parmi les meilleures équipes de litige au Canada, le groupe Litige commercial de Gowling WLG s'assure d'aller au cœur de vos enjeux juridiques afin de résoudre votre différend commercial, quelle qu'en soit l'envergure, et vous aider à reprendre vos activités.",NULL,NULL,"<p>Classé parmi les meilleures équipes de litige au Canada, le groupe Litige commercial de Gowling WLG s&#39;assure d&#39;aller au cœur de vos enjeux juridiques afin de résoudre votre différend commercial, quelle qu&#39;en soit l&#39;envergure, et vous aider à reprendre vos activités.</p>    <p>Agissant depuis longtemps à titre de conseillers juridiques de confiance du milieu des affaires du Canada, nous avons traité des dossiers de litige comptant parmi les plus complexes et les plus médiatisés des dernières années et savons comment répondre à vos besoins.</p>    <p>Notre expertise couvre un éventail complet de différends liés au droit des entreprises et au droit commercial, y compris les suivants :</p>    <ul>   <li>Les différends entre actionnaires et recours en oppression</li>   <li>Les différends en matière de société de personnes</li>   <li>Les litiges en matière d&#39;instruments dérivés</li>   <li>Les enquêtes internes</li>   <li>La faillite/l&#39;insolvabilité</li>   <li>La négligence</li>   <li>Le privilège de construction</li>   <li>Les violations de contrats</li>   <li>La responsabilité du fait des produits</li>   <li>La défense en responsabilité des professionnels de la santé et le droit de la santé</li>   <li>L&#39;assurance et la responsabilité professionnelle</li>   <li>Les recours collectifs</li>   <li>L&#39;arbitrage international</li>   <li>Le litige bancaire</li>   <li>Le litige en matière de valeurs mobilières</li>   <li>La gestion de crises et de risques</li>  </ul>    <p>Pratiques, réceptifs et offrant des solutions à la hauteur de votre budget, nous ferons équipe avec vous afin de développer et mettre en œuvre une stratégie efficace qui mènera au meilleur résultat possible pour votre entreprise.</p>    <p><strong>Une équipe forte et diversifiée :</strong> en choisissant Gowling WLG vous bénéficierez des excellentes aptitudes de nos avocats, ces derniers étant régulièrement reconnus dans de prestigieux répertoires juridiques tels que Chambers, Lexpert, Best Lawyers et Benchmark Litigation.Collaborant efficacement avec vous à partir de sept bureaux répartis dans l&#39;ensemble du Canada, ainsi qu&#39;à partir du Royaume-Uni, de l&#39;Europe, de l&#39;Asie et du Moyen-Orient, nos éminents avocats plaidants disposent des ressources appropriées pour traiter vos différends commerciaux -&nbsp;peu importe l&#39;endroit où ils surviennent.</p>    <p><strong>Axés sur les résultats :</strong> engagés à élaborer des stratégies de litige étroitement alignées sur vos objectifs commerciaux, nous collaborons avec vous afin d&#39;acquérir une compréhension approfondie des enjeux, buts, risques et opportunités qui comptent pour votre entreprise. Que ce soit au moyen d&#39;un règlement négocié, d&#39;un mode alternatif de règlement des conflits ou d&#39;un procès, nous travaillerons avec vous afin d&#39;obtenir les meilleurs résultats possible tout en tenant compte de vos besoins d&#39;affaires.</p>    <p><strong>Des rôles de direction clés au sein du milieu commercial </strong>: nous occupons des postes de direction clés au sein d&#39;organisations respectées au sein de l&#39;industrie (p.ex., l&#39;Institut des administrateurs de sociétés, la Professional Liability Underwriters&#39; Society, l&#39;Association des professionnels en ressources humaines, Devis de construction Canada, The Empire Club of Canada et la Canadian Owners &amp; Pilots Association), de comités de litige commercial (p.ex., le Comité des règles en matière civile de l&#39;Ontario), d&#39;organisations professionnelles (p.ex., le comité sur le litige en valeurs mobilières de l&#39;American Bar Association et le comité sur le droit des médias de l&#39;Association internationale du barreau), et sommes auteurs de textes qui constituent des références au chapitre du litige commercial. Notre équipe est à la fine pointe de l&#39;industrie, et travaille assidument pour demeurer constamment à l&#39;affût des tendances et développements d&#39;importance dans le monde des affaires afin de mieux vous servir.</p>    <p><strong>Expertise en litiges complexes et différends internationaux :</strong> que l&#39;enjeu qui vous concerne soit un recours collectif multijuridictionnel, un litige de taille, une enquête médico-légale ou une affaire en responsabilité du fait des produits, Gowling WLG saura vous fournir des conseils stratégiques à l&#39;égard de toute question commerciale aux enjeux considérables -&nbsp;tant au Canada qu&#39;à l&#39;échelle internationale. Peu importe l&#39;envergure ou la complexité du différend, nous offrons des solutions intelligentes et créatives, toujours adaptées à vos besoins particuliers.</p>    <p><strong>Une vaste expertise en gestion de crise et de risques :</strong> grâce à sa connaissance de pointe des enjeux et des risques pouvant affecter votre entreprise en période difficile, que ce soit en matière de droit, des affaires, de l&#39;emploi, de la réputation et des médias, notre équipe de gestion de crise vous aidera à éviter, gérer et surmonter toute une variété de situations critiques. Nous pouvons également travailler avec vous de façon proactive afin de vous aider à identifier et limiter les risques, et de vous fournir des plans de gestion de crise efficaces pour votre entreprise.</p>    <p><strong>Des solutions efficaces :</strong> nous vous procurons une certitude accrue quant aux coûts et une valeur ajoutée grâce à <a href=""~/fr/services/practical-lpm-by-gowling-wlg"">Practical LPM</a>, une plateforme collaborative de gestion de projets juridiques qui nous aide à faire progresser votre dossier dans le respect de l&#39;échéancier et du budget. Nous sommes également à même de réduire les coûts et de répondre rapidement à vos préoccupations en utilisant Go.Plead&trade;, notre base de données détaillée de recherches juridiques et de précédents en litige.</p>    <p>Nous pouvons vous aider. N&#39;hésitez pas à <a href=""~/fr/people?page=1&amp;services=282&amp;locations=GWLG.Canada"" target=""_blank"">communiquer avec n&#39;importe quel membre de notre équipe</a> pour de plus amples détails.</p>  ",GWLG.Canada,034fb16f-8b22-4291-afcd-7aaecfa025d5,C774BE76-80EC-4195-83A3-5850B5E2A4A2,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{84494CB8-6F4C-42D7-B852-DB9EA5D66D77}
232,/Services/Competition-Law-Antitrust/Canada,fr-CA,2A8DCF2D-D240-40D8-8F39-502CC035C671,Canada,Canada,"De nos jours, tant sur la plan national que sur le plan international, les questions touchant au droit de la concurrence et au droit antitrust sont de plus en plus complexes et les enjeux et incidences y afférents sont considérables et dépassent souvent les simples frontières nationales.",NULL,NULL,"<p>De nos jours, tant sur la plan national que sur le plan international, les questions touchant au droit de la concurrence et au droit antitrust sont de plus en plus complexes et les enjeux et incidences y afférents sont considérables et dépassent souvent les simples frontières nationales. Qu&#39;une organisation fasse l&#39;objet d&#39;une enquête ou d&#39;un recours collectif, qu&#39;elle considère effectuer une acquisition, qu&#39;elle ait à traiter des questions d&#39;établissement de prix ou de distribution, ou encore qu&#39;elle doive répliquer à la dernière manœuvre d&#39;un concurrent sur le marché, il est primordial qu&#39;elle s&#39;adjoigne des professionnels juridiques compétents et chevronnés auxquels elle peut faire entièrement confiance.</p>    <p>À titre de cabinet chef de file en droit de la propriété intellectuelle du Canada et de l&#39;un des plus importants cabinets juridiques du pays, Gowling WLG est à même de réunir les meilleurs professionnels du droit de la concurrence, spécialistes de l&#39;industrie et professionnels du droit de la réglementation pour atteindre les objectifs particuliers de ses clients.</p>    <p>Notre groupe national en droit de la concurrence et en droit antitrust fournit des conseils stratégiques à des entreprises nationales et étrangères, des associations professionnelles ou commerciales, ainsi qu&#39;à des sociétés à but non lucratif, et ce, dans tous les domaines du droit de la concurrence et du droit antitrust, y compris les préavis de fusions et obtentions d&#39;autorisations y afférentes, les prestations de conseils au préalable en matière de conformité, les conseils dans le cadre d&#39;enquêtes et de demandes de renseignements émanant du Bureau de la concurrence, les programmes de conformité des entreprises à l&#39;interne et la représentation dans le cadre de procédures civiles et criminelles devant le Tribunal de la concurrence et autres tribunaux.</p>    <p>Du guide Chambers Global au répertoire Canadian Legal Lexpert Directory, nos professionnels sont constamment reconnus à titre de chefs de file en droit de la concurrence et en droit antitrust sur les plans national et international. Forte d&#39;un groupe de pratique qui se compose de l&#39;ancien président de la section nationale Droit de la concurrence de l&#39;Association du Barreau canadien et de l&#39;un des auteurs de l&#39;ouvrageCompetition Law Service, Gowling WLG sait que ses clients comptent sur elle pour les guider dans le labyrinthe des questions touchant au droit de la concurrence et au droit antitrust.</p>    <p>Gowling WLG compte plus de 1,400 professionnels œuvrant dans les bureaux à l&#39;échelle mondiale. Vous pouvez donc être assurés que nous sommes en mesure de mobiliser les meilleures ressources pour traiter vos dossiers efficacement - tout en fournissant un service, une valeur et des résultats optimums.</p>  ",GWLG.Canada,ec64dba1-ee7d-40c8-8fc2-4bf4bf90939a,B3F9FCE6-B77C-4E15-978E-EAA664C609DC,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{AF678F2D-6656-417B-8705-EC3BAE51208E}
233,/Services/Corporate-Commercial/Canada,fr-CA,F76B8D21-AE62-4A62-902A-F07B5C38461F,Canada,Canada,"Dans le cadre du marché mondial hautement concurrentiel de nos jours, la réussite dépend souvent des aptitudes et de l'expérience de vos avocats. Afin de survivre et de réussir en affaires, les organismes ont besoin d'une équipe bien informée et apte à résoudre des problèmes juridiques qui connaît l'industrie et peut offrir des solutions d'affaires exhaustives et novatrices.",NULL,NULL,"<p>Dans le cadre du marché mondial hautement concurrentiel de nos jours, la réussite dépend souvent des aptitudes et de l&#39;expérience de vos avocats. Afin de survivre et de réussir en affaires, les organismes ont besoin d&#39;une équipe bien informée et apte à résoudre des problèmes juridiques qui connaît l&#39;industrie et peut offrir des solutions d&#39;affaires exhaustives et novatrices.</p>    <p>Depuis plus d&#39;un siècle, Gowling WLG aide les entreprises à atteindre leurs objectifs et même à les dépasser. Aux petites entreprises locales en démarrage comme aux multinationales de taille, nous offrons continuellement à nos clients un avis exceptionnel sur l&#39;industrie, une expérience inégalée et une large gamme de services exhaustifs dans le domaine du droit des affaires.</p>    <p>Que vous souhaitiez lancer un appel public à l&#39;épargne, que vous fassiez une acquisition majeure, que vous restructuriez votre entreprise ou que vous ayez besoin d&#39;un avis d&#39;expert en affaires, Gowling WLG a une solution efficace et avisée qui répondra à votre situation unique. Grâce à notre leadership légendaire dans presque toutes les pratiques en droit des affaires, nous tirons profit de notre grande expérience dans les domaines cruciaux comme les services financiers, l&#39;immobilier, le litige, les souscriptions privées, la fiscalité ainsi que le prix de transfert, pour résoudre le plus complexe, ou le plus simple, des problèmes juridiques.</p>    <p>À titre de l&#39;un des cabinet d&#39;avocats chefs de file au Canada en droit des affaires, nous dispensons des avis inégalés aux entreprises nationales et étrangères sur le paysage concurrentiel mondial et sur les tendances économiques émergentes. Que vous envisagiez d&#39;établir une entreprise au Canada ou de percer le marché international, nous vous proposerons les bonnes solutions pour vous aider à maximiser vos occasions d&#39;affaires.</p>    <p>Nos clients accordent de la valeur à notre grande expérience dans l&#39;industrie et ils nous font confiance dans la gestion tant de leurs transactions d&#39;importance capitale que de leurs activités quotidiennes. Puisque nous mettons l&#39;accent sur les industries importantes, notamment l&#39;énergie et l&#39;infrastructure, les services financiers, les relations gouvernementales, les sciences de la vie, la fabrication, la distribution et la technologie, nos clients savent qu&#39;ils obtiennent toujours l&#39;équipe juridique la plus expérimentée et la plus spécialisée de Gowling WLG.</p>  ",GWLG.Canada,a2b7b2e1-b2ce-441b-8021-2c65bd258ef7,04411FAC-DC23-4861-BD0C-AADA44EFCDEB,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F3420C43-8321-4BBF-A6E7-D2AA815C7420}
234,/Services/Corporate-Restructuring/Canada,fr-CA,E1975B8B-C63C-4986-A604-312C83E27B76,Canada,Canada,"Lorsqu'il s'agit d'exécuter des opérations d'insolvabilité et de réorganisation à l'échelle nationale, transfrontalière et multiterritoriale, l'expérience constitue un atout inégalable.",NULL,NULL,"<p>Munis des connaissances pointues qu&#39;ils ont acquises en participant activement à des réorganisations complexes, les professionnels du groupe Réorganisation d&#39;entreprises de Gowling WLG ont conseillé d&#39;importants intervenants, et ont par ailleurs agi à titre de conseillers juridiques auprès de débiteurs, de surveillants, d&#39;importants groupes de créanciers et d&#39;acheteurs d&#39;actifs de sociétés en difficulté.</p>    <h3>Un chef de file national, une équipe de portée nationale</h3>    <p>Notre pratique en matière de réorganisation d&#39;entreprises est menée par Derrick Tay, un chef de file reconnu dans le domaine. Ayant été nommé avocat de l&#39;année 2012 (&laquo; Lawyer of the Year, 2012 &raquo;) par la publication Best Lawyers dans la catégorie réorganisation et insolvabilité à Toronto, Me Tay est reconnu pour son expertise inégalée au chapitre de réorganisations hautement complexes. Il a été nommé parmi les praticiens de 1er niveau dans <em>Chambers</em>; il figure dans le répertoire <em>Best of the Best Guide to the World&#39;s Leading Lawyers</em>; il a été reconnu comme avocat ayant obtenu le plus de nominations au Canada dans la publication <em>International Who&#39;s Who of Insolvency &amp; Restructuring Lawyers</em>; il figure dans la liste des avocats les plus fréquemment recommandés en matière d&#39;insolvabilité et de réorganisation financière du répertoire <em>Lexpert/American Lawyer Guide to the Leading 500 Lawyers in Canada</em>; et toutes les autres publications de classement juridique le nomment parmi les meilleurs praticiens du domaine.</p>    <p>Nous sommes à même de fournir des conseils en matière de réorganisation d&#39;entreprises partout au Canada, grâce à des praticiens expérimentés qui œuvrent à partir de nos bureaux de Toronto, Montréal, Ottawa, Calgary et Vancouver. Nos ressources sont mobiles et entièrement intégrées, ce qui nous permet de toujours disposer des bonnes personnes au bon endroit pour répondre aux besoins de nos clients de la façon la plus efficace qu&#39;il soit.</p>    <h3>Une expérience inégalée</h3>    <p>Les professionnels de Gowling WLG ont joué des rôles majeurs dans un grand nombre des réorganisations d&#39;entreprises les plus complexes effectuées au Canada au cours des trois dernières décennies, notamment : Nortel, l&#39;acquisition d&#39;OPTI Canada par CNOOC, Quebecor World, Air Canada, Abitibi Consolidated, la réorganisation du marché canadien de papier commercial adossé à des actifs, W.R. Grace, le Groupe Dumoulin, Kitco Metals Inc., le Groupe Norbourg, Babcock &amp; Wilcox, MuscleTech, Unique Broadband Systems, Ravelston, Slater Steel, WellPoint, Jung Developments, Algoma, Skyservice, Laidlaw, North American Steamships, Cineplex Odeon, The Loewen Group, Canadian Airlines, Anvil Range Mining, PSINet, 360Networks, Agribiotech, Livent, GT Group Telecom, Cotton Ginny, Noble China, SAAN Stores, Teleglobe, Eaton&#39;s, Confederation Life, Royal Oak Mines, SkyDome, le TrustRoyal, Scotia Plaza DPS, Trizec, Cadillac Fairview, Bramalea, et Olympia &amp; York.</p>  ",GWLG.Canada,NULL,875571D8-6031-4A69-A136-886B8FCA491D,NULL,0,1,t-white,"<p>Lorsqu&#39;il s&#39;agit d&#39;exécuter des opérations d&#39;insolvabilité et de réorganisation à l&#39;échelle nationale, transfrontalière et multiterritoriale, l&#39;expérience constitue un atout inégalable.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
235,/Services/Distressed-M-A/Canada,fr-CA,98CD87AE-1F02-4F6C-9F95-C4523C328FF3,Canada,Canada,"Les professionnels du groupe Fusion et acquisition de sociétés en difficulté de Gowling WLG allie des stratégies en matière de fusion et d'acquisition, de restructuration et d'insolvabilité, afin d'extraire, de préserver et d'accroître la valeur dissimulée d'une société en difficulté.",NULL,NULL,"<p>La vente ou l&#39;acquisition d&#39;une société en difficulté exige des connaissances et des compétences exceptionnelles. Les professionnels du groupe Fusion et acquisition de sociétés en difficulté de Gowling WLG allie des stratégies en matière de fusion et d&#39;acquisition, de restructuration et d&#39;insolvabilité, afin d&#39;extraire, de préserver et d&#39;accroître la valeur dissimulée d&#39;une société en difficulté.</p>    <h3>Le défi</h3>    <p>La société qui est en difficulté n&#39;a plus de liquidités. Ses dirigeants s&#39;efforcent d&#39;éteindre des feux et de traiter avec des intervenants mécontents et des concurrents voraces, alors que les clients et les fournisseurs cherchent déjà des solutions de rechange. Plus personne ne tient compte des renseignements que fournit la société. Les professionnels de l&#39;équipe Fusion et acquisition de sociétés en difficulté agissent rapidement afin de clarifier la situation et de préserver la valeur d&#39;exploitation de la société ciblée.</p>    <h3>Une occasion</h3>    <p>Les sociétés en difficulté peuvent faire l&#39;objet d&#39;une acquisition à un faible multiple du BAIIA par rapport à leur valeur intrinsèque historique. Lorsque l&#39;acquéreur possède les liquidités et le savoir-faire pour organiser plus efficacement la société visée et survivre à la crise, l&#39;acquisition d&#39;une société en difficulté peut entraîner d&#39;importants dividendes au fur et à mesure que la société acquise se redresse.</p>    <h3>Comment nous pouvons vous aider</h3>    <p>Des conseils stratégiques, obtenus en temps opportun, peuvent souvent détendre les relations conflictuelles qui unissent la société en difficulté à ses créditeurs et à ses porteurs de titres, aider un acquéreur à conserver une longueur d&#39;avance par rapport à d&#39;autres sociétés intéressées, ainsi qu&#39;à protéger d&#39;importants fournisseurs et clients de manière à assurer la future viabilité de la société.</p>    <p>Grâce à nos vastes connaissances en matière d&#39;insolvabilité et de restructuration et à notre expérience des processus de fusion et acquisition harmonieuse, nous sommes en mesure de réaliser des opérations de fusions et acquisition sans faille, et ce, du début à la fin.</p>    <h3>En savoir plus</h3>    <p>Pour savoir comment nous pouvons vous prêter main-forte dans le domaine des fusions et acquisitions de sociétés en difficulté, <a href=""~/fr/people?page=1&amp;services=289&amp;locations=GWLG.Canada"" target=""_blank"">communiquez avec&nbsp;tout autre membre de notre équipe</a>.</p>  ",GWLG.Canada,5ae5a269-9c5f-4332-920e-28b31ec9066e,B1FFD72E-B59C-4828-9EAC-256E3E3E57F8,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C0C757A8-E589-459A-B574-1E3C3FF83EBD}
236,/Services/Crisis-Management/Canada,fr-CA,05D3F227-A372-4A56-9CB8-F4B9BD8389EA,Canada,Canada,"Fort de son expertise approfondie de tous les aspects de la gestion de crise et de son expérience pratique du secteur, le groupe de gestion des crises de Gowling WLG peut aider votre entreprise à éviter, gérer et récupérer d'une grande variété de situations et de problèmes critiques.",NULL,NULL,"<p>Pour prospérer, une organisation doit être en mesure d&rsquo;éviter et de gérer les crises potentielles. Dans le contexte commercial actuel, nul n&rsquo;est mieux placé pour repérer, atténuer et gérer les risques que nous &ndash; une équipe de professionnels juridiques chevronnés dotés d&rsquo;un bon sens des affaires et possédant une expertise de l&rsquo;industrie inégalée et la perspicacité nécessaire pour élaborer des solutions efficaces et ingénieuses en matière de gestion de crise et des risques.</p>    <p>Fort d&rsquo;une expertise poussée de toutes les facettes de la gestion de crise et d&rsquo;une longue expérience pratique dans l&rsquo;industrie, le groupe Gestion de crise de Gowling WLG peut aider votre organisation à éviter, gérer et rétablir tout un éventail de situations critiques. Composée des meilleurs professionnels de la gestion de crise, notre équipe met à profit l&rsquo;expertise et les efforts concertés de groupes de pratique spécialisés en fraude civile, en relations gouvernementales, en recours collectifs, en responsabilité du fait des produits, en santé et sécurité au travail, en droit du travail et de l&rsquo;emploi et en litige commercial pour apporter à nos clients des solutions non seulement pertinentes, mais efficaces.</p>    <p>Nous collaborons étroitement avec nos clients pour détecter et prévenir les crises, examiner les problèmes actuels ou potentiels, gérer les crises en cours et tirer les leçons des expériences passées en dressant des bilans et en procédant à d&rsquo;autres mesures d&rsquo;évaluation éprouvées. Nos ressources considérables nous permettent de jauger sur-le-champ la situation et les besoins juridiques d&rsquo;une organisation, tandis que notre connaissance de l&rsquo;industrie aplanit la courbe d&rsquo;apprentissage. Résultat : nous sommes d&rsquo;entrée de jeu en mesure de protéger et de défendre nos clients.</p>    <p>Nos clients comptent sur notre réseau de bureaux canadiens et internationaux pour apporter rapidement et efficacement des réponses aux problèmes qui émanent du Canada ou qui touchent leurs marchés étrangers. Qu&rsquo;il s&rsquo;agisse de rappels de produits, de questions de responsabilité, de fraudes civiles ou de procès en diffamation, notre équipe veille à protéger votre réputation, à défendre votre entreprise et à en préserver l&rsquo;avenir.</p>    <h2>Pour en savoir plus</h2>    <p>Pour en savoir plus sur nos services de gestion de crise, veuillez communiquer avec l&rsquo;un ou l&rsquo;autre des membres de notre équipe.</p>  ",GWLG.Canada,3ae82526-329e-41d7-8e7e-7b14a7af12bc,5B1E4C6F-134F-4E9B-8908-AEB4734D2010,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3275D488-797C-47CE-A9DE-98A8ABFED5A2}
237,/Services/Defamation-Media-Law/Canada,fr-CA,3F18C422-1655-4EF7-B65F-0C1363BAF85A,Canada,Canada,"En cette ère où les rumeurs se répandent comme une traînée de poudre sur le Web, où les blogueurs court-circuitent les ordonnances de non-publication et où les hyperliens se créent instantanément, les médias et les entreprises ont plus que jamais besoin d'un cabinet d'avocats réputé au fait des défis uniques que pose l'industrie médiatique moderne.",NULL,NULL,"<p>L&#39;arrivée d&#39;Internet a radicalement transformé le paysage médiatique, ébranlant les médias traditionnels et ouvrant la porte à des millions de nouveaux commentateurs. En cette ère où les rumeurs se répandent comme une traînée de poudre sur le Web, où les blogueurs court-circuitent les ordonnances de non-publication et où les hyperliens se créent instantanément, les médias et les entreprises ont plus que jamais besoin d&#39;un cabinet d&#39;avocats réputé au fait des défis uniques que pose l&#39;industrie médiatique moderne.</p>    <p>L&#39;équipe de Gowling WLG fait autorité sur les questions liées à la liberté de la presse, aux ordonnances de non-publication, à la diffamation, à la confidentialité et à l&#39;accès à l&#39;information. En qualité de conseillers et d&#39;avocats plaidants de bon nombre des principaux médias canadiens - y compris des journaux et des radiodiffuseurs et télédiffuseurs nationaux et locaux, des éditeurs de livres et de magazines et des fournisseurs Internet - nos experts tirent parti aussi bien de leur connaissance pratique du monde des médias que de l&#39;innovation typique de la génération N pour faire en sorte que nos clients bénéficient des conseils juridiques les plus judicieux et les plus novateurs de l&#39;industrie.</p>    <p>En plus d&#39;être intervenu dans de nombreuses causes importantes traitant de diffamation, de la <em>Charte canadienne des droits et libertés</em>, de la liberté d&#39;expression et de l&#39;accès à l&#39;information, notre groupe Diffamation et droit de l&#39;information demeure actif au sein de divers organismes du secteur de l&#39;information et d&#39;associations de journalistes. Qui plus est, il fournit régulièrement un point de vue juridique dans les principales revues spécialisées.</p>    <p>Le groupe Diffamation et droit de l&#39;information de Gowling WLG est composé de professionnels chevronnés qui puisent dans leur savoir-faire et leurs connaissances juridiques inégalés pour fournir à nos clients des solutions novatrices et efficaces.</p>    <p>Forts de leur expérience en plaidoirie en diffamation et en droit de l&#39;information devant tous les tribunaux ainsi que de leur connaissance approfondie de la législation et de la réglementation sur le sujet, les professionnels juridiques de Gowling WLG sont en mesure de conseiller et de défendre efficacement les médias d&#39;aujourd &#39;hui comme ceux de demain.</p>    <p>Nos professionnels ont agi à titre de conseillers juridiques dans d&#39;importants procès et appels en diffamation devant de nombreux tribunaux canadiens, y compris la Cour suprême du Canada. À l&#39;heure où fleurissent les médias sociaux et les blogues, les cas de diffamation commerciale sont de plus en plus répandus. Dans ce contexte, on ne saurait trouver des alliés plus précieux que les membres de notre groupe Diffamation et droit de l&#39;information, qui sont reconnus comme les meilleurs avocats du Canada (<em>Best Lawyers in Canada</em>) pour leur expertise et la qualité de leur représentation dans ce domaine.</p>  ",GWLG.Canada,104b250f-b3c2-47df-9df6-1f1c11cf8908,EE90D195-F877-4374-AD1F-0C7A253EEFC1,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{37F6AC38-4AA0-4D21-B3B2-B38E32186927}
238,/Services/Employment-Labour-Equalities/Canada,fr-CA,211BC4B6-48B4-4A24-B9BC-200471496D8B,Canada,Canada,,NULL,NULL,"<p>Les gens sont au cœur du succès de votre entreprise, tout comme ils sont essentiels au succès de notre cabinet. Notre équipe Gowling WLG de plus de 40 professionnels du droit du travail et de l&#39;emploi est à même de vous aider à gérer vos gens, pour que vous puissiez tirer profit des occasions qui se présentent à vous et atteindre vos objectifs.</p>    <p>Des pratiques d&#39;embauche à la conformité aux lois et réglementations, à la gestion des défis, en passant par la fin des liens d&#39;emploi ou la protection de vos actifs, nous connaissons la loi et nous comprenons aussi les défis en droit du travail et de l&#39;emploi auxquels votre entreprise peut faire face.</p>    <p>Que vous soyez une multinationale, une entreprise de taille moyenne ou un entrepreneur local en démarrage, nous avons les connaissances et les compétences spécialisées pour vous aider à gérer vos effectifs et à résoudre les problèmes juridiques.</p>    <p>Notre vaste expérience couvre une variété de secteurs clés, y compris la fabrication, l&#39;énergie et les ressources naturelles, les services financiers, les sciences de la vie, la publicité et les médias, les services professionnels, les projets et l&#39;infrastructure, le commerce de détail, la technologie et bien plus encore.</p>    <p>Nos avocats sont présents dans tous les grands centres d&#39;affaires du Canada et nous possédons une riche expertise des domaines essentiels à votre réussite commerciale, tels que :</p>    <ul>   <li>L&rsquo;accommodement des invalidités</li>   <li>L&rsquo;indemnisation des accidents du travail</li>   <li>La gestion des absences</li>   <li>La protection de la confidentialité en milieu de travail</li>   <li>La santé et sécurité</li>   <li>Le droit de l&rsquo;emploi</li>   <li>Les conseils et stratégies liés aux cessations d&rsquo;emploi</li>   <li>Les droits de la personne et la discrimination</li>   <li>Les fusions et acquisitions</li>   <li>Les relations de travail</li>  </ul>    <p>Nous collaborons aussi étroitement avec nos collègues des domaines de l&#39;immigration, la santé et la sécurité, des pensions, du droit fiscal, de la protection de la confidentialité et du capital d&#39;investissement de sorte que vous puissiez tirer profit de nos connaissances, expériences et compétences combinées.</p>    <h3>Des conseils opportuns et un service sans faille</h3>    <p>Les problèmes en milieu de travail requièrent souvent une attention immédiate et des actions décisives. Ils ne surviennent pas toujours entre 9 heures et 17 heures et bien souvent, ils n&#39;attendront pas à demain. Notre équipe de premier rang comprend votre nécessité d&#39;obtenir des conseils pratiques en temps opportun et œuvre à votre rythme pour vous donner le soutien approprié dont vous avez besoin, au moment où vous en avez besoin.</p>    <p>Nous ne nous contentons pas de travailler pour vous. Nous travaillons avec vous en devenant un membre à part entière de votre équipe et vous aidant à améliorer votre capacité à gérer des problèmes liés au milieu de travail. Peu importe si votre entreprise est établie à un seul endroit ou plusieurs, nous vous offrirons une collaboration sans faille en tirant profit des forces collectives de notre groupe en vue d&#39;élaborer des solutions pratiques pour votre organisation.</p>    <h3>Chefs de file de l&#39;industrie</h3>    <p>Voici quelques réussites éloquentes dans des mandats de droit du travail et de l&#39;emploi:</p>    <ul>   <li>Nous avons représenté le gouvernement du Québec dans la négociation de multiples conventions collectives touchant 500 000 fonctionnaires.</li>   <li>Nous avons défendu une importante institution financière dans une poursuite en recours collectif pour le paiement d&#39;heures supplémentaires.</li>   <li>Nous avons défendu un détaillant mondial dans le cadre d&#39;une réclamation très médiatisée de plus d&#39;un million de dollars concernant des allégations de discrimination et de harcèlement.</li>   <li>Nous négocions chaque jour des résolutions favorables de différends et aidons ainsi nos clients à éviter des litiges coûteux et difficiles.</li>   <li>Nous aidons aussi nos clients à accroître leurs affaires par l&#39;intermédiaire d&#39;acquisitions en les conseillant quant à la myriade d&#39;enjeux qui découlent de transactions complexes.</li>   <li>Nos clients nous tiennent en haute estime et nous recommandent à leurs collègues d&#39;autres entreprises et c&#39;est le meilleur compliment qu&#39;on puisse nous faire.</li>  </ul>    <p>Gowling WLG compte plus de 40 professionnels du droit du travail et de l&#39;emploi, dont certains des plus éminents chefs de file reconnus par des agences de classement réputées aux niveaux national et international, y compris <em>Chambers Global </em>et <em>The Best Lawyers in Canada</em>. Nous n&#39;offrons pas seulement une expertise et un service sans pareil à nos clients, nous leur offrons aussi un avantage concurrentiel.</p>    <h3>Pour en savoir davantage</h3>    <p>En tant que chef de file au sein de notre industrie, notre équipe partage le même objectif: celui de faire en sorte que vous soyez vous aussi un leader au sein de la vôtre. Pour découvrir comment nous pouvons aider votre entreprise, veuillez <a href=""~/fr/people?page=1&amp;services=651&amp;locations=GWLG.Canada"" target=""_blank"">communiquer avec tout autre membre de notre groupe</a>.</p>  ",GWLG.Canada,bbd690ea-a4bd-4cdf-85d3-ca0c7d862d99,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{5420D1AC-A0C7-4B88-8008-76A94AD6F8C3}
239,/Services/Entertainment-Sports-Law/Canada,fr-CA,377BAD72-FB82-4B5C-9F1F-0F1548D13AFD,Canada,Canada,"Les industries mondiales du divertissement et du sport continuent d’évoluer à un rythme rapide forçant les artistes, athlètes et entreprises à relever de nouveaux défis et explorer de nouvelles possibilités chaque jour. Des technologies et plateformes novatrices aux nouveaux règlements et acteurs de l’industrie, l’équipe Gowling WLG vous guide adroitement dans le labyrinthe juridique de ces secteurs et vous aide à maximiser votre succès.",NULL,NULL,"<p>Dans des secteurs extrêmement compétitifs et présentant une multitude d&#39;occasions d&#39;affaires, qui englobent la musique, le cinéma, la télévision et le théâtre, l&#39;édition de livres, les jeux vidéo, les sports et les sports électroniques ou encore le métavers et les jetons non fongibles, nous savons comment protéger votre talent et le commercialiser efficacement. Tirant profit du savoir-faire de notre équipe de professionnels de premier rang, nous aidons les entreprises et les talents des secteurs du divertissement et des sports à atteindre leurs buts : parvenir aux ententes les plus avantageuses et avoir gain de cause lors de différends.</p>    <h3>Maximiser la valeur de vos créations et de votre talent</h3>    <p>À titre de leader mondial du droit de la propriété intellectuelle (PI), Gowling WLG défendra vos actifs de PI et veillera à ce que vous soyez dans la meilleure posture pour commercialiser vos droits. Nous sommes reconnus comme un cabinet juridique de confiance en matière de divertissement et de sport comme en témoigne notre expérience de travail internationale avec des musiciens, des acteurs, des athlètes professionnels, des équipes et des organisations sportives, des maisons de disques, des producteurs de cinéma et de télévision, des sociétés de production, des gérants, des agents, des éditeurs, des organismes de charité, et ce dans tous les médias de divertissement et de sports.</p>    <h3>Faire prospérer vos affaires et commercialiser votre contenu</h3>    <p>Nous agissons à titre de conseillers clés pour nos clients, appliquant notre talent et tirant profit de nos connexions pour les aider à progresser et à réussir dans les marchés évolutifs du divertissement et du sport. Nous comprenons que vos objectifs et besoins sont uniques, c&#39;est pourquoi nous pouvons vous aider dans une variété de dossiers juridiques : transactions commerciales (négociation et rédaction de contrats d&#39;artistes, de production, d&#39;octroi de licences, d&#39;enregistrement et de commercialisation), finances et investissements, questions liées à l&#39;emploi, négociation de commandites, opérations immobilières, planification successorale, droits de la personnalité et plus.</p>    <h3>Règlement de différends complexes</h3>    <p>De l&#39;arbitrage au litige en passant par la négociation et la médiation, nous avons les connaissances pointues dont vous avez besoin pour régler, et vous aider à éviter, les différends les plus épineux des secteurs du divertissement et du sport. Nos avocats ont plaidé devant toutes les instances et ont représenté des clients dans le cadre de nombreux dossiers allant de différends civils et commerciaux pour le compte d&#39;importants organismes sportifs et de divertissement, en passant par les litiges liés aux licences et aux commandites.</p>    <h3>Mandats représentatifs</h3>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)peermusic|(Copy1)Repr%c3%a9sentation+de+peermusic%2c+dans+le+cadre+de+son+acquisition+de+la+soci%c3%a9t%c3%a9+canadienne+Premier+Muzik%2c+de+la+soci%c3%a9t%c3%a9+fran%c3%a7aise+All+Right+Music+et+de+la+soci%c3%a9t%c3%a9+n%c3%a9erlandaise+Global+Master+Rights+afin+de+cr%c3%a9er+une+soci%c3%a9t%c3%a9+ind%c3%a9pendante+chef+de+file+mondiale+en+gestion+de+droits+voisins.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Centre+national+des+Arts|(Copy2)Repr%c3%a9sentation+du+Centre+national+des+arts+(CNA)+quant+aux+droits+d%e2%80%99auteur%2c+%c3%a0+l%e2%80%99octroi+de+licences%2c+%c3%a0+la+gestion+des+droits%2c+et+%c3%a0+la+n%c3%a9gociation+de+l%e2%80%99entente+et+de+l%e2%80%99acquisition+li%c3%a9es+%c3%a0+ses+productions+multim%c3%a9dias+ainsi+qu%e2%80%99au+Fonds+national+de+cr%c3%a9ation+du+CNA.|(LinkText2)Read+more|(BgHover2)colour-darkblue|(Headline3)Overactive+Media+Group+Inc.|(Copy3)Repr%c3%a9sentation+de+l%e2%80%99%c3%a9quipe+de+sport+%c3%a9lectronique%2c+Toronto+Defiant%2c+et+du+groupe+propri%c3%a9taire+li%c3%a9%2c+Overactive+Media+Group+Inc.%2c+quant+%c3%a0+l%e2%80%99obtention+d%e2%80%99une+%c3%a9quipe+de+sport+%c3%a9lectronique+au+sein+de+la+ligue+Overwatch.|(LinkText3)Read+more|(BgHover3)colour-darkred|(widget_displayname)Three+Block+Widget^}</p>    <h3>Prix et distinctions</h3>    <p>Gowling WLG est reconnu cabinet juridique &laquo; chef de file &raquo; pour son travail dans les secteurs du divertissement et du sport dans plusieurs guides juridiques : <em>Chambers Canada</em>, <em>Legal 500</em> <em>Canada</em> et <em>Canadian Legal Lexpert Directory</em>. Susan Abramovitch, chef du groupe Droit du divertissement et du sport, y figure également à titre d&#39;avocate de premier plan ainsi que dans <em>The Best Lawyers in Canada</em> et <em>Who&#39;s Who Legal</em>, qui l&#39;a classée parmi les meilleurs avocats en droit du divertissement du monde.</p>    <h3>Équipe Canada</h3>    <p>Nous sommes fiers d&#39;être les conseillers juridiques officiels et premiers commanditaires des Jeux du Commonwealth Canada (JCC) en soutien à l&#39;organisme sportif dans sa préparation des athlètes d&#39;Équipe Canada en vue des compétitions des prochains Jeux du Commonwealth, qui se dérouleront à Birmingham, au Royaume-Uni en 2022.</p>    <h3>Communiquez avec notre équipe au Canada</h3>    <p><a href=""~/fr/people/susan-abramovitch/"">Susan Abramovitch</a><br />  Associée et chef du groupe Droit du divertissement et du sport (Canada)</p>  ",GWLG.Canada,38313a1e-07be-4fe8-b61e-008316e36186,1262C308-04FD-4608-835B-A7950ABA17BE,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{01F3B48C-972C-434D-B7E2-6EDED2EA05AC}
240,/Services/Climate-Change-and-Environmental-Law/Canada,fr-CA,287DD929-3687-488B-A4C5-1809E51E98A9,Canada,Canada,"Nous aidons nos clients à prévoir les prochains développements en droit de l'environnement en fournissant des conseils et des services de représentation fiables et efficaces, qui permettent aux clients de s'attaquer aux problèmes en matière de droit de l'environnement dès qu'ils se présentent.",NULL,NULL,"<p>Nous aidons les clients à prévoir les prochaines modifications apportées aux lois sur l&rsquo;environnement et nous leur fournissons, en plus de conseils avisés et pratiques, des services de représentation efficaces qui leur permettront d&rsquo;aborder les problèmes de nature environnementale à mesure qu&rsquo;ils se présentent.</p>    <p>Les professionnels juridiques de Gowling WLG sont reconnus à l&rsquo;échelle nationale et internationale pour leur expérience en droit de l&rsquo;environnement, et ils figurent aux classements de <em>The Best Lawyers in Canada</em>, de <em>Legal 500</em> et de <em>Chambers</em>.</p>    <p>En Ontario, six de nos professionnels sont des &laquo; spécialistes agréés en droit de l&rsquo;environnement &raquo;, et l&rsquo;Association du barreau de l&rsquo;Ontario réserve cette désignation pour ceux et celles qui satisfont aux normes établies en matière d&rsquo;expérience et de connaissances et qui suivent de façon exemplaire les règles de pratique professionnelle.</p>    <h2>L&rsquo;expérience juridique dont vous avez besoin</h2>    <p>Nos services en droit de l&rsquo;environnement couvrent ce qui suit :</p>    <ul><li.friches :="""" conseils="""" industrielles="""" les="""" strat="""" sur="""">   <li>Changements climatiques : Conseils sur les mesures proposées pour aborder les questions relatives aux changements climatiques, y compris celles portant sur l&rsquo;évaluation quantitative et sur la vérification des crédits carbone.</li>   <li>Opérations commerciales : Conseils sur l&rsquo;environnement dans le cadre d&rsquo;opérations commerciales en ce qui a trait aux négociations, aux vérifications diligentes et à l&rsquo;évaluation du risque, ainsi qu&rsquo;à la rédaction de clauses relatives à l&rsquo;environnement dans des documents opérationnels et financiers.</li>   <li>Conseils d&rsquo;affaires : Conseils opérationnels aux entreprises dans une vaste gamme de secteurs de l&rsquo;industrie.</li>   <li>Réaction aux situations d&rsquo;urgence : Conseils sur les interventions en cas d&rsquo;urgences environnementales.</li>   <li>Évaluations environnementales : Conseils sur la conformité environnementale des entreprises aux lois fédérales et provinciales en matière d&rsquo;environnement.</li>   <li>Litige et défense : Représentation devant toutes les instances des tribunaux du Québec, de l&rsquo;Ontario, de l&rsquo;Alberta et de la Colombie-Britannique dans le cadre de litiges visant les matières toxiques et les terrains contaminés, la défense et les poursuites en vertu des lois environnementales et les services d&rsquo;arbitrage et de médiation, ainsi que la représentation devant des comités parlementaires, des conseils municipaux et les tribunaux provinciaux.</li>   <li>Premières Nations : Conseils et services de représentation offerts aux Premières Nations, ainsi qu&rsquo;aux clients des secteurs public et privé qui doivent traiter de questions afférentes aux droits des Autochtones.</li>   <li>Expansion internationale : Préparation relative au renforcement opérationnel des entreprises.</li>   <li>Opérations immobilières : Conseils portant sur les responsabilités potentielles liées aux opérations immobilières des entreprises et à leurs projets de développement.</li>   <li>Substances toxiques : Assistance quant au traitement de l&rsquo;enregistrement de nouvelles substances aux fins de leur utilisation au Canada, et conseils sur la désignation de substances toxiques proposée dans le cas de certaines substances.</li>   <li>Formation : Conception et réalisation de programmes de formation relatifs aux lois de l&rsquo;environnement.</li>   <li>Transport de matières dangereuses : Conseils sur le transport de matières dangereuses relativement à l&rsquo;enregistrement, à l&rsquo;utilisation, à l&rsquo;entreposage, à la manipulation, à l&rsquo;importation, à l&rsquo;exportation et au transport de substances toxiques et contrôlées.</li>   <li>Gestion des déchets : Conseils et représentation portant sur tous les volets de la gestion des déchets, de l&rsquo;octroi de licences et de permis jusqu&rsquo;à la conformité continue.</li>   <li>Traitement et gestion de l&rsquo;eau et des eaux usées : Conseils sur les opérations quotidiennes, la structure d&rsquo;entreprise et l&rsquo;impartition de services municipaux.</li>   </li.friches>   <li>&nbsp;</li>  </ul>    <h2>En savoir plus</h2>    <p>Nous voulons vous aider à réussir. Pour en savoir davantage sur nos services en droit de l&rsquo;environnement, n&rsquo;hésitez pas à communiquer avec l&rsquo;un des membres de notre équipe.</p>    <p><strong><a href=""~/fr/people/adam-chamberlain/#panel-button1"">Adam Chamberlain</a></strong><br />  Associé et chef du groupe Droit de l&#39;environnement</p>    <p><strong><a href=""~/fr/people/natalie-mullins/#panel-button1"">Natalie Mullins</a></strong><br />  Associée</p>  ",GWLG.Canada,a24654f5-1304-42da-a118-aade9777aae0;29d7e340-a6af-49b5-b223-993a69997a78;a7981dca-18b5-4064-b9ea-340d3fba1862;0efee052-a0c0-4bdb-9de2-1227c5fa1551,064C02F0-FF64-42F8-8A71-C8DECE3600FD,NULL,0,1,t-white,<p>Le groupe Droit de l&rsquo;environnement de Gowling WLG allie la force et la souplesse d&rsquo;un cabinet de plein exercice d&rsquo;envergure mondiale à la qualité des services d&rsquo;un cabinet boutique en environnement.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,a24654f5-1304-42da-a118-aade9777aae0|{6582D9E4-B79F-4BB2-BABA-1F2B20537003}|{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}|{A6A3B0BC-061F-4F98-9949-16E412DF9D32}
241,/Services/Environmental-Litigation/Canada,fr-CA,228AF61B-4622-4A86-970B-2BDDC5BEA821,Canada,Canada,Les avocats du groupe de pratique national en droit de l'environnement de Gowling WLG sont réputés au Canada comme sur la scène internationale pour leur grande expertise. Le litige en droit de l'environnement et les modes alternatifs de règlement des conflits y afférents sont des domaines spécialisés de la pratique en droit de l'environnement.,NULL,NULL,"<p>Les avocats du groupe de pratique national en droit de l&#39;environnement de Gowling WLG sont réputés au Canada comme sur la scène internationale pour leur grande expertise. Le litige en droit de l&#39;environnement et les modes alternatifs de règlement des conflits y afférents sont des domaines spécialisés de la pratique en droit de l&#39;environnement.</p>    <p>Nos clients s&#39;attendent, avec raison, à avoir accès à des connaissances spécialisées en matière de questions liées aux affaires, à la réglementation et au litige qui se présentent souvent dans le cadre de recours environnementaux; le groupe Litige en droit de l&#39;environnement est à même de leur fournir cette expertise. Nos services en matière de litige en droit de l&#39;environnement sont fournis par des professionnels qui obtiennent d&#39;excellents résultats en adoptant une approche pragmatique et rentable pour les clients, tout en leur fournissant un service à la clientèle de qualité supérieure.</p>    <p>L&#39;approche Gowling WLG est axée sur le travail d&#39;équipe. Nous collaborons étroitement avec nos clients ainsi qu&#39;avec leurs experts-conseils en environnement et en finances lorsque nécessaire. Le litige est souvent une condition essentielle à l&#39;obtention d&#39;un règlement raisonnable. Toutefois, on obtiendra souvent les meilleurs résultats en alliant la négociation au règlement à l&#39;amiable. À ce chapitre, nous bénéficions d&#39;une expertise et d&#39;une expérience inestimables en matière de règlements à l&#39;amiable concernant plusieurs parties, c&#39;est-à-dire des règlements à l&#39;amiable qui concernent le pollueur, les parties touchées et les organismes de réglementation de compétence provinciale ou autre.</p>    <p>L&#39;équipe de litige de Gowling WLG comprend des avocats expérimentés en droit commercial (droit des affaires) de même que des avocats spécialisés au chapitre de la réglementation et des procès. Notre approche nous permet de fournir les meilleurs conseils stratégiques qui soient et d&#39;obtenir des résultats optimaux sur le plan des affaires. Lorsqu&#39;il s&#39;agit de la solution appropriée, notre équipe emploie également les modes traditionnels de règlement de conflits aux fins de la poursuite ou de la défense.</p>    <p>Notre expérience couvre toute la gamme des recours environnementaux, y compris la poursuite et la défense dans le cadre de recours qui surviennent dans les contextes suivants :</p>    <ul>   <li>la migration hors site d&#39;une contamination</li>   <li>la contamination sur un site causée par une fuite provenant de réservoirs désuets, défectueux, mal installés ou mal retirés</li>   <li>la contamination sur un site causée par une négligence quant à l&#39;élimination de matières dangereuses</li>   <li>la négligence professionnelle de la part d&#39;experts-conseils ou d&#39;entreprises en environnement procédant à la manipulation de matières dangereuses</li>  </ul>    <p>En ce qui a trait aux recours de ce genre, notre expertise (contrairement à celle d&#39;autres cabinets œuvrant en droit de l&#39;environnement) couvre les questions suivantes :</p>    <ul>   <li>la quantification des dommages, y compris les pertes financières</li>   <li>la quantification de la diminution de la valeur d&#39;un terrain</li>   <li>les lésions corporelles et la santé au travail</li>   <li>les ententes complexes en droit commercial et en droit de l&#39;immobilier, ainsi que les ententes y afférentes visant la mise en œuvre de solutions d&#39;affaires relatives à des recours environnementaux</li>  </ul>    <p>L&#39;équipe Gowling WLG, grâce à sa vaste expérience et à son expertise approfondie, est en mesure de fournir les meilleurs résultats qui soient aux clients du cabinet.</p>  ",GWLG.Canada,29d7e340-a6af-49b5-b223-993a69997a78,E652EB3B-CD9C-4C1E-9991-A4B38E5E1CD3,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6582D9E4-B79F-4BB2-BABA-1F2B20537003}
242,/Services/Executive-Compensation/Canada,fr-CA,AB9241D2-3AB9-4B77-A83C-B63EB1864DF9,Canada,Canada,"Le groupe Rémunération des dirigeants est une équipe multidisciplinaire comprenant des experts en droit fiscal, en régimes de retraite et avantages sociaux, en droit de l'emploi et des valeurs mobilières ainsi qu'en gouvernance d'entreprise. ",NULL,NULL,"<p>Dans un marché de plus en plus concurrentiel à l&#39;échelle nationale et internationale, les sociétés qui s&#39;imposent comme des chefs de file de l&#39;industrie proposent une rémunération et des avantages sociaux innovateurs et efficaces sur le plan fiscal dans le but d&#39;attirer, de retenir et de motiver les candidats les plus talentueux. Des systèmes et des conventions de rémunération qui tiennent compte de la complexité des régimes fiscaux canadiens et étrangers, des lois sur les valeurs mobilières et des lois en matière d&#39;emploi, peuvent aider les sociétés à éviter de faire face à des coûts inattendus et à des situations de controverse, en plus de leur conférer des avantages importants quant au développement d&#39;une main-d&#39;œuvre de qualité et d&#39;une équipe de gestion de niveau supérieur.</p>    <p>Le groupe Rémunération des dirigeants est une équipe multidisciplinaire comprenant des experts en droit fiscal, en régimes de retraite et avantages sociaux, en droit de l&#39;emploi et des valeurs mobilières ainsi qu&#39;en gouvernance d&#39;entreprise. À titre de cabinet de plein service dont les bureaux sont répartis dans l&#39;ensemble du pays, ainsi qu&#39;à Moscou et à Londres, Gowling WLG est en mesure de vous offrir des conseils de pointe et harmonieux au chapitre des enjeux liés à la rémunération et aux avantages sociaux, tout en tenant compte des perspectives locale et mondiale.</p>    <h3>Des régimes adaptés à tous les besoins</h3>    <p>Avant de choisir un régime de rémunération des dirigeants, nous œuvrons avec nos clients pour déterminer quels régimes leur permettra de mieux atteindre leurs objectifs d&#39;affaires. Une fois que nous avons saisi les objectifs d&#39;une organisation, nous sommes à même d&#39;user de notre expérience, de notre connaissance et de notre créativité pour élaborer des méthodes uniques et novatrices en vue de les atteindre.</p>    <p>os experts peuvent élaborer une vaste gamme de régimes de rémunération des plus actuels, y compris des régimes et des conventions fondés sur le rendement, des régimes d&#39;options d&#39;achat d&#39;actions fictives, de même que des régimes de pension agréés, des régimes supplémentaires de retraite, des conventions de retraite, des REER collectifs et des allocations de retraite. Nous conseillons nos clients sur différents aspects de la gouvernance, la conformité aux lois sur les valeurs mobilières et aux opérations boursières, ainsi que sur les répercussions fiscales auxquelles s&#39;exposent les sociétés et les individus qui participent à ces régimes. Nos avocats spécialisés en droit de l&#39;emploi possèdent de l&#39;expérience éprouvée sur le plan de la rédaction et de la négociation de contrats de travail de dirigeants, ainsi qu&#39;en matière de conventions en situation de changement de contrôle, d&#39;accords d&#39;indemnisation et de programmes d&#39;incitation au départ.</p>    <h3>Au Canada et à l&#39;étranger</h3>    <p>Notre cabinet est en mesure d&#39;offrir des conseils de pointe sur les pratiques en matière de rémunération et de fiscalité qui ont cours aux États-Unis et à l&#39;échelle internationale. Nous offrons des conseils intégrés de haute qualité relativement aux incidences fiscales de ces pays en plus des incidences fiscales des conventions canadiennes pour des clients et leurs employés.</p>    <p>Nous offrons également à nos clients une assistance en ce qui a trait au transfert de personnel étranger au Canada à des fins d&#39;emploi de façon temporaire ou permanente, en plus de les conseiller relativement aux enjeux liés à la délivrance de visas et de permis de travail, ainsi qu&#39;aux incidences fiscales canadiennes sur le revenu du personnel étranger affecté au Canada et du personnel canadien affecté dans d&#39;autres pays. Nos services comprennent la planification fiscale avant ou après le transfert au Canada.</p>  ",GWLG.Canada,NULL,BAA166B8-ED10-469A-BEC6-0A2E4C72DBBB,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
243,/Services/Family-Law/Canada,fr-CA,53497107-7A75-437E-A88D-5CB559850BD4,Canada,Canada,Les relations entre les membres d'une même famille sont parfois difficiles à traiter. Nos professionnels peuvent vous aider à résoudre les conflits familiaux et à trouver des stratégies pour les éviter.,NULL,NULL,"<p>Les relations entre les membres d&#39;une même famille sont parfois difficiles à traiter. Nos professionnels peuvent vous aider à résoudre les conflits familiaux et à trouver des stratégies pour les éviter.</p>    <h3>Une expertise de premier rang</h3>    <p>Les membres du groupe de pratique national en droit de la famille fournissent un service personnalisé à leurs clients et les guident vers la résolution de leurs différends familiaux au moyen de planification au préalable, de négociations habiles et d&#39;une représentation de premier rang devant les tribunaux. Les experts de ce groupe vous aident à résoudre toutes les questions touchant le droit de la famille par l&#39;intermédiaire de la négociation, de la médiation, du droit collaboratif et du recours en justice.</p>    <p>Nous possédons une riche expertise. Outre les services traditionnels que nos spécialistes en droit de la famille fournissent à des familles en transition, notre cabinet est aussi à même de donner des conseils stratégiques à des clients du monde des affaires relativement à la protection de leurs biens, ainsi que de travailler en collaboration avec d&#39;autres professionnels de nos bureaux pour prodiguer des conseils sur les répercussions de questions liées au droit de la famille sur la planification de la succession, les affaires et la fiscalité.</p>    <h3>Des services adaptés à tous les besoins</h3>    <p>Nos professionnels offrent un vaste éventail de services, y compris de l&#39;assistance dans les domaines suivants :les adoptions; la négociation et la rédaction de contrats de mariage, d&#39;ententes de cohabitation, d&#39;ententes de séparation et de contrats de maternité de substitution; le partage des biens; la détermination des pensions alimentaires pour le conjoint ou pour les enfants et les droits y afférents; ainsi que les demandes de divorce.</p>    <p>Dans certains cas, nous pouvons rédiger des ententes pour assurer la protection de biens, y compris des fiducies familiales et des biens d&#39;entreprise. Dans le cas de affaires portées en justice, les membres de notre équipe plaident leurs causes devant les tribunaux et en arbitrage privé.</p>  ",GWLG.Canada,53ee8dd0-2165-4810-bcfc-def5b50f875f,CBE07A16-0986-4A6B-9106-D0834ADFE5BC,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{28312680-682A-4B72-AEE4-27712CD75F5A}
245,/Services/Gaming/Canada,fr-CA,C219B55A-C7F7-461B-97EC-AEC77CCC1588,Canada,Canada," Le groupe Droit du jeu de Gowling WLG veille sur les intérêts d'un large éventail de clients issus de l'industrie du jeu, en plus de s'assurer que leurs activités et leurs services respectent scrupuleusement un cadre hautement réglementé. ",NULL,NULL,"<p>Le jeu est une industrie qui génère des milliards de dollars à l&#39;échelle mondiale. Dans cette optique, les entreprises doivent s&#39;appuyer sur un conseiller juridique de premier plan pour maximiser leur potentiel et sauvegarder leurs avoirs. Le groupe Droit du jeu de Gowling WLG veille sur les intérêts d&#39;un large éventail de clients issus de l&#39;industrie du jeu, en plus de s&#39;assurer que leurs activités et leurs services respectent scrupuleusement un cadre hautement réglementé. Nos clients comptent sur nous pour les conseiller de manière créative et pour apporter des solutions novatrices aux difficultés et défis qu&#39;ils doivent affronter.</p>    <h3>Nous protégeons vos droits</h3>    <p>Nous possédons une riche expérience dans la prestation de conseils à des acteurs de l&#39;industrie du jeu au Canada. Nos clients proviennent aussi bien des régies de loteries que d&#39;une gamme diversifiée de participants à ce secteur. Nous conseillons régulièrement nos clients en ce qui a trait aux régimes de réglementation applicables au Canada, ainsi qu&#39;aux composantes commerciales liées à l&#39;industrie du jeu, y compris le jeu en ligne, les jeux de sports et la publicité.</p>    <p>Nous assurons la prestation de conseils afférents à l&#39;exploitation et à l&#39;acquisition de casinos par des investisseurs stratégiques et financiers, en plus de négocier des ententes de consortium liées à des casinos. De plus, nous participons fréquemment à la négociation et à la rédaction d&#39;ententes commerciales, d&#39;ententes de concession de licence en technologie et de demandes de brevets.</p>    <h3>Une vaste expérience de l&#39;industrie et une approche stratégique fondée sur le travail d&#39;équipe</h3>    <p>Notre groupe peut vous conseiller relativement à une vaste gamme d&#39;enjeux liés à ce secteur. Lorsque leur mandat consiste à protéger et à faire respecter des droits en PI, nos spécialistes bénéficient du soutien de la plus importante pratique du Canada en droit de la propriété intellectuelle, de la publicité et du marketing. Forte de sa portée nationale, notre équipe assure la coordination harmonieuse des services dans l&#39;ensemble du pays, conseille ses clients en ce qui a trait à la réglementation fédérale et provinciale afférente au jeu et les aide à réaliser leurs objectifs commerciaux.</p>  ",GWLG.Canada,1f6ff58e-9aec-4874-b591-42a0352c9977,5286F652-796D-4C16-8970-A97E5C4E98C9,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{252EDF3E-BE13-4CF0-B512-E0270C5C60B7}
246,/Services/Government-Affairs/Canada,fr-CA,303B7FBC-B3AD-488B-947C-F2848E099F09,Canada,Canada,"Notre groupe des affaires gouvernementales fournit des conseils sophistiqués sur les plans juridique, réglementaire et public sur pratiquement toutes les questions relatives aux gouvernements.",NULL,NULL,"<p>Le groupe Affaires gouvernementales possède une expérience exceptionnelle, autant dans le secteur public que dans le secteur privé, et une perspective à 360 degrés qui lui permet de donner des conseils perspicaces de nature juridique et réglementaire, et des conseils concernant les politiques publiques, et ce, pour à peu près toute question d&#39;ordre gouvernemental. Nous trouvons des solutions et nous offrons des résultats.</p>    <h3>Les solutions qui vous conviennent</h3>    <p>Gowling WLG offre des conseils à une grande diversité de clients partout au Canada, entre autres, à tous les échelons du gouvernement et de ses organismes, à des associations commerciales et professionnelles, à des organismes non gouvernementaux, à des gouvernements étrangers, à de petites entreprises et à des multinationales, à des sociétés d&#39;État, à des entreprises rendant des services publics, à des promoteurs immobiliers et à des établissements d&#39;enseignement tels que des écoles et des universités. Notre expertise dans des secteurs comme ceux du lobbying, des marchés publics, de l&#39;énergie et des infrastructures, du commerce international ainsi que du transport et de l&#39;immigration, nous permet d&#39;offrir une grande diversité de services à des entreprises internationales qui souhaitent pénétrer le marché canadien.</p>    <p>Nos professionnels desservent aussi les Premières nations et des clients d&#39;industries comme l&#39;agroalimentaire, l&#39;environnement et la technologie propre, l&#39;aérospatiale et la défense, la technologie et la fabrication. Nous représentons les intérêts de nos clients devant des comités parlementaires et des groupes de travail du gouvernement à tous les niveaux des cours fédérales et provinciales.</p>    <h3>Nous accélérons l&#39;atteinte de vos objectifs</h3>    <p>Les professionnels de Gowling WLG ont une excellente compréhension du gouvernement, un grand nombre d&#39;entre eux ayant été des membres élus, occupé des postes de direction au gouvernement ou contribué à la mise au point de politiques, de lois et de règlements. Notre réseau étendu de personnes-ressources au gouvernement est un avantage déterminant pour les intervenants de l&#39;industrie qui font part de leurs inquiétudes aux décideurs. Le cabinet donne aussi des conseils sur la conformité en matière de lobbying et sur les obligations en matière d&#39;éthique au sujet des cadeaux et de l&#39;hospitalité, ainsi que sur des questions relatives aux conflits d&#39;intérêts au niveau fédéral, provincial et municipal.</p>  ",GWLG.Canada,40d2e703-8710-44d5-9b4a-6108d5734e98,39CA3D7E-072F-42C5-AD32-EE659513B4B3,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A09A7A80-1041-4B5E-B156-C023BC66DA86}
247,/Services/Immigration/Canada,fr-CA,C948345F-4372-4B79-8A34-6E8DED01B3D9,Canada,Canada,"La complexité des lois et des règlements en matière d'immigration n'a aucun secret pour le groupe Immigration de Gowling WLG. Nous vous aidons à assurer le transfert des personnes de votre choix vers l'endroit de votre choix, et ce, au moment de votre choix.",NULL,NULL,"<p>Dans le contexte économique mondial d&#39;aujourd&#39;hui, il est crucial de pouvoir aussi bien transférer du personnel outre frontière que de recruter des travailleurs qualifiés à l&#39;étranger. La complexité des lois et des règlements en matière d&#39;immigration n&#39;a aucun secret pour le groupe Immigration de Gowling WLG. Nous vous aidons à assurer le transfert des personnes de votre choix vers l&#39;endroit de votre choix, et ce, au moment de votre choix.</p>    <p>Chefs de file du droit de l&#39;immigration depuis plus de 20 ans, nous collaborons étroitement avec nos collègues spécialistes des secteurs du droit du travail, de la fiscalité transfrontalière, des affaires et de la propriété intellectuelle, afin de proposer aux entreprises une gamme complète de services qui leur permettent de s&#39;établir au Canada et d&#39;y prospérer.</p>    <p>Notre équipe de spécialistes de l&#39;immigration prodigue en temps voulu des services de haute qualité, à la fois efficaces et économiques. Nos solutions novatrices en droit de l&#39;immigration couvrent les aspects suivants :</p>    <ul>   <li>Les demandes de transfert d&#39;employés d&#39;entreprise - à des fins temporaires ou permanentes</li>   <li>Les demandes de permis de travail, y compris les demandes au titre de l&#39;ALÉNA</li>   <li>Les demandes d&#39;avis relatif au marché du travail</li>   <li>Les demandes de résidence permanente dans les catégories travailleur qualifié, affaires et famille</li>   <li>Les demandes pour les investisseurs et les entrepreneurs</li>   <li>Les demandes en vertu du Programme des candidats des provinces</li>   <li>Les demandes de citoyenneté</li>   <li>Les demandes pour surmonter les problèmes liés à l&#39;admission</li>  </ul>    <p>Au chapitre de la mobilité, notre expertise et notre savoir-faire se révèlent des atouts incomparables pour nos clients. En guise de complément à nos services d&#39;immigration, nous offrons une vaste gamme de solutions à valeur ajoutée, dont :</p>    <ul>   <li>L&#39;élaboration de stratégies et de politiques internationales en ressources humaines</li>   <li>Des conseils aux sociétés étrangères qui étendent leurs activités en Amérique du Nord</li>   <li>La préparation de contrats de travail pour les travailleurs étrangers</li>   <li>La création de solutions clés en main en matière d&#39;immigration et de mobilité de la main-d&#39;œuvre</li>   <li>De l&#39;assistance pour traiter avec les services d&#39;immigration d&#39;affaires internationaux;</li>   <li>Le déploiement de services intégrés de planification fiscale pour les expatriés;</li>   <li>De l&#39;aide dans le recrutement et l&#39;évaluation de candidats étrangers.</li>  </ul>    <p>Nous avons représenté avec succès l&#39;une des plus importantes entreprises de jeux et de logiciels au Canada dans la mise en œuvre de stratégies d&#39;immigration et de recrutement à l&#39;étranger. Nous avons également conseillé le plus grand fournisseur canadien de vidéos numériques professionnelles en matière d&#39;immigration et aidé une société internationale d&#39;hydrocarbures à mettre au point ses politiques d&#39;immigration.</p>  ",GWLG.Canada,aa6497d4-fce6-44ea-b34c-5e7e86382372;89b4f31e-be98-4f5c-a2b3-c2c53bcb2bc2;0346f71a-2b83-49a5-ba26-903b70ddcd2b,C88EECE6-41B1-4DB2-A8FB-58D8E5EEB453,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F5614FDC-82A8-445B-BEEC-2434212F5F7E}|{F46EF6CD-ABDD-47AB-9349-55BAFD9C779B}|{D9B25F9E-FCB9-42C1-8D88-E2AF7F307257}
248,/Services/Indigenous-Law/Canada,fr-CA,03A20324-C349-4055-B1A3-035FDF3528D1,Canada,Canada,Il existe un certain niveau d'expertise que seul un demi-siècle d'expérience permet d'acquérir - et un niveau de succès que seul un conseiller juridique de confiance peut vous procurer.,NULL,NULL,"<p>Depuis les années 1950, Gowling WLG joue un rôle de premier plan en ce qui concerne le droit autochtone au Canada. Nous avons collaboré avec les Premières Nations, de même qu&#39;avec les Métis et les Inuit, dans le cadre d&#39;affaires historiques, dont des ententes sur l&#39;autonomie gouvernementale, des projets de développement des ressources naturelles et des causes traitées par la Cour suprême du Canada.</p>    <p>Notre héritage bien particulier nous permet de vous fournir des conseils juridiques de pointe sur tous les aspects du droit autochtone, tout en vous fournissant des solutions pratiques et rentables qui vous aident à concrétiser votre vision et à réaliser vos objectifs.</p>    <h3>Conseils juridiques de qualité supérieure &nbsp;</h3>    <p>Gowling WLG possède l&#39;un des groupes de pratique du droit autochtone les plus importants et les plus respectés du Canada. Nos avocats sont fréquemment reconnus en tant que praticiens chefs de file dans leur domaine dans des guides juridiques clés tels que <em>Chambers Global</em>, <em>The Best Lawyers</em>, et le <em>Canadian Legal Lexpert Directory</em>. Le répertoire <em>The Best Lawyers in Canada</em> de 2019 a d&rsquo;ailleurs nommé Gowling WLG &laquo;&nbsp;Cabinet de l&rsquo;année&nbsp;&raquo; en droit autochtone.</p>    <h3>Expertise de pointe</h3>    <p>La portée et la complexité des besoins et objectifs des communautés autochtones évoluent sans cesse. Par conséquent, la pratique du droit autochtone exige plus que jamais une expertise spécialisée dans une multitude de domaines. En tant que cabinet juridique à service complet, Gowling WLG est outillée pour répondre à vos besoins juridiques variés - tant au chapitre des droits issus de traités et des droits inhérents, des revendications territoriales, de l&#39;autonomie gouvernementale, de l&#39;impôt et des fiducies, que dans le cadre d&#39;affaires liées à l&#39;énergie, aux mines, au développement économique et à l&#39;environnement.</p>    <h3>Solides liens avec les communautés autochtones</h3>    <p>Nous agissons depuis plus de 50 ans en tant que conseillers juridiques de confiance auprès des peuples autochtones. Nous recrutons activement des avocats d&#39;origine autochtone et appuyons diverses initiatives visant à promouvoir l&#39;évolution de ces derniers au sein de la profession juridique.</p>    <h3>Perspective unique</h3>    <p>Au Canada, Gowling WLG est l&#39;un des seuls cabinets à agir pour le compte de clients autochtones et d&#39;intervenants du secteur privé, de promoteurs de projets et de tous les ordres de gouvernement. Ainsi, nos clients bénéficient de la compréhension approfondie que nous détenons quant à la perspective de chacune des parties concernées, et grâce à la portée nationale de notre pratique, nos clients profitent de l&#39;accès à des pratiques et stratégies exemplaires issues de partout au pays.</p>    <h3>Service excellent &nbsp;</h3>    <p>Notre réputation est fondée sur notre constante capacité de collaborer, d&#39;être flexibles, de réagir en temps opportun et par-dessus tout, d&#39;être disponibles pour aider nos clients &ndash; partout et en tout temps.</p>    <h3>Pour en savoir plus</h3>    <p>Pour savoir comment nous pouvons vous aider à réussir, veuillez communiquer avec l&rsquo;un ou l&rsquo;autre des membres de notre équipe.</p>  ",GWLG.Canada,NULL,264F3CAC-2DDB-4C4E-8048-EE0D63D1E68D,NULL,0,1,t-white,<p>Il existe un certain niveau d&#39;expertise que seul un demi-siècle d&#39;expérience permet d&#39;acquérir - et un niveau de succès que seul un conseiller juridique de confiance peut vous procurer.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
249,/Services/Insurance-Professional-Liability/Canada,fr-CA,58E77638-706B-40F9-AB7A-AA57D680BB50,Canada,Canada,"Comme le secteur des assurances est en constante évolution, il est primordial que les avocats œuvrant dans ce secteur aient non seulement une connaissance de la loi, mais aussi une compréhension approfondie des tendances de l'industrie ainsi qu'une expertise éprouvée y afférente.",NULL,NULL,"<p>Comme le secteur des assurances est en constante évolution, il est primordial que les avocats œuvrant dans ce secteur aient non seulement une connaissance de la loi, mais aussi une compréhension approfondie des tendances de l&#39;industrie ainsi qu&#39;une expertise éprouvée y afférente.</p>    <p>Le groupe Assurance et responsabilité professionnelle est le plus important en nombre au Canada, et nous sommes engagés à offrir un service hors pair en la matière.</p>    <p>Nous savons que le secteur des assurances est en constante évolution et que cette industrie et ses conseillers font face à de nouveaux défis: consolidation de l&#39;industrie, concurrence accrue entre les compagnies d&#39;assurances et les banques, modifications législatives et réglementaires, augmentation des réclamations de mauvaise foi et des attributions de dommages-intérêts exemplaires et augmentation des risques de recours collectifs. Nos avocats œuvrant dans ce secteur sont à même de vous conseiller pour affronter ces défis.</p>    <p>Grâce à nos conseils de qualité, créatifs et opportuns, à notre prestation de solutions juridiques novatrices, nous fournissons des résultats et une valeur ajoutée inégalés à la communauté des assurances.</p>    <p>Notre équipe est constamment reconnue à l&#39;échelle nationale pour son travail exceptionnel. Cette reconnaissance comprend le titre canadien &laquo; Cabinet en matière d&#39;assurances de l&#39;année &raquo; décerné par <em>Benchmark Litigation</em>, une publication de classements juridiques de renom, et ce, trois années consécutives (2014, 2015 et 2016).</p>    <p>Voici la gamme complète de services que nous offrons à l&#39;industrie des assurances:</p>    <h3>Défense</h3>    <ul>   <li>Réclamations d&#39;assurance pour dommages corporels</li>   <li>Réclamations liées à la propriété, incluant les sinistres d&#39;incendie et les réclamations relatives à l&#39;environnement</li>   <li>Responsabilité du fait du produit</li>   <li>Réclamations liées à la responsabilité professionnelle pour divers corps de métier: ingénieurs, promoteurs, architectes, entrepreneurs, comptables, actuaires, médecins, avocats, psychologues, physiothérapeutes, agents immobiliers, agents d&#39;assurance et conseillers financiers</li>   <li>réclamations liées à la responsabilité civile des administrateurs et des dirigeants</li>   <li>Recouvrements liés au transport&nbsp; routier (camions), ferroviaire et aérien</li>   <li>Réclamations en construction</li>   <li>Réclamations dans l&#39;industrie lourde, y compris relativement aux champs pétrolifères et aux mines</li>   <li>Assurance vie et assurance-invalidité</li>   <li>Institutions financières, maisons de courtage et conseillers financiers, sociétés d&#39;investissement et leurs employés et agents</li>   <li>Recours collectifs au Canada et coopération avec les avocats américains pour les recours collectifs transfrontaliers</li>  </ul>    <h3>Couverture d&#39;assurance</h3>    <ul>   <li>Élaboration de libellé de police</li>   <li>Prestation d&#39;opinions de couverture relatives aux réclamations d&#39;assurance et de réassurance</li>   <li>Litige en matière de couverture</li>   <li>Arbitrage liés à des réclamations de réassurance</li>  </ul>    <h3>Services aux sociétés et services de réglementation</h3>    <ul>   <li>Acquisition et vente de compagnies et de courtiers d&#39;assurance</li>   <li>Attribution de permis</li>   <li>Développement et approbation de produits</li>   <li>Distribution</li>   <li>Conformité</li>  </ul>    <h3>Subrogation</h3>    <ul>   <li>Poursuite agressive de recours subrogatoires</li>   <li>Possibilité d&#39;ententes spéciales quant aux honoraires, comme des honoraires au pourcentage, pour les recours subrogatoires</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Nous sommes à votre disposition pour répondre à vos besoins juridiques en matière d&#39;assurance et de responsabilité professionnelle. <a href=""~/fr/people?page=1&amp;services=451&amp;locations=GWLG.Canada"" target=""_blank"">Adressez-vous à tout autre membre de notre groupe national pour plus de détails</a>.</p>  ",GWLG.Canada,bd7f8b8d-ad9f-4a23-a17c-8f9950d52b6d,3389C6CF-54C5-47DB-81A0-7C09BE2BE982,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2A8A0308-C190-4661-B67D-E6A2457C1017}
250,/Services/Intellectual-Property-Law/Canada,fr-CA,4130B425-E506-4956-B224-9D983F5D866E,Canada,Canada,"Chaque étape de la mise en marché présente ses défis - et Gowling WLG vous aide à les relever tous. Au moyen des stratégies appropriées, notre cabinet est à même de protéger vos biens incorporels et de faire respecter les droits y afférents, en plus de vous aider à maximiser leur valeur.",NULL,NULL,"<p>Depuis plus de 125 ans, nous plaidons et remportons des causes pour le compte de nos clients. Forts d&#39;une expertise juridique et technique sans pareille, nos professionnels représentent leurs clients de façon remarquable dans le marché actuel caractérisé par le dynamisme et la concurrence.</p>    <p>Comme nous favorisons l&#39;innovation, nous aimons aborder vos situations particulières de façon différente, ce qui nous permet de concevoir des solutions efficaces qui correspondent à vos besoins particuliers. Bon nombre de nos clients apprécient la qualité de notre plate-forme nationale multiservice et se tournent souvent vers nos professionnels pour obtenir des conseils sur des situations qui surpassent les enjeux traditionnels liés à la propriété intellectuelle.</p>    <p>Vous pouvez compter sur notre groupe chevronné en droit de la propriété intellectuelle pour vous représenter en ce qui a trait à l&#39;ensemble des questions relatives à vos éléments d&#39;actif incorporels, y compris la protection des brevets (et le respect des droits y afférents), de marques de commerce, de droits d&#39;auteur, de dessins industriels, de secrets commerciaux et d&#39;autres droits associés à la propriété intellectuelle.</p>    <h3>Demandes générales concernant les dépôts</h3>    <p>Pour toute question sur les poursuites de demandes concernant la propriété intellectuelle ou les dépôts de demandes de brevets ou d&#39;enregistrement d&#39;une marque de commerce, veuillez écrire à <a>ipinfo@gowlingwlg.com</a>.</p>  ",GWLG.Canada,273eab86-9e6f-4b43-ae6c-0a91be64e92c,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,"<p>Chaque étape de la mise en marché présente ses défis - et Gowling WLG vous aide à les relever tous. Au moyen des stratégies appropriées, notre cabinet est à même de protéger vos biens incorporels et de faire respecter les droits y afférents, en plus de vous aider à maximiser leur valeur.</p>  ",Actualités,05276a40-b601-44a4-bdfa-71e4c8224862;57ccc89c-c466-4304-a4bd-7494918c4b35;bb29ad8f-dd70-44fe-9ae8-0ece5da63501;b4bcbcb1-1fda-42e3-a6e9-a590300386b6;bdfaa031-4082-4b57-88f0-d2da79f991f8;ecc3399d-1cbb-4739-837c-d5fa779205af,Nos ressources sur la propriété intellectuelle,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{0621B0FA-0387-4450-96A8-00D4D8C90A13}
251,/Services/International-Arbitration/Canada,fr-CA,C93E6B04-D3C7-4F67-B46A-221422B040DF,Canada,Canada,"Comme elle emploie des centaines de plaideurs chevronnés partout dans le monde, Gowling WLG possède les connaissances et l'expérience requises pour résoudre efficacement vos différends internationaux. Ainsi, vous pouvez vous concentrer sur l'atteinte de vos objectifs commerciaux.",NULL,NULL,"<p>En cas de différend international, votre entreprise optera peut-être pour l&#39;arbitrage privé plutôt qu&#39;un règlement traditionnel devant les tribunaux.</p>    <p>Comme elle emploie des centaines de plaideurs chevronnés partout dans le monde, Gowling WLG possède les connaissances et l&#39;expérience requises pour résoudre efficacement vos différends internationaux. Ainsi, vous pouvez vous concentrer sur l&#39;atteinte de vos objectifs commerciaux.</p>    <p>Nous représentons des clients dans le cadre d&#39;un grand nombre de dossiers d&#39;arbitrage institutionnel, conformément aux règles de la Cour pénale internationale, de la Commission des Nations&nbsp;Unies pour le droit commercial international, de la Cour d&#39;arbitrage international de Londres, du Centre international pour le règlement des différends relatifs aux investissements, du Singapore International Arbitration Centre, de la Commission chinoise d&#39;arbitrage économique et commercial internationale et de l&#39;American Arbitration Association, ainsi qu&#39;à de nombreuses règles d&#39;arbitrage ad&nbsp;hoc. Voilà qui nous a valu le plus grand respect qui soit de la part des communautés juridiques et du commerce international.</p>    <p>Chez Gowling WLG, nous préparons la voie pour que vous réussissiez à régler les différends.</p>    <h3>À l&#39;abri des regards</h3>    <p>Il vaut mieux résoudre certains conflits à huis clos. Nos avocats plaidants expérimentés peuvent s&#39;occuper de votre dossier discrètement et efficacement en procédant à l&#39;arbitrage, à la négociation, à la médiation ou à un mode substitutif de résolution des différends.</p>    <h3>contrôle, la clé du succès</h3>    <p>L&#39;arbitrage est un processus flexible. Notre capacité à contrôler ce processus vous soulage d&#39;une grande part d&#39;incertitude et vous évite de tenter de deviner qui sera l&#39;arbitre et quelles règles seront appliquées. Grâce à notre connaissance approfondie de la procédure d&#39;arbitrage, nous pourrons travailler en étroite collaboration avec vous pour établir un cadre de règlement des différends adapté à vos besoins.</p>    <h3>Innovation et collaboration</h3>    <p>Chaque différend est unique. C&#39;est pourquoi nous collaborerons avec vous pour faire entendre votre voix - et veiller à ce que vos intérêts soient toujours défendus. Nous établirons avec vous de solides voies de communication avant que survienne un différend afin de garantir que, dans une telle éventualité, vous aurez les meilleures chances de succès possibles.</p>    <p>Si vous faites affaire avec nous, vous apprécierez également notre approche novatrice de gestion des projets juridiques, qui assure la transparence des coûts et de l&#39;évolution du différend faisant l&#39;objet de l&#39;arbitrage.</p>    <h3>Une vaste expertise, à l&#39;endroit et au mo ment où vous en avez besoin</h3>    <p>Nous représentons une clientèle mondiale issue de secteurs variés. Peu importe le type de différend, nous vous offrirons un niveau de service constant qui répond aux besoins uniques de votre entreprise. Nous réglons des dossiers d&#39;arbitrage nationaux et internationaux complexes dans les domaines suivants:</p>    <ul>   <li>Aviation</li>   <li>Institutions financières et services financiers</li>   <li>Construction et génie</li>   <li>Énergie</li>   <li>Technologie de l&#39;information</li>   <li>Propriété intellectuelle</li>   <li>Différends opposant un investisseur et un État</li>   <li>Pétrole et gaz</li>   <li>Exploitation minière et environnement</li>  </ul>    <h3>Une véritable présence internationale</h3>    <p>Puisqu&#39;elle compte plus de 1,400 avocats au Canada, au Royaume-Uni, en Europe, en Asie et au Moyen-Orient, Gowling WLG dispose des ressources et de l&#39;expertise nécessaires pour vous donner des conseils fiables en matière de litige - à l&#39;endroit et au moment où vous en avez besoin.</p>    <h3>En savoir plus</h3>    <p>Pour en savoir davantage sur la façon dont nous pouvons vous aider, <a href=""~/fr/people/?page=1&amp;services=460&amp;locations=GWLG.Canada"" target=""_blank"">communiquez avec tout autre membre de notre équipe</a>.</p>  ",GWLG.Canada,3ae82526-329e-41d7-8e7e-7b14a7af12bc,CBACBAC0-ABB0-4B36-A8FC-3A060A5EF154,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3275D488-797C-47CE-A9DE-98A8ABFED5A2}
252,/Services/International-Trade-and-Customs/Canada,fr-CA,C0475033-F7EE-4098-88EB-E4E8C2268E98,Canada,Canada,"Afin de réussir dans ce marché mondial complexe, les organisations ont besoin d'un partenaire fiable qui détient de l'expérience pratique et qui peut les aider à utiliser stratégiquement les ententes commerciales tout en leur fournissant des conseils efficaces et des solutions éprouvées aux problèmes complexes de conformité créés par ces ententes.",NULL,NULL,"<p>Alors que les négociations pour l&#39;établissement de nouvelles ententes régionales et bilatérales de commerce et d&#39;investissements ont atteint un niveau d&#39;activité sans précédent, la récente instabilité économique mène, au même moment, à des mesures commerciales protectionnistes et punitives. Afin de réussir dans ce marché mondial complexe, les organisations ont besoin d&#39;un partenaire fiable qui détient de l&#39;expérience pratique et qui peut les aider à utiliser stratégiquement les ententes commerciales tout en leur fournissant des conseils efficaces et des solutions éprouvées aux problèmes complexes de conformité créés par ces ententes.</p>    <h3>Des souks aux hypermarchés</h3>    <p>Qu&#39;il s&#39;agisse de contrôle des exportations, de conformité aux règles douanières, de litige de commerce international ou de relations avec les gouvernements, le groupe Commerce international de Gowling WLG prend le temps de bien comprendre les défis uniques auxquels chaque client fait face et de créer des solutions sur mesure pour que chacun puisse atteindre ses objectifs commerciaux.</p>    <p>Le groupe Commerce international de Gowling WLG, qui représente des fabricants, des importateurs, des associations professionnelles et des gouvernements au Canada comme à l&#39;étranger, propose des solutions efficaces et pratiques à une grande variété de questions relatives au commerce international, comme le droit antidumping et le droit compensateur, la classification douanière, l&#39;évaluation et les sanctions pécuniaires dans le cadre du Régime de sanctions administratives pécuniaires (RSAP), le contrôle des importations et des exportations, l&#39;utilisation stratégique des ententes de commerce et d&#39;investissements, y compris l&#39;OMC et l&#39;ALÉNA et les dispositions du Chapitre 11 de L&#39;ALÉNA portant sur les règles régissant les différends entre un investisseur et un État. Grâce à son expertise particulièrement développée en matière de propriété intellectuelle relative au commerce et d&#39;importation d&#39;aliments et de produits de santé naturels, Gowling WLG est le choix par excellence pour donner son soutien dans des cas complexes de commerce international.</p>    <p>Nos clients nous font confiance en raison de notre expérience éprouvée dans le règlement de litiges et dans la représentation de clients devant le Tribunal canadien du commerce extérieur, la Cour fédérale du Canada, la Cour d&#39;appel fédérale et les groupes spéciaux de l&#39;ALÉNA. Des publications spécialisées comme le <em>Chambers Global Guide</em>, <em>l&#39;International Who&#39;s Who of Trade &amp; Customs Lawyers</em>, le <em>Canadian Legal Lexpert Directory</em>, et <em>The World&#39;s Leading Business Lawyers</em> ont reconnu le leadership de notre équipe dans les affaires relatives aux lois du commerce et des douanes.</p>    <h3>Une expérience inegalée</h3>    <p>Puisque Gowlings compte au sein de son équipe des professionnels qui ont participé directement aux négociations et à la mise en application de l&#39;Accord de libre-échange nord-américain et de l&#39;Accord de libre-échange entre le Canada et les États-Unis, vous pouvez compter sur le groupe Commerce international de Gowling WLG pour vous proposer des solutions uniques et efficaces à tous vos besoins en matière de commerce.</p>  ",GWLG.Canada,afc382e9-2b75-4a26-9e20-0a8c68694164,BAC2F2F8-09C0-4D06-B0C8-98D9567ADFC7,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{5AFA17F4-B29F-4E20-A9C6-AFD5CDAE180D}
253,/Services/IP-Litigation-Strategy/Canada,fr-CA,75A5326B-2ADA-4D64-B9D5-851EF9A0A5A3,Canada,Canada,Le règlement de litiges en droit de la propriété intellectuelle (PI) est l'un des points forts de Gowling WLG. Nous sommes reconnus par nos pairs et par nos clients comme un chef de file dans ce domaine d'expertise.,NULL,NULL,"<p>Le règlement de litiges en droit de la propriété intellectuelle (PI) est l&#39;un des points forts de Gowling WLG. Nous sommes reconnus par nos pairs et par nos clients comme un chef de file dans ce domaine d&#39;expertise. Nous savons comment obtenir des résultats pour nos clients. Que ce soit dans le cadre de différends &laquo; à enjeu de taille &raquo; ou de simples disputes liées à la &lt;abbr title=&quot;Propriété Intellectuelle&quot;&gt;PI&lt;/abbr&gt;, nous travaillons de concert avec nos clients afin qu&#39;ils obtiennent des résultats qui correspondent à leurs objectifs d&#39;affaires.</p>    <p>Depuis plus d&#39;un siècle, Gowling WLG est l&#39;un des principaux cabinets canadiens en matière de litige en protection intellectuelle. Nous avons établi notre savoir-faire sur des fondements axés sur l&#39;excellence et avons bâti la plus importante pratique du litige en propriété intellectuelle du Canada relativement aux brevets, aux marques de commerce, aux droits d&#39;auteurs, aux sciences de la vie, aux secrets commerciaux et au droit de la publicité.</p>    <p>Notre équipe protège avec succès les intérêts de nos clients en matière de propriété intellectuelle partout dans le monde. Nous dirigeons des causes qui s&#39;étendent sur plusieurs territoires, afin de répondre aux attentes de nos clients dans le cadre de litiges.Nos professionnels de la propriété intellectuelle sont renommés à l&#39;échelle internationale pour être à l&#39;avant-garde dans leur domaine d&#39;expertise :</p>    <ul>   <li><em>Chambers Global</em> décrit Gowling WLG comme le chef de file canadien en droit de la &lt;abbr title=&quot;Propriété Intellectuelle&quot;&gt;PI&lt;/abbr&gt;</li>   <li><em>Managing Intellectual Property</em> (MIP) souligne le rôle avant-gardiste que joue Gowling WLG à l&#39;égard de la législation applicable aux marques de commerce et aux brevets depuis 19 années consécutives</li>   <li><em>Lexpert</em> affirme que Gowling WLG possède la plus importante pratique en droit de la &lt;abbr title=&quot;Propriété Intellectuelle&quot;&gt;PI&lt;/abbr&gt; de la majorité des villes qui ont fait l&#39;objet de l&#39;étude</li>  </ul>    <p>Nos avocats plaidants en &lt;abbr title=&quot;Propriété Intellectuelle&quot;&gt;PI&lt;/abbr&gt;, qui possèdent souvent des connaissances particulières en génie ou en science, travaillent en étroite collaboration avec notre équipe de poursuites de demandes de brevets, dans le but de fournir des analyses techniques cruciales dans des affaires liées à des brevets et à des secrets commerciaux. Que ce soit pour des produits pharmaceutiques ou pour des logiciels, nous pouvons compter sur le travail de professionnels qui comprennent votre technologie. Nos avocats plaidants ont représenté des clients &ndash; et ont obtenu gain de cause - dans le cadre des plus importants litiges survenus au Canada.</p>    <p>Notre expérience en litige en matière de droits d&#39;auteurs et de marques de commerce reste incontestée. Le Barreau du Haut-Canada et INTA ont d&#39;ailleurs sollicité nos services pour les représenter devant la Cour suprême du Canada. Nous sommes appelés à protéger certaines des marques de commerce les plus notoires du Canada, tout en offrant à nos clients des conseils stratégiques à l&#39;égard de leurs principales bannières.</p>  ",GWLG.Canada,30cca9c9-eb77-425a-91fc-d88d492318e6,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{034C1CAA-E3E8-4DD9-AF9C-374276627330}
254,/Services/Legal-Translation/Canada,fr-CA,8F662A18-31C7-4216-BD5B-F979B22FF2F6,Canada,Canada,"La traduction juridique rend possibles les opérations transfrontalières et la commercialisation de biens et services sur de nouveaux marchés, et pour ce faire, elle se doit d'être d'une qualité irréprochable. En effet, la mauvaise interprétation d'un passage dans un contrat ou un prospectus peut donner lieu à des poursuites et à d'importantes pertes financières.",NULL,NULL,"<p>La traduction juridique rend possibles les opérations transfrontalières et la commercialisation de biens et services sur de nouveaux marchés, et pour ce faire, elle se doit d&#39;être d&#39;une qualité irréprochable. En effet, la mauvaise interprétation d&#39;un passage dans un contrat ou un prospectus peut donner lieu à des poursuites et à d&#39;importantes pertes financières. L&#39;équipe de traduction juridique de Gowling WLG collabore avec des professionnels de presque tous les domaines de pratique du cabinet en vue de tenir les clients à l&#39;abri de toute poursuite en responsabilité liée à la langue.</p>    <p>Notre équipe de traduction juridique travaille dans une variété de langues et traduit des documents de tous genres se rapportant aux placements de titres par voie d&#39;appel public à l&#39;épargne et de placement privé, aux fusions et acquisitions, aux financements de crédit-bail transfrontalier et international, à la titrisation et aux opérations de privatisation. Nos praticiens font bénéficier tout le cabinet de leur expertise en matière de publicité, de comptabilité, d&#39;administration, de litige, de droit fiscal, de droit du travail, d&#39;immobilier, d&#39;assurances et d&#39;affaires autochtones, afin de satisfaire, voire surpasser les besoins de nos clients à l&#39;échelle nationale et internationale.</p>    <h3>Priorite : exactitude et conformité</h3>    <p>Nous fournissons des services de traduction juridique dans les délais prescrits, tout en nous assurant de la qualité et de l&#39;exactitude de notre travail. De plus, nos traductions sont toujours appuyées par des avis juridiques, particulièrement en ce qui a trait aux exigences en matière de langue et aux questions reliées aux valeurs mobilières.</p>    <p>Les lois linguistiques sont complexes et la conformité est essentielle. À ce chapitre, l&#39;équipe de traduction juridique de Gowling WLG aide les émetteurs et les courtiers à se conformer à leurs obligations légales.</p>    <h3>Faire des affaires au Québec</h3>    <p>La province de Québec possède des lois linguistiques détaillées qui régissent l&#39;étiquetage concernant la propriété intellectuelle et les conventions d&#39;affaires. Le bureau de Gowling WLG à Montréal possède l&#39;expertise nécessaire pour guider les entreprises du monde entier dans le dédale de ces exigences.</p>  ",GWLG.Canada,22e56976-2ece-4799-8002-7ebb191fb9be,85A97F93-C82D-464B-B239-E1AC05B2E1E0,NULL,0,1,t-white,NULL,NULL,NULL,NULL,En savoir plus,"<p>Pour découvrir comment nous pouvons répondre à vos besoins en matière de traduction juridique, veuillez communiquer avec <a href=""mailto:Nicolas.Verenka@gowlingwlg.com"">Nicolas Verenka</a>.</p>  ",NULL,NULL,NULL,NULL,NULL,{9C5B32B3-0F22-4268-BC73-8856C414F1E5}
255,/Services/Litigation-Dispute-Resolution/Canada,fr-CA,11951485-3AA9-477D-A225-6830C5342336,Canada,Canada,"Les différends font partie de la réalité des entreprises. Lorsqu'un différend survient, vous devez pouvoir compter sur une équipe qui saura protéger vos intérêts, obtenir des résultats équitables, minimiser vos coûts et s'assurer que votre entreprise continue d'exercer ses activités.",NULL,NULL,"<p>Les différends font partie de la réalité des entreprises. Lorsqu&#39;un différend survient, vous devez pouvoir compter sur une équipe qui saura protéger vos intérêts, obtenir des résultats équitables, minimiser vos coûts et s&#39;assurer que votre entreprise continue d&#39;exercer ses activités.</p>    <p>Gowling WLG est là pour vous prêter main-forte. Nous sommes déterminés à vous protéger en situation de différend, qu&#39;il s&#39;agisse de négociation, de médiation, d&#39;arbitrage ou de litige.</p>    <p>Pratiques, réceptifs et efficaces, nous ferons équipe avec vous afin de développer et mettre en œuvre la stratégie qui mènera au meilleur résultat possible pour votre entreprise. Nous adoptons une approche concrète, axée sur une minutieuse recherche des faits et une évaluation approfondie des risques - tout en gardant constamment à l&#39;esprit vos objectifs et votre budget.</p>    <p>Étant l&#39;une des équipes de litige les plus importantes et les plus expérimentées au Canada, nous pouvons vous conseiller sur tout type de litige, y compris les suivants :</p>    <ul>   <li>Les litiges bancaires</li>   <li>Les actions collectives</li>   <li>Les litiges commerciaux</li>   <li>Les litiges en droit de la construction&lrm;</li>   <li>Les différends contractuels</li>   <li>La gestion de crises</li>   <li>Les litiges en diffamation et droit de l&#39;information</li>   <li>Les litiges en responsabilité des administrateurs et des dirigeants</li>   <li>&lrm;Les délits liés à l&#39;environnement et aux matières toxiques</li>   <li>Les litiges en assurances, y compris les</li>   <li>dommages matériels et les lésions corporelles</li>   <li>L&#39;arbitrage international</li>   <li>Les litiges en droit du travail et de l&#39;emploi</li>   <li>Les litiges en responsabilité du fait des produits</li>   <li>Les litiges en responsabilité professionnelle</li>   <li>Les enquêtes en matière de réglementation et conformité</li>   <li>Les litiges en matière de valeurs mobilières</li>   <li>Les différends entre actionnaires</li>   <li>Les litiges en droit des transports</li>   <li>Les enquêtes et le droit pénal des affaires</li>  </ul>    <p>Afin que votre dossier de litige soit géré de la manière la plus efficace, nous avons développé une série d&#39;outils et d&#39;approches novateurs, dont les suivants :</p>    <ul>   <li>Une plateforme personnalisée pour la gestion de projets juridiques et l&#39;établissement de budgets</li>   <li>Une base de données conçue à l&#39;interne pour la gestion des précédents en litige</li>   <li>Des méthodes alternatives de facturation et de paiement des honoraires : honoraires fixes, honoraires plafonnés, taux pondérés, honoraires en fonction du rendement, honoraires conditionnels</li>  </ul>    <p>Quels que soient votre situation et vos objectifs commerciaux, Gowling WLG possède l&#39;expérience, le réseau international et l&#39;expertise juridique inégalée qui aideront votre entreprise à prospérer.</p>    <p>Pour en savoir plus, veuillez communiquer avec <a href=""mailto:mary.thomson@gowlingwlg.com"">Mary Thomson</a> ou <a href=""~/fr/people/?page=1&amp;services=481&amp;locations=GWLG.Canada"" target=""_blank"">tout autre membre de notre équipe</a>.</p>  ",GWLG.Canada,759bfb1e-8027-465c-b5fa-e9f445cf2182,82475447-1CF2-4AA7-9A23-24E5B1A7B3BD,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{16703D48-CE3A-435A-A12B-1BB4423C78FE}
256,/Services/Medical-Defence-Health-Law/Canada,fr-CA,B10F8349-48F3-48C4-BD97-1B0B2413C13B,Canada,Canada,Le secteur de la médecine et de la santé évolue constamment. Il vous faut donc une protection robuste pour faire face à toute épreuve.,NULL,NULL,"<p>Le secteur de la médecine et de la santé évolue constamment. Il vous faut donc une protection robuste pour faire face à toute épreuve. Que ce soit pour défendre vos droits à titre de professionnel, pour une atteinte à votre réputation ou à votre produit, ou encore dans le cadre d&#39;une enquête des autorités de réglementation, il est essentiel que vous puissiez compter sur des experts qui comprennent la loi, mais surtout, votre univers.</p>    <p>Ce qui nous intéresse chez Gowling WLG, c&#39;est la protection des professionnels de la santé et des entreprises de ce secteur. Notre équipe compte plus d&#39;un siècle d&#39;expérience en défense en responsabilité des professionnels de la santé et en sciences de la santé, et plus de 100&nbsp;professionnels travaillent dans votre secteur.</p>    <p>Que vous soyez un professionnel de la santé ou une société pharmaceutique, d&#39;équipement médical ou de biotechnologie, nous nous adaptons à la complexité de votre situation. Dans le cas des professionnels de la santé, nous vous suivons dans votre pratique, et protégeons vos objectifs professionnels de même que votre réputation. Si vous êtes une entreprise innovante en sciences de la vie, nous vous appuierons pendant tout le cycle de vie de votre produit, des premiers stades de la recherche jusqu&#39;aux approbations réglementaires, à la commercialisation et à l&#39;incidence sur le marché.</p>    <p>Nous parlons le même langage que vous&nbsp;: nombre de nos professionnels ont une formation en sciences, en médecine et dans les technologies connexes. Nous vous défendrons contre les allégations pouvant nuire à votre vie professionnelle ou à votre produit. Par ailleurs, nous avons contribué à façonner le cadre réglementaire qui régit vos activités, en travaillant toujours dans votre intérêt, que ce soit auprès des collèges autoréglementés ou des organismes de réglementation gouvernementaux. Chaque cause vient enrichir notre base de connaissances&nbsp;: nous évoluons donc au même rythme que votre industrie.</p>    <p>Nous sommes aussi des chefs de file confirmés dans l&#39;élaboration et l&#39;adoption d&#39;outils efficaces à valeur ajoutée, conçus pour gérer des dossiers de litige de façon transparente et adaptée aux besoins de votre entreprise. Ces outils facilitent&nbsp;:</p>    <ul>   <li>la gestion de projets juridiques à l&#39;aide d&#39;un logiciel personnalisé</li>   <li>la gestion des connaissances</li>   <li>la gestion des fichiers et dossiers électroniques</li>   <li>l&#39;établissement de modes alternatifs de tarification (tarification hybride, conditionnelle au succès ou à la valeur ajoutée, et honoraires fixes ou plafonnés)</li>   <li>l&#39;établissement d&#39;un budget par projet</li>  </ul>    <p>Voici nos domaines d&#39;expertise&nbsp;:</p>    <ul>   <li>aliments et boissons</li>   <li>biotechnologie, bio-ingénierie</li>   <li>conformité réglementaire</li>   <li>cosmétiques</li>   <li>équipement médical</li>   <li>gestion de crise et gestion des médias</li>   <li>gestion des données de santé transfrontalières et des violations de données</li>   <li>gestion des dossiers de santé électroniques</li>   <li>gestion des risques</li>   <li>processus d&#39;approbation de l&#39;équipement médical et des médicaments (Santé Canada et autres organismes)</li>   <li>produits agricoles</li>   <li>produits biologiques</li>   <li>produits pharmaceutiques</li>   <li>produits de santé naturels, y compris les suppléments</li>   <li>protection interprovinciale/internationale adaptée</li>   <li>rappels et enquêtes en santé publique</li>   <li>recherche de produits et sociétés de recherche sous contrat</li>   <li>réglementation et responsabilité professionnelles</li>   <li>responsabilité du fait des produits</li>   <li>soins et traitements en milieu clinique</li>   <li>tarification et remboursement des médicaments</li>  </ul>    <p>Votre apport et celui de vos collègues en matière de santé améliorent la qualité de vie de tout un chacun. Nous en sommes reconnaissants et ce serait une grande fierté de pouvoir faire équipe avec vous. Pour en savoir plus sur nos services, n&#39;hésitez pas à communiquer avec nous.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  ",GWLG.Canada,54584e1a-f44e-4d61-9efe-eeecf78d7cc1,55B82F16-382D-4D6B-8BBB-590924E54046,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{68E51A97-CE73-432D-A521-DE68604E9DCE}
257,/Services/Mergers-Acquisitions/Canada,fr-CA,AF180EC6-5C75-4DC8-84EB-1C95B164B130,Canada,Canada,"Chez Gowling WLG, nous prenons le temps de bien comprendre les activités de nos clients et nous savons que le contrôle des coûts, l'augmentation de la prévisibilité et l'atténuation des risques sont des facteurs clés de leur réussite. ",NULL,NULL,"<p>Chez Gowling WLG, nous prenons le temps de bien comprendre les activités de nos clients et nous savons que le contrôle des coûts, l&#39;augmentation de la prévisibilité et l&#39;atténuation des risques sont des facteurs clés de leur réussite. Nous fournissons des solutions novatrices et offrons un service inégalé à valeur exceptionnelle. Nous sommes déterminés à dépasser les attentes et à aider nos clients à atteindre leurs objectifs commerciaux.</p>    <p>Notre groupe Fusions et acquisitions conseille à la fois des clients à l&#39;échelle nationale et à l&#39;échelle internationale, lesquels proviennent de tous les principaux secteurs de l&#39;industrie. Nous conseillons des sociétés cotées en bourse ainsi que des sociétés privées quant à leurs opérations de fusions et acquisitions.</p>    <p>Nous conseillons également des maisons de courtage, des fonds de rachat, des sociétés de capital de risque et d&#39;autres investisseurs non traditionnels en ce qui a trait à leurs placements, aux techniques et produits innovateurs liés aux placements et à la prise ferme partout en Amérique du Nord et à l&#39;échelle mondiale.</p>    <p>Notre plate-forme multiservices et l&#39;engagement de Gowling WLG envers les clients nous permettent de former des équipes multidisciplinaires en fonction des besoins de chaque client. Ces équipes comprennent des experts-conseils de nos groupes sectoriels et de pratique, notamment les ressources naturelles, l&#39;énergie, les services financiers, les affaires gouvernementales, les infrastructures, la fabrication et la distribution, les sciences de la vie, la technologie, la propriété intellectuelle, l&#39;emploi et le travail, l&#39;immobilier et l&#39;environnement, le capital d&#39;investissement et la fiscalité. Nos professionnels ont l&#39;habitude de travailler avec les autorités et les organismes de réglementation en valeurs mobilières partout en Amérique du Nord et ailleurs dans le monde.</p>    <h3>Solutions de pointe pour les chefs de file de demain</h3>    <p>Nous utilisons des technologies personnalisables, afin de fournir une gestion de dossiers améliorée à nos professionnels du droit et à nos clients. Notre équipe interne des TI crée régulièrement des sites extranet et des chambres de données confidentielles sur mesure qui permettent aux organisations de vérifier la progression d&#39;un dossier, ainsi que d&#39;échanger et de consulter des documents jour et nuit à partir de n&#39;importe quel endroit où une connexion sans fil est disponible.</p>    <h3>Services juridiques</h3>    <h4>Fusions et acquisitions</h4>    <ul>   <li>Les négociations dans le cadre de fusions, de regroupements, de plans d&#39;arrangement, des prises de contrôle et autres transactions liées à la privatisation</li>   <li>Les négociations dans le cadre de l&#39;achat d&#39;actions et d&#39;opérations de vente, notamment les acquisitions et les dispositions de blocs de contrôle</li>   <li>Les acquisitions et dispositions d&#39;actifs et de divisions d&#39;entreprises</li>   <li>L&#39;établissement de coentreprises ou d&#39;autres sociétés en commandite à des fins d&#39;acquisition</li>   <li>Les transactions de rachat, notamment les rachats d&#39;entreprise par les cadres</li>   <li>Les processus de ventes aux enchères et de soumissions</li>   <li>Les propositions et les contestations d&#39;offres publiques d&#39;achat hostiles</li>   <li>Les propositions et les contestations de courses aux procurations</li>   <li>Les conseils aux comités indépendants et à leurs conseillers financiers</li>   <li>Les offres publiques de rachat, les offres publiques d&#39;achat faites par un initié, le regroupement d&#39;entreprises et les opérations entre les parties apparentées</li>   <li>La gouvernance d&#39;entreprise et les obligations des administrateurs dans le contexte des fusions et acquisitions</li>   <li>Le financement public et privé d&#39;opérations de fusions et acquisitions</li>   <li>Les prises de contrôle inversées</li>   <li>Les conventions d&#39;actionnaires, les conventions d&#39;emploi des cadres et les régimes d&#39;options d&#39;achat d&#39;actions à l&#39;intention de sociétés acquises sur le marché public ou privé</li>   <li>Les conventions de blocage de titres dans le contexte des fusions et acquisitions</li>   <li>Les conseils fiscaux dans le cadre de fusions et acquisitions, les transactions transfrontalières dans les deux sens et les réorganisations, les fusions et les ventes d&#39;entreprises</li>   <li>Les processus d&#39;approbation relatifs à la Loi sur la concurrence</li>   <li>Les processus d&#39;approbation liés à la Loi sur Investissement Canada pour les acquéreurs étrangers, y compris les entreprises d&#39;État</li>  </ul>  ",GWLG.Canada,a2b7b2e1-b2ce-441b-8021-2c65bd258ef7,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F3420C43-8321-4BBF-A6E7-D2AA815C7420}
258,/Services/Occupational-Health-Safety/Canada,fr-CA,3AA9D4F5-DBE7-4480-8BF5-F4CCE768BF19,Canada,Canada,"Dans toutes les provinces et tous les territoires canadiens, les employeurs sont assujettis à des lois rigoureuses en matière de santé et sécurité au travail et d'indemnisation des lésions professionnelles.",NULL,NULL,"<p>Dans toutes les provinces et tous les territoires canadiens, les employeurs sont assujettis à des lois rigoureuses en matière de santé et sécurité au travail et d&#39;indemnisation des lésions professionnelles. Pour se conformer aux lois et gérer les risques en milieu de travail d&#39;une manière proactive en vue d&#39;éviter des litiges coûteux, ils doivent pouvoir s&#39;appuyer sur une équipe juridique capable de proposer des solutions stratégiques qui reposent sur une longue expérience du litige en santé et sécurité au travail et une compréhension approfondie de l&#39;industrie.</p>    <h3>Formation, consultation et services juridiques</h3>    <p>La pratique de Gowling WLG en matière de droit de la santé et de la sécurité au travail et d&#39;indemnisation des accidents du travail est l&#39;une des plus éminentes du Canada. Nos professionnels offrent aux clients de tous les secteurs de l&#39;industrie une formation complète, de précieux conseils et des solutions juridiques exceptionnelles pour les aider à composer avec toutes les exigences des lois nationales et provinciales en matière de santé et de sécurité au travail.</p>    <p>Non seulement nos experts écrivent fréquemment sur une grande diversité de sujets relatifs à la sécurité en milieu de travail, mais ils ont aussi publié un grand nombre de documents qui font autorité, dont Canadian Health and Safety Law, Human Resources Guide to Preventing Workplace Violence et Human Resources Guide to Preventing Workplace Violence (qui inclut le projet de loi 168).</p>    <h3>Nous partageons notre savoir</h3>    <p>Tout au long de l&#39;année, nous offrons des formations et des colloques aux employeurs, aux hauts dirigeants, aux superviseurs et aux membres de comités de santé et de sécurité sur des sujets tels que leurs obligations juridiques en vertu du Règlement sur la santé et la sécurité au travail, la façon d&#39;assurer la conformité au moyen de la diligence raisonnable et les importantes amendes potentielles en cas de non-conformité au règlement.</p>  ",GWLG.Canada,886b6d1b-5464-413a-8d96-04927adf9307;f3e3c10c-625b-4845-8794-c85b4cb97386,1DDD9194-936D-44F1-A8B2-7811CAD6F62C,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,886b6d1b-5464-413a-8d96-04927adf9307|f3e3c10c-625b-4845-8794-c85b4cb97386
259,/Services/Patents/Canada,fr-CA,2C0611B2-35D3-4E5E-861B-56AF818849EA,Canada,Canada,Les avancées effrénées des nouvelles technologies ont engendré une succession de défis inédits et sans précédent en ce qui concerne la protection de l'innovation.,NULL,NULL,"<p>Les avancées effrénées des nouvelles technologies ont engendré une succession de défis inédits et sans précédent en ce qui concerne la protection de l&#39;innovation. Pour consigner leurs droits avec confiance et minimiser les risques à long terme, les organisations doivent pouvoir compter sur une équipe d&#39;experts juridiques hautement qualifiés et aptes à leur proposer des solutions concrètes, fruit d&#39;une longue pratique du droit des brevets et d&#39;une feuille de route convaincante au chapitre de la protection et du respect des droits de propriété intellectuelle (PI).</p>    <p>Le professionnels en matière de brevets de Gowling WLG fournissent des conseils d&#39;experts et des services de représentation efficaces dans tous les aspects du domaine des brevets. Notre équipe nationale collabore avec des sociétés, des universités et des instituts de recherche à l&#39;échelle nationale et mondiale, pour déposer, commercialiser et exploiter leurs brevets et dessins industriels.</p>    <p>Qu&#39;il s&#39;agisse d&#39;épauler des entreprises émergentes ou des multinationales, nos professionnels juridiques jouissent d&#39;une réputation inégalée pour leur connaissance de l&#39;industrie. Parce que bon nombre d&#39;entre eux détiennent des diplômes d&#39;études supérieures en sciences, en médecine et en génie, ils sont en mesure de présenter à nos clients des solutions efficaces et taillées sur mesure dans un vaste éventail de secteurs apparentés à la technologie.</p>    <p>Grâce à notre réseau international de correspondants, nos professionnels coordonnent et pilotent régulièrement la poursuite de demandes de brevets dans le monde entier, en plus de représenter fréquemment de grandes sociétés de technologie nationales et internationales auprès de l&#39;Office de la propriété intellectuelle du Canada.</p>    <h4>Nous détenons une solide expertise dans :</h4>    <ul>   <li>La rédaction et le dépôt de demandes de brevets</li>   <li>L&#39;élaboration de stratégies sur mesure pour la poursuite de demandes de brevets à l&#39;échelle nationale et internationale</li>   <li>La gestion de portefeuilles de brevets</li>   <li>L&#39;établissement de stratégies liées à l&#39;octroi de licences et à d&#39;autres méthodes de commercialisation</li>   <li>La négociation et la préparation de licences et de conventions</li>   <li>La vérification des droits de brevets</li>   <li>Les avis juridiques liés à la contrefaçon et à la validité des brevets</li>   <li>Le litige et la protection des droits de PI</li>   <li>Fusions et acquisitions, vente/achat, financement et autres opérations visant des actifs de PI</li>  </ul>    <p>Nos professionnels sont régulièrement appelés à présenter des exposés dans les universités et dans des ateliers de formation, à prononcer des conférences et à publier des articles sur des questions d&#39;ordre technologique relatives à la protection des droits de brevets.</p>  ",GWLG.Canada,09384fee-e32a-4187-a414-c9d17129c184,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A906D811-6A7A-4DCF-AED8-23EEAE8E3B78}
260,/Services/Pensions/Canada,fr-CA,B54696A0-09BD-4ADE-B6C8-287EE01C9330,Canada,Canada,"La loi régissant les pensions et les avantages sociaux est complexe et en constante évolution. Les gestes posés par les employeurs, les administrateurs de régimes et les fournisseurs de services sont assujettis à des examens par les autorités en matière de réglementation et peuvent occasionner des problèmes sur le plan juridique et donner lieu notamment à des recours collectifs. ",NULL,NULL,"<p>La loi régissant les pensions et les avantages sociaux est complexe et en constante évolution. Les gestes posés par les employeurs, les administrateurs de régimes et les fournisseurs de services sont assujettis à des examens par les autorités en matière de réglementation et peuvent occasionner des problèmes sur le plan juridique et donner lieu notamment à des recours collectifs. Le besoin de conseils judicieux, opportuns et pratiques en ce qui a trait aux pensions et aux avantages sociaux n&#39;a jamais été plus pressant -&nbsp;le groupe Pensions de Gowling WLG est en mesure de fournir de tels conseils.</p>    <h3>Conseils stratégiques sur toutes les questions relatives aux pensions</h3>    <p>Le groupe Pensions de Gowling WLG offre des services juridiques relatifs aux régimes de retraite enregistrés et non enregistrés à tous les membres du secteur des pensions, y compris des employeurs, employés, promoteurs de régimes, administrateurs, bénéficiaires, dépositaires et fiduciaires, ainsi que des gestionnaires de fonds de placement. Gowling WLG se distingue de ses concurrents notamment parce qu&#39;elle ne représente pas exclusivement des employeurs ni des employés. Nous croyons qu&#39;il est préférable de donner des conseils impartiaux à tous les clients étant donné que nous n&#39;avons pas de position publique à défendre et que nous n&#39;avons aucun parti pris en raison de la nature de notre clientèle.</p>    <p>Nous agissons pour le compte de plusieurs des plus importants régimes de retraite à employeur unique et à employeurs multiples du Canada, tant du secteur public que du secteur privé. Nous représentons également des promoteurs de produits d&#39;investissement et des gestionnaires de placements et les aidons à structurer leurs produits et services afin que les investisseurs dans des fonds de pension trouvent ceux-ci attrayants.</p>    <p>Notre équipe est composée de professionnels dont l&#39;expérience et l&#39;expertise sont sans égal -&nbsp;notamment des avocats qui ont travaillé auprès des autorités de réglementation des pensions. Nous offrons à nos clients des connaissances approfondies et une expérience pratique unique et de grande valeur dans la gestion des relations avec les autorités de réglementation, ainsi que les représentants et les organismes gouvernementaux. Le groupe Pensions travaille également en étroite collaboration avec d&#39;autres groupes de Gowling WLG.</p>    <h3>Services juridiques</h3>    <p>Le groupe Pensions de Gowling WLG est à même de conseiller et d&#39;aider les clients relativement à des questions touchant les pensions, notamment les suivantes :</p>    <ul>   <li>la gouvernance de régimes et les obligations fiduciaires</li>   <li>l&#39;administration des avantages sociaux</li>   <li>toute question touchant les placements, y compris l&#39;examen de contrats, l&#39;analyse des énoncés des politiques et des procédures de placement et les avis de conformité</li>   <li>le transfert de biens, ainsi que les fusions et les conversions de régimes</li>   <li>les cessations de régimes et les achats de rentes</li>   <li>les questions liées aux pensions et aux avantages sociaux dans le contexte d&#39;une fusion, d&#39;une acquisition ou d&#39;une faillite</li>   <li>les questions liées à la gestion des surplus, y compris les exonérations de cotisations, les retraits de surplus et les charges liées aux régimes</li>   <li>la négociation et la rédaction de contrats avec des tiers fournisseurs de services, y compris des conseillers en placements, des consultants, des dépositaires et des fiduciaires</li>   <li>les modifications apportées à des régimes, y compris des modifications relatives à la conformité, des changements apportés aux avantages sociaux et des modifications extraordinaires (p. ex., la cessation de régimes, les gels, etc.)</li>   <li>la préparation et l&#39;examen des communications aux employés</li>   <li>des conseils stratégiques en ce qui a trait à des examens et enquêtes par les autorités de réglementation</li>   <li>la représentation devant les autorités de réglementation des pensions et devant les tribunaux de toutes les compétences</li>   <li>les régimes de retraite complémentaires (régimes spéciaux de retraite anticipée et régimes compensatoires)</li>   <li>les enjeux fiscaux liés aux pensions.</li>  </ul>  ",GWLG.Canada,b932ec2d-5f3e-413d-a75f-2269018135a2,A19C4C5E-C05A-4FA5-95AA-C5A274279D8C,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A4F26BC7-4AD5-4286-A317-3A49C6C3EAAE}
263,/Services/Private-Client-Services/Canada,fr-CA,D2FF2936-D971-47CC-ACC4-00DC7EB8A1E3,Canada,Canada,"Peu de domaines de pratique font appel à un aussi haut degré de sensibilité, de clairvoyance et de compétence que celui de la planification successorale. Notre groupe de pratique de droit successoral réunit toutes ces qualités dans son offre de services relatifs à l'administration et à la planification successorales, à la planification de la relève au sein des entreprises, au litige et à la médiation.",NULL,NULL,"<p>Peu de domaines de pratique font appel à un aussi haut degré de sensibilité, de clairvoyance et de compétence que celui de la planification successorale. Notre groupe de pratique de droit successoral réunit toutes ces qualités dans son offre de services relatifs à l&#39;administration et à la planification successorales, à la planification de la relève au sein des entreprises, au litige et à la médiation.</p>    <h3>Les conseils avisés dont vous avez besoin</h3>    <p>Notre équipe de spécialistes est à même de fournir des solutions créatives et d&#39;avant-garde :</p>    <ul>   <li>Les testaments et les procurations</li>   <li>La planification personnelle fiscale et successorale, y compris les fiducies familiales, le gel successoral, la planification successorale transfrontalière, de même que la planification en matière d&#39;immigration et d&#39;émigration</li>   <li>La planification de la relève au sein des entrepreneurs et des entreprises familiales, y compris les réorganisations d&#39;entreprises, les conventions d&#39;actionnaires, l&#39;utilisation optimale de l&#39;assurance vie et les ventes assorties d&#39;avantages fiscaux</li>   <li>La planification des dons de bienfaisance</li>   <li>L&#39;administration et les modifications de fiducies</li>   <li>L&#39;administration de successions, y compris la planification fiscale post mortem</li>   <li>La reddition de comptes pour les fiducies, les successions et les mandataires</li>   <li>La destitution et le remplacement de liquidateurs, de fiduciaires et de mandataires</li>   <li>L&#39;homologation de mandats donnés en cas d&#39;inaptitude</li>  </ul>    <p>Versés dans tous les aspects de la planification successorale, nos experts sont tout à fait conscients du caractère délicat et parfois litigieux des décisions que leurs clients doivent prendre.</p>    <p>Nos professionnels aident leurs clients à élaborer des plans successoraux complets qui répondent à leurs besoins, notamment la rédaction de testaments, de mandats et de conventions de fiducie. Selon la situation du client, nos professionnels peuvent prévoir une planification successorale plus ciblée, laquelle comprend le gel successoral, la planification en matière de frais d&#39;homologation et la planification en matière de constitution de fondation privée.</p>    <h3>Stratégies de réduction maximale de l&#39;impôt</h3>    <p>Que vous soyez un entrepreneur ou une entreprise familiale, nous pouvons vous aider à élaborer et à mettre en œuvre des plans de relève efficaces sur le plan fiscal, tout en profitant au maximum des avantages fiscaux tels que les déductions pour gains en capital, les dividendes admissibles, les dividendes en capital et les déductions accordées aux petites entreprises.</p>    <p>Nous excellons en matière d&#39;administration successorale, y compris en ce qui a trait aux enjeux liés aux frais d&#39;homologation, au transfert des biens, à la planification fiscale post mortem et à la préparation des déclarations de revenus des particuliers et des entreprises. L&#39;interprétation de testaments et de conventions de fiducie, la contestation de la validité d&#39;un testament, la perte d&#39;un testament et les enjeux liés à l&#39;absence de capacité de tester, sont autant de questions que nos professionnels traitent avec discrétion et compassion. Nos spécialistes en droit successoral savent assurer la médiation et la représentation en matière de litiges de nature successorale.</p>    <p>Nous avons à cœur de protéger vos biens et vos droits tout en respectant la volonté des personnes qui vous sont chères.</p>  ",GWLG.Canada,159cc9f9-3c5b-460e-930b-1abbec4ed250,231F78A0-0796-40D1-A428-F3F450094B7B,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{CD875495-DB4D-4891-892D-24115E43DBE5}
264,/Services/Private-Equity/Canada,fr-CA,7C30FD31-6838-4791-91F9-38D6EF6BFC73,Canada,Canada,Les derniers exercices ont été une période tumultueuse pour les fonds de capital d'investissement et de capital de risque. Le récent ralentissement économique qui a suivi la crise du crédit a forcé les investisseurs à revoir leurs attentes et a provoqué une détérioration importante des marchés boursiers mondiaux.,NULL,NULL,"<p>Les derniers exercices ont été une période tumultueuse pour les fonds de capital d&#39;investissement et de capital de risque. Le récent ralentissement économique qui a suivi la crise du crédit a forcé les investisseurs à revoir leurs attentes et a provoqué une détérioration importante des marchés boursiers mondiaux. Pour les gestionnaires et les promoteurs de fonds, de même que pour les investisseurs, la nouvelle réalité exige qu&#39;ils sollicitent des services juridiques perspicaces, de pointe et efficaces auprès de professionnels de l&#39;industrie chevronnés qui ont une expérience sans pareille des affaires.</p>    <p>Le groupe Capital d&#39;investissement (CI) de Gowling WLG élabore des solutions innovatrices et efficaces qui correspondent aux besoins de chaque client, notamment pour divers gestionnaires et promoteurs de fonds, de même que pour certains investisseurs. Peu importe qu&#39;elle prenne part à des opérations d&#39;acquisition, de financement ou d&#39;aliénation d&#39;un portefeuille d&#39;investissements, ou à la structuration et aux négociations de fonds, d&#39;instruments de placement non traditionnels, de fonds nourriciers ou à la réalisation de co-investissements directs, notre équipe possède un ensemble exceptionnel de connaissances, de compétences et d&#39;intuition qui sont nécessaires à la négociation de l&#39;opération la plus avantageuse et à la réalisation de celle-ci.</p>    <p>Élaborées par une équipe intégrée et multidisciplinaire de professionnels dans le cadre d&#39;opérations réalisées dans le monde entier, nos solutions personnalisées tirent toujours parti de notre profonde connaissance de l&#39;industrie et de notre dominance sur le marché.</p>    <p>En tant que l&#39;un des plus importants cabinets d&#39;avocats en droit du CI du Canada, nos professionnels sont fréquemment reconnus par le classement des fonds canadiens, américains et européens. Les services de nos professionnels ont souvent été retenus par des caisses de retraite, des organismes de la Couronne, des promoteurs et des gestionnaires de fonds, des banques et d&#39;autres établissements de premier plan au Canada.</p>    <h3>Des résultats assurés</h3>    <p>Nous offrons un large éventail de services dans le secteur du capital d&#39;investissement et du capital de risque :</p>    <h4>Création de fonds</h4>    <ul>   <li>La négociation de contrats de société, de contrats avec les actionnaires pour les entités exonérées d&#39;impôt, d&#39;arrangements pour l&#39;octroi de fonds parallèles, d&#39;annexes au contrat distinctes, d&#39;arrangements de co-investissements et d&#39;autres documents relatifs aux fonds destinés aux investisseurs et aux promoteurs de fonds.</li>   <li>Les conseils sur l&#39;impôt et les régimes de retraite au moment de la structuration des fonds, des véhicules de fonds parallèles, des fonds nourriciers et d&#39;autres instruments de placement non traditionnels.</li>   <li>La rédaction de mémorandums de placement privé et de conseils sur la divulgation de l&#39;information obligatoire.</li>   <li>Les conseils sur la législation en valeurs mobilières pour les fonds canadiens et étrangers.</li>  </ul>    <h4>Investissement en aval</h4>    <ul>   <li>La réalisation de vérification diligente et l&#39;évaluation des risques.</li>   <li>L&#39;organisation de tous les aspects des instruments d&#39;acquisition ou de placement.</li>   <li>La négociation de titres de participation, de titres de créance et de titres de créance convertibles, d&#39;offre publique d&#39;achat, de fusion, de plan d&#39;arrangement et d&#39;autres documents relatifs aux acquisitions.</li>   <li>La négociation de coentreprise, de co-investissements et d&#39;autres arrangements de contreparties.</li>   <li>Les conseils aux initiateurs, aux sociétés ciblées et aux comités spéciaux.</li>  </ul>    <h4>Financement et sauvetage financier</h4>    <ul>   <li>La négociation et la préparation de listes de conditions, de lettres d&#39;engagement, de convention de crédit et de contrats de garantie.</li>   <li>L&#39;organisation et la négociation des opérations de fusion et d&#39;acquisition au nom des sociétés ciblées, des acquéreurs ou des principaux prêteurs.</li>   <li>La restructuration de sociétés en difficulté et le recouvrement de placements pour des investisseurs et des financiers.</li>   <li>La réalisation des vérifications diligentes et de l&#39;évaluation du risque juridique, la préparation des documents pour le financement ou la restructuration dans le cadre de la fusion et de l&#39;acquisition de sociétés en difficulté.</li>   <li>Les conseils juridiques après la réalisation de l&#39;acquisition et du financement concernant l&#39;exploitation de la société et le respect des clauses restrictives.</li>  </ul>    <h4>Investisseurs</h4>    <ul>   <li>La négociation et la rédaction de contrats de société, de contrats de fonds nourriciers, de contrats des actionnaires, de conventions de gestion de placements et d&#39;autres documents relatifs aux placements non traditionnels</li>   <li>La négociation et la rédaction d&#39;annexes au contrat distinctes qui comportent des dispositions relatives aux activités de l&#39;entreprise, à la fiscalité et aux régimes de retraite</li>   <li>L&#39;organisation et la négociation de co-investissements directs, d&#39;investissements ultérieurs et d&#39;acquisitions ou d&#39;aliénations sur le marché secondaire</li>  </ul>  ",GWLG.Canada,3c773c26-47cd-47af-9864-e8d48e548087,FC6B9A02-14AD-48CF-829A-375DC13F44AC,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{72C9E452-02EC-4742-863E-9346279F6F0C}
265,/Services/Procurement/Canada,fr-CA,00D6F75D-C2EA-48A4-BE15-86E7AD47FDD0,Canada,Canada,"Que vous soyez acheteur, fournisseur ou vendeur, le processus d’approvisionnement peut s’avérer complexe. Gowling WLG vous facilite la tâche en vous donnant des conseils stratégiques adaptés à vos affaires, de la préparation de propositions et d’appels d’offres, en passant par la résolution de différends contractuels et de litiges.",NULL,NULL,"<p>Que vous soyez acheteur, fournisseur ou vendeur, le processus d&rsquo;approvisionnement peut s&rsquo;avérer complexe. Gowling WLG vous facilite la tâche en vous donnant des conseils stratégiques adaptés à vos affaires, de la préparation de propositions et d&rsquo;appels d&rsquo;offres, en passant par la résolution de différends contractuels et de litiges.</p>    <blockquote>  <p><strong>Professionnelle et chevronnée, cette équipe est formidable.&nbsp;&raquo;</strong>&nbsp;Chambers Canada</p>  </blockquote>    <p>Notre implication dans le domaine des marchés publics a débuté par une participation au premier accord de libre-échange canado-américain. Depuis, nous avons acquis une expertise sans précédent en matière de contestation d&rsquo;appels d&rsquo;offres, de mise en application d&rsquo;accords de commerce intérieur et extérieur, de même que de litiges relatifs à des appels d&rsquo;offres. Nous possédons également une riche expertise en fait de conseils et d&rsquo;aide liés à la préparation et à la tenue de demandes de propositions et d&rsquo;offres.</p>    <h3>Démystifier le processus d&rsquo;attribution de marchés</h3>    <p>Les marchés publics et privés sont assujettis à une vaste gamme de réglementations, lois, politiques et coutumes. Composée d&rsquo;avocats chefs de file du domaine des marchés publics au Canada, notre équipe est à même de vous guider dans le dédale des procédures gouvernementales et des exigences en fait de demandes de propositions et de soumission. Elle vous aide notamment à respecter les obligations liées à l&rsquo;éthique ainsi qu&rsquo;à atteindre vos objectifs en matière de contrats dans les marchés publics.</p>    <h3>Nous sommes partenaires de vos ambitions</h3>    <p>Nos experts vous aident à adopter la meilleure approche dans le cadre de différends liés à une demande de propositions ou à un contrat. Forte d&rsquo;une équipe comportant certains des plus éminents avocats plaidants au Canada, Gowling WLG a représenté avec succès des clients relativement à des contestations et des litiges liés à des appels d&rsquo;offres devant toutes les instances : le Tribunal canadien du commerce extérieur (TCCE), la Cour fédérale du Canada, la Cour d&rsquo;appel fédérale et la Cour supérieure de justice de l&rsquo;Ontario, pour n&rsquo;en nommer que quelques-unes.</p>    <h3>Êtes-vous conformes?</h3>    <p>Pour participer à un appel d&rsquo;offres, vous devez vous conformer à de multiples accords nationaux et internationaux. Ayant rendu des opinions juridiques à l&rsquo;égard des plus importants traités &ndash; l&rsquo;Accord de libre-échange nord-américain (ALÉNA), l&rsquo;Accord sur les marchés publics de l&rsquo;Organisation mondiale du commerce (AMP-OMC), et l&rsquo;Accord sur le commerce intérieur (ACI) &ndash; nos professionnels sont à même d&rsquo;assurer la parfaite conformité de vos soumissions, vous permettant ainsi de poursuivre et de faire progresser vos activités d&rsquo;approvisionnement.</p>    <h3>Pour en savoir plus</h3>    <p>Vous souhaitez en savoir davantage sur nos services et conseils en matière d&rsquo;approvisionnement? <a href=""~/fr/people/?page=1&amp;locations=GWLG.Canada&amp;services=530"" target=""_self"">Communiquez avec un membre de notre équipe</a>.</p>  ",GWLG.Canada,85069c1c-8d45-4a66-b56b-128c6ee41680,311E6350-B4A5-4F58-8201-230AC9FC70B5,NULL,0,1,t-white,NULL,NULL,ed9f69cc-9090-4dd0-930e-81bd81ac221d,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2B55D6D2-206B-46CA-804B-0292FFBC6F94}
266,/Services/Product-Liability/Canada,fr-CA,84B9796C-6B79-4B74-9D18-BCD52EAA73CC,Canada,Canada,Des produits défectueux qui causent des lésions corporelles ou des pertes matérielles peuvent entraîner des litiges coûteux et perturbateurs. ,NULL,NULL,"<p>Des produits défectueux qui causent des lésions corporelles ou des pertes matérielles peuvent entraîner des litiges coûteux et perturbateurs. En raison de l&#39;augmentation récente des recours en matière de responsabilité du fait des produits, les sociétés doivent pouvoir compter sur une équipe qui peut régler ses problèmes juridiques et sur des avocats ayant une vaste expérience en matière de litiges et de responsabilité du fait des produits, une connaissance approfondie de la réglementation et la capacité de répondre rapidement et efficacement à toute situation, quel que soit le problème.</p>    <h3>Prévoir l&#39;imprésvisible</h3>    <p>En tant que l&#39;un des cabinets chef de file en matière de responsabilité du fait des produits au Canada, le groupe Responsabilité du fait des produits de Gowling WLG collabore avec d&#39;importants fabricants, importateurs, vendeurs et distributeurs canadiens, afin de déterminer et de réduire les risques de poursuite et de les protéger contre une grande variété d&#39;enjeux liés à la responsabilité du fait des produits. Notre vaste expérience dans la grande majorité des secteurs nous permet de proposer les solutions juridiques les plus adéquates et les plus efficaces pour répondre aux besoins uniques de chaque client.</p>    <p>Notre équipe travaille en étroite collaboration avec notre groupe de défense contre les recours collectifs et notre équipe de gestion de crise. Nous offrons constamment des solutions de haute qualité à nos clients, en nous fondant sur le leadership reconnu de Gowling WLG dans des pratiques connexes, entre autres, le droit de l&#39;assurance, les relations avec les intervenants et les affaires gouvernementales. Peu importe la gravité de la défaillance du produit, nos clients doivent s&#39;assurer d&#39;atteindre leurs principaux objectifs commerciaux et nous le comprenons bien.</p>    <p>Nos clients nous font confiance en raison de notre capacité éprouvée à défendre les sociétés avec succès contre les poursuites coûteuses et dévastatrices en matière de responsabilité du fait des produits, ou de carrément les éviter. Les experts sont unanimes : le répertoire Lexpert indique que Gowling WLG est un cabinet &laquo; fréquemment recommandé &raquo; pour les questions de responsabilité du fait des produits et bon nombre de nos avocats sont reconnus par des publications comme Who&#39;s Who Legal et le guide Best Lawyers in Canada.</p>    <h3>Tourjours à vos côtés</h3>    <p>Grâce au grand nombre d&#39;experts indépendants qui nous épaulent, à des technologies novatrices de gestion des cas et à une expérience pratique inégalée en litige, notre équipe est toujours prête à vous prodiguer des conseils éclairés et efficaces, peu importe où vous vous trouvez dans le monde et peu importe l&#39;heure. De la première intervention au règlement du litige, vous pouvez compter sur Gowling WLG pour vous aider à reprendre vos activités le plus rapidement possible.</p>  ",GWLG.Canada,5d3ffd40-9f34-464a-ac35-74035908df13,92A37753-1CD3-4195-907C-ADF48E358CA7,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{898B80E7-C149-4AEB-88AF-F8F7F50DF9F9}
268,/Services/Real-Estate/Canada,fr-CA,365957BE-B7B0-42DF-AFB7-F97D68FDA440,Canada,Canada,"Gowling WLG bénéficie de l'une des plus solides équipes juridiques multidisciplinaires en immobilier au Canada laquelle est dédiée à vous fournir promptement des conseils opportuns et pratiques afin de vous aider à répondre aux exigences de vos clients, partenaires, organismes de réglementation et investisseurs.",NULL,NULL,"<p>Forts de nos connaissances approfondies des marchés immobiliers nationaux et étrangers et de notre compréhension des tendances à l&#39;échelle internationale, les solutions novatrices que nous proposons à nos clients leur permettent de faire fructifier leurs affaires.</p>    <p>À chaque étape d&#39;un mandat, les membres de notre groupe Immobilier canadien vous accompagnent pour élaborer des solutions créatives, mettre en œuvre des stratégies de tarification optimales et maximiser vos investissements. Nos avocats spécialisés dans l&#39;immobilier sont donc en mesure d&#39;optimiser les dépenses juridiques d&#39;un client et de l&#39;aider à atteindre ses objectifs commerciaux de manière rapide et efficace.</p>    <h2>Compréhension du marché</h2>    <p>Le marché immobilier canadien évolue à un rythme soutenu. Ceci s&#39;explique en grande partie par la transformation numérique rapide, les tendances émergentes dans les secteurs de la logistique, du commerce de détail et des bureaux, et l&#39;impact considérable de la pandémie qui a frappé la planète.</p>    <p>Véritables moteurs de croissance dans les métropoles du Canada, les principaux acteurs du secteur immobilier font confiance à notre équipe. Grâce à notre réseau mondial et à nos bureaux répartis dans les grands carrefours économiques du Canada, nous sommes bien placés pour les conseiller sur diverses questions immobilières dans divers contextes.</p>    <h2>Notre approche</h2>    <p>De la conception à la réalisation, nous offrons une gamme complète de services immobiliers qui couvrent le cycle de vie de tout projet immobilier, sans perdre de vue vos objectifs d&#39;affaires, vos enjeux et vos occasions commerciales.</p>    <p>Vous refinancez un prêt ou faites l&#39;acquisition d&#39;un actif? Vous élaborez un projet commercial, négociez un bail ou réalisez une vente d&#39;envergure? Les chefs de file de l&#39;industrie se tournent vers nous, car nous leur offrons nos connaissances pointues, des décennies d&#39;expérience, ainsi que des conseils éclairés et opportuns alliés à une expérience client distinctive.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fReal-Estate%2fCanada-Services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Services+immobiliers+au+Canada|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Mandats représentatifs</h2>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Investissement</h3>     <p>Représentation de l&#39;une des plus importantes sociétés d&#39;investissement immobilier quant au lancement d&#39;un fonds de placement immobilier de base à capital variable vedette au Canada, ainsi que tout au long de sa croissance continue dont la valeur brute des actifs dépasse les 1&nbsp;G$.</p>   </li>   <li>   <h3>Parcs d&#39;innovation</h3>     <p>Représentation du plus grand parc de recherche et d&#39;innovation du Canada, quant à des négociations visant un échange de terrains pour accroître l&#39;étendue du parc et assurer des avoirs cruciaux pour un projet de train léger sur rail, y compris des négociations relatives à une expropriation potentielle, un échange de terrains, des droits fonciers et des intérêts.</p>   </li>   <li>   <h3>Hospitalité</h3>     <p>Représentation de la division canadienne de la plus importante chaîne de cafés (1&nbsp;400&nbsp;succursales au pays). Notre équipe supervise une variété de mandats et de domaines de pratique, y compris l&#39;immobilier et la location.</p>   </li>   <li>   <h3>Entreprises de cannabis</h3>     <p>Représentation de l&#39;une des plus grandes sociétés de cannabis au monde, quant à des questions de planification, d&#39;immobilier, de construction, de droit environnemental et de propriété intellectuelle liées à la production, l&#39;entreposage et la distribution de cannabis au Canada.</p>   </li>   <li>   <h3>Commerce de détail et immobilier résidentiel</h3>     <p>Représentation dans le cadre du réaménagement d&#39;un quartier commercial de banlieue de 7&nbsp;G$ en Colombie-Britannique, comprenant 10&nbsp;000&nbsp;unités de logement et 1,5&nbsp;millions de pieds carrés de nouveaux espaces commerciaux.</p>   </li>  </ul>    <h2>Classements au Canada</h2>    <p>Notre équipe de droit immobilier se démarque constamment dans de nombreux répertoires juridiques, dont <em>Chambers Canada</em>, <em>Canadian Legal Lexpert Directory</em> et <em>Best Lawyers in Canada.</em> Le guide <em>The Legal&nbsp;500 Canada</em> a d&#39;ailleurs classé Gowling&nbsp;WLG &laquo;&nbsp;cabinet chef de file en immobilier&nbsp;&raquo;.</p>    <h2>Découvrez l&#39;équipe canadienne</h2>    <p>Peu importe la complexité ou la portée de vos transactions, nous vous aidons à atteindre vos objectifs d&#39;affaires stratégiques. Franchissons les prochaines étapes ensemble.</p>    <p><a href=""~/en/people/joel-camley/#panel-button1"" target=""_blank"">Joel Camley</a><br />  Chef du groupe de pratique Droit immobilier (Canada)</p>  ",GWLG.Canada,28adebbb-5239-4131-b123-eb860852ce0c,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,"<p>Quelle que soit l&#39;envergure de votre projet immobilier, notre objectif est de vous fournir des conseils juridiques efficaces et des solutions commerciales adaptées, tout en vous assurant une expérience client unique.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1,NULL,NULL,{78D88FC3-0344-402B-85ED-AF69D1596497}
269,/Services/Recovery-Services/Canada,fr-CA,6EE5C14C-07F4-47DF-A513-639606019CEB,Canada,Canada,"Compte tenu de la multiplication des fraudes hypothécaires, des enjeux relatifs aux titres et aux biens, à l 'assurance sous le régime de la Loi nationale sur l 'habitation (LNH) et à la culture de la marijuana, les prêteurs sont de plus en plus obligés de solliciter les services d 'experts-conseils en réalisation de droits hypothécaires. ",NULL,NULL,"<p>Compte tenu de la multiplication des fraudes hypothécaires, des enjeux relatifs aux titres et aux biens, à<br />  l&#39; assurance sous le régime de la Loi nationale sur l &#39;habitation (LNH) et à la culture de la marijuana, les prêteurs sont de plus en plus obligés de solliciter les services d &#39;experts-conseils en réalisation de droits hypothécaires. Le groupe Services de recouvrement de Gowling WLG est à l &#39;avant-garde au chapitre de<br />  l &#39;élaboration de solutions de gestion axées sur les besoins de chaque client.</p>    <h3>Solutions de gestions de dossiers efficaces</h3>    <p>Grâce à un programme complet de gestion des dossiers et d &#39;impartition destiné aux prêteurs hypothécaires, nous aidons les clients à obtenir un règlement rapide et efficace quant à leurs créances hypothécaires en défaut. Notre solution de gestion de portefeuille hypothécaire permet à Gowling WLG de diriger les opérations relatives à la réalisation des droits hypothécaires, à la gestion immobilière et à la mise en marché de propriétés, et ce, sans aucun risque ni aucun coût pour le client.</p>    <p>Nous offrons à nos clients un accès jour et nuit à leur dossier en ligne, sans aucune facturation périodique. Les honoraires d &#39;avocats sont réglés uniquement lorsque le remboursement des prêts hypothécaires ou la vente des propriétés a été fait.</p>    <h3>Assurer la tranquillité d&#39;esprit</h3>    <p>Notre objectif est de faire épargner temps et argent à nos clients. Nous nous assurons que nos clients sont pleinement rassurés, grâce à des repères bien définis dont nous nous servons en ce qui a trait aux différentes questions comme les frais juridiques et de gestion immobilière, et en faisant respecter des délais minimum raisonnables.</p>    <p>Nous offrons une gamme diversifiée de services, comme suit :</p>    <h4>Services de réalisation des droits hypothécaires</h4>    <ul>   <li>demandes de paiement</li>   <li>avis de vente</li>   <li>demande judiciaire</li>   <li>jugement</li>   <li>forclusions</li>   <li>bref de saisie</li>   <li>bref de mise en possession</li>   <li>éviction</li>   <li>inspection de propriété</li>   <li>nomination et supervision du gestionnaire immobilier</li>   <li>sécurisation de la propriété</li>   <li>actions et jugements par déficience</li>  </ul>    <h4>Vente de biens immobiliers et dossiers de demande en vertu de la LNH</h4>    <ul>   <li>évaluations</li>   <li>préparation de la mise en vente de la propriété</li>   <li>révision de prix et évaluation de valeurs sur le marché</li>   <li>examen, signature et négociations d &#39;offres d &#39;un achat</li>   <li>transactions immobilières</li>   <li>cession de jugements à la SCHL ou Genworth</li>   <li>Traitement des rapports et des demandes</li>   <li>finalisation toute demande supplémentaire faite à la SCHL ou à Genworth (s &#39;il y a lieu)</li>  </ul>    <p>Nous offrons aussi une protection aux prêteurs contre les actions intentées relativement à des ventes à des prix déraisonnables ainsi que contre tout refus de réclamation en vertu de la LNH attribuable à notre gestion de dossier.</p>    <p>Nous sommes à l &#39;avant-garde en matière d &#39;application de solutions technologiques et de solutions de service innovatrices dans le cadre de notre pratique en matière de réalisation de droits hypothécaires, dont le but ultime est d &#39;assurer votre entière satisfaction.</p>  ",GWLG.Canada,db4ed4a3-0f51-4369-bc2a-3fc67c3af57f,820C20E1-84D8-4B34-96CD-EA4E74310518,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B6F9F453-F0C6-4F67-B03B-BC1FABE580F5}
270,/Services/Relocation-Services/Canada,fr-CA,74C98CAB-E0B3-48B1-8B44-A129FD472B18,Canada,Canada,"Étant donné les changements récents apportés à la politique d'immigration américaine et la faiblesse du dollar canadien, de nombreuses entreprises choisissent de relocaliser entièrement ou en partie leurs activités ainsi que leurs effectifs au Canada. ",NULL,NULL,"<p>Étant donné les changements récents apportés à la politique d&#39;immigration américaine et la faiblesse du dollar canadien, de nombreuses entreprises choisissent de relocaliser entièrement ou en partie leurs activités ainsi que leurs effectifs au Canada. Les entreprises internationales reconnaissent également les avantages stratégiques de l&#39;établissement d&#39;une présence sur le terrain au sein du marché canadien.</p>    <p>Peu importe les raisons de la relocalisation de votre entreprise ou de vos effectifs de l&#39;étranger au Canada, vous devez compter sur un cabinet juridique pouvant vous aider à surmonter les nombreux défis que le processus de relocalisation implique : des questions d&#39;immigration et de droit des entreprises, à celles liées à l&#39;immobilier commercial et résidentiel.</p>    <p>Gowling WLG peut vous aider : nos services juridiques complets de relocalisation vous aideront à reprendre vos activités au Canada rapidement et efficacement.</p>    <p>Grâce à son expertise juridique à la fine pointe de l&#39;industrie, ses bureaux situés dans les grands centres commerciaux et technologiques du Canada (Toronto, la région de Waterloo, Ottawa, Montréal, Calgary et Vancouver), ainsi que ses solides connexions avec les fournisseurs de services dont vous aurez besoin pendant votre transition, Gowling WLG est parfaitement positionnée pour faciliter votre relocalisation, et ce, peu importe votre pays de provenance.</p>    <h3>Immigration et emploi</h3>    <p>Avant même votre entrée au Canada, il faudra vous pencher sur les questions d&#39;immigration et d&#39;emploi. Nos avocats chevronnés peuvent conseiller les employeurs, employés et leurs familles sur :</p>    <ul>   <li>Le système canadien d&#39;immigration : des exigences en matière de permis de travail, à la préparation du dossier de demande, en passant par les règles d&#39;admissibilité et les questions touchant les structures d&#39;entreprises</li>   <li>L&#39;adoption du modèle canadien quant aux retenues sur la paie et les versements, la couverture médicale et les primes d&#39;assurance maladie, les droits et plus encore</li>   <li>La conformité aux lois du travail, de l&#39;emploi et des droits de la personne, de l&#39;indemnisation des travailleurs ainsi qu&#39;aux normes de santé et de sécurité au travail</li>  </ul>    <h3>Immobilier</h3>    <p>Notre équipe peut vous guider quant à un vaste éventail de questions touchant l&#39;immobilier, y compris :</p>    <ul>   <li>La négociation de baux commerciaux pour tous les types de locaux : bureaux, commerces de détail, sites de développement de technologies et sites industriels -&nbsp;particulièrement en ce qui a trait à des centres de données, des entreprises de technologie et leurs besoins uniques</li>   <li>L&#39;assistance aux employés quant à la location ou à l&#39;achat de leur nouvelle résidence par l&#39;intermédiaire de notre réseau de partenaires en services de relocalisation et de courtiers immobiliers</li>   <li>Les conseils liés à d&#39;autres enjeux immobiliers cruciaux : de l&#39;acquisition de terrains, au réaménagement de friches industrielles, en passant par le financement de projets et de facilités de crédit</li>  </ul>    <h3>Droit fiscal et comptabilité</h3>    <p>Il va sans dire que les considérations fiscales sont en tête de liste des entreprises en relocalisation au Canada ou qui y envoient des employés. Nos avocats sont à même de vous aider à gérer les principales tâches y afférentes, notamment en ce qui a trait à :</p>    <ul>   <li>La prestation de conseils sur la manière de structurer une nouvelle entreprise canadienne, en tenant compte des taxes de ventes et de l&#39;impôt sur le revenu fédéraux et provinciaux</li>   <li>La gestion des questions fiscales des employés relocalisés au Canada ou y travaillant, y compris en ce qui a trait à l&#39;imposition de la rémunération sous forme d&#39;options d&#39;achat d&#39;actions</li>   <li>L&#39;évaluation de l&#39;exposition à des taxes imposées à des acheteurs étrangers sur l&#39;immobilier résidentiel et industriel</li>   <li>La recommandation de professionnels de la comptabilité aux clients pour obtenir de l&#39;assistance quant aux déclarations de revenus au Canada</li>  </ul>    <h3>Services aux entreprises, financiers et d&#39;affaires</h3>    <p>Des questions liées aux banques et au crédit, en passant par des conseils généraux d&#39;affaires, nous pouvons vous aider à lancer vos opérations au Canada rapidement en vous offrant les services suivants :</p>    <ul>   <li>Introduction des employeurs et des employés à des institutions financières réputées pour le traitement de leurs besoins bancaires personnels et d&#39;affaires</li>   <li>Rédaction de politiques de gouvernance d&#39;entreprise, de protection de la confidentialité et autres politiques essentielles avec une concentration particulière sur les lois et règlements locaux</li>   <li>Préparation de modèles de formulaires et d&#39;ententes d&#39;affaires</li>  </ul>    <p>Gowling WLG peut vous aider à relocaliser vos affaires et vos employés au Canada. N&#39;hésitez pas à <a href=""~/fr/people/?page=1&amp;services=565&amp;locations=GWLG.Canada"" target=""_blank"">communiquer avec l&#39;un ou l&#39;autre des membres de notre équipe</a> présentée ci-dessous pour de plus amples détails.</p>  ",GWLG.Canada,26fb12df-b407-4553-9451-a9880a4c2e8b;28adebbb-5239-4131-b123-eb860852ce0c;425a9689-d70c-46ff-b7b6-8994bb782c5f,55AA3FB1-5A21-483E-B771-5E1ABFCEDF59,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{30ED970C-05AD-4E69-90A3-6F73AA3F6E86}|{78D88FC3-0344-402B-85ED-AF69D1596497}|{680CF4CA-5812-4762-A9E4-D3A93109F739}
271,/Services/Restructuring-Insolvency/Canada,fr-CA,B98FBCEF-D994-4204-A19F-D162A0F03495,Canada,Canada,"Qu 'une entreprise ait besoin de conseils au début ou à la fin d 'un processus de réorganisation ou qu 'un créancier ordinaire ou garanti ait besoin de conseils ou d 'agir rapidement, les avocats du groupe Réorganisation, faillite et insolvabilité de Gowling WLG s 'emploient à résoudre rapidement ces problèmes de façon pragmatique et économique.",NULL,NULL,"<p>Même dans un environnement économique sain, certains secteurs peuvent éprouver des difficultés. Qu &#39;une entreprise ait besoin de conseils au début ou à la fin d &#39;un processus de réorganisation ou qu &#39;un créancier ordinaire ou garanti ait besoin de conseils ou d &#39;agir rapidement, les avocats du groupe Réorganisation, faillite et insolvabilité de Gowling WLG s &#39;emploient à résoudre rapidement ces problèmes de façon pragmatique et économique.</p>    <h3>Prêts à agir dès que vous avez besoin de nous</h3>    <p>Notre groupe est l &#39;un des plus imposants de son genre au pays et offre une gamme de services élargie à partir de nos bureaux partout au Canada. Nous possédons une grande expérience avec les créanciers et les débiteurs ainsi qu &#39;une connaissance approfondie des cas transfrontaliers d &#39;insolvabilité et de réorganisation.</p>    <p>Nous possédons de l &#39;expérience dans un large éventail de secteurs, y compris l &#39;aquaculture, l &#39;agriculture, l&#39;industrie automobile, l &#39;aviation, les services bancaires et financiers, la biotechnologie, la construction et l &#39;aménagement, l &#39;énergie et les infrastructures, l &#39;alimentation et les boissons, le franchisage, les soins de santé, l &#39;hospitalité, l &#39;hébergement, les fiducies de revenu, les sciences de la vie, l &#39;industrie manufacturière, les médias, les mines et les ressources naturelles, l &#39;édition, les produits récréatifs, la vente au détail, l &#39;immobilier, la technologie, les télécommunications et le transport et la logistique.</p>    <h3>Une efficacité prouvée</h3>    <p>Nous sommes reconnus tant à l &#39;échelle nationale qu &#39;à l &#39;échelle internationale pour notre approche créative et moderne à l &#39;égard des plus grands défis en matière de réorganisation et d &#39;insolvabilité. Nous représentons efficacement des créanciers, des débiteurs, des séquestres, des fiduciaires, des surveillants, des acquéreurs, des fournisseurs, des clients et d &#39;autres professionnels de la réorganisation ou intervenants, en offrant un service sans précédent et des solutions novatrices.</p>    <p>Nos services comprennent ce qui suit :</p>    <h3>Réorganisation, faillite et insolvabilité</h3>    <ul>   <li>Conseils sur les premières étapes de la réorganisation financière et structurelle</li>   <li>Représentation dans les propositions faites dans le cadre de la Loi sur les arrangements avec les créanciers des compagnies et de la Loi sur la faillite et l&#39;insolvabilité</li>   <li>Procédures de faillite et de liquidation</li>   <li>Exécution des garanties et des sûretés</li>   <li>Négociation des abstentions et des ententes visant la tolérance et l&#39;accommodement</li>   <li>Conseils sur les risques liés à l &#39;insolvabilité dans les transactions structurées</li>   <li>Atténuation des risques en matière de responsabilité du prêteur</li>   <li>Évaluation de la responsabilité des dirigeants</li>   <li>Conseils aux organismes de réglementation en matière de conformité aux règlements</li>  </ul>    <h3>Fusions et acquisitions de sociétés en difficulté</h3>    <ul>   <li>Structuration et exécution du processus de vente en cour ou hors cour</li>   <li>Négociations entre les créanciers, les fournisseurs et les clients</li>   <li>Choix de banques d &#39;investissement et de conseillers en placement pour participer au processus de fusion et d &#39;acquisition d &#39;une société en difficulté</li>   <li>Établissement, négociation et documentation des solutions de financement temporaires et permanentes</li>   <li>Diligence raisonnable en temps opportun relativement à la société ciblée</li>  </ul>  ",GWLG.Canada,31589b1d-8773-40f3-b07d-0b7a1a5eee2f,153DC4B1-A86F-45AB-B010-BEF82A13326B,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4611A725-FCDD-493D-9FD2-487B932D5A80}
272,/Services/Securities-Litigation/Canada,fr-CA,91C824B6-905B-4E55-916B-197BCA88CF51,Canada,Canada,"Alors que les dossiers de litige et d'application de la loi relatifs aux valeurs mobilières sont à la hausse, et que le cadre réglementaire s'avère de plus en plus complexe, il vous faut compter sur une solide équipe de litige en valeurs mobilières pour vous guider efficacement dans le dédale des marchés des capitaux.",NULL,NULL,"<p>Alors que les dossiers de litige et d&#39;application de la loi relatifs aux valeurs mobilières sont à la hausse, et que le cadre réglementaire s&#39;avère de plus en plus complexe, il vous faut compter sur une solide équipe de litige en valeurs mobilières pour vous guider efficacement dans le dédale des marchés des capitaux.</p>    <p>À titre de l&#39;une des plus chevronnées et diversifiées équipes de litige au Canada, le groupe Litige en valeurs mobilières de Gowling WLG a agi à titre de conseiller juridique de confiance pour la plupart des banques de l&#39;annexe I du Canada de même que pour certaines des plus importantes sociétés canadiennes et autres participants des marchés financiers &ndash; des sociétés inscrites à la Bourse de Toronto en passant par les émetteurs privés en démarrage, les courtiers et les conseillers en valeurs mobilières, les administrateurs et les dirigeants, aux fonds de placement, assureurs, personnel de la conformité et autres inscrits.</p>    <p>Nous avons agi dans une vaste gamme de domaines en matière de litige pour chacun de ces clients, y compris les suivants :</p>    <ul>   <li>Les recours collectifs en valeurs mobilières</li>   <li>Les dossiers d&#39;activisme des actionnaires</li>   <li>Les affaires d&#39;application des lois en valeurs</li>   <li>mobilières, y compris des enquêtes de la CVMO,</li>   <li>de l&#39;OCRCVM, de la MFDA, de la SEC et autres enquêtes réglementaires</li>   <li>Les problèmes de conformité</li>   <li>Les différends entre actionnaires et recours en oppression</li>   <li>Les litiges relatifs à des produits dérivés</li>   <li>Les litiges entre courtiers en valeurs mobilières</li>   <li>Les dossiers de conduite sur les marchés et de négociation</li>   <li>Les fusions et acquisitions/transactions d&#39;affaires contestées</li>   <li>Les questions de comptabilité/d&#39;audit</li>   <li>Les cas de corruption/et de corruption d&#39;agents étrangers</li>   <li>Les questions de gouvernance</li>   <li>Les questions de crimes économiques</li>   <li>Les questions de gestion de crise et de risque</li>   <li>Les enquêtes internes</li>   <li>Les enquêtes transfrontalières</li>  </ul>    <p><strong>Nous abordons chaque dossier avec une mission simple </strong>: élaborer des stratégies de litige parfaitement alignées avec les intérêts d&#39;affaires de nos clients. Que ce soit au moyen de la négociation d&#39;un règlement à l&#39;amiable, d&#39;un mode alternatif de règlement de différends ou devant les tribunaux, l&#39;équipe Gowling WLG s&#39;engage à œuvrer de concert avec vous pour obtenir les meilleurs résultats possible qui répondent à vos besoins d&#39;affaires.</p>    <p><strong>Une équipe juridique sans pareil :</strong> notre groupe comprend des professionnels chevronnés en litige en valeurs mobilières incluant des avocats qui ont déjà occupé des rôles clés au sein d&#39;organismes canadiens de réglementation des valeurs mobilières, tels que directeur adjoint de la mise en application, conseiller juridique en chef, procureurs et spécialistes du litige dans plusieurs Directions (de la réglementation des personnes et des compagnies inscrites ainsi que de la conformité et du financement des sociétés) et Unités mixtes (délit d&#39;initiés/manipulation du marché) de la Commission des valeurs mobilières de l&#39;Ontario (CVMO).</p>    <p>Notre équipe se compose aussi d&#39;anciens procureurs de la Couronne qui ont agi dans le cadre de dossiers de valeurs mobilières. Ces expériences ont permis à notre équipe de développer des connaissances approfondies des lois et règlements du Canada des plus complexes en matière de valeurs mobilières, ainsi que de tisser de solides liens avec des organismes gouvernementaux &ndash; des avantages dont bénéficient directement nos clients.</p>    <p><strong>Reconnus comme hautement compétents :</strong> les membres de l&#39;équipefigurent régulièrement parmi les meilleurs avocats plaidants selon les répertoires juridiques canadiens, y compris Chambers, Lexpert, Best Lawyers et Benchmark Litigation, et Gowling WLG est réputée comme étant un cabinet de premier niveau en fait de litige en valeurs mobilières. Nos professionnels ont agi dans le cadre de dossiers qui ont fait jurisprudence comme des recours collectifs en valeurs mobilières, des dossiers de délit d&#39;initiés/de communication d&#39;information privilégiée, de transactions de fusions et acquisitions contestées, de manipulation des marchés, de fraudes en valeurs mobilières, de dossiers mettant en cause les obligations en vertu du Règlement NI 43-101, la responsabilité des vérificateurs ainsi que des enquêtes sur des crimes économiques.</p>    <p>Jouissant d&#39;une excellente réputation, nos professionnels sont fréquemment invités à prononcer des conférences dans des colloques et des séminaires de renom ainsi que dans les meilleures universités du Canada.</p>    <p><strong>Un soutien et des services complets :</strong> qu&#39;il s&#39;agisse de recours collectifs multijuridictionnels en valeurs mobilières, de réclamations pour congédiement injustifié de conseillers en placement, de gérer des dossiers de recouvrement de fraudes d&#39;investisseurs à l&#39;échelle internationale ou de traiter des litiges complexes liés à des produits structurés, nous fournissons des conseils efficaces en temps opportun qui répondront, voire surpasseront vos besoins.</p>    <p>Œuvrant comme une seule et même équipe qui offre un service sans failles à partir de sept bureaux répartis dans l&#39;ensemble du Canada, ainsi qu&#39;au Royaume-Uni, en Europe, en Asie et au Moyen-Orient, nos avocats plaidants collaborent étroitement avec les avocats de l&#39;équipe de litige en valeurs mobilières de Gowling WLG pour mettre à profit leur expertise en ce qui a trait aux stratégies de prises de contrôle, de dossiers d&#39;activisme des actionnaires, d&#39;obligations de déclaration d&#39;initiés et autres exigences.</p>    <p><strong>Rôles clés de l&#39;industrie :</strong> nos professionnels ont occupé des postes de chefs de file au sein de l&#39;industrie canadienne des valeurs mobilières, y compris à titre de membre du Comité consultatif des valeurs mobilières et du Comité consultatif sur les instances en valeurs mobilières de la CVMO, de l&#39;Institut des administrateurs de sociétés, du Comité des Autorités canadiennes en valeurs mobilières (ACVM) chargé de la mise en application de la loi, de présidents du groupe de pratique en litige en valeurs mobilières de l&#39;Advocates&#39; Society (l&#39;un des plus importants regroupements d&#39;avocats plaidants en valeurs mobilières du Canada) ainsi qu&#39;en tant que premiers présidents du sous-comité du litige en valeurs mobilières responsable du Canada de l&#39;American Bar Association.</p>    <p>Ces postes clés nous permettent de demeurer au fait des dernières tendances en fait de litige en valeurs mobilières - et de suivre de près l&#39;évolution des marchés canadiens des capitaux.</p>    <p><strong>Des solutions rentables :</strong> nous veillons à vous en donner plus pour votre argent quant à vos dépenses juridiques au moyen de l&#39;utilisation <a href=""~/fr/services/practical-lpm-by-gowling-wlg/canada/"">GPJ Pratique par Gowling WLG</a>, notre plate-forme interne de gestion de projets juridiques. En assurant une gestion sans failles de la portée, des coûts, des tâches et des ressources liés à votre dossier, nous assurons la progression de ce dernier dans le respect de l&#39;échéancier et du budget. Nous sommes également à même de réduire les coûts et d&#39;assurer l&#39;efficacité au moyen de notre outil de recherche juridique et de précédents en litige, Go.Plead&trade;, lequel a été élaboré et est alimenté par notre équipe.</p>    <p>Nous pouvons vous aider. N&#39;hésitez pas à <a href=""~/fr/people/?page=1&amp;services=577&amp;locations=GWLG.Canada"" target=""_blank"">communiquer avec n&#39;importe quel membre de notre équipe</a> pour de plus amples détails.</p>  ",GWLG.Canada,300e471b-5cfe-45e3-bb75-6cc00bbdf27b,0F28B1C6-81AB-458B-B5A2-7F11725C7923,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{D9D98D49-7A54-4962-95E8-DF07C57D093A}
273,/Services/Smart-Raise-Streamlined-Private-Placements/Canada,fr-CA,D427D9C3-A77A-4734-9E71-30238D7476B6,Canada,Canada,,NULL,NULL,"<p>Pour solliciter des capitaux, il vous faut un cabinet juridique dont l&rsquo;approche est à la fois efficace, rentable et harmonisée avec l&rsquo;ensemble des exigences réglementaires. Grâce à Smart Raise, la plateforme automatisée de Gowling WLG, vous bénéficierez d&rsquo;une grande valeur ajoutée, d&rsquo;un service uniformisé et de résultats fiables, le tout bien plus rapidement qu&rsquo;avec un placement privé traditionnel.</p>    <p>Notre logiciel spécialisé Smart Raise repose sur un processus automatisé novateur pour générer des documents de qualité supérieure tout en éliminant les tâches banales et répétitives que l&rsquo;on associe normalement à la sollicitation de capitaux.</p>    <p>Alimenté par la riche base de données de précédents de Gowling WLG et géré par une équipe de professionnels juridiques d&rsquo;expérience, Smart Raise assure la production rapide et exacte des documents juridiques liés aux placements privés, tout en respectant les exigences canadiennes en matière de conformité.</p>    <h3>Pourquoi choisir Gowling WLG pour votre placement privé?</h3>    <ul>   <li>Un travail de qualité, réalisé plus rapidement : inutile d&rsquo;attendre plusieurs&nbsp;semaines &ndash; vous pourrez obtenir les documents requis en quelques jours seulement.</li>   <li>Une tranquillité d&rsquo;esprit : soyez entièrement rassuré en sachant que les documents&nbsp;juridiques produits par Smart Raise sont fiables et conformes à l&rsquo;ensemble des&nbsp;exigences réglementaires canadiennes en matière de valeurs mobilières.</li>   <li>Un service rentable : votre équipe juridique se concentre sur les questions&nbsp;primordiales et laisse Smart Raise s&rsquo;occuper des tâches répétitives.</li>  </ul>    <h3>Pourquoi Gowling WLG?</h3>    <p>Nous nous sommes forgé une solide réputation d&rsquo;innovateur dans le domaine juridique,&nbsp;grâce à la mise en oeuvre de divers outils qui permettent d&rsquo;offrir une valeur ajoutée et&nbsp;une efficacité accrue à nos clients. En utilisant des systèmes automatisés, des modèles&nbsp;centralisés et des procédures bien définies, nous vous procurons un meilleur contrôle des&nbsp;coûts, davantage de prévisibilité et des économies substantielles.</p>    <p>À l&rsquo;aide d&rsquo;outils comme GPJ Pratique, notre approche novatrice à la gestion de projets&nbsp;juridiques, Go.Plead, notre riche base de données de recherche juridique et de précédents,&nbsp;Virtual In-House Counsel, maintenant Smart Raise et plusieurs autres, Gowling WLG&nbsp;contribue à remodeler l&rsquo;industrie juridique.</p>    <h3>L&rsquo;un des cabinets juridiques les plus actifs du Canada</h3>    <p>La pratique de Gowling WLG en droit des affaires est l&rsquo;une des plus actives du Canada. Nous&nbsp;nous positionnons régulièrement parmi les cabinets juridiques chefs de file du pays pour&nbsp;notre activité dans le secteur des marchés financiers.&nbsp;</p>    <p>Vu notre expérience inégalée, votre dossier sera traité diligemment et vos transactions&nbsp;conclues comme il se doit.</p>    <h3>Smart Raise, notre outil automatisé pour les placements&nbsp;privés, repose sur une procédure optimale en trois&nbsp;étapes :</h3>    <ol>   <li>Gowling WLG saisit les données&nbsp;clés provenant du sommaire des&nbsp;modalités négociées.</li>   <li>Alimenté par notre inventaire de&nbsp;précédents, Smart Raise génère&nbsp;des ébauches de documents&nbsp;juridiques.</li>   <li>Les professionnels de&nbsp;Gowling WLG révisent les&nbsp;documents pour en assurer&nbsp;l&rsquo;exactitude et l&rsquo;intégralité.</li>  </ol>    <p>Smart Raise permet de remplir une variété de&nbsp;documents juridiques requis pour la sollicitation de<br />  capitaux et les placements privés :</p>    <ul>   <li>les conventions de placement pour compte</li>   <li>les conventions de souscription</li>   <li>les certificats de bons de souscription</li>   <li>les résolutions du conseil</li>   <li>les avis juridiques</li>   <li>les communications aux Bourses</li>  </ul>  ",GWLG.Canada,NULL,D93EC41E-4AF4-4BF4-8165-E6F0C701C4F3,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
274,/Services/Supreme-Court-of-Canada-Services/Canada,fr-CA,6524503C-DABB-4E86-8B9D-7414607E8713,Canada,Canada,"Pour présenter des dossiers devant la Cour suprême du Canada, il faut pouvoir compter sur une équipe d'avocats experts ayant une vaste expérience de ce tribunal, une connaissance approfondie des procédures et de la jurisprudence pertinentes, ainsi qu'un parcours jalonné de réussites.",NULL,NULL,"<p>Pour présenter des dossiers devant la Cour suprême du Canada, il faut pouvoir compter sur une équipe d&#39;avocats experts ayant une vaste expérience de ce tribunal, une connaissance approfondie des procédures et de la jurisprudence pertinentes, ainsi qu&#39;un parcours jalonné de réussites.</p>    <h3>Obtenir gain de cause</h3>    <p>En matière de représentation devant la Cour suprême du Canada, Gowling WLG est votre conseiller juridique de confiance à Ottawa.</p>    <p>Grâce à son équipe formée d&#39;avocats et d&#39;agents de la Cour suprême parmi les plus réputés du Canada, Gowling WLG propose, depuis plus de 30 ans, une gamme complète de services de soutien aux avocats qui plaident à la Cour suprême du Canada. Notre équipe offre des conseils efficaces en matière d&#39;appels ainsi que des services de représentation relatifs à un grand nombre d&#39;enjeux, de requêtes, d&#39;appels et de demandes, afin de guider les clients dans les complexités de ce tribunal et de les aider à obtenir gain de cause dans leurs dossiers.</p>    <p>De nombreux clients nationaux et étrangers font souvent appel à nos conseils éclairés relativement à tous les enjeux touchant la Cour suprême, y compris :</p>    <ul>   <li>la question à savoir s&#39;il faut déposer une demande d&#39;autorisation d&#39;appel et dans l&#39;affirmative, comment y procéder, ou comment répondre à la demande d&#39;autorisation d&#39;appel d&#39;un opposant</li>   <li>la préparation de plaidoyers et de documents écrits persuasifs conformes auxRègles de la Cour suprême du Canada</li>   <li>tous les services liés aux documents requis par la Cour ainsi que le dépôt de ces derniers</li>   <li>le dépôt de requêtes devant la Cour (demandes de suspension des procédures, requêtes de présentation de nouvelles preuves, et demandes de prorogation des délais ou visant à soulever des questions constitutionnelles)</li>   <li>et tous les services de représentation exigés auprès de la Cour.</li>  </ul>    <p>Nos avocats sont aussi à même d&#39;aider des avocats dans le cadre de la préparation et de la présentation de leurs plaidoiries devant la Cour, ou encore d&#39;agir à titre de conseillers ou de co-conseillers selon les besoins de dossiers en particulier.</p>    <h3>Expertise et savoir</h3>    <p>Les spécialistes de la Cour suprême du Canada de Gowling WLG sont des experts de grande renommée. L&#39;équipe comprend des associés, des avocats et des parajuristes chevronnés en matière de litiges et de services de représentation devant la Cour suprême du Canada.</p>    <p>Des membres de notre groupe sont en outre auteurs du livre intitulé <a href=""http://www.carswell.com/product-detail/supreme-court-of-canada-practice-2014/"" target=""_blank"">Supreme Court of Canada Practice</a>, une publication de Carswell qui en est à sa 14e édition et qui constitue le seul ouvrage entièrement annoté sur la Loi sur la Cour suprême et les Règles de la Cour suprême. Il a d&#39;ailleurs été souvent cité par la Cour dans le cadre de plusieurs jugements importants.</p>    <p>De plus, nos professionnels veillent à la rédaction de Supreme Court Bulletin - un bulletin qui diffuse en temps réel les récents développements relatifs jugements de la Cour et aux décisions de cette dernière quant aux demandes d&#39;autorisation d&#39;aller en appel, ainsi que les nominations à la magistrature fédérale. Il contient également des observations quant à des jugements récents et à des questions de procédure de la Cour suprême. Pour recevoir cette Newsletter, <a href=""~/en/updates"">visitez notre page Abonnez-vous</a>.</p>  ",GWLG.Canada,049d9654-364c-4726-b20d-cfc097add38b,6B15483F-4808-41B6-8E72-B1BF310A5BE3,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F12112B9-3065-4B86-8A0F-C1A1D92D1644}
275,/Services/Tax/Canada,fr-CA,73E413C7-3DF2-47F9-B662-6C68313D88CA,Canada,Canada,L'environnement fiscal est en constante évolution. C'est pourquoi il vous faut compter sur les services d'un cabinet juridique novateur qui possède l'expérience et l'expertise pour vous aider à conserver une longueur d'avance.,NULL,NULL,"<p>Comptant plus de 30 professionnels du droit fiscal au Canada, le groupe Droit fiscal de Gowling&nbsp;WLG est reconnu par les publications <em>Chambers Global</em> et <em>International Tax Review</em> à titre de chef de file en fiscalité, prix de transfert, planification fiscale et impôt indirect.</p>    <p>Forte d&#39;une riche expérience de prestation de conseils à des petits entrepreneurs, de moyennes entreprises et de grandes entreprises Fortune 500, Gowling&nbsp;WLG possède l&#39;expertise pour répondre à vos besoins uniques en matière de fiscalité. Nous conseillons des clients canadiens et internationaux et possédons des connaissances approfondies dans une variété d&#39;industries, y compris celles du vêtement, des banques, de l&#39;énergie, de la finance et de la location, des assurances, de la fabrication, du paiement, de l&#39;immobilier, du commerce de détail traditionnel et Internet, des télécommunications, et des transports.</p>    <p>Nous avons de l&#39;expérience avérée en matière de structurations fiscales pour des sociétés étrangères faisant des affaires au Canada, y compris des multinationales, des entités exonérées d&#39;impôt, des entités souveraines étrangères, et des particuliers à valeur nette élevée, ainsi qu&#39;en fait de structurations fiscales à l&#39;étranger pour des entités canadiennes. Notre groupe du droit fiscal est à votre disposition pour offrir des conseils éclairés qui répondent à tous vos besoins en fait de fiscalité, de la réorganisation d&#39;entreprises, à la rémunération des dirigeants, au commerce international, en passant par les services aux clients privés, la résolution de différends et le prix de transfert.</p>    <p>Notre groupe Droit fiscal est composé d&#39;avocats, de comptables, d&#39;économistes et d&#39;anciens cadres supérieurs de l&#39;Agence du revenu du Canada. Nous disposons des ressources et avons l&#39;expérience pratique nécessaires pour anticiper les problèmes auxquels vous pourriez faire face et nous offrons des solutions fiscales pratiques et créatives qui font progresser vos affaires.</p>    <p>Pour découvrir comment nous pouvons vous aider en fait de fiscalité, veuillez <a href=""~/fr/people/?page=1&amp;services=585&amp;locations=GWLG.Canada"" target=""_blank"">communiquer avec tout autre membre de notre groupe de droit fiscal</a>.</p>  ",GWLG.Canada,NULL,5E7A4C28-1F41-45D6-9485-1A23041B34F6,NULL,0,1,t-white,<p>L&#39;environnement fiscal est en constante évolution. C&#39;est pourquoi il vous faut compter sur les services d&#39;un cabinet juridique novateur qui possède l&#39;expérience et l&#39;expertise pour vous aider à conserver une longueur d&#39;avance.</p>  ,Actualités,09810a55-763e-481b-872c-c79129ea3ec6;b32d3a3b-eb3f-47f8-b1ce-7fb04c4678fe,Nos ressources sur la droit fiscal,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
276,/Services/Tax-Dispute-Resolution/Canada,fr-CA,B4E583FC-5100-4E9D-A97C-6DF0C6C7B85F,Canada,Canada,"Forte de son expertise juridique spécialisée en droit fiscal canadien, notre équipe est à même de vous épargner le temps et vous éviter le stress associés à la résolution de différends complexes.",NULL,NULL,"<p>Le groupe Règlement des différends fiscaux de Gowling WLG réunit certains des plus réputés conseillers en matière de litiges fiscaux du Canada. Forte de son expertise juridique spécialisée en droit fiscal canadien, notre équipe est à même de vous épargner le temps et vous éviter le stress associés à la résolution de différends complexes.</p>    <h3>Une gamme complète de services</h3>    <p>Notre équipe allie une vaste expertise en règlement de litiges fiscaux à une riche expérience pour offrir des conseils dans le cadre d&#39;une gamme de questions portant sur ce qui suit :</p>    <ul>   <li>Allègement pour les contribuables</li>   <li>Annulations</li>   <li>Appels</li>   <li>Décrets de remise</li>   <li>Demandes des autorités compétentes aux termes de l&#39;article sur la procédure amiable (PA) dans les conventions fiscales du Canada</li>   <li>Divulgations volontaires</li>   <li>Oppositions</li>   <li>Prix de transfert</li>   <li>Recouvrement de l&#39;impôt et autres mesures d&#39;exécution</li>   <li>Rectifications</li>   <li>Vérifications</li>  </ul>    <p>Que vous soyez un administrateur, un chef de la direction financière, un entrepreneur ou un particulier aux prises avec une question fiscale personnelle, nous saurons vous guider tout au long du processus et vous aider à obtenir le meilleur résultat possible. Notre objectif est de vous éviter un litige dans la mesure du possible, mais nous sommes aussi bien outillés pour vous défendre en cour si nécessaire.</p>    <h3>Une solide expérience</h3>    <p>Régulièrement classés chefs de file dans leur domaine par les publications <em>International Tax Review </em>et <em>Chambers</em>, nos professionnels possèdent une riche expérience dans les secteurs public et privé. Les membres de notre équipe ont œuvré au sein de la Direction des décisions en impôts, la Direction du secteur international et des grandes entreprises, la Division de la planification fiscale abusive, la Division de la politique législative, et la Division des services relatifs à l&#39;autorité compétente canadienne de l&#39;Agence du revenu du Canada (ARC), de même qu&#39;au sein du contentieux de l&#39;Agence du revenu du Québec.</p>    <h3>Des conseils sur mesure</h3>    <p>La solide expertise de nos professionnels englobe plusieurs secteurs&nbsp;: l&#39;énergie, les mines, les infrastructures et les sciences de la vie, en passant par les affaires gouvernementales, les services financiers, la technologie et la fabrication. Ils sont bien positionnés pour vous guider quant aux défis et occasions propres à votre entreprise.</p>    <h3>Services-conseils virtuels à l&rsquo;intention des professionnels de la comptabilité&nbsp;</h3>    <p>C&rsquo;est inévitable. Les comptables professionnels qui aident des clients dans le cadre de litiges fiscaux se retrouvent tôt ou tard aux prises avec des questions de fond ou de procédure complexes. Pour les trancher, il suffirait d&rsquo;une simple vérification auprès d&rsquo;un expert en la matière. C&rsquo;est là que Gowling WLG entre en scène.</p>    <p>Par téléphone ou par courriel, notre équipe de premier rang est à votre disposition pour vous fournir des conseils juridiques sur tout type de règlements de différends fiscaux à partager avec vos clients. <a href=""~/getmedia/3d7257aa-3398-403f-a239-f901f013bd98/Gowling-WLG-Virtual-Advisory-Services-Tax-Dispute-Resolution.pdf.xml"" target=""_blank"">Cliquez ici pour en savoir plus sur nos services-conseils virtuels de règlement de différends fiscaux</a>.&nbsp;(Brochure en anglais)</p>    <h3>Mandats représentatifs</h3>    <p>Voici quelques gains en matière de litiges fiscaux pour le compte de nos clients:</p>    <ul>   <li>Résolution de litiges fiscaux liés à un événement sportif international : nous avons réglé avec succès une cotisation de retenue fiscale sur les paiements d&#39;un diffuseur canadien à sa société-mère étrangère, y compris des négociations interdépendantes de haut niveau comportant des vérifications et des appels à l&#39;ARC, le ministère de la Justice, le Bureau de l&#39;ombudsman des contribuables et le ministère des Finances, de concert avec un appel à la Cour canadienne de l&#39;impôt.</li>   <li>Accueil d&#39;un appel quant à la TPS/TVH d&#39;une entreprise Internet non résidente : nous avons réglé des différends mettant en cause des fournisseurs de services de commerce électronique sur Internet, soulevant notamment de nouveaux enjeux qui créeront des précédents, y compris la question à savoir si une entreprise de commerce électronique non-résidente avait fourni des services imposables et faisait des affaires au Canada.</li>   <li>Rectification d&#39;une structure quant à l&#39;acquisition d&#39;une entreprise de production d&#39;énergie non- résidente : nous avons obtenu une ordonnance de rectification en vue de corriger la structure d&#39;une acquisition d&#39;installations d&#39;énergie renouvelable canadienne, évitant ainsi des conséquences fiscales défavorables et comportant de nouveaux enjeux, y compris les règles complexes sur la majoration en vertu du paragraphe 88(1) de la <em>Loi de l&#39;impôt sur le revenu</em>.</li>   <li>Libération de sanctions extraordinaires relatives à des placements à l&#39;étranger : nous avons défendu avec succès des contribuables cotisés pour des pénalités administratives extraordinairement onéreuses, y compris aux termes de dispositions de la <em>Loi de l&#39;impôt sur le revenu</em> jamais invoquées dans une action en justice.</li>   <li>Aide à des contribuables défavorisés : nous nous engageons envers la communauté par la prestation de services juridiques bénévoles en vue d&#39;aider des personnes dans le besoin et d&#39;éviter la faillite ou la pauvreté à des personnes marginalisées, par l&#39;annulation ou la réduction de cotisations.</li>  </ul>    <h3>Pour en savoir plus</h3>    <p>Si vous souhaitez poser une question liée à un différend fiscal en toute confidentialité, veuillez communiquer avec tout autre membre de notre équipe.</p>  ",GWLG.Canada,6b8f6eff-0e11-457f-a5fb-13663ac51e49;2de02f2d-4a7f-490a-8a3b-73ebf0c8073f,FA76A598-E571-4940-95E3-81B4CC0C7FE6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{364E2BB1-0867-4CE5-831C-43AE0617963D}|{1F689D48-2700-4C33-BD5A-E43FD302AB75}
277,/Services/Trademarks-Brands-Designs/Canada,fr-CA,64009CDA-CB75-4394-9DDC-18BE69FB10B5,Canada,Canada,"Votre réputation, c'est ce qui compte le plus. Après avoir tant investi dans l'identité de votre marque, vous avez besoin d'une équipe hautement efficace et perspicace de professionnels des marques de commerce qui possèdent une expérience approfondie pour enregistrer en toute sécurité et commercialiser avec succès vos marques de commerce, et pour en surveiller l'utilisation.",NULL,NULL,"<p>Votre réputation, c&#39;est ce qui compte le plus. Après avoir tant investi dans l&#39;identité de votre marque, vous avez besoin d&#39;une équipe hautement efficace et perspicace de professionnels des marques de commerce qui possèdent une expérience approfondie pour enregistrer en toute sécurité et commercialiser avec succès vos marques de commerce, et pour en surveiller l&#39;utilisation.</p>    <p>Gowling WLG est l&#39;un des cabinets chefs de file du Canada spécialisés en droit de la propriété intellectuelle (PI). À titre de cabinet le plus important et le plus expérimenté en matière de propriété intellectuelle du Canada, nous comptons sur des professionnels qui savent combiner leur expérience pratique et leur profonde connaissance de l&#39;industrie pour établir, protéger et défendre les marques de nos clients.</p>    <p>Chez Gowling WLG, nous collaborons avec bon nombre des plus grandes organisations de la planète, afin d&#39;élaborer des stratégies efficaces et fiables en matière de marques de commerce. Qu&#39;il s&#39;agisse de dépôt, de poursuites, d&#39;enregistrement de noms de domaine, de gestion de portefeuilles ou encore de concession de licences, de procédures d&#39;opposition, de protection et de respect des droits ou de poursuites, nos clients savent qu&#39;ils peuvent compter sur nous pour gérer en tout temps toutes les questions relatives à leurs marques de commerce.</p>    <p>Grâce à notre partenariat avec notre bureau primé de Moscou, nous sommes particulièrement bien placés pour vous fournir un éventail complet de services en matière de marques de commerce partout en Amérique du Nord et dans le monde entier.</p>    <p>Grâce à l&#39;expérience de Gowling WLG en tant que chef de file en droit des marques de commerce, laquelle remonte à la fin du XIXe siècle, nos professionnels offrent fréquemment de précieux conseils et donnent d&#39;importantes nouvelles sur des sujets d&#39;une importance particulière en matière de marques de commerce.</p>  ",GWLG.Canada,8ad0e3f6-68e6-45b9-a509-c5811ebc77af,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2D06D20E-608B-4A50-A0AF-CC2F741D9E62}
278,/Services/Transfer-Pricing-Competent-Authority/Canada,fr-CA,442C0060-2FD2-488F-829F-54BCE1BD0AB2,Canada,Canada,"Gowling WLG est le premier choix des grandes multinationales qui recherchent des conseils d'experts, des solutions novatrices et de la documentation complète sur une grande variété de questions relatives aux prix de transfert.",NULL,NULL,"<p>Gowling WLG est le premier choix des grandes multinationales qui recherchent des conseils d&#39;experts, des solutions novatrices et de la documentation complète sur une grande variété de questions relatives aux prix de transfert.</p>    <h3>Chef de file de l&#39;industrie</h3>    <p>Le groupe Prix de transfert et Autorité compétente de Gowling WLG, en collaboration avec le groupe Droit fiscal, aide les entreprises à optimiser leur situation fiscale à l&#39;échelle planétaire et à réduire leur exposition aux cotisations de vérification défavorables, grâce à une planification fiscale complète et à des stratégies d&#39;implantation novatrices.</p>    <p>Nous collaborons avec l&#39;Agence du revenu du Canada depuis plus de 20 ans et possédons de l&#39;expérience pratique en analyse et négociation de centaines de demandes des autorités compétentes et d&#39;accords en matière de prix de transfert auprès des autorités compétentes du monde entier.</p>    <h3>Des solutions stratégiques qui réduisent les risques</h3>    <p>Nous pouvons aider nos clients à mettre en œuvre une approche stratégique de prix de transfert et à trouver des solutions qui réduiront le fardeau fiscal, en évitant par exemple la double imposition et les pénalités de non-conformité.</p>    <p>Nos services comprennent ce qui suit :</p>    <ul>   <li>Les services de planification et de conseils</li>   <li>L&#39;évaluation complète des risques</li>   <li>La révision des politiques et de la documentation existantes</li>   <li>La préparation de documentation ponctuelle - analyses fonctionnelles et économiques</li>   <li>La représentation lors des processus de vérification</li>   <li>La représentation lors des appels</li>   <li>La représentation auprès des autorités compétentes en vue d&#39;éviter la double imposition</li>   <li>La réparation et la négociation des APP</li>   <li>Les discussions confidentielles avec les parties liées non-résidentes</li>   <li>L&#39;adaptation de la documentation étrangère sur le prix de transfert en fonction des règles canadiennes</li>   <li>L&#39;évaluation des biens intangibles</li>   <li>La préparation d&#39;arrangements admissibles de participation au coût</li>   <li>La gestion des frais et les services intragroupe</li>   <li>La consultation à l&#39;égard des autres questions fiscales à l&#39;échelle internationale</li>  </ul>  ",GWLG.Canada,d0468a8c-0c81-431f-9b75-f04bbb8414bd,D1ECCE1D-AAF3-428A-8B29-3697DF36FCDE,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B87A2CE3-9DFE-415C-AEA1-C49AEF0E1D89}
279,/Services/White-Collar-Defence-Investigations/Canada,fr-CA,1220DEC2-CC8C-4180-ACE7-D00C6A3C7488,Canada,Canada,Notre groupe Défense et enquêtes en col blanc possède l'expérience et l'expertise pour minimiser les risques et représenter des entreprises et des particuliers.,NULL,NULL,"<p>Presque chaque jour, les médias annoncent une autre enquête sur la corruption, la subornation ou la collusion. Au Canada comme partout dans le monde, les organismes de réglementation et les autorités chargées de l&#39;application des lois prennent des mesures draconiennes contre les pratiques commerciales irrégulières ou contraires à la morale. Pour veiller à la conformité aux diverses couches complexes de lois, de réglementations et d&#39;exigences en matière de gouvernance ainsi qu&#39;à la détection et à la prévention d&#39;infractions potentielles, nous disposons d&#39;une équipe spécialisée en résolution de problèmes d&#39;ordre juridique, forte d&#39;une expérience à l&#39;échelle nationale et internationale.</p>    <h3>Repérer les risques et préserver l&#39;intégrité</h3>    <p>Le groupe Enquêtes et droit pénal des affaires de Gowling WLG combine des équipes multiterritoriales et multidisciplinaires afin d&#39;offrir des solutions novatrices et fiables dans un contexte commercial et réglementaire toujours en mouvement. Nous adoptons une démarche pratique et axée sur les affaires pour réduire le risque de corruption, au moyen de plusieurs services complémentaires :</p>    <ul>   <li><strong>Prévention de la corruption et de la subornation : </strong>Nos spécialistes conçoivent et mettent en œuvre des programmes de conformité complets et examinent les politiques, procédures et contrôles de nos clients pour s&#39;assurer de leur conformité et repérer les risques potentiels.</li>   <li><strong>Gestion de crise et enquêtes :</strong> Nous travaillons de concert avec nos clients pour gérer leurs crises, mener des enquêtes internes et faciliter les enquêtes externes, en offrant des conseils utiles sur l&#39;établissement de jalons, de mesures correctives et de stratégies de communication.</li>   <li><strong>Opérations commerciales, fusions et acquisitions : </strong>Notre équipe fournit des services experts de vérification diligente, négocie les contrats et établit la structure des ententes pour s&#39;assurer que les opérations commerciales de nos clients ne présentent pas d&#39;éléments de surprise une fois conclues et qu&#39;elles ne laissent aucune place à la corruption.</li>   <li><strong>Formation et éducation :</strong> Nous créons des programmes de formation sur l&#39;éthique et la lutte contre la corruption et nous offrons des formations complètes aux administrateurs, équipes de gestion, employés, consommateurs, fournisseurs et autres partenaires d&#39;affaires.</li>   <li><strong>Gouvernance, gestion globale des risques et contrôles internes :</strong> Notre équipe effectue une évaluation rigoureuse des risques et élabore des cadres de gouvernance qui s&#39;étendent du conseil d&#39;administration à l&#39;ensemble de l&#39;entreprise afin de préserver l&#39;intégrité de cette dernière.</li>   <li><strong>Signalement et gestion des dénonciations : </strong>Nous recommandons l&#39;établissement de mécanismes de dénonciation ainsi que d&#39;un ensemble complet de procédés visant à soutenir cet important outil de gouvernance, et contribuons à leur mise en œuvre.</li>  </ul>    <p>Nos professionnels possèdent l&#39;expérience et les connaissances nécessaires à l&#39;échelle internationale pour protéger votre entreprise contre le risque de corruption, peu importe où vos activités commerciales vous mènent.</p>  ",GWLG.Canada,1af96e1d-70ea-4127-a64b-5aa72590536d,E3C87DB8-3809-4B15-864B-9A1AADCD1E81,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2DDD468E-4B8E-43DC-9888-109746A7D8E9}
280,/Services/XClaim-Portfolio-Claims-Management/Canada,fr-CA,1A77E498-D947-4AB3-93AB-56D89A609A9F,Canada,Canada,Gérer un important portefeuille de dossiers de litige peut s'avérer un lourd et coûteux fardeau pour les institutions. Les méthodes traditionnelles de gestion mobilisent beaucoup de main-d'œuvre et sont inefficaces et onéreuses.,NULL,NULL,"<p>Gérer un important portefeuille de dossiers de litige peut s&#39;avérer un lourd et coûteux fardeau pour les institutions. Les méthodes traditionnelles de gestion mobilisent beaucoup de main-d&#39;œuvre et sont inefficaces et onéreuses.</p>    <p>Chez Gowling WLG, nous redéfinissons la relation avocat-client grâce à notre alliage de services qui comprennent une infrastructure de recouvrement qui domine le marché, un logiciel exclusif de services de gestion des dossiers, ainsi que des modèles novateurs de dotation en personnel et de facturation. Cette approche favorise le flux d&#39;information, réduit les coûts et vous permet de vérifier la progression de vos dossiers à distance, en tout temps.</p>    <h3>Sous le signe de la collaboration</h3>    <p>La gestion efficace d&#39;un portefeuille de dossiers de droit d&#39;action ne repose pas uniquement sur la délégation de dossiers à des avocats. Nous nous servons également de notre système de gestion des dossiers unique pour vous aider à réduire vos coûts et ainsi éviter les délais frustrants liés à l&#39;approche traditionnelle.</p>    <h3>Suivi des dossiers à distance</h3>    <p>Dans le cadre de la gestion d&#39;un important portefeuille de dossiers de litige, la plate-forme extranet exclusive XClaim<sup>MC</sup> de Gowling WLG fournit des analyses sophistiquées de portefeuilles permettant d&#39;identifier des tendances, des inefficacités et des occasions que peuvent présenter votre portefeuille.</p>    <h3>La transparence</h3>    <p>XClaim<sup>MC</sup> vous offre un accès direct en temps réel à toute l&#39;information pertinente liée à vos dossiers et vous permet ainsi de suivre leur progression à distance, quand bon vous semble.</p>    <h3>Valeur ajoutée</h3>    <p>Notre approche de gestion des dossiers va bien au-delà de la nouvelle technologie - elle comprend en effet des modèles de facturation flexibles fondés sur la valeur, qui permettent de favoriser l&#39;efficacité, de réduire les coûts et de rehausser le niveau de certitude.</p>  ",GWLG.Canada,0dcf807e-9a72-4e91-a1d1-746438c45877,0A3DCB0E-C64D-44B6-9B01-05C133AF7F01,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{8D6FF9BD-33B1-431E-BDFC-9083C4C01AAF}
281,/Services/FinTech-Law/Canada,en-GB,D00CDFCF-6676-4198-B8A8-38EA11E5081E,Canada,Canada,FinTech is causing a revolution in the financial services sector. Rapid advances in financial services innovation and technology are creating both opportunities and threats for traditional financial institutions and ambitious startups.,NULL,NULL,"<p>As the financial services landscape changes, new players and new relationships will continue to transform the industry. Companies need a legal partner with the vision, creativity and knowledge to bridge gaps between the innovative and the traditional.</p>    <p>Both the technology and the laws governing it are highly complex, requiring sophisticated legal and technical insight and a deep understanding of the ever-evolving regulatory space and technology advances. Our multi-disciplinary team combines experience in digital banking, mobile wallets, payment services, open banking, banking-as-a-service, peer-to-peer lending, equity crowdfunding / online investment platforms, payment apps, robo-advisers and e-commerce, with excellence across a full suite of legal disciplines. Our team has deep experience in assisting players in the financial services sector negotiate a myriad of agreements, including collaboration agreements between financial institutions and FinTech companies.</p>    <h2>Client work</h2>    <p>Some of our FinTech projects include:</p>    <p>{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Avalara%2c+Inc.|(headline3)BTL+Group+Ltd|(headline2)Coinsquare|(copy1)Counsel+to+leading+provider+of+cloud-based+tax+compliance+automation+for+businesses+of+all+sizes%2c+with+respect+to+its+cross-border+acquisition+of+3CE+Technologies%2c+Inc.|(copy3)Counsel+in+the+closing+of+a+qualifying+transaction+in+which+it+became+a+%22Tier+2%22+issuer+on+the+TSX+Venture+Exchange+(TSX+V%3aBTL)%2c+making+it+the+world%27s+first+public+blockchain+company.|(copy2)Counsel+to+Coinsquare+in+relation+to+Mogo%27s+strategic+investment+(19.99%2525+%2f+%2456.4M)+into+the+company.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkred|(width)|(height)^}{^widget|(bghover1)colour-darkred|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkblue|(headline1)Flahmingo+Investments+Inc.|(headline3)Expertus+Technologies+Inc.|(headline2)Payfare+Inc.|(copy1)Counsel+to+Flahmingo+Investments+Inc.%2c+a+Calgary-based+FinTech+startup%2c+with+respect+to+its+oversubscribed+pre-seed+funding+round+which+raised+%241.88+million.|(copy3)Counsel+to+a+leading+FinTech+company+in+its+acquisition+by+IBM%2c+strengthening+IBM%27s+portfolio+as+an+end-to-end+digital+payments+solution+provider+and+advancing+its+hybrid+cloud+and+AI+strategy.|(copy2)Counsel+to+Payfare+Inc.%2c+a+global+financial+technology+company+powering+digital+banking+and+instant+payment+solutions%2c+with+respect+to+its+%2475.2+million+initial+public+offering+of+common+shares.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-aubergine|(width)|(height)^}</p>    <h2>Recognition</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">They are the best at what they do; they understand the law at the highest level. They have good subject matter expertise and are able to understand my tech and protect it well, no matter the area. <cite>Chambers FinTech</cite></p>  </blockquote>    <p>Our team has been recognised by <em>Chambers FinTech</em> and the Canadian FinTech &amp; AI Awards for its work as a leading FinTech law firm, particularly in the area of blockchain and smart contracts.</p>    <p>We are the only international law firm to be a founding partner of the Blockchain Research Institute (BRI).&nbsp;</p>    <h2>Contact our team in Canada</h2>    <p>To learn more about how our FinTech Group can help you succeed, please contact any member of our team.</p>    <p><a href=""~/en/people/parna-sabet-stephenson/#panel-button1""><strong>Parna Sabet-Stephenson</strong></a><br />  Partner, Leader of FinTech and InsurTech (Canada)</p>    <p><a href=""~/en/people/viona-m-duncan/#panel-button1""><strong>Viona M. Duncan</strong></a><br />  Partner, Co-Chair of Global Tech</p>    <p><a href=""~/en/people/naim-antaki/#panel-button1""><strong>Naïm A. Antaki</strong></a><br />  Partner, Co-Head of Montréal Tech Group</p>  ",GWLG.Canada,3cb7b903-24be-4d44-b671-e9e9bb0f7efd;3464c653-fa4d-43dd-99c9-db0a2dd57faf;425a9689-d70c-46ff-b7b6-8994bb782c5f;7fb29160-44a7-4f27-b030-99ef5d9941cf,714E9C25-3DCE-4DAC-89A9-DD1D02F0EDA6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{0B61C4E2-94F7-42B9-8D45-2C16D5C0CA19}|{7C2CA6F8-1321-40DF-A3BF-63A7F877EE95}|{680CF4CA-5812-4762-A9E4-D3A93109F739}|{22CC6655-0A11-4BA3-8A6A-FA1D6F639642}
282,/Services/Blockchain-Smart-Contracts/Canada,en-GB,12EF3DB9-EB67-460A-9131-FE522EFF6AC3,Canada,Canada,"Blockchain technology is dramatically transforming the way we do business, particularly in the areas of financial services, securities, and corporate transactions.",NULL,NULL,"<p>Gowling WLG is home to Canada&#39;s leading blockchain legal practice, comprising lawyers who are strongly qualified to advise clients on a broad range of legal issues related to blockchain technology. From initial coin offerings to consumer protection issues, our team can help you overcome the latest challenges and take advantage of new opportunities.</p>    <p>{^widget|(image_guid)0e502820-04ca-4904-bb36-27eed2f52336|(videoid)i2MhtWCyreg|(name)GWLG.Video|(videotitle)Watch+the+video+-+Blockchain+at+Gowling+WLG|(transcripttext)%3cp%3e%3cstrong%3eUsman+Sheikh%2c+Head+of+Blockchain+%26amp%3b+Smart+Contracts+Group%2c+Gowling+WLG%3a%3c%2fstrong%3e+I+remember+lecturing+in+this+space+on+blockchain+technology+about+a+year+or+two+ago+and+really+when+I+asked+the+question%2c+%26quot%3bWho+had+ever+heard+of+blockchain+technology%3f%26quot%3b+not+even+one+hand+would+go+up.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eW.+Ian+Palm%2c+Blockchain+Capital+Markets+Team%2c+Gowling+WLG%3a%3c%2fstrong%3e+To+explain+blockchain%2c+I+think+you+have+to+think+about+it+first+off+as%26hellip%3bit%26%2339%3bs+a+software+platform.+It%26%2339%3bs+built+upon+technology+which+already+existed.+If+you+think+about+it+in+the+sense+of%2c+we+had+the+internet+develop+over+the+last+ten+to+fifteen+years%2c+we%26%2339%3bre+now+seeing+blockchain+come+out+as+a+means+of+sharing+value+between+parties.+So+it%26%2339%3bs+kind+of+like+the+internet+of+value.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eUsman+Sheikh%2c+Head+of+Blockchain+%26amp%3b+Smart+Contracts+Group%2c+Gowling+WLG%3a%3c%2fstrong%3e+So+with+respect+to+the+issues+surrounding+blockchain+technology+or+the+obstacles+that+one+may+face%2c+I+would+say+that+one+of+the+big+ones+is+the+legal+uncertainty.+What+is+a+cryptocurrency%3f+Is+it+a+security%3f+Is+it+a+property%3f+Is+it+a+commodity%3f+Is+it+something+else%3f+A+currency%3f+Is+it+all+of+the+above%3f+These+are+all+issues+in+the+first+instance+that+many+of+us+in+the+legal+profession+and+clients+frankly+are+grappling+with.+At+Gowling+WLG+we%26%2339%3bve+actually+developed+quite+a+sophisticated+offering+here+at+the+firm+on+the+legal+side.+We+have+a+crypto+capital+markets+team+that+is+a+specialist+team%2c+we+have+a+crypto+patent+team%2c+we+have+a+crypto+tax+team.+We%26%2339%3bre+really+one+of+the+first+firms+to+have+developed+a+dedicated+offering.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eAlejandro+Guerrero%2c+Special+Projects+Lead%2c+Sweetbridge%3a%3c%2fstrong%3e+We+found+the+team+at+Gowling+extremely+competent+in+their+ability+to+number+one%2c+interact+with+regulators+and+number+two%2c+to+be+abreast+of+the+developments+in+the+industry.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eManie+Eager%2c+Chairman%2c+Blockchain+Association+of+Canada%3a%3c%2fstrong%3e+I%26%2339%3bm+very+impressed+with+the+way+Gowling+has+stepped+up+and+into+the+space+and+become%2c+I+think%2c+leaders+in+Canada+and+elsewhere+where+we%26%2339%3bve+been+working+on+international+projects%2c+providing+guidance+and+providing+certainty.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eTroy+Wong%2c+CEO%2c+Neptune+Asset+Group%3a%3c%2fstrong%3e+There+was+very+little+onboarding+time+from+a+client+perspective+in+us+having+to+onboard+our+legal+team+and+actually+educate+them+in+the+blockchain+space.+They+already+knew+about+the+technology+and+what+the+key+regulatory+highlights+were+and+so+that+was+refreshing+from+a+blockchain+entrepreneur+who+is+constantly+walking+into+offices+and+generally+having+to+be+the+educator+versus+the+educated.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eUsman+Sheikh%2c+Head+of+Blockchain+%26amp%3b+Smart+Contracts+Group%2c+Gowling+WLG%3a%3c%2fstrong%3e+In+the+coming+years+I+think+that+we%26%2339%3bll+see+a+lot+more+regulatory+guidance%2c+we%26%2339%3bll+see+statutory+reform%2c+we%26%2339%3bll+see+very+novel+applications+in+every+single+industry+that+one+can+imagine.+And+it%26%2339%3bs+really+a+really+exciting+time+here+in+the+blockchain+space+and+in+Canada.%3c%2fp%3e%0d%0a|(widget_displayname)Video|(width)|(height)^}</p>    <p>Here are just a few examples of what sets us apart when it comes to blockchain and smart contracts:</p>    <h3>Blockchain pioneers</h3>    <p>Gowling WLG leads the industry in blockchain. We are the only international law firm to be <a href=""~/en/news/firm-news/2017/founding-member-of-blockchain-research-institute/"">a founding partner and co-founding member of the Blockchain Research Institute</a>, a multi-million dollar knowledge network led by Don and Alex Tapscott that studies the strategic implications of blockchain alongside the Bank of Canada, Nasdaq, the TMX Group, IBM, KPMG, Bell Canada and others.</p>    <p>Gowling WLG has also broken new ground in the <a href=""~/en/insights-resources/client-work/2015/northern-aspect-resources-closes-qualifying-transa/"">listing of the first blockchain company in the world</a>, and one of our practitioners coordinated the very first token sale offered as a security by way of an Offering Memorandum across Canada in accordance with Canadian securities laws.</p>    <p>In addition, our team is often called upon to brief and advise cabinet ministers, mayors and other high-ranking corporate executives on the state of blockchain technology in Canada and around the world.&nbsp;</p>    <h3>Full service offering</h3>    <p>Our Blockchain &amp; Smart Contracts Group offers clients a broad range of legal services to help them overcome the latest challenges and take advantage of new opportunities. Our experienced lawyers frequently advise on blockchain matters related to:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Initial coin offerings (ICOs)</li>   <li>Crypto-currency exchanges</li>   <li>Digital wallets</li>   <li>Securities law compliance</li>   <li>Capital markets transactions (e.g., underwriting and going public transactions and crowdfunding/online investment platforms)</li>   <li>Investment fund formation</li>   <li>Business operations</li>   <li>Tax</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Anti-money laundering (AML)/know your client (KYC) compliance</li>   <li>Litigation</li>   <li>M&amp;A and other corporate transactions</li>   <li>Insolvency and restructuring</li>   <li>Patents and other intellectual property matters</li>   <li>Consumer protection compliance</li>   <li>Banking law</li>   <li>Real estate law</li>  </ul>  </div>  </div>  </div>    <p>In addition, our practitioners are working on matters that touch on blockchain&#39;s foundational impact on identity, provenance, fraud suppression, cyber security, supply chain management and the internet of things, as well as blockchain&#39;s disruptive implications for such diverse domains as finance, insurance, law, healthcare, accounting, real estate, entertainment and law enforcement.</p>    <p>Our clients include leading digital wallets, crypto-currency exchanges, investment funds seeking to invest in crypto-currencies or crypto-assets, and key blockchain pioneers.</p>    <h3>Global reach</h3>    <p>With offices in 19&nbsp;cities in Canada, the U.K., Europe, the Middle East and Asia, and an extensive referral network spanning more than 30 countries, Gowling WLG is equipped to support your domestic and cross-border blockchain legal needs in jurisdictions around the world.</p>    <h3>Thought leaders</h3>    <p>Our lawyers are blockchain thought leaders and are sought-after speakers at key blockchain industry events and conferences in Canada and internationally. Gowling WLG has also hosted a number of its own well-attended blockchain seminars for clients.</p>    <h3>Unmatched legal team</h3>    <p>Our team comprises seasoned practitioners from all legal disciplines, including capital markets, financial services, tax, and intellectual property. Our top-ranked litigation team, in particular, includes leading commercial litigators, former prosecutors at the Ontario Securities Commission and former Crown Attorneys. Our lawyers have also developed exceptionally strong relationships with government agencies, including through their work on significant regulatory committees such as the Ontario Securities Commission Securities Advisory Committee and the Small and Medium Enterprises Committee.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fBlockchain-Smart-Contracts%2fFAQ%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Highlights|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Learn more</h2>    <p>To find out more about how we can help you with your blockchain-related legal matters, <a href=""~/en/people/?page=1&amp;services=31890&amp;locations=GWLG.Canada"" target=""_blank"">please contact any member of our team</a>.</p>  ",GWLG.Canada,425a9689-d70c-46ff-b7b6-8994bb782c5f,20E41CA2-B15A-4815-BB5C-7CF60C18278F,NULL,0,1,t-white,"<p>Blockchain technology is dramatically transforming the way we do business, particularly in the areas of financial services, securities, and corporate transactions. However, both the technology and the laws governing it are highly complex, requiring sophisticated legal and technical skill&nbsp;- and an insider&#39;s understanding of the ever-evolving regulatory space.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,b1056f9c-7ad0-4134-83c4-edc386df3e7f,NULL,NULL,{680CF4CA-5812-4762-A9E4-D3A93109F739}
283,/Services/InsurTech/Canada,en-GB,198D0AE4-9F2A-4B0A-B888-996C0AEC1E20,Canada,Canada,"Gowling WLG is the first Canadian law firm to establish a dedicated InsurTech Group. With an understanding of underlying technologies and knowledge of the regulatory frameworks, our leading technology, insurance and IP professionals provide full-service legal support across the InsurTech landscape.",NULL,NULL,"<p>With emerging technologies such as blockchain, artificial intelligence and the internet of things laying a fertile ground for transformation and disruption, the use of technology in insurance-related processes and transactions is reshaping the insurance industry.</p>    <p>Through cross-market collaboration, insurers and service providers will soon be able to integrate insurance technology - increasingly known as InsurTech - into every aspect of the insurance value chain. But in order to do so, they need a law firm with the right mix of in-depth experience and broad expertise to help them leverage the significant opportunities presented by InsurTech.</p>    <p>Enter Gowling WLG, the first Canadian law firm to establish a dedicated InsurTech Group. By combining a broad understanding of underlying technologies with an in-depth knowledge of the regulatory frameworks in which insurance companies operate, our leading technology, insurance and intellectual property professionals provide full-service legal support across the InsurTech landscape.</p>    <p>Our capabilities span the full spectrum of insurance and technology law, including:</p>    <h3>Technology and e-commerce law</h3>    <p>Gowling WLG supports clients on every step of their digital journey. We help them negotiate technology and strategic partnership agreements, adopt electronic processes, and implement digitization projects. We also advise clients on the legal implications of emerging technologies on their business.</p>    <h3>Insurance law</h3>    <p>We handle complex insurance and reinsurance matters for major domestic and international insurers and reinsurers, including transactions and regulatory issues.</p>    <h3>Privacy and cyber security law</h3>    <p>Applying our collective expertise in technology and telecommunications, Gowling WLG is well-positioned to advise insurance clients on privacy issues arising out of new technologies and business models. We can assist them in all aspects of data management - from comprehensive privacy law advice to data breach preparedness and threat risk assessments. Our legal advice also extends to the aftermath of a data breach, including litigation.</p>    <h3>Mergers and acquisitions</h3>    <p>Members of our team serve as trusted M&amp;A advisers to a wide range of Canadian and multinational clients - both publicly traded and privately held. We&#39;re consistently ranked among the busiest M&amp;A law firms in Canada in terms of deal count, and have helped a number of prominent insurance and tech companies on their major M&amp;A transactions.</p>    <h3>Intellectual property law</h3>    <p>With one of the world&#39;s leading intellectual property teams, we know how to maximize the value of our clients&#39; intellectual property and protect what makes them unique. We help them overcome every challenge on the way to market by strategically defending and enforcing their intangible - and invaluable - assets, including those related to InsurTech.</p>    <h3>Top-ranked team</h3>    <p>Our team consistently achieves national recognition for its exceptional work. This includes taking home the Canadian &quot;Insurance Firm of the Year&quot; Award from Benchmark Litigation three years in a row (2014, 2015 and 2016). Members of our InsurTech team are consistently recognized by numerous publications, including <a href=""~/en/news/awards-recognition/2017/gowling-wlg-earns-54-listings-in-chambers-canada-2/""><em>Chambers Canada</em></a>, <em><a href=""~/en/news/awards-recognition/2017/gowling-wlg-achieves-strong-showing-in-2018-editio/"">The Best Lawyers in Canada</a> </em>and the <a href=""~/en/news/awards-recognition/2017/gowling-wlg-achieves-outstanding-showing-in-2017-c/""><em>Canadian Legal Lexpert Directory</em></a>.</p>    <h3>Industry and thought leadership</h3>    <p>Gowling WLG is the only international law firm to be a<a href=""~/en/news/firm-news/2017/founding-member-of-blockchain-research-institute/""> founding partner and co-founding member of the Blockchain Research Institute</a>, a knowledge network that studies the strategic implications of blockchain technology. As well, members of our team are in the midst of authoring <em>The Law of Blockchain Technology</em>, a comprehensive guide to blockchain that will be published by Thomson Reuters in 2018.</p>    <p>Our professionals are regularly invited to present at events hosted by leading associations, including the Canadian Chamber of Commerce, and the Cambridge Cyber Security Forum. Gowling WLG also hosts its own InsurTech events for clients; our most recent seminar was InsurTech &amp; Disruption in Canada&#39;s Insurance Industry, held on Sept. 25, 2017 in Toronto. Our next event will be announced shortly.</p>    <h3>Learn more</h3>    <p>To learn more about how Gowling WLG&#39;s InsurTech Group can help you succeed, please <a href=""~/en/people/?page=1&amp;services=31892&amp;locations=GWLG.Canada"">contact any member of our multi-disciplinary team</a>.</p>  ",GWLG.Canada,90293ab5-d41b-489e-a430-6156a74920f7;3cb7b903-24be-4d44-b671-e9e9bb0f7efd,2EF996EA-428E-4DFF-B4E3-4E43F5B3DDFB,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{25825B1F-4A8B-4505-B508-BA3E010C58FC}|{0B61C4E2-94F7-42B9-8D45-2C16D5C0CA19}
284,/Services/InsurTech/Canada,fr-CA,198D0AE4-9F2A-4B0A-B888-996C0AEC1E20,Canada,Canada,"Avec une compréhension des technologies sous-jacentes et une connaissance des cadres réglementaires, nos principaux professionnels de la technologie, de l’assurance et de la propriété intellectuelle fournissent une assistance juridique complète à l’ensemble du secteur de l’insécurité.",NULL,NULL,"<p>Alors que les technologies émergentes comme les chaînes de blocs, l&#39;intelligence artificielle et l&#39;Internet des objets créent un terreau fertile pour les transformations et les changements, l&rsquo;utilisation de la technologie dans les opérations et processus liés aux assurances est en voie de révolutionner l&#39;industrie de l&#39;assurance.</p>    <p>Grâce à une collaboration à l&#39;échelle internationale, les assureurs et les fournisseurs de services pourront bientôt intégrer les dernières technologies en matière d&rsquo;assurance, souvent appelées assurtech, à tous les aspects de la chaîne de valeur des assurances. Mais pour y parvenir, il faut compter sur un cabinet juridique qui offre la meilleure alliance d&#39;expérience et d&#39;expertise approfondies pour aider les assureurs et fournisseurs de services à tirer profit des nombreuses occasions que présente la poussée des assurtech.</p>    <p>C&#39;est là que Gowling WLG entre en scène à titre de premier cabinet juridique canadien à établir un groupe dédié aux assurtech. Nos professionnels chefs de file en technologie, assurance et propriété intellectuelle fournissent des services juridiques complets quant à toutes les facettes de ce domaine, grâce à leurs vastes connaissances des technologies sous-jacentes et leur riche expertise des cadres réglementaires régissant les opérations des sociétés d&#39;assurance.</p>    <p>Notre savoir-faire couvre la gamme complète du droit des assurances et du droit de la technologie</p>    <h3>Le droit de la technologie et du commerce électronique</h3>    <p>Gowling WLG accompagne les clients dans le cadre de toutes leurs activités numériques. Nous les aidons à négocier des ententes stratégiques et des partenariats en matière de technologie, à adopter des processus électroniques et à mettre en œuvre des projets de numérisation. Nous conseillons aussi les clients quant aux implications juridiques des technologies émergentes sur leurs affaires.</p>    <h3>Le droit des assurances</h3>    <p>Nous traitons des dossiers complexes d&#39;assurance et de réassurance pour d&#39;importants assureurs et réassureurs nationaux et internationaux, notamment en ce qui a trait à des questions de transactions et de réglementation.</p>    <h3>Le droit de la confidentialité et de la cybersécurité</h3>    <p>Grâce à son expertise collective en matière de technologie et de télécommunications, Gowling WLG est idéalement positionnée pour conseiller les clients du domaine des assurances relativement à des questions de protection des renseignements personnels découlant des nouveaux modèles d&#39;affaires et des technologies. Nous pouvons aider les clients sur tous les aspects de la gestion de données: de la prestation de conseils complets relatifs au droit de la confidentialité, en passant par la préparation pour contrer les violations de données ainsi que l&#39;évaluation des risques y afférents. Nos conseils juridiques couvrent également les conséquences de la violation de données, y compris le litige en la matière.</p>    <h3>Les fusions et acquisitions</h3>    <p>Les membres de notre équipe agissent en tant que&nbsp;conseillers de confiance en matière de fusions et acquisitions auprès d&#39;un grand éventail de clients canadiens et multinationaux, et ce, tant pour des sociétés ouvertes que fermées. Nous sommes constamment reconnus parmi les cabinets juridiques canadiens en fusions et acquisitions les plus actifs en fonction du nombre de transactions, et nous avons aidé plusieurs éminentes sociétés d&rsquo;assurance et de technologie à réaliser leurs plus importantes transactions de fusions et acquisitions.</p>    <h3>Le droit de la propriété intellectuelle</h3>    <p>Forts de l&#39;une des plus éminentes équipes de propriété intellectuelle du monde, nous savons comment optimiser la valeur des actifs de propriété intellectuelle de nos clients et protéger ce qui les rend uniques. Nous les aidons à surmonter tous les obstacles liés à leur entrée sur le marché en assurant la défense et la protection de leurs précieux biens incorporels, y compris ceux liés à l&#39;assurtech.</p>    <h3>Une équipe de premier rang</h3>    <p>Notre équipe est constamment reconnue à l&#39;échelle nationale pour son travail exceptionnel. Elle a notamment remporté le prix &laquo; Cabinet canadien de l&#39;année en droit des assurances&raquo; remis par le guide<em>Benchmark Litigation</em> pendant trois années consécutives (2014, 2015 et 2016). Les membres de notre équipe assurtech figurent régulièrement à titre de chefs de file dans diverses publications comme <a href=""~/fr/news/awards-recognition/2017/gowling-wlg-earns-54-listings-in-chambers-canada-2""><em>Chambers Canada</em></a>, <em><a href=""~/fr/news/awards-recognition/2017/gowling-wlg-achieves-strong-showing-in-2018-editio"">The Best Lawyers in Canada</a></em>, et le <a href=""~/fr/news/awards-recognition/2017/gowling-wlg-achieves-outstanding-showing-in-2017-c""><em>Canadian Legal Lexpert Directory</em></a>.</p>    <h3>Industrie et leadership éclairé</h3>    <p>Gowling WLG est le seul cabinet juridique international <a href=""~/fr/news/firm-news/2017/gowling-wlg-signs-on-as-founding-member-of-blockch"">partenaire fondateur et membre cofondateur du Blockchain Research Institute</a>, un réseau qui étudie l&#39;impact stratégique de la technologie des chaînes de blocs. De plus, les membres de notre équipe sont à rédiger<em>The Law of Blockchain Technology</em>, un guide complet sur les chaînes de blocs qui paraîtra chez Thomson Reuters en 2018.</p>    <p>Enfin, nos professionnels sont régulièrement invités à des événements organisés par des associations chefs de file telles la Chambre de Commerce du Canada, et le Cambridge Cyber Security Forum. Gowling WLG sera également l&#39;hôte de ses propres événements assurtech pour les clients; notre plus récent séminaire était intitulé <a href=""https://sites-gowlingwlg.vuturevx.com/103/3207/landing-pages/insurtech-invitation-landing-li.asp"">Insurtech &amp; Disruption in Canada&rsquo;s Insurance Industry</a>, et a eu lieu à Toronto le 25 septembre 2017. Nous annoncerons de prochains événements sous peu.</p>    <h3>Pour en savoir plus</h3>    <p>Si vous souhaitez savoir comment notre groupe Assurtech peut aider votre entreprise à exceller, veuillez communiquer avec <a href=""~/en/people/filomena-frisina"">Filomena Frisina</a>&nbsp;ou&nbsp;<a href=""~/en/people/parna-sabet-stephenson"">Parna Sabet-Stephenson</a>.</p>  ",GWLG.Canada,90293ab5-d41b-489e-a430-6156a74920f7;3cb7b903-24be-4d44-b671-e9e9bb0f7efd,2EF996EA-428E-4DFF-B4E3-4E43F5B3DDFB,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{25825B1F-4A8B-4505-B508-BA3E010C58FC}|{0B61C4E2-94F7-42B9-8D45-2C16D5C0CA19}
285,/Services/FinTech-Law/Canada,fr-CA,D00CDFCF-6676-4198-B8A8-38EA11E5081E,Canada,Canada,La technologie financière (fintech) révolutionne le secteur des services financiers. ,NULL,NULL,"<header>  <header>  <p>À mesure que le paysage des services financiers évolue, de nouveaux joueurs et de nouvelles interactions vont continuer à transformer l&rsquo;industrie. Les sociétés ont besoin d&rsquo;un partenaire juridique qui possède la vision, la créativité et les connaissances nécessaires pour faire le pont entre l&rsquo;innovation et la tradition.</p>    <p>Les technologies financières et les lois qui les régissent sont complexes et nécessitent un savoir-faire juridique et technique de pointe, mais aussi une compréhension parfaite de l&rsquo;environnement réglementaire et des dernières avancées technologiques. Notre équipe multidisciplinaire allie un niveau d&rsquo;excellence dans plusieurs disciplines juridiques avec une expérience éprouvée en services bancaires numériques, portefeuilles mobiles, services de paiement, systèmes bancaires ouverts et en ligne (<em>banking-as-a-service</em>), prêts entre particuliers, financement participatif par titres et plateformes d&rsquo;investissement en ligne, applications de paiement, robot-conseillers et commerce électronique. Notre équipe possède le savoir-faire de pointe dont les acteurs du secteur des services financiers ont besoin pour négocier une myriade d&rsquo;ententes, dont des accords de collaboration entre institutions financières et sociétés du secteur de la FinTech.</p>    <h2>Mandats représentatifs</h2>    <p>Voici quelques-uns de nos projets dans le secteur des FinTech&nbsp;:</p>    <p>{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightblue|(headline1)Avalara+inc.|(headline3)Coinsquare|(headline2)BTL+Group|(copy1)Repr%c3%a9sentation+de+cet+important+fournisseur+de+services+d%e2%80%99automatisation+de+la+conformit%c3%a9+fiscale+en+nuage+pour+les+entreprises+de+toutes+tailles%2c+relativement+%c3%a0+son+acquisition+transfrontali%c3%a8re+de+Technologies+3CE+Inc.|(copy3)Repr%c3%a9sentation+de+Coinsquare+relativement+%c3%a0+l%e2%80%99investissement+strat%c3%a9gique+(19%2c99+%2525+%2f+56%2c4+M%24)+de+Mogo+dans+la+soci%c3%a9t%c3%a9.|(copy2)Repr%c3%a9sentation+dans+le+cadre+de+la+cl%c3%b4ture+d%e2%80%99une+op%c3%a9ration+de+qualification+dans+laquelle+la+soci%c3%a9t%c3%a9+est+devenue+un+%c3%a9metteur+du+groupe+2+%c3%a0+la+Bourse+de+croissance+TSX+(TSX-V+%3a+BTL)%2c+ce+qui+en+fait+la+premi%c3%a8re+soci%c3%a9t%c3%a9+mondiale+ouverte+de+cha%c3%aenes+de+blocs.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-aubergine|(width)|(height)^}{^widget|(bghover1)colour-lightblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Flahmingo+Investment+inc.|(headline3)Expertus+Technologies+Inc.|(headline2)Payfare+Inc.|(copy1)Repr%c3%a9sentation+de+Flahmingo+Investments+Inc.%2c+soci%c3%a9t%c3%a9+de+technologie+financi%c3%a8re+en+d%c3%a9marrage+%c3%a9tablie+%c3%a0+Calgary%2c+relativement+%c3%a0+son+tour+de+financement+pr%c3%a9d%c3%a9marrage+sursouscrit+qui+a+g%c3%a9n%c3%a9r%c3%a9+1%2c88+M%24.|(copy3)Repr%c3%a9sentation+d%e2%80%99une+soci%c3%a9t%c3%a9+pionni%c3%a8re+des+technologies+financi%c3%a8res+dans+le+cadre+de+son+acquisition+par+IBM%2c+op%c3%a9ration+qui+solidifie+le+portefeuille+d%e2%80%99IBM+%c3%a0+titre+de+fournisseur+de+solutions+de+paiement+num%c3%a9rique+de+bout+en+bout+et+fait+progresser+sa+strat%c3%a9gie+de+nuage+hybride+et+d%e2%80%99IA.|(copy2)Repr%c3%a9sentation+de+Payfare+Inc.%2c+soci%c3%a9t%c3%a9+technologique+financi%c3%a8re+mondiale+offrant+des+solutions+de+paiement+instantan%c3%a9+et+de+services+bancaires+num%c3%a9riques%2c+dans+le+cadre+de+son+premier+appel+public+%c3%a0+l%e2%80%99%c3%a9pargne+de+75%2c2+M%24+visant+des+actions+ordinaires.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h2>Reconnaissance</h2>    <p align=""center"">&laquo;&nbsp;Ce sont les meilleurs dans le domaine. Ils comprennent le droit dans ses moindres subtilités. Ils possèdent d&rsquo;excellentes connaissances en la matière et sont à même de comprendre ma technologie et de bien la protéger, peu importe le secteur d&rsquo;activité.&nbsp;&raquo;</p>    <p align=""center""><em>Répertoire Chambers FinTech</em></p>    <p>Notre équipe a été reconnue par<em> Chambers FinTech</em> et dans le cadre des prix Canadian FinTech &amp; AI Awards pour son travail à titre de cabinet de premier plan en droit de la FinTech, particulièrement dans le domaine des chaînes de blocs et des contrats intelligents.</p>    <p>Nous sommes le seul cabinet juridique international faisant partie des membres cofondateurs du Blockchain Research Institute (BRI). De plus, nous avons conclu récemment une alliance avec Decentral Inc., l&rsquo;une des grandes sociétés de chaînes de blocs du Canada, afin d&rsquo;optimiser les nombreuses applications juridiques et commerciales de la technologie blockchain.</p>    <h2>Communiquez avec notre équipe canadienne</h2>    <p>Pour en savoir davantage sur la façon dont notre groupe FinTech peut vous aider à concrétiser vos projets, veuillez communiquer avec l&#39;un des membres de notre équipe.</p>    <p><a href=""~/fr/people/parna-sabet-stephenson/#panel-button1""><strong>Parna Sabet-Stephenson</strong></a><br />  Associée, chef des groupes Technologie financière et AssurTech (Canada)</p>    <p><a href=""~/fr/people/viona-m-duncan/#panel-button1""><strong>Viona M. Duncan</strong></a><br />  Associée, co-chef du groupe sectoriel mondial Technologie</p>    <p><a href=""~/fr/people/naim-antaki/#panel-button1""><strong>Naïm A. Antaki</strong></a><br />  Associé, co-chef du groupe Technologie, Montréal</p>  </header>  </header>  ",GWLG.Canada,3cb7b903-24be-4d44-b671-e9e9bb0f7efd;425a9689-d70c-46ff-b7b6-8994bb782c5f;7fb29160-44a7-4f27-b030-99ef5d9941cf,714E9C25-3DCE-4DAC-89A9-DD1D02F0EDA6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{0B61C4E2-94F7-42B9-8D45-2C16D5C0CA19}|{680CF4CA-5812-4762-A9E4-D3A93109F739}|{22CC6655-0A11-4BA3-8A6A-FA1D6F639642}
286,/Services/Blockchain-Smart-Contracts/Canada,fr-CA,12EF3DB9-EB67-460A-9131-FE522EFF6AC3,Canada,Canada,"La technologie des chaînes de blocs transforme radicalement notre façon de faire des affaires, en particulier dans les domaines des services financiers, des valeurs mobilières et des transactions commerciales.",NULL,NULL,"<p>La technologie de la chaîne de blocs (Blockchain) est en train de radicalement changer notre façon de faire des affaires, en particulier dans les domaines des services financiers, des valeurs mobilières et des transactions commerciales. Toutefois, cette technologie, tout comme les lois qui la régissent, est très complexe, et nécessite non seulement une expertise juridique et technique de pointe, mais aussi une compréhension interne d&#39;un environnement réglementaire en constante évolution.</p>    <p>Gowling WLG est chef de file en matière de conseils juridiques liés à la technologie Blockchain, et est constituée d&#39;avocats possédant l&#39;expertise nécessaire pour conseiller les clients sur un vaste éventail de questions relatives à cette technologie. Qu&#39;il s&#39;agisse de levées de fonds en cryptomonnaie ou de questions relatives à la protection des consommateurs, notre équipe peut vous aider à surmonter les nouveaux défis et à tirer profit des nouvelles possibilités.</p>    <p>{^widget|(videoid)NAzNJTAdlv8|(name)GWLG.Video|(image_guid)0e502820-04ca-4904-bb36-27eed2f52336|(title)D%c3%a9couvrez+notre+groupe+Technologie+blockchain+et+contrats+intelligents+%e2%80%93+Montr%c3%a9al+|(transcripttext)%3cp%3e%26lt%3b00%3a00%26gt%3b%26nbsp%3b%26nbsp%3b%3cbr+%2f%3e%0d%0a%3cstrong%3eNA%c3%8fM+ANTAKI+%3c%2fstrong%3e%3cbr+%2f%3e%0d%0a%3cstrong%3eDroit+des+affaires+-+Associ%c3%a9+et+co-chef+du+groupe+Tech+de+Montr%c3%a9al%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eCe+qui+nous+distingue+r%c3%a9ellement%2c+c%26rsquo%3best+la+passion.+C%26rsquo%3best-%c3%a0-dire+qu%26rsquo%3bon+en+mange.+On+veut+apprendre+et+on+investit+beaucoup+de+temps+pour+bien+conna%c3%aetre+ce+qui+se+passe.+Et+on+travaille+r%c3%a9ellement+en+%c3%a9quipe%2c+ce+qui+fait+que+la+passion+de+chacun+permet+de+d%c3%a9cupler%2c+en+fait%2c+la+force+qu%26rsquo%3bon+a+pour+travailler+ensemble+avec+nos+clients.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b00%3a34%26gt%3b%3cbr+%2f%3e%0d%0a%3cstrong%3eJEAN-FRAN%c3%87OIS+PELLAND%3cbr+%2f%3e%0d%0aDroit+des+affaires+et+financement+corporatif+%26ndash%3b+Associ%c3%a9%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eIl+existe+des+%c3%a9l%c3%a9ments+juridiques+pr%c3%a9cis+et+nombreux+dont+il+faut+se+soucier+lorsqu%26rsquo%3bon+implante+la+technologie+blockchain+dans+ses+op%c3%a9rations.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b00%3a42%26gt%3b%3cbr+%2f%3e%0d%0a%3cstrong%3eLAURA+GHEORGHIU%3cbr+%2f%3e%0d%0aDroit+fiscal+%26ndash%3b+Associ%c3%a9e%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eMy+blockchain+clients+are+entrepreneurs+and+they+need+to+work+with+a+team+that+understands+their+reality%2c+understands+what+they%26rsquo%3bre+working+on+and+the+challenges+that+it+brings.+And+what+Gowling+WLG%26rsquo%3bs+blockchain+team+has+done+is+really+develop+and+expertise+across+sectors.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b01%3a00%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eNA%c3%8fM+ANTAKI+%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eIl+faut+avoir+l%26rsquo%3bhumilit%c3%a9+de+savoir+qu%26rsquo%3bon+ne+sait+pas+tout.+Mais+on+n%26rsquo%3best+pas+les+seuls.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b01%3a06%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eJEAN-FRAN%c3%87OIS+PELLAND%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eGowling+WLG+se+d%c3%a9marque%2c+car+on+a+cr%c3%a9%c3%a9+un+groupe+de+travail+sp%c3%a9cifique+%c3%a0+la+blockchain+qui+compte+plus+de+100%26nbsp%3bprofessionnels+r%c3%a9partis+%c3%a0+travers+la+plan%c3%a8te.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b01%3a13%26gt%3b%3cbr+%2f%3e%0d%0a%3cstrong%3eMICHAEL+GARELLEK%3cbr+%2f%3e%0d%0aR%c3%a9glementation+financi%c3%a8re+-+Associ%c3%a9%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eWhat+I+really+enjoy+working+in+a+blockchain+group+is+this+collaborative+team+effort%2c+where+we+build+off+each+other%26rsquo%3bs+expertise+to+help+serve+our+clients.+Because+we+have+developed+that+community+around+innovation.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b01%3a30%26gt%3b%3cbr+%2f%3e%0d%0a%3cstrong%3eBENOIT+YELLE%3cbr+%2f%3e%0d%0aAssoci%c3%a9%2c+Agent+de+brevets%2c+co-chef+du+groupe+Tech+de+Montr%c3%a9al%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eOn+ne+sait+pas+encore+comment+la+technologie+blockchain+va+%c3%a9voluer%2c+mais+ce+qu%26rsquo%3bon+peut+dire+par+contre+c%26rsquo%3best+qu%26rsquo%3bil+y+a+%c3%a9norm%c3%a9ment+de+joueurs+qui+veulent+%c3%aatre+pr%c3%a9sents+et+veulent+d%c3%a9velopper+de+la+propri%c3%a9t%c3%a9+intellectuelle+qui+s%26rsquo%3bapplique+%c3%a0+la+blockchain.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b01%3a41%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eNA%c3%8fM+ANTAKI%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eComment+j%26rsquo%3bimagine+le+futur+du+march%c3%a9+du+blockchain+et+des+contrats+intelligents%3f+Je+pense+que+c%26rsquo%3best+un+futur+qu%26rsquo%3bon+va+devoir+fa%c3%a7onner+ensemble%2c+les+juristes%2c+mais+aussi+les+gens+qui+sont+forts+en+technologie%2c+les+gens+qui+sont+forts+en+%c3%a9conomie.+Pourquoi%3f+Parce+qu%26rsquo%3bon+a+tous+quelque+chose+%c3%a0+apporter+et+c%26rsquo%3best+en+ayant+cette+approche+multidisciplinaire%2c+je+pense%2c+qu%26rsquo%3bon+peut+vraiment+avancer+dans+ce+domaine.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a04%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eLAURA+GHEORGHIU%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eAnd+so+there+is+lot+of+applications+beyond+purely+business+banking+that+we+think+of+that+really+could+have+a+potential+to+make+a+difference+in+the+future.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a14%26gt%3b%3cbr+%2f%3e%0d%0a%3cstrong%3eBENOIT+YELLE%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eLa+technologie+blockchain+qui+va+%c3%a0+mon+avis+avoir+un+impact+sur+nos+vies+du+m%c3%aame+type+qu%26rsquo%3bInternet+a+pu+avoir+dans+les+ann%c3%a9es%26nbsp%3b90.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a22%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eMICHAEL+GARELLEK%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eTo+describe+blockchain+in+one+word+although+it%26rsquo%3bs+difficult%2c+but+I+would+choose+efficiency.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a27%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eBENOIT+YELLE%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eJe+dirais+que+c%26rsquo%3best+une+base+de+donn%c3%a9es+%26ndash%3b+bien%2c+c%26rsquo%3best+plus+qu%26rsquo%3bun+mot+(rire).%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a31%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eJEAN-FRAN%c3%87OIS+PELLAND%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eC%26rsquo%3best+impossible+de+d%c3%a9crire+la+blockchain+en+un+mot.+Par+contre%2c+je+vous+dirais+que+c%26rsquo%3best+la+venue+de+l%26rsquo%3bInternet+mais+10%26nbsp%3bfois+plus+rapidement.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a37%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eLAURA+GHEORGHIU%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3ePotential.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26lt%3b02%3a38%26gt%3b%3cbr+%2f%3e%0d%0a%3cb%3eNA%c3%8fM+ANTAKI%3c%2fb%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eJe+dirais+d%c3%a9fi.+C%26rsquo%3best+un+d%c3%a9fi+qui+en+vaut+la+peine+si+on+a+la+bonne+dose+de+r%c3%aave+et+de+r%c3%a9alisme.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%26nbsp%3b%3c%2fp%3e%0d%0a|(widget_displayname)Video|(width)|(height)^}</p>    <p>Voici quelques exemples illustrant comment nous nous distinguons en ce qui concerne les chaînes de blocs et les contrats intelligents :</p>    <h3>Pionniers de la chaîne de blocs</h3>    <p>Gowling WLG possède une expertise de premier plan en quant à la technologie des chaînes de blocs. Nous sommes le seul cabinet d&#39;avocats d&#39;envergure internationale à être <a href=""~/fr/news/firm-news/2017/gowling-wlg-signs-on-as-founding-member-of-blockch/"">associé et membre cofondateur du Blockchain Research Institute</a>, un réseau de savoirs d&#39;une valeur de plusieurs millions de dollars mené par Don et Alex Tapscott, qui se penche sur les incidences stratégiques de la chaîne de blocs, et auquel la Banque du Canada, le Nasdaq, le groupe TMX, IBM, KPMG, Bell Canada et plusieurs autres participent.</p>    <p>Gowling WLG fait preuve d&#39;innovation dans le domaine, notamment <a href=""~/fr/insights-resources/client-work/2015/northern-aspect-resources-closes-qualifying-transa/"">en ayant inscrit en bourse la première société de chaîne de blocs au monde</a>. L&#39;un de nos professionnels a coordonné la toute première émission de jetons offerte par notice d&#39;offre partout au Canada conformément aux lois canadiennes sur les valeurs mobilières.</p>    <p>De plus, les membres de notre équipe sont souvent appelés à renseigner et conseiller des membres du cabinet, des maires et d&#39;autres directeurs d&#39;entreprises de haut rang sur l&#39;état de la technologie de la chaîne de blocs au Canada et ailleurs dans le monde. Ils rédigent également <em>The Law of Blockchain Technology</em>, un livre détaillé qui sera publié par Thomson Reuteurs en 2018.</p>    <h3>Une gamme complète de services</h3>    <p>Notre groupe Chaîne de blocs et contrats intelligents offre aux clients un large éventail de services juridiques afin de les aider à surmonter les nouveaux défis et à tirer profit des nouvelles possibilités. Nos avocats d&#39;expérience offrent fréquemment des conseils sur des questions relatives à la chaîne de blocs dans les domaines suivants:</p>    <ul>   <li>Levées de fonds en cryptomonnaie (ICO)</li>   <li>Inscription à la cote en cryptomonnaie</li>   <li>Portefeuilles numériques</li>   <li>Conformité aux lois sur les valeurs mobilières</li>   <li>Transactions sur les marchés financiers (p. ex. les conventions de prise ferme et les transactions d&#39;introduction en bourse, et les plateformes de financement participatif et de placement en ligne)</li>   <li>Formation sur les fonds d&#39;investissement</li>   <li>Opérations commerciales</li>   <li>Fiscalité</li>   <li>Conformité quant à la lutte contre le blanchiment d&#39;argent/la connaissance du client</li>   <li>Litiges</li>   <li>Fusions et acquisitions et autres transactions commerciales</li>   <li>Restructuration et insolvabilité</li>   <li>Brevets et autres questions de propriété intellectuelle</li>   <li>Conformité aux lois sur la protection du consommateur</li>   <li>Droit bancaire</li>   <li>Droit immobilier</li>  </ul>    <p>De plus, nos professionnels œuvrent dans des dossiers relatifs à l&#39;incidence vitale de la technologie des chaînes de blocs sur l&#39;identité, la provenance, la lutte contre les fraudes, la cybersécurité, la gestion de la chaîne d&#39;approvisionnement et l&#39;Internet des objets, de même qu&#39;en ce qui a trait aux implications perturbatrices des chaînes de blocs sur des domaines variés tels que la finance, l&#39;assurance, le droit, les soins de santé, la comptabilité, l&#39;immobilier, l&#39;industrie du divertissement et les services policiers.</p>    <p>Nous comptons parmi nos clients des portefeuilles numériques de premier plan, des bureaux de change en cryptomonnaie, des fonds d&#39;investissement souhaitant investir dans les cryptomonnaies ou autres cryptoactifs, et d&#39;importants pionniers de la chaîne de blocs.</p>    <h3>Portée mondiale</h3>    <p>Grâce à ses bureaux situés dans 18 villes au Canada, au Royaume-Uni, en Europe, au Moyen-Orient et en Asie, de même qu&#39;;à son vaste réseau de références couvrant plus de 30 pays, Gowling WLG est bien outillée pour soutenir vos besoins juridiques en matière de chaîne de blocs, et ce, dans divers pays, à l&#39;échelle mondiale.</p>    <h3>Chefs de file</h3>    <p>Nos avocats sont reconnus pour leur leadership éclairé en matière de chaîne de blocs, et sont souvent sollicités pour prononcer des discours lors de conférences et événements importants de l&#39;;industrie de la chaîne de blocs au Canada et ailleurs. Gowling WLG a elle-même aussi organisé de nombreux séminaires sur la chaîne de bloc qui ont attiré beaucoup de clients.</p>    <p>Voici quelques articles récents de Gowling WLG sur la chaîne de blocs:</p>    <ul>   <li><a href=""~/fr/insights-resources/articles/2017/british-columbia-securities-commission-grants-firs/"">La British Columbia Securities Commission autorise le premier enregistrement d&#39;un gestionnaire de fonds d&#39;investissement pour le Bitcoin au monde</a> (8 septembre 2017) (en anglais seulement)</li>   <li><a href=""~/fr/insights-resources/articles/2017/canadian-securities-regulators-provide-guidance-on/"">Les autorités canadiennes en valeurs mobilières fournissent de l&#39;orientation en ce qui concerne les levées de fonds en cryptomonnaie</a> (25 août 2017) (en anglais seulement)</li>   <li><a href=""~/fr/insights-resources/articles/2017/the-revolution-will-be-blockchained-blockchains-a/"">Blocage de la révolution : la chaîne de blocs et l&#39;avenir de la musique numérique</a> (31 mai 2017) (en anglais seulement)</li>   <li>Les perturbations causées par la chaîne de blocs (15 décembre 2016) (en anglais seulement)</li>  </ul>    <h3>Une équipe juridique inégalée</h3>    <p>Notre équipe se compose de praticiens chevronnés issus de toutes les disciplines, y compris les marchés financiers, les services financiers, la fiscalité et la propriété intellectuelle. Notre équipe chef de file en matière de litige comprend notamment d&#39;éminents avocats plaidants en litige commercial, d&#39;anciens procureurs de la Commission des valeurs mobilières de l&#39;Ontario et d&#39;anciens procureurs de la Couronne. Nos avocats entretiennent également de solides liens avec des organismes gouvernementaux, y compris par l&#39;intermédiaire de leur travail auprès d&#39;importants comités réglementaires comme le Comité consultatif et le Comité des petites et moyennes entreprises de la Commission des valeurs mobilières de l&#39;Ontario.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fBlockchain-Smart-Contracts%2fFAQ%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)+Plus+d%27information|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Pour en savoir plus</h3>    <p>Pour en savoir davantage sur la façon dont nous pouvons vous aider dans vos dossiers juridiques relatifs aux chaînes de blocs, veuillez communiquer avec tout autre membre de l&#39;équipe.</p>  ",GWLG.Canada,425a9689-d70c-46ff-b7b6-8994bb782c5f,20E41CA2-B15A-4815-BB5C-7CF60C18278F,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{680CF4CA-5812-4762-A9E4-D3A93109F739}
289,/Services/Canada-s-Anti-Spam-Legislation-CASL/Canada,fr-CA,395ED3A6-0771-4F74-A0FE-84C99EAAD578,Canada,Canada,"Avec la législation canadienne anti-spam (CASL) en vigueur, les entreprises ne peuvent plus envoyer de ""messages électroniques commerciaux"" par courrier électronique, messagerie texte ou réseaux sociaux sans obtenir au préalable le consentement explicite ou implicite du destinataire.",NULL,NULL,"<p>Compte tenu de l&#39;entrée en vigueur de la Loi canadienne anti-pourriel (LCAP) le 1er juillet 2014, les entreprises et les organisations ne peuvent plus envoyer de &laquo; messages électroniques commerciaux &raquo; par courriel, par message texte ou par le truchement de réseaux sociaux sans le consentement exprès ou implicite du destinataire.</p>    <h3>Comment nous pouvons aider</h3>    <p>Chez Gowling WLG, nos professionnels juridiques dévoués sont là pour répondre à vos questions et veiller à ce que votre organisation soit parfaitement conforme à la LCAP.</p>    <p>On retrouve chez Gowling WLG certains des plus éminents avocats du Canada des domaines de la publicité, du marketing et des affaires réglementaires, de la protection et gestion des renseignements personnels et de la technologie. Jusqu&#39;à présent, nous avons conseillé une vaste gamme d&#39;entreprises canadiennes, américaines et multinationales quant à leurs stratégies afférentes à la LCAP.</p>    <h3>Nous pouvons vous aider à :</h3>    <ul>   <li>Vérifier votre approche actuelle relative aux messages électroniques commerciaux et à la gestion des consentements des destinataires</li>   <li>Élaborer des politiques et des plans pour assurer la conformité de votre organisation à la LCAP</li>   <li>Identifier les scénarios relatifs aux exceptions à la LCAP ainsi qu&#39;au consentement implicite qui peuvent s&#39;appliquer à votre organisation</li>   <li>Mettre en œuvre des meilleures pratiques afférentes à la LCAP, y compris la mise en place de &laquo; lots de données &raquo; en vue de gérer les consentements des destinataires, et établir des mécanismes de soutien à l&#39;information pour la gestion des désabonnements et des préférences</li>   <li>Planifier et mettre en œuvre des formations à l&#39;intention des employés pour veiller à ce que tous les membres de votre organisation comprennent la LCAP et s&#39;y conforment</li>  </ul>    <h3>Ressources relatives à la LCAP</h3>    <p><a href=""~/fr/insights-resources/articles/2014/preparing-your-organization-for-casl-s-commercial"">Comment préparer votre organisation à se conformer aux exigences de la LCAP visant les messages électroniques commerciaux</a> : Cet article présente les mesures cruciales que les organisations doivent prendre pour se conformer à la LCAP.</p>    <p>La conformité aux dispositions de la LCAP relativement aux programmes informatiques : Cette article présente un survol des dispositions relatives aux logiciels informatiques de la LCAP ainsi que comment s&#39;y conformer.</p>    <p>La conformité aux dispositions relatives aux programmes informatiques de la LCAP : un survol des dispositions touchant les logiciels informatiques visant à prévenir l&#39;installation de logiciels malveillants et de logiciels espions et ce que votre entreprise doit savoir pour se conformer aux nouveaux règlements.</p>    <p><a href=""~/getmedia/a71585ee-c0b9-4ab8-9abe-c564318c5fe8/Canada_Anti-Spam_Law_Commercial_Electronic_Message-Process_Chart.pdf.xml"" target=""_blank"">Organigramme sur la conformité avec la LCAP</a> : Vous n&#39;êtes pas certain si vos pratiques en matière de courrier électronique sont conformes à la LCAP? Ce tableau utile présente les sept questions que toutes les organisations doivent se poser avant d&#39;appuyer sur le bouton &laquo; envoyer &raquo;.</p>    <p><a href=""http://www.crtc.gc.ca/fra/lcap-casl.htm"" target=""_blank"">CRTC.gc.ca</a> : Le site Web du Conseil de la radiodiffusion et des télécommunications canadiennes propose des résumés graphiques, des vidéos, et des bulletins d&#39;information utiles pour vous aider à mieux comprendre comment la LCAP peut toucher votre entreprise.</p>    <p>Le gouvernement du Canada possède son site Web officiel consacré à la LCAP : <a href=""http://fightspam.gc.ca/eic/site/030.nsf/fra/accueil"" target=""_blank"">La loi canadienne sur le pourriel et autres menaces électroniques</a>, lequel contient diverses ressources, y compris la page <a href=""http://fightspam.gc.ca/eic/site/030.nsf/fra/h_00039.html"" target=""_blank"">Faits en bref</a>, la très utile <a href=""http://fightspam.gc.ca/eic/site/030.nsf/fra/00304.html"" target=""_blank"">FAQ sur la LCAP</a> de même qu&#39;un <a href=""http://fightspam.gc.ca/eic/site/030.nsf/fra/h_00216.html"" target=""_blank"">glossaire des termes</a> utilisés dans la Loi.</p>  ",GWLG.Canada,NULL,1B69248B-14A3-47AB-9722-C8685533F4B4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
290,/Services/Franchising/Canada,en-GB,F2DA9D91-9E14-4ACD-B526-FF620D48C7AA,Canada,Canada,"Whether your franchise is local, expanding to a new city or growing internationally, you need practical business advice and innovative, results-oriented solutions. That's where Gowling WLG comes in.",NULL,NULL,"<p>Whether your franchise is local, expanding to a new city or growing internationally, you need practical business advice and innovative, results-oriented solutions. That&#39;s where Gowling WLG comes in.</p>    <p>Recognized throughout the industry for our franchise leadership and expertise, we apply our deep understanding of the franchise model to help businesses of all sizes grow from the startup phase through to maturity - across all major product and service sectors.</p>    <h3>Dedicated to your franchise needs</h3>    <p>With a team of professionals dedicated exclusively to franchise and distribution law, we help our clients launch and expand their businesses through franchising, both nationally and internationally. We work closely with our clients to ensure the most effective means of expansion to suit their needs, including master franchise, area development and multi-unit development, as well as license and distribution arrangements.</p>    <h3>Ensuring success - every step of the way</h3>    <p>We&#39;re committed to your success across all stages of the franchise process. Whether it&#39;s dealing with complex regulatory and compliance issues, drafting a franchise agreement for use in multiple jurisdictions, protecting your intellectual property, or assisting with the management of the franchisor-franchisee relationship, we apply our unparalleled industry knowledge and experience to secure your success.</p>    <h3>Practical approach, unparalleled value</h3>    <p>We take a practical, budget-conscious approach to your needs, and offer optimized rates through our offices in Canada&#39;s smaller commercial centres in Vancouver, Calgary, Hamilton and Waterloo Region.</p>    <h3>Seamless service across all jurisdictions</h3>    <p>As part of an international, full-service law firm, we provide quick, seamless co-ordination of services across all jurisdictions, including the Province of Québec. We help our clients navigate provincial franchise and related legislation and achieve their business objectives across the country.</p>  ",GWLG.Canada,9203599d-a979-4ac6-a67f-2f0ddd48f5aa;46b21a2f-6764-47aa-a5e4-93f7e0959916,BA2F1B8E-E7CA-4FF7-A7FA-D233901EFC7D,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E7197AB9-2CA6-4EE7-8F95-94F37CB59B3A}|{E30466D8-0DA9-4E54-A729-9E455BCD2424}
291,/Services/Franchising/Canada,fr-CA,F2DA9D91-9E14-4ACD-B526-FF620D48C7AA,Canada,Canada,"Que vous soyez un franchiseur local, que vous souhaitiez étendre vos activités dans une autre ville ou croître à l’international, il vous faut des conseils d’affaires pratiques et novateurs et des solutions axées sur les résultats. Le groupe Franchises de Gowling WLG peut vous aider.",NULL,NULL,"<p>Que vous soyez un franchiseur local, que vous souhaitiez étendre vos activités dans une autre ville ou croître à l&rsquo;international, il vous faut des conseils d&rsquo;affaires pratiques et novateurs et des solutions axées sur les résultats. Le groupe Franchises de Gowling WLG peut vous aider.</p>    <p>Reconnus pour notre expertise en franchisage au sein de l&rsquo;industrie et nos connaissances approfondies du modèle des franchises, nous visons à assurer la croissance des entreprises de toutes tailles, dans tous les principaux secteurs de produits et de services, et ce, de la phase de démarrage à la maturité.</p>    <h3>Axés sur vos besoins en matière de franchisage</h3>    <p>Consacrés exclusivement au droit de la franchise et de la distribution, nos professionnels aident nos clients à démarrer et à développer leurs entreprises à l&rsquo;échelle nationale et internationale grâce au franchisage. En étroite collaboration avec les clients, ils déterminent le moyen d&rsquo;expansion qui saura répondre à leurs besoins de manière efficace&nbsp;: la franchise maîtresse, la franchise régionale, la multifranchise ou encore les ententes de licence et de distribution.</p>    <h3>Du succès assuré à chaque étape</h3>    <p>Nous sommes dévoués à votre succès à chaque étape du processus de franchisage. Qu&rsquo;il s&rsquo;agisse d&rsquo;aborder des enjeux de réglementation ou de conformité complexes, de rédiger un contrat de franchise destiné à être utilisé sur plusieurs territoires de compétence, de protéger votre propriété intellectuelle ou de vous assister dans la gestion des relations entre franchiseur et franchisé, votre réussite est assurée grâce à notre connaissance de l&rsquo;industrie et à notre expérience inégalées.</p>    <h3>Une valeur sans pareil grâce à une approche pratique</h3>    <p>Notre approche pratique tient compte de votre budget et de vos besoins. Nous offrons également les meilleurs prix possible dans nos bureaux canadiens situés dans de plus petites agglomérations commerciales à Vancouver, à Calgary, à Hamilton et dans la région de Waterloo.</p>    <h3>Des services uniformisés sur tous les territoires</h3>    <p>En tant que cabinet juridique international, nous offrons une gamme complète de services et assurons la rapidité et la coordination des services intégrés dans tous les territoires de compétence, dont la province du Québec. Nous aidons notamment les clients à interpréter les lois provinciales qui régissent les franchises et les sujets apparentés, en plus de les assister dans l&rsquo;atteinte de leurs objectifs commerciaux partout dans le &nbsp;pays.</p>    <h3>Une gamme complète de services à portée internationale</h3>    <p>Comptant plus de 1&thinsp;400&nbsp;professionnels juridiques et des bureaux dans l&rsquo;ensemble du Canada, de même qu&rsquo;en Europe, en Asie et au Moyen-Orient, Gowling WLG offre des conseils experts au-delà du franchisage sur une multitude de questions d&rsquo;affaires, et ce, en français, en anglais et dans de nombreuses autres langues, d&rsquo;un océan à l&rsquo;autre.</p>  ",GWLG.Canada,9203599d-a979-4ac6-a67f-2f0ddd48f5aa;46b21a2f-6764-47aa-a5e4-93f7e0959916,BA2F1B8E-E7CA-4FF7-A7FA-D233901EFC7D,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E7197AB9-2CA6-4EE7-8F95-94F37CB59B3A}|{E30466D8-0DA9-4E54-A729-9E455BCD2424}
292,/Services/Commercial-Leasing/Canada,fr-CA,ED473B7C-7160-40ED-BA1F-AC5D3F30EDE4,Canada,Canada,"Le leasing commercial est une spécialité du droit immobilier et commercial qui utilise des connaissances et des compétences approfondies. En tant que l'un des meilleurs avocats du Canada, nous possédons une expertise reconnue dans ce domaine complexe.",NULL,NULL,"<p>La location commerciale est une spécialité du droit immobilier et du droit commercial qui fait appel à des connaissances et compétences approfondies. Comptant parmi les meilleurs avocats du Canada, les membres du groupe Location commerciale de Gowling WLG sont dotés d&#39;une expertise renommée dans ce domaine complexe.</p>    <p>Déterminée à fournir promptement des résultats concrets, l&#39;équipe de Gowling WLG offre des conseils à prix avantageux, des solutions novatrices et une documentation adaptée aux besoins des clients, en vue de les assister dans la réalisation de transactions simples ou complexes.</p>    <p>Notre groupe offre une gamme complète de services, dont la préparation d&#39;offres de service et la négociation d&#39;offres et de documents afférents à la location, ainsi que la prestation de conseils relatifs au respect du processus de remise des lieux loués à la fin du terme. Nous offrons, tant à l&#39;échelle régionale que nationale, des services de consultation et de représentation aux propriétaires et locataires relativement à divers enjeux propres à la location commerciale:</p>    <ul>   <li>le recouvrement des frais d&#39;exploitation, la répartition des taxes foncières et les obligations de divulgation</li>   <li>la détermination et l&#39;application de systèmes de mesure en vue d&#39;atteindre des objectifs financiers</li>   <li>les meilleures pratiques afin de favoriser le respect des obligations contractuelles</li>   <li>la répartition des risques et les assurances</li>   <li>les obligations de remise en état des lieux loués à l&#39;expiration du bail</li>   <li>la vérification diligente environnementale</li>   <li>l&#39;intégration des équipements de télécommunications</li>   <li>l&#39;obligation d&#39;exploitation et les activités prohibées</li>   <li>la location de propriétés appartenant aux Premières nations</li>  </ul>    <p>En tant que partie intégrante d&#39;un cabinet mondial offrant une gamme complète de services juridiques et disposant de bureaux à Toronto, Montréal, Ottawa, Calgary, Vancouver, Hamilton et dans la région de Waterloo, notre groupe Location commerciale a accès à l&#39;expertise de plus de 1&nbsp;400&nbsp;professionnels juridiques dans l&#39;ensemble du Canada ainsi qu&#39;au Royaume-Uni, ailleurs en Europe, en Asie et au Moyen-Orient. Ces derniers œuvrent dans une variété de domaines et secteurs connexes, dont le litige et la résolution de différends; le droit municipal; l&#39;immobilier et le développement urbain; le&nbsp;droit des sociétés et le droit des affaires; les relations gouvernementales et les affaires réglementaires; l&#39;impôt sur le revenu, la taxe à la consommation et l&#39;impôt foncier; l&#39;énergie et les infrastructures; les marques de commerce et la technologie de l&#39;information; le franchisage et l&#39;octroi de licences; l&#39;insolvabilité; ainsi que la construction et le génie.</p>  <h3pour h3="""" plus="""">  <p>Si vous souhaitez savoir comment nous pouvons aider votre entreprise à exceller dans le domaine de la location commerciale, veuillez <a href=""~/fr/people?page=1&amp;services=282&amp;locations=GWLG.Canada"" target=""_blank"">contacter tout autre membre de notre équipe</a>.</p>  </h3pour>",GWLG.Canada,6a16b886-f67c-4bbd-ba9c-7c006c5f32bc,894FAB50-B948-4D2F-A516-86150D34DE04,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C30B0D56-218E-4FDE-9953-A6B47C5E512C}
293,/Services/Commercial-Disputes/UK,en-GB,9ABC2991-72C3-4B8D-B49F-E89AD2C1F9A9,UK,UK,Commercial disputes solicitors offering extensive experience and specialist legal advice in commercial dispute resolution and litigation.,NULL,NULL,"<p>We have experience at all levels and divisions in the UK Courts and in arbitrations governed by the rules of numerous arbitral bodies. We regularly advise on a broad range of commercial litigation matters including share purchase agreements (SPAs), contract terminations and warranty, shareholder and general contract disputes. With many distinct areas built into our commercial dispute resolution offering, you can be sure we are prepared to advise you at the most difficult of times.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fCommercial-Disputes%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Commercial+disputes+legal+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Exceptional case management, flexibility and proactiveness.<cite>The Legal 500</cite></p>  </blockquote>    <p>We handle a broad range of domestic and international work seeing all kinds of commercial disputes. Some of our recent or current cases have included:&nbsp;</p>    <p>{^widget|(copy1)Defending+claims+against+two+corporate+trustees%2c+which+arose+out+of+the+Bernard+Madoff+Ponzi+scheme%2c+bringing+to+an+end+11+years+of+litigation+with+an+%24860+million+global+settlement.|(bghover2)colour-darkblue|(copy3)Acting+for+the+majority+shareholder+of+a+national+lighting+and+technology+company+in+respect+of+a+s995+minority+shareholder+action+in+the+Companies+Court.|(copy2)Acting+for+Indian+investors+in+defending+a+contractual+claim+for+over+US%2451+million+from+Formula+One+World+Championship+Limited+arising+out+of+the+hosting+of+the+Indian+Grand+Prix.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)Trusts+litigation|(headline3)Shareholder+action|(headline2)Contractual+claims|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-lightred|(width)|(height)^}{^widget|(copy1)Advising+the+joint+liquidators+of+Stanford+International+Bank+following+the+collapse+of+a+fraudulent+Ponzi+scheme+empire.+|(bghover2)colour-darkred|(copy3)Advising+Amec+Foster+Wheeler+plc+and+other+Amec+group+companies+in+multiple+sets+of+proceedings+subject+to+a+group+litigation+order.++|(copy2)Successfully+defending+Chris+and+Nick+Candy+in+the+long-running+dispute+with+Mark+Holyoake+and+his+corporate+co-claimant+Hotblack+Holdings.+|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)Fraudulent+Ponzi+scheme|(headline3)Group+litigation+order|(headline2)Fraudulent+misrepresentation|(name)ThreeBlockWidget|(bghover1)colour-darkblue|(bghover3)colour-aubergine|(width)|(height)^}</p>    <h3>Awards and accolades</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Great communicators, proactive, passionate, an extension of our in house team.<cite>The Legal 500</cite></p>  </blockquote>    <p>Recognised by a host of legal directories and awards, our commercial disputes team is a well-known name in the market. The team was ranked by <em>The Legal 500</em> in tier one for &#39;Commercial Litigation: Birmingham&#39; in 2020. <em>Chambers and Partners</em> have also recognised the team for its litigation work in the Midlands, placing it in band two, highlighting the &quot;accuracy and clarity of the firm&#39;s work&quot;.</p>    <p>In London, our commercial disputes team is ranked in tier two for &#39;Commercial Litigation: mid-market&#39; by <em>The Legal 500</em>.</p>    <p>The team was shortlisted for &#39;Commercial Litigation Team of the Year&#39; at the <em>Legal Business Awards</em> in 2019 and &#39;Dispute Resolution - Firm of the Year (outside London)&#39; at <em>The Legal 500 UK Awards 2019.</em></p>    <div>  <h3>Meet the team</h3>  </div>    <p>For strategic advice and guidance in commercial disputes and litigation, <strong>get in touch with a key contact from our team.</strong></p>    <p><a href=""~/en/people/james-sidwell/#panel-button1"">James Sidwell</a><br />  Partner</p>    <p><a href=""~/en/people/andrew-witts/"">Andrew Witts</a><br />  Partner</p>    <p><a href=""~/en/people/catherine-naylor/"">Catherine Naylor</a><br />  Partner</p>    <p><a href=""~/en/people/emma-carr/"">Emma Carr</a><br />  Partner</p>  ",GWLG.UK,18c972b4-6383-49da-8645-30a3b18621a5;c36a0bf5-318f-4d02-a8ed-479bad6a8469;3110a84a-f993-4c98-b2f3-54f983a40915;742aa35b-b58b-4d7c-a95e-820a420ada54,5027BDFF-5A12-4E06-A0CA-809C3002882C,NULL,0,1,t-white,"<p>As commercial disputes become more complex, you need to be confident that the advice you receive is commercial, pragmatic and tailored to your specific needs. Our commercial disputes solicitors have extensive experience in handling a wide range of domestic and international disputes.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,e37fc7fb-2cf9-453c-a841-9f228d86f66e,NULL,NULL,{38984250-866F-40B0-B3EB-85AEED73805A}|{D58F0310-4126-47D7-AD7C-8635438037FA}|{42980B38-E2A7-4DEF-9BE8-62B739C4783D}|{6CCA95AA-01E6-4567-BABA-9B7A1547DFDA}
295,/Services/Canada-North/Canada,en-GB,47E0D809-92B7-45B1-80C8-F52E6DEEF2D2,Canada,Canada,"We have a rich history of working in the North of Canada, bringing a deep commitment to the region and its people to every task. ",NULL,NULL,"<p>Gowling WLG has a rich history of working in the North, and brings a deep commitment to the region and its people to every task. With leading expertise in corporate commercial, environmental, mining, Indigenous, procurement and energy law, our professionals can help you identify rare opportunities and overcome difficult obstacles.</p>    <p>Whether you&#39;re looking to draft an exploration joint venture agreement, seek approvals for major infrastructure projects, or forge meaningful connections around the world, our team can help you succeed.</p>    <h3>Northern experience you can trust</h3>    <p>Our professionals have a long history of working in Nunavut, the Northwest Territories, Yukon, and the northern regions of many provinces on a range of diverse matters. We understand the unique interests, opportunities and challenges that clients operating in the North experience - from the intricate set of regulatory and legal fundamentals not seen elsewhere in Canada to the daily realities of doing business in remote areas. Our professionals also have a thorough grasp on ongoing socio-political, commercial and environmental developments affecting the region.</p>    <p><a href=""http://www.facebook.com/pg/gowlingwlgcanada/photos/?tab=album&amp;album_id=1967758339900937"" target=""_blank"">View our Canada North photo album on Facebook.</a></p>    <h3>Full-service offering</h3>    <p>With industry-leading expertise in a number of areas - including environmental, Indigenous, mining and natural resources, energy, and corporate commercial law, as well as advocacy - we have the talent you need to thrive in any sector. We deal frequently with issues that reflect the modern treaty making experience in the North, and our practice encompasses the full breadth of commercial and regulatory activities that underlie most economic activity across the region. Our clients include Indigenous organizations, corporations, mining companies, territorial governments, hamlets and institutions.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fCanada-North%2fFAQ%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Highlights+in+Northern+Canada|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Top-tier expertise</h3>    <p>Widely regarded as leaders in their fields, members of our team have been repeatedly recognized by Chambers, Lexpert and Legal 500 and other top legal guides and directories. A number of our professionals also hold the prestigious Certified Specialist in Environmental Law title from the Law Society of Upper Canada, among other advanced designations.</p>    <h3>Global reach</h3>    <p>With offices in 18 cities in the UK, Canada, Continental Europe, Asia and the Middle East, we have the ability to assemble international teams and seamlessly connect even the most remote locations to the global business community.</p>    <h3>Subscribe</h3>    <p>Would you like to receive notice of future seminars and webinars, as well as any future newsletters from Canada North?</p>    <p><a class=""c-button"" href=""~/en/footer/updates/subscribe-canada/"">Sign up here</a></p>    <p>To learn more about how we can help you succeed in the North, please contact one of our leaders or reach out to <a href=""~/en/people/?page=1&amp;services=32113&amp;locations=GWLG.Canada"" target=""_blank"">any member of our team</a>.</p>  ",GWLG.Canada,29d7e340-a6af-49b5-b223-993a69997a78;84d0a412-54d4-4142-97f1-b5a558602b8e;233d85e3-39c9-4614-b231-cdd101b9a89e;5e63e862-776c-4170-aca2-ed23d6702294;a7981dca-18b5-4064-b9ea-340d3fba1862,38FAF9E6-254B-4500-90FC-8AA87C16E15B,NULL,0,1,t-white,"<p>From its harsh geography to its complex regulatory regimes, Canada&#39;s North poses unique challenges for businesses, institutions and governments alike. To thrive in this region, you need a team with comprehensive on-the-ground experience and sophisticated technical knowledge across a number of sectors.</p>  ",Featured Insights,5e54e1de-9b17-4388-b62f-f32b747016cd;f9960057-7a13-4933-8b6d-146ca6d0ae3f;7b80ba4d-21f1-49db-bf35-b65b77096251;f974705e-1f96-4d6c-8ed7-e316fbdf5c55,View all Canada North articles,NULL,NULL,NULL,NULL,cc529dfe-1f22-40ef-bd44-df6f5ca25ff3,/en/insights-resources/?page=1&locations=GWLG.Canada&services=32113,NULL,{6582D9E4-B79F-4BB2-BABA-1F2B20537003}|{F7C60252-6F93-4DDD-85C8-BA3C4C729EC4}|{DD3459FE-C8E5-4FFE-8BE8-42C05CB06EE2}|{AD7B64EC-5BBF-450E-BAB4-6B3A0FF15BF4}|{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}
296,/Services/Finance-Litigation/UK,en-GB,FB3A006D-9AF0-4578-90FF-0E61F4BE449F,UK,UK,"Our team represents a broad range of institutions (such as banks, finance houses, asset based lenders, factorers and private lenders) in dealing with enforcement and litigation arising from all forms of lending and security. ",NULL,NULL,"<p>Our team represents a broad range of institutions (such as banks, finance houses, asset based lenders, factorers and private lenders) in dealing with enforcement and litigation arising from all forms of lending and security. Our team deals with both regulated, non-regulated, consumer and commercial debt matters for clients both in the UK and around the world.</p>    <p>Our team has a track record of successfully dealing with the most difficult enforcement scenarios and our clients take confidence from the wealth of experience and expertise within our team.</p>    <p>If you have non-standard lending arrangements or are facing complex enforcement issues surrounding a loan or security and are looking for bespoke advice coupled with sharp commercial instinct then our finance litigation team is here to help you.</p>    <h2>Client work</h2>    <ul>   <li>Representing an offshore lender in defending a litigation claim seeking damages of &pound;136m arising from lending in relation to prime real estate in London.</li>   <li>Representing a listed Indian company in relation to a loan of US$150m from a consortium of offshore branches of Indian banks.</li>   <li>Advising a US lender on the enforcement of a promissory note securing lending of US$2m to a Peruvian company;</li>   <li>Acting for a US funder in taking an assignment of a judgment in excess of &pound;10m against a central bank and seeking enforcement in numerous jurisdictions around the world. The project involved co-ordinating a number of law firms from a number of different jurisdictions and understanding the various bars to enforcement in those countries.</li>   <li>Advising a private equity investor in relation to an investment by way of equity and loans totalling &euro;25m into a business based in several European jurisdictions following a dispute as to the investment;</li>   <li>Advising a US lender on the enforcement of a guarantee from a Nigerian company in relation to lending of US$1m to a Rwandan business;</li>   <li>Advising a consortium of UK asset based lenders in relation to a pyramid fraud type scheme valued at &pound;2m;</li>   <li>Defending a director under a guarantee for &pound;2.1m arising from lending from an asset based lender to a UK and South Asian clothing manufacturer;</li>   <li>Representing a social housing provider who faced a &pound;1.2m claim by way of non-standard renewal terms in a finance lease for reprographic equipment;</li>   <li>Advising a major credit card provider in relation to enforcement of US$1m debt from a Saudi Arabian national;</li>  </ul>    <p>The team&#39;s work for banks and financial institutions has also included ancillary work in many hundreds of cases around enforcing money judgments, possession proceedings, initiating insolvency procedures and appointing administrators and receivers and return of goods orders.</p>    <p>The team&#39;s focus is always upon achieving a commercial recovery for clients and is most effective when engaged early as soon as a default or&nbsp;dispute is suspected.</p>  ",GWLG.UK,065c1c3b-9b04-4841-b8b3-0a5b8ad07b59;cdce1957-fad2-457b-96ff-a0da5af4fe72,1AF5918B-CDFD-4EAB-8CDC-AC92FD0B26C8,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6F9D0851-3846-4496-90DE-3BCCB3F2CE38}|cdce1957-fad2-457b-96ff-a0da5af4fe72
297,/Services/Housing-Litigation/UK,en-GB,C944B3EF-1938-4BA9-9FFA-1D01354AA999,UK,UK,"Large or small, all social housing providers face housing management challenges whether it is changes to the law and government policy, tenancy enforcement, or direct liability to tenants.",NULL,NULL,"<p>Large or small, all social housing providers face housing management challenges whether it is changes to the law and government policy, tenancy enforcement, or direct liability to tenants.</p>    <p>We are a team of skilled housing law experts who can guide you through changes to the legal landscape and help you to resolve disputes.</p>    <p>Where litigation is necessary we have a commercial approach always with one eye to protecting you against reputational damage and will always seek an early resolution.</p>    <p>We are experienced in all areas of contentious housing management and related issues including:</p>    <ul>   <li>Anti-social Behaviour;</li>   <li>Possession on non-fault grounds such as suitable alternative accommodation;</li>   <li>Unlawful sub-letting;</li>   <li>Disrepair;</li>   <li>Rent and service charge disputes;</li>   <li>Equality Act 2010 and proportionality defences.</li>  </ul>    <p>In instructing us you can expect:</p>    <ul>   <li>An understanding of your objectives. We will help you to achieve your aims whilst cognizant of your social objectives;</li>   <li>Solutions to avoid litigation;</li>   <li>Decisive, commercial advice - what would we do if it was our money we were spending?;</li>   <li>Working closely with your Housing Officers and other members of staff;</li>   <li>Bespoke training and legal updates for your housing staff.</li>  </ul>  ",GWLG.UK,065c1c3b-9b04-4841-b8b3-0a5b8ad07b59,0402744C-68C0-46E9-A042-9C0A5A27CDE5,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6F9D0851-3846-4496-90DE-3BCCB3F2CE38}
298,/Services/Litigation-Funding/UK,en-GB,D48E1665-83A3-456B-B7CB-079CE435EF91,UK,UK,Litigation funding law firm offering clear and practical advice on cost sharing solutions to reduce the costs and risks associated with litigation.,NULL,NULL,"<p>Our litigation funding legal practice focuses on clear and practical advice on cost sharing solutions to reduce the costs and risks associated with litigation. From high net-worth individuals through to corporates and insolvency practitioners, we can help to put funding arrangements in place, pitch for funding and evaluate and renegotiate funding packages, utilising our extensive network in the funding and insurance markets.</p>    <p>We have significant experience of obtaining and negotiating funding for claimants and representing defendants against funded claimants, covering both sides of the funding coin. Our litigation funding lawyers work with funders, institutional investors and brokers to find funding solutions, as well as providing independent evaluations of funding packages received from elsewhere - ensuring a full view of your options before taking action.</p>    <p>Our team has extensive knowledge of various cost sharing solutions - from conditional fee arrangements and damage based agreements to After the Event insurance and third party litigation funding and finance.</p>    <p>We also help funders and brokers on large and complex funding structures. Our team provides innovative legal advice across funding agreements, from initial drafting through to advising on rights, obligations and termination.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fLitigation-Funding%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Litigation+funding+services+|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Client work</h3>    <p>With a broad client base of funders, institutional investors, sovereign wealth funds, commercial, corporate and public sector entities, we advise across a wide range of litigation finance matters. Some of our past work has included:</p>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)Shareholder+actions|(Copy1)Advising+pension+funds%2c+asset+managers+and+sovereign+wealth+funds+on+funding+and+insurance+packages+offered+in+respect+of+UK+shareholder+actions+including+those+against+Tesco+and+RBS.|(LinkText1)Read+more|(BgHover1)colour-lightred|(Headline2)Competition+claims|(Copy2)Advising+the+funder+and+drafting+funding+documentation+in+respect+of+an+opt-out+follow-on+damages+claim+in+the+UK+Competition+Appeals+Tribunal%2c+dealing+with+ground-breaking+legal+issues.|(LinkText2)Read+more|(BgHover2)colour-aubergine|(Headline3)Arbitration|(Copy3)Advising+a+Hong+Kong+Special+Administrative+Region+of+China+listed+corporate+on+funding+and+insurance+issues+relating+to+an+International+Centre+for+Settlement+of+Investment+Disputes+(ICSID)+arbitration.|(LinkText3)Read+more|(BgHover3)colour-darkblue|(widget_displayname)Three+Block+Widget^}{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)High-net-worth+individuals|(headline3)Large+group+actions|(headline2)Professional+funders|(copy1)Creating+a+suite+of+litigation+funding+documents+for+a+high+net+worth+individual+and+negotiating+the+completion+of+those+documents+with+the+claimant%27s+solicitors.|(copy3)Advising+a+potential+claimant+in+relation+to+its+joining+of+a+large+group+action%2c+providing+analysis+of+the+funding+documents%2c+highlighting+risks+generally+associated+with+litigation+funding.|(copy2)Advising+two+market-leading+professional+funders+in+relation+to+the+funding+of+a+large+group+action%2c+including+drafting+and+negotiating+the+funding+documents+with+the+solicitor+for+the+claimants.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h3>Awards and accolades</h3>    <p>The legal directories and awards consistently recognise us for our commercial litigation work. We were ranked in tier one by <em>The Legal 500</em> for &#39;Commercial Litigation: Birmingham&#39; in 2020. In London, we ranked in tier two for &#39;Commercial Litigation: mid-market&#39;.</p>    <p><em>Chambers and Partners</em> places the team in band two for its litigation work in the Midlands.</p>    <p>The team was also shortlisted &#39;Dispute Resolution - Firm of the Year (outside London)&#39; at <em>The Legal 500 UK Awards</em> in 2019 and &#39;Commercial Litigation Team of the Year&#39; at the <em>Legal Business Awards</em> in 2019.</p>    <h3>Contact our team</h3>    <p>With extensive knowledge of funding packages and uniquely placed experience, we are one of the go-to litigation funding&nbsp;law firms.<strong> For litigation funding advice, get in touch with a key contact from our team.</strong></p>    <p><strong><a href=""~/en/people/emma-carr/"">Emma Carr</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/alexander-wrixon/"">Alexander Wrixon</a></strong><br />  Senior Associate</p>    <p><strong><a href=""~/en/people/ana-lelliott/"">Ana Lelliott</a></strong><br />  Senior Associate</p>    <p><strong><a href=""~/en/people/louise-macdonald/"">Louise Macdonald</a></strong><br />  PSL Associate</p>  ",GWLG.UK,742aa35b-b58b-4d7c-a95e-820a420ada54;73e21e2c-c353-4385-b087-4e589f60a3e4;568bb028-57c9-489c-9335-0eecf0f1a55e;fbd803cd-5522-4c8f-aed6-c2108dd049a3,DCDB1198-565C-4553-9D50-B26950C8943E,NULL,0,1,t-white,"<p>Disputes are an almost inevitable part of operating in the commercial world, yet they often come with legal costs that some either just cannot afford or would prefer to invest elsewhere. With litigation funding, businesses are able to pursue those claims without having the burden of funding them, thereby removing any limitations on access to justice and freeing up capital to invest elsewhere.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6CCA95AA-01E6-4567-BABA-9B7A1547DFDA}|{A32AD70A-D244-41D5-874C-BBD629240035}|{28257E5E-C15E-4065-A5CA-BC6FA6080E8D}|{99653CE9-1E33-4E9B-B1F5-4F98BDFA1F32}
299,/Services/Product-Liability/UK,en-GB,739446D2-3C1E-43DF-9134-A730F344198C,UK,UK,"Defective products expose business to significant adverse consequences. At worst this could be fatal to consumers, cause brand damage, huge expense, fines and even prison.",NULL,NULL,"<p>Defective products expose business to significant adverse consequences. At worst this could be fatal to consumers, cause brand damage, huge expense, fines and even prison. Products need to comply with a range of legislation, standards and quality marks. They are vulnerable to design and manufacturing defects, to poor labelling, instructions, storage and misuse, all or any of which can have serious consequences. Managing that risk is therefore essential and business critical.</p>    <p>Our specialist lawyers advise across a wide variety of sectors from food to automotive, from medical devices and drugs to toys. They assist with statutory interpretation, risk identification and with effective practical and pragmatic risk management systems and procedures, whether in a simple or a global supply chain.</p>    <p>If a problem is identified, it is essential to react quickly. We will work alongside your product specialists and in-house team to identify and understand the problem and its potential consequences, advising on notification to the authorities and customers.</p>    <p>The key judgment is the assessment of the risk from the defect: what is the severity of the possible outcome and how likely is that outcome to occur? Our experienced team will advise you on the control measures to take, whether that be recall, advice or retrofitted solutions, working with you to achieve the best possible commercial and legal outcome.</p>    <h3>Client Work</h3>    <ul>   <li>Advising a manufacturer of products predominately used in schools and public buildings after it emerged that one of the components used in the product did not meet the fire safety standard promised by the supplier. We advised on identification of affected products and batches, solutions to eliminate risk and in negotiations with the supplier to fund the costs and protect our client&#39;s goodwill.</li>   <li>Delivering bespoke training to the legal, buying and quality control teams of automotive, DIY and internet retail clients on legal compliance, product risk identification and management, prevention and crisis management.</li>   <li>Helping a major food manufacturer under investigation by local authority environmental health officers after its product was contaminated. We worked closely with the client to identify the affected batch, the cause of the problem, the risk and the resulting recall options. We then explained all the systems and procedures in place to manage risk to the EHO in order to place the incident and risk in context, successfully persuading them not to take enforcement action.</li>   <li>Advising a Communications company in group litigation worth &pound;1.7m brought by a number of Police officers against Lancashire Constabulary who had suffered acoustic shock from using the police&#39;s digital radio and communications equipment. The Police brought in the companies who supplied the equipment and related software as part 20 defendants. Our client supplied the software and the headsets used by operators. The Police settled the PI claims with contributions from the commercial defendants not long after the submission of experts reports.</li>  </ul>  ",GWLG.UK,3d0d2ba1-fe4c-43cd-81d1-f7265baecea0,92A37753-1CD3-4195-907C-ADF48E358CA7,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}
300,/Services/Corporate-Commercial/UAE,en-GB,97F8E71D-8AA2-4FB8-9E60-F280EF764E43,UAE,UAE,The Corporate Commercial team is led by Tim Casben who has over 20 years' experience of corporate transactional work and over ten years spent with the firm in London before moving to Dubai in 2009.,NULL,NULL,"<p>At Gowling WLG, we pride ourselves on the entrepreneurial, commercial and practical approach we take to all our corporate work. Having been based in Dubai for more than ten years&#39; we&#39;ve developed an in-depth understanding of the region&#39;s laws and culture.</p>    <p>We act for clients on their inbound investment into the region and institutional clients based here and abroad on regional and international M&amp;A, debt &amp; equity raisings and IPO&#39;s particularly for regionally based clients looking for exposure to the London markets.</p>    <p>The Corporate Commercial team is led by Tim Casben who has over 20 years&#39; experience of corporate transactional work and over ten years spent with the firm in London before moving to Dubai in 2009.</p>    <p>We advise local and international companies on a wide range of corporate matters, including:</p>    <ul>   <li>Establishing and conducting business in the UAE</li>   <li>Financial services and regulation</li>   <li>Investment funds</li>   <li>IPOs</li>   <li>Joint ventures</li>   <li>Mergers and acquisitions</li>   <li>Private equity</li>   <li>Raising capital on regional and overseas markets</li>   <li>Restructuring</li>   <li>Venture capital</li>  </ul>    <h3>Learn more</h3>    <p>If you&#39;re looking to do business in Dubai and beyond, get in touch with a team that has the experience and insight to make it happen. We&#39;d be delighted to speak with you.</p>  ",GWLG.UAEDubai,7574853e-b1e1-4eba-8604-1a01d0d0a056,04411FAC-DC23-4861-BD0C-AADA44EFCDEB,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{70545C59-D6F4-4F8A-A98E-6FAFCC9D3665}
302,/Services/Employment-Labour-Equalities/UAE,en-GB,E4D987DF-A0CC-43C3-A226-8F38F27BAE3F,UAE,UAE,"With over 12 years of employment law experience in the Middle East we provide practical, pragmatic advice to employers who need to comply with a multitude of rules and regulations and who also want to attract top talent and motivate their people.",NULL,NULL,"<p>As an employer, you need to understand how to comply with a multitude of rules and regulations - and how to attract top talent and motivate people to meet their full potential.</p>    <p>Working in the Middle East means coming to terms with a range of employee rights and employer obligations. It&#39;s essential that you know how to incentivise your employees while safeguarding your intellectual property, confidentiality agreements and post-term restrictions.</p>    <p>Gowling WLG has over 12 years of employment law experience in the Gulf Cooperation Council (GCC), having advised multinationals, start-ups and family offices on a wide range of matters. We also have significant corporate and commercial experience, which allows us to see the big picture and provide you with practical, pragmatic legal advice.</p>    <p>In working with us, we won&#39;t just tell you how to do something - we&#39;ll show you how to achieve your objectives with an acceptable level of risk. We&#39;ll apply our commercial savvy and creativity to provide advice that&#39;s always timely, focused and suited to your needs.</p>    <p>Employment-related areas we advise on include:</p>    <ul>   <li>Dispute resolution management</li>   <li>General business protection</li>   <li>HR support</li>   <li>Incentive schemes</li>   <li>IP/confidentiality</li>  </ul>    <h3>Learn more</h3>    <p>You&#39;ll find us to be lawyers who genuinely care about the health and well-being of your business - and who will work at your pace to ensure you have the support required. Let&#39;s talk.</p>  ",GWLG.UAEDubai,7574853e-b1e1-4eba-8604-1a01d0d0a056,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{70545C59-D6F4-4F8A-A98E-6FAFCC9D3665}
304,/Services/Corporate-Commercial/China,en-GB,783AB39A-73C2-44DC-865D-EB461CA0D74E,China,China,"Gowling WLG is your ideal partner in China. You'll be working with a very experienced team that's used to assisting a range of organisations doing business in the country - from SMEs to world-famous global brands. We regularly assist our clients on setting up company structures, corporate governance, M&A due diligence, licensing and commercial contracts.",NULL,NULL,"<p>China is an enticing market in which to do business, combining a fast-growing economy with a strong appetite for new technologies and products. </p>    <p>You can see the opportunities - but how do you manage the unique legal and culture issues that are sure to arise when doing business with Chinese partners? In addition to that, you need to stay on top of legal changes that can affect your operations.</p>    <p>Gowling WLG is your ideal partner in China. You'll be working with a very experienced team that's used to assisting a range of organisations doing business in the country - from SMEs to world-famous global brands. We regularly assist our clients on setting up company structures, corporate governance, M&A due diligence, licensing and commercial contracts.</p>    <p>We have expertise in a variety of sectors, such as tech, fast-moving consumer goods (FMCG), life sciences, education, automotive and engineering. Other than general corporate commercial work, we also do a great deal of work on Chinese employment law and wider compliance matters.</p>    <p>While we have international backgrounds, we have a deep understanding of the nuances of the Chinese legal landscape and culture - and we're fluent in both Mandarin and Cantonese. </p>    <p>We have a wealth of experience in working with Western clients, and many of our team members have in-house experience. This allows us to truly understand what you want from a law firm.</p>    <h3>Learn more</h3>    <p>China is an exciting place to do business. Take us on your journey to ensure you make the most of what's available.</p>    ",GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013;4bcdddc1-a500-4dd4-ac52-fd05abee5ef7;77c2973c-e968-4881-a17c-97fd63aee7f8,04411FAC-DC23-4861-BD0C-AADA44EFCDEB,NULL,1,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013|{9CE439C1-2253-4714-81A2-A2EB6B9064A2}|77c2973c-e968-4881-a17c-97fd63aee7f8
305,/Services/IP-Litigation-Strategy/China,en-GB,CF02943A-F058-4F0B-BBB1-80BFB61E0EC9,China,China,"With our Western and Chinese knowledge and network of investigation agents and local counsel, we can be the guide you need. Finding practical solutions, we understand the concerns you have when looking to litigate in China. We pre-empt issues by understanding the court system throughout the country.",NULL,NULL,"<p>Doing business in China can be challenging. When you&#39;re selling products and services, protecting and enforcing your intellectual property is possible but difficult. Expert, strategic advice is required at the outset.</p>    <p>China&#39;s court system and available dispute resolution options can also present problems. You need to understand which courts are right for you and how best to present your case to maximise your chances of winning.</p>    <p>With our mix of Western and Chinese knowledge and expertise and our wide network of investigation agents and local counsel, Gowling WLG can be the guide you need. Driven to find practical solutions, we understand the concerns and frustrations that you have when looking to litigate in China. We can pre-empt these issues by using our deep understanding of the court system throughout the country.</p>    <p>Our China team has the support of a global platform, which allows work to be carried out around the clock. You&#39;ll also benefit from our wide sector knowledge in key areas such as tech, automotive, advanced manufacturing, fast-moving consumer goods (FMCG) and life sciences.</p>    <p>We have an impressive track record of acting for companies of all different shapes and sizes. We&#39;ve managed well over 150 cases against infringing companies with an unprecedented success rate. In 2016, we achieved a take-down rate of approximately 95% for infringing links as a result of vigilant internet monitoring and online enforcement.</p>    <p>We manage the litigation of a wide range of IP rights, including infringement opinions, civil actions and administrative actions.</p>    <h3>Learn more</h3>    <p>We always strive to become an extension of your team. Get in touch with our award-winning team and let&#39;s protect your interests together.</p>  ",GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013;49370d7b-1121-45da-90e6-96dcc50c1710;b99b67c2-ee8b-4545-99ec-65c66e10278f;69b13bf2-abe8-4151-b3db-86f73482fb9e,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013|{A57A1C6B-A0A8-42B1-A486-547F584C5F82}|{F85F7148-7F31-47AA-AB00-553293591079}|69b13bf2-abe8-4151-b3db-86f73482fb9e
306,/Services/Restructuring-Insolvency/France,en-GB,9DFF5D23-5F73-4578-807A-30EBA25449FD,France,France,"However complex, high-profile or sensitive the scenario, our restructuring experts are experienced in finding realistic and optimal solutions. Our lawyers have expertise in advising and supporting companies, managers, shareholders or partners facing economic, legal or financial difficulties.",NULL,NULL,"<p>Every business faces financial challenges, or has problems when companies in their customer or supply chain run into difficulties. To make the best of these situations, you need legal specialists to help navigate the various challenges.</p>    <p>Gowling WLG will work with you to analyse the unique financial situation in order to accurately identify the origin and nature of the issues, and assist you in determining applicable solutions that will enable the company to be restructured. This includes handling the procedural, corporate, employment and financial elements.</p>    <p>However complex, high-profile or sensitive the scenario, our restructuring experts are experienced in finding realistic and optimal solutions. Our lawyers have complementary expertise in advising and supporting companies, managers, shareholders or partners facing economic, legal or financial difficulties.</p>    <p>Areas we cover include:</p>    <ul>   <li>Administration, liquidation, receivership and bankruptcy</li>   <li>Company voluntary arrangements</li>   <li>Corporate restructuring</li>   <li>Creditor, supplier and customer negotiations</li>   <li>Directors&#39; liability and duties</li>   <li>Distressed sale and purchase transactions</li>   <li>Insolvency risks in structured transactions</li>   <li>Pensions restructuring and covenant advisory</li>   <li>Security reviews and pre-insolvency contingency planning</li>  </ul>    <p>Restructuring and insolvency cases often involve complex and evolving legal issues. We understand the law and how it affects your situation. In working with us, you&#39;ll obtain rapid, pragmatic and cost-effective advice.</p>    <h3>Learn more</h3>    <p>We do restructuring work day in and day out. You can trust us to help you, no matter what the situation. We&#39;re ready to assist.</p>  ",GWLG.France,NULL,CB3477A6-C725-4D55-8FA9-194ABC3A4EC4,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,
307,/Services/Projects/France,en-GB,F4808D40-9810-42AE-93DD-1886F355AC37,France,France,We offer advice and assist in disputes involving both large-scale public operations and the more traditional fields of regulatory public law.,NULL,NULL,"<h3>Projects and public law</h3>    <p>If you&#39;re connected with public law in any way, you likely realise just how complex, awkward and difficult to understand EU and French rules can be. Getting it right isn&#39;t easy - and it&#39;s not likely to get any simpler in the future.</p>    <p>That&#39;s why you need lawyers who can cut through the complexity and deliver clear, effective legal solutions.</p>    <p>Gowling WLG provides that clarity. We offer advice and assist in disputes involving both large-scale public operations - from social, transport and energy infrastructure to networks and defence equipment supply chains - and the more traditional fields of regulatory public law, such as urban planning, environment, energy, health, NTIC, transportation, broadcasting, state aids and more.</p>    <p>Our team works on behalf of both public and private clients, and is seamlessly integrated with firm colleagues in real estate, finance, tax and corporate. This allows us to offer you a specialist focus on public-private partnerships (PPPs), public service delegations (PSDs) and public real estate operations.</p>    <p>Areas we cover include:</p>    <ul>   <li>Financing of public facilities and infrastructures</li>   <li>Institutional public-private and other partnerships</li>   <li>Long-term administrative leases and public domain occupancy</li>   <li>Partnership contracts and concessions</li>   <li>Public procurement contracts (global and complex)</li>   <li>Public bond issues, loan guarantees</li>   <li>Public international law</li>   <li>Urban planning and development</li>   <li>Environment</li>   <li>Expropriation and pre-emption right</li>   <li>Regulated sectors: energy, health, broadcasting, transportation</li>   <li>State aids</li>  </ul>    <h3>Learn more</h3>    <p>Cut through complexity. Our team is ready and here to help you succeed with your projects.</p>  ",GWLG.France,a1b0cd26-4d64-4ff5-9932-c95e2a1e8a51;a3428c73-6626-4da7-9048-1294e325b432,96FB7E9F-2D22-40A2-B6F6-5122615347A6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{6C605183-41D8-4795-84D2-96B89CF31531}|a3428c73-6626-4da7-9048-1294e325b432
308,/Services/Advertising-Product-Regulatory/Germany,en-GB,EBDB46D3-3C7C-4130-AAC0-25A8F8FFEF11,Germany,Germany,"We serve our clients as commercial strategists who consider the political, legal and scientific issues impacting their business. We tailor our legal advice to suit your needs, taking into account national peculiarities and non-harmonisation in the EU product regulatory and marketing rules.",NULL,NULL,"<p>We live in a world of increasingly stringent product regulatory requirements enforced through criminal, administrative and unfair competition proceedings. Ensuring your activities remain legal is a constant challenge - particularly on a global basis, where politics can interfere with consumer protection laws.</p>    <p>Gowling WLG can help. What sets us apart as a law firm is our ability to serve as commercial strategists who are able to consider the political, legal and scientific issues that are impacting your business. We tailor our legal advice to suit your needs, taking into account national peculiarities and non-harmonisation in the EU product regulatory and marketing rules.</p>    <p>We can help you make the best of a complex world &ndash; using loopholes and regulations subject to interpretation and the principle of free movement to achieve more positive results in EU product marketing.</p>    <p>Areas we cover include:</p>    <ul>   <li>Administrative proceedings</li>   <li>Criminal law</li>   <li>Documentation of conformity</li>   <li>Food and beverage</li>   <li>Life sciences</li>   <li>Medical devices</li>   <li>Product recalls</li>   <li>Registration, Evaluation, Authorisation and Restriction of Chemicals regulations (REACH)</li>   <li>Tobacco</li>   <li>Unfair competition</li>  </ul>    <p>Our expertise helps you identify the most appropriate and convenient group for a specific new product, enabling you to achieve a maximum return on investment while avoiding regulatory pitfalls. Thanks to our long-standing industry expertise and recognised know-how - not just in the field of law, but also in biochemistry - you can trust our advice to always be sound, diligent and business-driven.</p>    <h3>Learn more</h3>    <p>Responsive, approachable, flexible and cost effective: this the service you need to deal with the big issues you face. We&#39;re ready for your call.</p>  ",GWLG.Germany,5f39b2b0-1232-4c03-abce-300149d85f9b,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{82CE0637-0A67-4363-A071-1FB76B014D04}
310,/Services/IP-Litigation-Strategy/UK,en-GB,7CFA97C9-AEDD-4DD0-B0BD-56C78B190F4E,UK,UK,"For over 125 years, Gowling WLG has been helping the world's top organisations maximise their intellectual property assets and protect what makes them unique.",NULL,NULL,"<p>Ranked as a top-tier IP litigation team by the world's leading legal publications, Gowling WLG's unique combination of legal experience and in-depth industry knowledge enables us to better understand your business and protect the full value of your IP.</p>    <p>For over 125 years, Gowling WLG has been helping the world's top organisations maximise their intellectual property assets and protect what makes them unique.</p>    <p>From ""bet the company"" IP litigation to the smallest skirmish, our top-ranked IP litigators can work with you to obtain outcomes that are strategically aligned with your business goals.</p>    <p>We've successfully represented clients in all levels of court and administrative tribunals on cases involving trademark and patent infringement and validity, the misappropriation of confidential information and theft of trade secrets, IP licensing disputes, and copyright infringement.</p>    <p>Gowling WLG provides services to clients across a wide range of industries &mdash; from life sciences, energy and natural resources to information technology, entertainment, aviation, manufacturing and automotive. Our broad sector-focused expertise allows us to understand the areas that matter to your business and the specific needs of your industry. Our services include the following:</p>    <h3>Copyright, design and trade secrets</h3>    <ul>   <li>Copyright litigation and advocacy</li>   <li>Design right litigation</li>   <li>Trade secret enforcement and defence - both litigation and pre-litigation</li>  </ul>    <h3>Patents</h3>    <ul>   <li>Patent enforcement and defence</li>   <li>Patented medicines advice and litigation, including listing</li>   <li>Data package exclusivity</li>   <li>Product life cycle issues, including regulatory</li>   <li>Protecting innovator rights</li>   <li>Licensing - both litigation and pre-litigation</li>   <li>Related competition issues</li>  </ul>    <h3>Trademarks</h3>    <ul>   <li>Trademark enforcement and litigation</li>   <li>Border enforcement</li>   <li>Impeachment and cancellation</li>   <li>Anti-piracy and enforcement (civil and criminal)</li>   <li>Comparative advertising litigation</li>  </ul>    <p>The protection and promotion of your intellectual property assets requires strategic thinking, careful planning and constant vigilance. When your IP is threatened, you need the support of a top-ranked legal team.</p>    <p>Our UK team delivers practical, cost-effective legal advice to help you grow and protect your business &mdash; wherever it takes you. Please get in touch with us to find out how we can help you.</p>  ",GWLG.UK,6767b2fc-7817-42ae-a54e-05595fe6c1cd;a21f77d5-b08e-4dac-9b34-efe5dddc9db1,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}|{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}
311,/Services/Advertising-Product-Regulatory/UK,en-GB,F478D721-A6E7-454E-AB27-BC27755A0407,UK,UK,"Great advertising needs a different type of legal advice. Our advertising team can help you to be disruptive - while you push boundaries, they will support you in managing the risk.",NULL,NULL,"<p>Great advertising needs a different type of legal advice. Our advertising team can help you to be disruptive - while you push boundaries, they will support you in managing the risk. Grounded in the digital age, the team understands you need solutions and immediate assistance or the moment might be gone.</p>    <p>Advertising law has changed. Native ads, vlogger campaigns, the Internet of Things - they all require new thinking on legal risk. Real-time marketing demands real-time lawyering. Client agency contracts need to account for new issues, from viewability and ad fraud to the moderation of social media. Publishers are looking to combat ad blocking. Sponsors demand app and data rights as a matter of course.</p>    <p>But other things haven&#39;t changed. Creative teams still want contracts to be sorted with the minimum of fuss so that they can get on with producing the work. Your competitors need to be kept in check. Regulatory issues need to be resolved before they damage your brand. And no-one wants over-cautious legal input to obscure the message.</p>    <p>For advice that works, however new the platform and however creative the concept, please get in touch with Dan Smith, head of our UK advertising law team.</p>    <h3>Experience</h3>    <p>If it touches advertising or marketing, we advise on it. Our experience includes:</p>    <ul>   <li>Offering &#39;hotline&#39; support to brand owners and agencies, providing advice and clearance for claims, copy, campaigns and promotions, where necessary with an immediate turnaround. Years of working in this way with household names such as Unilever, Volkswagen Group, Birds Eye Iglo and Superdrug means we understand what marketing teams and their in-house colleagues need from their legal advisors when it comes to advertising reviews.</li>   <li>Working on the highest profile event and sponsorship deals and activations, including the Olympic Games, Premier League and Serie A football teams, the FA, the Football League, major new stadia, cricket, golf, motor racing, television and music festival properties and Santander Cycles - one of London&#39;s most visible sponsorship properties. Specialising in ambush marketing advice over numerous Olympic and World Cup cycles.</li>   <li>Providing creative solutions to enable brands and agencies to maximise the benefits of everything from native advertising and influencer campaigns to real-time marketing in social media. Training marketing teams in compliance in digital media and elsewhere and providing strategic direction to smooth the clearance process and deliver more compliant materials, earlier and at less cost.</li>   <li>Helping clients to preserve market share, with timely and effective challenges to competitor advertising, before the ASA, in the courts or through the client&#39;s own marketing. We have advised on some of Europe&#39;s biggest comparative advertising cases (including <em>Kingspan v Rockwool</em>) but we also help clients to successfully dispose of many disputes before they escalate.</li>   <li>Advising on global, pan-European and local contracts for creative and advertising services, media buying and advertising technology.</li>   <li>Advising and co-ordinating advice from our overseas offices and partner firms on international campaigns and contracts. With team members in Germany, France and&nbsp;<a href=""~/en/services/advertising-product-regulatory/#canada"">Canada</a> and a network of specialist contacts elsewhere, we are well placed to advise global brands and agency networks.</li>   <li>Embedding a series of junior lawyers into a global brand owner&#39;s advertising and marketing team over the course of many years, giving us a pool of resource trained &#39;on the ground&#39; in industry and able to provide cost-effective support to our clients.</li>  </ul>  ",GWLG.UK,897543f6-1036-4499-934c-adf5f5afeaf4,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{202711F6-A4C3-4DC7-97C8-C4A79ED8F207}
312,/Services/Trademarks-Brands-Designs/UK,en-GB,B10EF8B4-153C-46B1-87E0-544EA962FFD0,UK,UK,"Brands and designs are key assets for any business. Developing a strategy, clearing use, obtaining registration, and ensuring effective protection and exploitation of these assets are essential components to your success.",NULL,NULL,"<p>Brands and designs are key assets for any business. Developing a strategy, clearing use, obtaining registration, and ensuring effective protection and exploitation of these assets are essential components to your success.</p>    <p>Gowling WLG&#39;s internationally renowned, award-winning team of trademark professionals has a long-standing reputation as the go-to firm for organisations seeking trademark, branding and design advice.</p>    <p>Our expertise, experience and the trust our clients have in us allows the firm to deliver the highest level of practical, effective advice. We understand the challenges and opportunities of brand management, and apply legal expertise and commercial insight to your advantage.</p>    <h3>Brands</h3>    <p>A strong brand is a key asset in any successful business. Developing a brand strategy, ensuring it is effectively protected and exploited, and knowing when and how to protect the brand from attack allow the brand and its value to thrive.</p>    <p>Our 12-strong specialist UK team combines a commercial and tactical approach to help our clients&#39; brands work harder. Whether in the initial stages of conception and development or in enforcement of a mature and established brand, we enable clients to reduce risk and maximise brand potential.</p>    <p>Led by <a href=""~/en/people/john-coldham/"">John Coldham</a>, our team delivers a comprehensive brands service, with expertise in trademarks, designs, copyright, domain names, confidential information, trade secrets and licensing.</p>    <p>We understand the challenges and opportunities of brand management and apply legal expertise and commercial insight to our clients&#39; advantage.</p>    <h4>Experience</h4>    <ul>   <li>Our work has covered an extensive range of products and services - innovative software solutions, high end lighting and furniture, children&#39;s dinosaur sets, carpets, steel panels, ice cream, aircraft seats and false moustaches to name but a few. Getting to know our clients inside out is a priority for the team to ensure client portfolios are commercially relevant, appropriately protected and effectively exploited;</li>   <li>Helping our clients get the most from their brands by advising on brand clearance from an early stage, in order to minimise the risk of future exposure and to maximise the potential strength of the brand;</li>   <li>Advising global businesses with global brands. Our team can be found helping North American companies adopt and exploit their brands in Europe, guiding the development of Europe-wide brand portfolios, advising the UK&#39;s top businesses on rebranding strategies and confidentiality policies or managing global enforcement programmes, and developing effective international approaches to common IP issues in conjunction with our offices in important IP jurisdictions such as China, Singapore and&nbsp;Dubai.</li>   <li>Working on high-profile trademark infringement cases, using expertise to handle complex trademark cases with a record of success in the High Court. We acted for Comic Enterprises, the owner of the Glee Club comedy and music group, in its battle with 20th Century Fox and succeeded in a claim for trademark infringement. We have secured significant, successful judgments for household names such as Hasbro, Unilever and Kingspan;</li>   <li>Offering clients a brands audit service to help them get their houses in order and offer in-house training to support client&#39;s brand strategies and ensure that the business is consistent in its approach. A key limb of our service it to ensure that the business is not spending more on its IP than it needs to, whilst ensuring it is doing enough to be effective;</li>   <li>Acting on domain name disputes through World Intellectual Property Organisation or Nominet, enforcing in the Intellectual Property Enterprise Court and developing cost-effective, repeat enforcement strategies for clients, to ensure that responses are proportionate and commercial; and</li>   <li>Secondments to companies such as Aston Martin, Marks &amp; Spencer and Hasbro; working closely with in-house design teams such as Mothercare; and undertaking holiday cover for Iglo Foods Group and others; the team understands the issues clients face on a day-to-day basis and has significant experience of the importance of making a clear and sensible recommendation that works commercially.</li>  </ul>    <p>With team members in Paris and Munich, we are able to advise clients not only on their UK brand strategy and management but on Europe wide issues. With teams across Canada, and in the UAE,&nbsp;China and Singapore that we work with day in, day out, we understand the global issues raised by manufacturing, import and export and brand exploitation across the world.</p>    <p>In partnership with our own offices and those of our wider network we conduct successful international enforcement addressing infringements in over 50 countries worldwide for numerous clients.</p>    <p>We are members of, and in many cases on policy committees of, the British Brands Group, the International Trade Mark Association, the Chartered Institute of Trade Mark Attorneys, Marques and the Pharmaceutical Trade Marks Group which ensures we are up to date on the latest issues.</p>    <p>We produce and distribute regular alerts and hold an annual seminar addressing the latest issues affecting brands owners.</p>    <h3>Designs</h3>    <p>Designs are becoming an increasingly popular way to stop infringers. However, while registered designs can be cheap and quick to acquire, the choices available and the protection they offer can be confusing.</p>    <p>Our design law experts, led by John Coldham, help clients understand the differences between the various rights and the advantages and disadvantages of each. We work with our clients to secure the best portfolio for their needs and ensure that it is exploited effectively.</p>    <p>If clients then experience infringement of their rights, our team has significant experience of enforcing designs at every level, from informal resolution through correspondence to major litigation in the Intellectual Property Enterprise Court (IPEC), the High Court or the Court of Appeal.</p>    <p>Our market-leading design law specialists have acted on some of the most significant cases in the area. The team does not consider it sufficient simply to know the law inside out; it also focuses on what is important for its clients to achieve their commercial objectives. Every client&#39;s needs are different, and so our advice is focused and relevant to meet those needs.</p>    <p>The team&#39;s experience has been enhanced by secondments with design-focused clients including Aston Martin, Dyson and Marks and Spencer. This insight allows our experts to provide the very best commercial advice with practical solutions.</p>    <h4>Experience</h4>    <p>Our expertise includes:</p>    <ul>   <li>Experience of conducting and winning design right cases across the different courts, from lower value cases in the IPEC to the more substantial ones in the High Court, as well as significant experience of litigating designs in the Court of Appeal. For example:   <ul>    <li>The team led Dyson to a landmark victory at the Court of Appeal against spare parts manufacturer Qualtex in a ground-breaking judgment that is widely considered to be one of the major cases in design right law. The team also acted for Dyson against Vax in another leading Court of Appeal judgment;</li>    <li>In the High Court, the team has a number of successes to its name. These include John Coldham and Paul Inman&#39;s major unregistered design right victory for G-Star Raw, with an award of indemnity costs in G-Star&#39;s favour, and Kate Swaine&#39;s notable success in the <em>Virgin v Premium</em> (now Zodiac) case, which required an in-depth understanding and analysis of aircraft seat design and the regulatory constraints it operates within; and</li>    <li>In the IPEC, the team won a design right case for longstanding client Kohler Mira against Bristan, concerning the design of electric showers. The case resulted in one of the highest ever damages awards in the court since it was reformed in 2010.</li>   </ul>   </li>   <li>Advising on the exploitation of design rights through licensing and assignments, both in the UK and internationally;</li>   <li>Advising on concept development and running training for designs teams;</li>   <li>Helping avoid IP infringement, covering in-house holiday leave, and providing clearance hotlines for clients which highlight potential risks, all of which ultimately reduce issues and expenses;</li>   <li>Operating brand enforcement programmes that often avoid the need for legal proceedings altogether. Our team has a clear track record of achieving strong settlements between design right holders and infringers before any significant legal costs have been incurred; and</li>   <li>Providing regular updates and seminars to our client base on design law developments and case law, and hosting a major seminar as part of the London Design Festival in London every September.</li>  </ul>    <h3>Copyright</h3>    <p>Copyright an essential part of a business&#39; brand protection arsenal. Unlike trademarks and designs, you cannot register copyright in the UK - it arises automatically on creation. Although copyright is often overlooked in favour of registered rights, it can provide brand owners with a free, useful and flexible tool to stop infringers from copying a right owner&#39;s original work.</p>    <p>Led by John Coldham, our team has extensive experience of dealing with a wide variety of both contentious and non-contentious copyright matters. This includes dealing with collecting societies, copyright infringement claims, and incorporating copyright as part of client&#39;s brand protection strategies.</p>    <h4>Experience</h4>    <ul>   <li>Advising clients on whether their activities require a licence from UK collecting societies, and helping secure the most appropriate and cost-effective licence for the use required. We can help clients to understand whether the scope of their activities falls within the requirements to take a licence and how to ensure that the licence covers all relevant uses.</li>   <li>Enforcing clients&#39; copyright against infringers (whether on online platforms or in physical materials) and conversely defending clients accused of copyright infringement.</li>   <li>Advising clients on the use of copyright as part of a broader brand protection strategy.</li>   <li>Conducting copyright audits for clients to confirm ownership of different copyright protected works. Often clients may have worked with third parties, or logos may have been developed a long time ago and so it is essential to understand who owns what rights before taking any enforcement action.</li>   <li>Assignments and licences of copyright protected works. We have advised clients on how best to capitalise on their unregistered rights, using assignments and licences.</li>   <li>Helping clients understand and exploit the law of copyright in the context of databases, and defending clients from claims of database infringement in, for example, data feeds.</li>   <li>Advising on copyright in software, for example in the context of XML schema.</li>   <li>Developing strategies for clients to prepare for the impact of new legislation in the UK and EU. The regulatory landscape for copyright is complicated and constantly evolving. We stay on top of developments for clients with operations in the UK and EU, advising them on the necessary steps for compliance with new regulatory environments.</li>  </ul>    <h3>International reach</h3>    <p>Clients benefit from the team&#39;s international reach, providing advice on rights in the UK and at manufacturing bases across the globe.</p>    <p>With dedicated IP teams across several international offices including China, France, Germany and in the UK, as well as close ties with an established network of trusted firms in other jurisdictions, our team handles strategic and enforcement issues that span the globe.</p>    <p>An example of this international work includes high profile success in protecting Dyson&#39;s Air Multiplier&trade; fan design. A large number of cases have been fought and won in China, as well as in over 50 other jurisdictions around the world, all managed by a single team which has pursued over 1,000 infringers of the rights in the fan to date.</p>    <p>Clients range from the industrial to consumer products, clothing and fashion including Dyson, G-Star Raw, Hasbro, Joseph Joseph, Aston Martin, Kohler Mira, Mothercare and the Early Learning Centre, Kingspan Group, Unilever and ZEO.</p>  ",GWLG.UK,9ff8fd1a-c2f5-4084-b72e-4aa02fdf3312,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{ECE09691-7479-40FB-B560-2AA2DF299B85}
313,/Services/Intellectual-Property-Law/China,fr-CA,57C71014-40DF-43B2-9E1A-0927F9AB236C,Chine,Chine,"L’enregistrement, la gestion, l’octroi de licences et la protection de vos actifs de propriété intellectuelle (PI) en Chine représentent une nécessité stratégique. Seule une équipe dotée de compétences et de connaissances approfondies, d’une excellente compréhension du marché local et d’une riche expérience peut vous aider à prospérer en Chine. ",NULL,NULL,"<p align=""left"">Gowling WLG est le cabinet juridique idéal pour vous. Nos professionnels en Chine fournissent des conseils stratégiques et rapides en matière de dépôt et de poursuites de demandes de PI, et ce, à un prix concurrentiel. De plus, grâce à notre impressionnante expertise en matière d&rsquo;octroi de licences, de protection et de litige en matière de PI, vous pouvez vous assurer que vos actifs incorporels demeurent entièrement protégés.</p>    <p align=""left"">Forts de nos bureaux à Beijing et à Guangzhou, ainsi que de notre vaste réseau d&rsquo;avocats et d&rsquo;enquêteurs privés locaux, nous offrons quotidiennement à nos clients internationaux un service de qualité sur le terrain.</p>    <p align=""left"">Notre équipe est fière de gérer les portefeuilles de marques de commerce, de brevets et de dessins industriels de nombreuses entreprises, qu&rsquo;il s&rsquo;agisse de PME ou de marques internationales de renommée mondiale. Nous avons également aidé un bon nombre de cabinets de PI à l&rsquo;échelle internationale à déposer et gérer des portefeuilles de brevets et de marques de commerce de leurs clients en Chine. En outre, notre équipe a aidé des noms de marques reconnues mondialement ainsi que des PME à faire respecter leurs droits de PI devant les tribunaux et les autorités administratives de toute la Chine, et ce, avec beaucoup de succès. L&rsquo;équipe a par ailleurs été reconnue par les publications <em>WTR</em>, <em>IAM</em> <em>Patents</em> et <em>MIP</em>.</p>    <p align=""left"">Notre équipe de PI en Chine offre les services suivants&nbsp;:</p>    <h2 align=""left"">Stratégies de portefeuille de PI</h2>    <ul>   <li align=""left"">Stratégies d&rsquo;enregistrabilité</li>   <li align=""left"">Recherches de vérification et d&rsquo;antériorité</li>   <li align=""left"">Diligence raisonnable de la PI</li>   <li align=""left"">Évaluation de la PI</li>   <li align=""left"">Surveillance de la PI</li>   <li align=""left"">Services d&rsquo;octroi de licences, de cession et autres transactions commerciales en matière de PI</li>   <li align=""left"">Opinions sur la propriété, la contrefaçon et la validité</li>   <li align=""left"">Opinions sur la liberté d&rsquo;exploitation</li>   <li align=""left"">Planification et gestion de portefeuilles de PI</li>   <li align=""left"">Litiges relatifs aux noms de domaine</li>  </ul>    <h2 align=""left"">Dépôt et poursuite de demandes</h2>    <ul>   <li align=""left"">Dépôt de demandes de brevets</li>   <li align=""left"">Dépôt de demandes internationales de brevet en vertu du PCT</li>   <li align=""left"">Dépôt de demandes de réexamen de brevets</li>   <li align=""left"">Procédures d&rsquo;invalidation et d&rsquo;appel en matière de brevets</li>   <li align=""left"">Enregistrement, révision et appels de marques de commerce</li>   <li align=""left"">Opposition et annulation liées aux marques de commerce</li>   <li align=""left"">Enregistrement d&rsquo;œuvres protégées par le droit d&rsquo;auteur</li>   <li align=""left"">Inscription des droits de PI auprès des douanes</li>   <li align=""left"">Gestion des actions administratives</li>   <li align=""left"">Paiements de rentes</li>  </ul>    <h2 align=""left"">Octroi de licences</h2>    <ul>   <li align=""left"">Octroi de licences (y compris les questions de brevets essentiels à une norme)</li>   <li align=""left"">Réglementation</li>   <li align=""left"">Droit antitrust</li>  </ul>    <h2 align=""left"">Protection</h2>    <ul>   <li align=""left"">Protection et règlement de litiges (brevets de dessin industriels, brevets d&rsquo;invention, brevets de modèle d&rsquo;utilité, droits d&rsquo;auteur, concurrence déloyale et marques de commerce)</li>   <li align=""left"">Stratégies de lutte contre le piratage et la contrefaçon et respect des droits (au civil et au criminel)</li>   <li align=""left"">Stratégies d&rsquo;application de la loi hors ligne et retrait de sites en ligne</li>   <li align=""left"">Enregistrement et protection auprès des douanes</li>   <li align=""left"">Procédures d&rsquo;octroi de droits</li>  </ul>    <p align=""left"">Vous pouvez compter sur notre équipe de Chine primée ainsi que sur sa riche expérience et son expertise commerciale en gestion de portefeuille de PI. Ensemble, optimisons votre propriété intellectuelle.</p>  ",GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013;bb6e4e98-2d11-42a4-a949-3c3e7a8225f0,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,1,1,t-white,"<h3>L&rsquo;enregistrement, la gestion, l&rsquo;octroi de licences et la protection de vos actifs de propriété intellectuelle (PI) en Chine représentent une nécessité stratégique. Seule une équipe dotée de compétences et de connaissances approfondies, d&rsquo;une excellente compréhension du marché local et d&rsquo;une riche expérience peut vous aider à prospérer en Chine. Il faut également que son objectif premier soit de fournir aux clients une assistance commerciale, stratégique et rapide de manière conviviale et à prix abordables.</h3>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013|{E15A097F-C847-448B-9878-1702A07540D4}
315,/Services/International-Arbitration/Overview,en-GB,A6D7410A-49EE-4D65-9171-CC09D8E761A5,Overview,Overview,"In a global marketplace, disputes are increasingly international affairs. International arbitration offers a number of potential benefits to commercial parties.",NULL,NULL,"<p>In a global marketplace, disputes are increasingly international affairs. Our international arbitration team can advise you on suitable dispute resolution procedures for cross-border contracts, and on resolving disputes when they arise</p>    <p>International arbitration offers a number of potential benefits to commercial parties. These include a greater degree of choice and control over how a dispute is managed (when compared to litigation in national courts), greater relevant expertise of the tribunal, the confidentiality that comes with arbitration, and the potential for easier recognition and enforcement of awards.</p>    <p>International arbitration is a key part of our global dispute resolution offering, and our team is well placed to guide you through the process, from drafting your dispute resolution provisions to conducting any resulting arbitration.</p>    <p>The team comprises lawyers in the UK, Europe, Asia, the Middle East and Canada, with international arbitration experts situated in the major arbitration centres of London, Paris, Dubai and Singapore. Members of the team have extensive experience of arbitrations across the globe (including, in particular, Calgary, Dubai, Geneva, Hong Kong, London,&nbsp;Paris, Singapore and Toronto)</p>    <p>We have represented clients in a wide range of institutional arbitrations under the rules of all of the major international arbitration bodies including ICC, LCIA, ICSID, SIAC, CIETAC, HKIAC, ICDR, AAA and the SCC, as well as in ad hoc disputes including under the UNCITRAL rules.</p>    <p>Regardless of the type of dispute, we will provide you with a consistent level of service that matches the unique needs of your business. We have resolved complex international and domestic arbitrations in the following areas:</p>    <ul class=""o-2-columns is-list-unstyled"">   <li>Aviation, aerospace and defence</li>   <li>Banking and finance</li>   <li>Construction and engineering</li>   <li>Energy</li>   <li>Information technology</li>   <li>Intellectual property</li>   <li>Investor state disputes</li>   <li>Insurance</li>   <li>IT</li>   <li>Life sciences</li>   <li>Oil and gas</li>   <li>Mining and environment</li>   <li>Natural Resources</li>   <li>Shipbuilding</li>   <li>Telecoms</li>  </ul>    <h3>Client Work</h3>    <p>The team&#39;s clients include major construction contractors, energy companies, clients in the technology and aerospace industries, and national governments. Recent highlights of our team members include:</p>    <ul>   <li>Acting for a Middle Eastern oil and gas company in ad hoc arbitration proceedings claiming multi-billion dollar damages against a national oil company in relation to its total failure to supply pursuant to a long-term gas supply agreement.</li>   <li>Acting for the Republic of Albania in two ICSID arbitrations pursuant to the Energy Charter Treaty and the Italy-Albania BIT relating to the alleged expropriation of a hydroelectric plant, a waste management project and a television station, as well as in two related ICC arbitration pursuant to a BOT Concession Agreement relating to the construction of a hydroelectric plant, with total claims exceeding US$1 billion.</li>   <li>Representing an international engineering contractor in a $100m dispute, arising out of time and monetary overruns arising in connection with the design and construction of an industrial facility in the Middle East.</li>   <li>Acting for the Respondent on an ICC Arbitration concerning the construction of a Nuclear Power Plant in Northern Europe (&euro;4 billion) and on two separate, connected adjudications.</li>   <li>Acting for a CIS-based high net worth individual in US$1 billion LCIA dispute against joint venture partners concerning mineral processing and mining assets, and involving the commencement of multiple related arbitrations relating to a complex corporate holding structure, applications to the Cypriot court for statutory relief, and to the US court for section 1782 discovery in support of foreign proceedings.</li>   <li>Acting for European pipeline gas and Middle Eastern LNG producers in price reviews under long term agreements subject to ICC arbitration.</li>   <li>Acting for an oil and gas major in a dispute against a national oil company subject to ICC arbitration for clarification of development rights under a North African production sharing contract.</li>   <li>Representing a high-profile international contractor in English High Court proceedings and in an ICC arbitration concerning a contract for work on a landmark energy research institution in Riyadh, for a claim in excess of US$150 million.</li>  </ul>  ",GWLG.Global,4abe6d56-7b8f-463c-95b7-801fbc7e63da;3ae82526-329e-41d7-8e7e-7b14a7af12bc,CBACBAC0-ABB0-4B36-A8FC-3A060A5EF154,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{B9DCAE1B-BB6D-4F10-AFC3-7C935B690008}|{3275D488-797C-47CE-A9DE-98A8ABFED5A2}
316,/Services/Employment-Labour-Equalities/Overview,fr-CA,3C1D61D7-332B-4E89-8DCF-5CC81D24EE88,Aperçu,Aperçu,"Que vous soyez une grande multinationale, un organisme sans but lucratif ou une petite entreprise, la gestion de la main-d’œuvre requiert un certain doigté.",NULL,NULL,"<p>Que vous soyez une grande multinationale, un organisme sans but lucratif ou une petite entreprise, la gestion de la main-d&rsquo;œuvre requiert un certain doigté. Nous savons que vous voulez non seulement être un employeur qui sait se conformer à une multitude de règles et de réglementations &ndash; vous voulez aussi être un employeur qui attire les meilleurs talents et motive les gens à se surpasser et à contribuer au succès de votre entreprise. &nbsp;</p>    <p>Chez Gowling WLG, nous savons que vous ne voulez pas que l&rsquo;on vous dise que vous n&rsquo;y arriverez pas. Vous voulez savoir comment atteindre vos objectifs avec un minimum de risque pour votre organisation. Cette compréhension de vos besoins réels alliée à la créativité de nos services en matière d&rsquo;emploi se traduit par des conseils opportuns, ciblés et concrets. Nous nous impliquerons pleinement en vous proposant des options et des recommandations concrètes quant à la meilleure manière d&rsquo;atteindre vos objectifs.</p>    <p>La gestion de professionnels diffère de la gestion de représentants aux ventes ou d&rsquo;employés à la production. Notre expérience et nos connaissances de l&rsquo;industrie nous permettent d&rsquo;adapter nos conseils à votre main-d&rsquo;œuvre. Qu&rsquo;il s&rsquo;agisse de litiges complexes devant les tribunaux civils ou administratifs, de contestations relatives à la gestion du changement, ou de réorganisation et de protection de votre entreprise, notre approche globale proactive nous permet de travailler avec vous pour atténuer les risques et maximiser les opportunités de votre main d&rsquo;œuvre. Nous nous assurons de développer des relations solides et durables avec vous. Nous utilisons nos connaissances de votre organisation pour vous offrir des services à réelle valeur ajoutée.</p>    <p>Nous avons également une perspective mondiale du monde du travail. Forts de notre clientèle internationale, nous avons l&rsquo;expérience et l&rsquo;expertise nécessaires pour comprendre les enjeux légaux liés à la gestion des ressources humaines dans plusieurs pays et territoires. Nous savons comparer, contraster et expliquer les différences entre les lois locales de manière à ce que nos clients appliquent leur expertise dans un contexte local.</p>    <p>Nos services comprennent des conseils stratégiques, du soutien concret et des formations complètes sur les sujets suivants&nbsp;:</p>    <ul>   <li>Accommodement en matière d&rsquo;invalidités ou en présence de limitations</li>   <li>Arrangements concernant les modalités de travail</li>   <li>Clauses restrictives et protection des intérêts de l&rsquo;employeur</li>   <li>Congédiement sans cause juste et mesures précédant le congédiement</li>   <li>Contrats/ententes d&rsquo;emploi</li>   <li>Dépistage d&rsquo;alcool et de drogues</li>   <li>Élaboration et mise en œuvre de politiques et de procédures en milieu de travail</li>   <li>Enjeux de droits de la personne et de discrimination</li>   <li>Enquêtes en milieu de travail</li>   <li>Ententes avec des entrepreneurs indépendants et enjeux liés à leur statut &nbsp;</li>   <li>Équité salariale</li>   <li>Gestion de l&rsquo;absentéisme</li>   <li>Gestion de la dénonciation en milieu de travail</li>   <li>Gestion de la transmission des droits et obligations à un employeur successeur dans le cadre de réorganisations/impartitions/fusions et acquisitions</li>   <li>Gestion du rendement</li>   <li>Poursuites en responsabilité délictuelle en milieu de travail</li>   <li>Protection des renseignements personnels et des données</li>   <li>Protocoles de recrutement et d&rsquo;embauche</li>   <li>Rémunération de la haute direction</li>   <li>Résolution de conflits (litige, arbitrage ou médiation)</li>   <li>Santé et sécurité</li>   <li>Syndicalisation, accréditation, différends liés à des actions syndicales et des conflits de travail</li>  </ul>    <p>​Le succès de votre entreprise nous tient vraiment à cœur. Nous savons que les problèmes ne surviennent pas toujours pendant les heures ouvrables; ils sont souvent pressants et nécessitent une attention et une réaction immédiates. Nous suivons votre rythme et nous nous assurons de vous fournir le soutien dont vous avez besoin pour faire fructifier vos affaires.</p>    <p>Vous souhaitez aller plus loin encore? Communiquez avec l&rsquo;un ou l&rsquo;autre des membres <a href=""~/fr/people?page=1&amp;locations=&amp;services=651"">de notre équipe</a>.</p>  ",GWLG.Global,799cf040-59c7-4986-825a-e4b909364823;bbd690ea-a4bd-4cdf-85d3-ca0c7d862d99,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E105E1FE-58D4-44E0-B32B-4367806B155E}|{5420D1AC-A0C7-4B88-8008-76A94AD6F8C3}
317,/Services/Patents/Germany,en-GB,98EEFD7A-2341-45C2-A4C5-FC23F48D147B,Germany,Germany,We represent clients' legal interests where their patent rights are infringed or where they are accused of infringing third-party patent rights.,NULL,NULL,"<p>Munich is a hub for the high tech and life sciences industry in Germany. Located close to the European Patent Office (EPO), the German Patent and Trademark Office (DPMA) and the Divisions of the future Unified Patent Court (UPC), international businesses can trust our Munich team when it comes to defending their patents. We represent clients&#39; legal interests where their patent rights are infringed or where they are accused of infringing third-party patent rights. We enforce these rights in legal proceedings before the competent German and European courts.</p>  ",GWLG.Germany,a21f77d5-b08e-4dac-9b34-efe5dddc9db1,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}
318,/Services/Trademarks-Brands-Designs/Germany,en-GB,72F0B5CB-F77D-48CE-BC53-64806DD7C308,Germany,Germany,"Our team works with clients on all facets of branding, including trademarks, designs, copyright, domain names, both contentious and non-contentious.",NULL,NULL,"<p>From clearance and strategic portfolio advice through to exploitation and enforcement, our Munich team works with clients on all facets of branding, including trademarks, designs, copyright, domain names, both contentious and non-contentious. We recently won an important case in the FMCG industry, thus helping our client to protect their trademark portfolio significantly.</p>  ",GWLG.Germany,5f39b2b0-1232-4c03-abce-300149d85f9b,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{82CE0637-0A67-4363-A071-1FB76B014D04}
319,/Services/IP-Litigation-Strategy/Germany,en-GB,2C9BE22F-6049-4A6A-ABB1-F1330D7239FE,Germany,Germany,"Across the full range of IP rights, our team in Munich advises both domestic and international clients.",NULL,NULL,"<p>Munich is a hub for the high tech and life sciences industries&nbsp;in Germany, with our IP/IT/Commercial team providing leading edge advice. Across the full range of IP rights, our team in Munich advises both domestic and international clients. We are passionate about making sure our clients use their intellectual property in a way that adds value to their businesses. This involves both developing intellectual property exploitation strategies and successfully enforcing rights against infringers.</p>  ",GWLG.Germany,a21f77d5-b08e-4dac-9b34-efe5dddc9db1,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}
321,/Services/Commercial-Litigation/Overview,fr-CA,14F02383-1C50-4766-A0DF-47B72C78D0CA,Aperçu,Aperçu,Gowling WLG peut entrer dans le vif de n’importe quel différend commercial afin d’obtenir le meilleur résultat possible. ,NULL,NULL,"<p>Gowling WLG peut entrer dans le vif de n&rsquo;importe quel différend commercial afin d&rsquo;obtenir le meilleur résultat possible. Nous traitons régulièrement des dossiers de litige complexes et à grande visibilité&nbsp;: nous savons donc quoi faire pour vous aider à&nbsp;atteindre vos objectifs.</p>    <p>Notre approche est stratégique&nbsp;: nous prenons le temps de comprendre vos objectifs commerciaux, nous évaluons vos forces et vos faiblesses, puis nous explorons les différentes solutions qui s&rsquo;offrent à vous (médiation, mode substitutif de résolution des différends ou comparution devant un tribunal).</p>    <p>Nous cherchons toujours à préserver vos relations importantes, à protéger votre réputation, tout&nbsp;en perturbant le moins possible votre entreprise.</p>    <p>Pour en savoir davantage sur notre expertise en litige commercial, n&rsquo;hésitez pas à nous contacter.</p>  ",GWLG.Global,90573229-adbc-497c-9e6e-7ee61952f25b,C774BE76-80EC-4195-83A3-5850B5E2A4A2,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{DB180194-4B02-46F8-A0CE-0DFB051009EE}
324,/Services/Practical-LPM-by-Gowling-WLG/Canada,fr-CA,8242B076-5882-4763-886F-BBCA884DE1E2,Canada,Canada,"Nous croyons que vous méritez plus de votre cabinet juridique - plus de certitude quant aux coûts, plus d'efficacité et plus de valeur.",NULL,NULL,"<p>Nous croyons que vous méritez plus de votre cabinet juridique - plus de certitude quant aux coûts, plus d&#39;efficacité et plus de valeur.</p>    <p>C&#39;est pourquoi nous avons créé GPJ Pratique par Gowling WLG<span style=""top: -0.5em; bottom: -0.5em; line-height: 0; font-size: 11.25px; vertical-align: baseline; position: relative;"">MC</span>, une approche novatrice à la gestion de projets juridiques qui aide à assurer la progression de vos affaires juridiques dans le respect de l&#39;échéancier et du budget.</p>    <p>Au moyen d&#39;une plateforme logicielle collaborative conçue expressément pour le milieu juridique&nbsp;- la première en son genre au Canada&nbsp;- GPJ Pratique par Gowling WLG<sup>MC</sup> fournit une feuille de route claire et précise pour tous les types de dossiers juridiques : des dossiers sophistiqués de droit des affaires et de droit commercial aux litiges complexes, et ce, partout au Canada et ailleurs dans le monde.</p>    <p>Grâce à GPJ Pratique, vous savez toujours qui travaille dans votre dossier, comment ce dernier progresse et quels sont les coûts prévus. Pas de surprises. Que des résultats.</p>    <p>{^widget|(widget_displayname)Video|(transcripttext)%3cp%3eNarrateur+%3a+Et+si+les+entreprises+fonctionnaient+comme+la+plupart+des+cabinets+d%26%2339%3bavocats%3f%3c%2fp%3e%0d%0a%0d%0a%3cp%3eLes+prix+des+billets+d%26rsquo%3bavion+seraient+divulgu%c3%a9s+uniquement+%c3%a0+l%26%2339%3batterrissage.+Les+constructeurs+entameraient+les+travaux+sans+avoir+de+plans.+Les+troupes+de+th%c3%a9%c3%a2tre+distribueraient+les+r%c3%b4les+%c3%a0+la+lev%c3%a9e+du+rideau.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eIl+y+a+un+avantage+%c3%a0+%c3%aatre+pratique.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eGowling+WLG+estime+que+vous+m%c3%a9ritez+plus+de+votre+cabinet+juridique.+Plus+de+certitude+quant+aux+co%c3%bbts.+Plus+d%26%2339%3befficacit%c3%a9+et+plus+de+valeur.+Nous+avons+donc+cr%c3%a9%c3%a9+GPJ+Pratique.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eGestion+de+projets+juridiques%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eUn+meilleur+outil+de+gestion+de+projets+juridiques+qui+assure+le+respect+des+d%c3%a9lais+et+du+budget+tout+au+long+du+mandat.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3ePlateforme+logicielle+collaborative%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eNotre+plateforme+logicielle+collaborative%2c+con%c3%a7ue+express%c3%a9ment+pour+le+milieu+juridique.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eGPJ%26nbsp%3bPratique+par+Gowling+WLG%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3eGPJ+Pratique+fournit+une+feuille+de+route+claire+et+pr%c3%a9cise+pour+tous+les+types+de+dossiers+juridiques.%3c%2fp%3e%0d%0a%0d%0a%3cp%3e%3cstrong%3eComment+%c3%a7a+fonctionne%26hellip%3b%3c%2fstrong%3e%3c%2fp%3e%0d%0a%0d%0a%3cp%3ePremi%c3%a8re+%c3%a9tape+%3a+D%c3%a9finir.+Vous+nous+expliquez+vos+besoins%2c+vos+attentes%2c+vos+d%c3%a9lais+et+votre+conception+de+la+r%c3%a9ussite.+Nous+vous+%c3%a9coutons.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eDeuxi%c3%a8me+%c3%a9tape+%3a+Planifier.+Nous+formulons+la+strat%c3%a9gie+la+plus+efficace+et+la+fa%c3%a7on+d%26%2339%3boptimiser+les+ressources+pour+r%c3%a9aliser+vos+objectifs.+Vous+aurez+une+id%c3%a9e+claire+des+co%c3%bbts%2c+des+professionnels+dans+votre+dossier+et+des+d%c3%a9lais.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eTroisi%c3%a8me+%c3%a9tape+%3a+Surveiller+et+g%c3%a9rer.+Vous+recevrez+des+mises+%c3%a0+jour+r%c3%a9guli%c3%a8res+concernant+votre+dossier.+En+cas+d%26%2339%3bimpr%c3%a9vus+affectant+les+d%c3%a9lais+ou+les+co%c3%bbts%2c+nous+vous+le+signalons+imm%c3%a9diatement.+Ainsi%2c+vous+pouvez+prendre+des+d%c3%a9cisions+sur-le-champ+et+%c3%a9viter+les+mauvaises+surprises.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eQuatri%c3%a8me+%c3%a9tape+%3a+R%c3%a9viser+et+am%c3%a9liorer.+Faire+le+bilan+est+important.+Cela+nous+permet+de+trouver+de+nouveaux+moyens+d%26%2339%3boptimiser+nos+services+et+d%26%2339%3ben+maximiser+la+valeur.+S%26%2339%3bil+y+a+un+point+%c3%a0+am%c3%a9liorer%2c+nous+tenons+%c3%a0+le+faire.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eBref%2c+avec+GPJ+Pratique%2c+vous+savez+qui+travaille+dans+votre+dossier%2c+comment+il+progresse+et+quels+sont+les+co%c3%bbts.+Pas+de+surprises%2c+que+des+r%c3%a9sultats.%3c%2fp%3e%0d%0a%0d%0a%3cp%3eApprenez-en+plus+%c3%a0+gowlingwlg.com%2fgpjpratique+ou+envoyez+un+courriel+%c3%a0+%3ca+href%3d%22mailto%3aGPJpratique%40wlingwlg.com%22%3eGPJpratique%40wlingwlg.com.%3c%2fa%3e%3c%2fp%3e%0d%0a|(name)GWLG.Video|(videoid)lP3XIai2pKA|(width)|(height)^}</p>    <h3>Comment fonctionne GPJ Pratique</h3>    <p>GPJ Pratique repose sur un processus simple mais combien efficace, divisé en quatre étapes :</p>    <ol>   <li><strong>Définir :</strong> Dès le début, vous nous faites part de vos attentes&nbsp;- vos besoins, votre définition de la réussite et le moment où vous comptez l&#39;atteindre. Nous vous écoutons attentivement.</li>   <li><strong>Planifier :</strong> Ensuite, nous mobilisons nos connaissances, précédents, modèles de plans de projet ainsi que nos décennies d&rsquo;expérience afin de déterminer la stratégie la plus efficace et la façon optimale d&rsquo;utiliser les ressources qui permettront de réaliser vos objectifs. Nous anticipons les coûts et les obstacles potentiels et nous veillons à attribuer les tâches en fonction du niveau d&rsquo;expertise requis. Le résultat? Un plan qui indique clairement quels sont les coûts&nbsp;- en fonction d&rsquo;estimations claires&nbsp;- et combien de temps il faudra pour compléter le tout.</li>   <li><strong>Surveiller et gérer : </strong>GPJ Pratique nous permet de suivre la progression de votre dossier en temps réel. Mais il ne s&rsquo;agit pas d&rsquo;une boule de cristal : certains imprévus peuvent survenir lorsqu&rsquo;on traite un dossier juridique. GPJ Pratique nous aide à détecter tout problème pouvant influer sur l&rsquo;échéancier ou le coût, et à vous le signaler immédiatement, afin que vous puissiez prendre des décisions sur-le-champ et éviter les surprises de facturation.</li>   <li><strong>Réviser et améliorer :</strong> Fondamentalement, GPJ Pratique repose sur le concept de &laquo; l&rsquo;excellence pratique &raquo;, c&#39;est-à-dire l&rsquo;atteinte de l&rsquo;excellence non seulement dans la qualité des services juridiques, mais aussi dans la prestation de ces services en respectant votre échéancier et votre budget. Une fois le mandat achevé, nous faisons le bilan : cette étape essentielle nous permet de trouver de nouvelles façons d&rsquo;optimiser nos services et d&rsquo;en maximiser la valeur. S&rsquo;il y a un point à améliorer, nous tenons à le faire.</li>  </ol>    <p><strong><img alt="""" src=""~/getmedia/d8a0bfc3-dc7e-423c-91f0-647d27548583/practicalFRE-01.png.xml"" /></strong></p>    <h3>Pourquoi choisir GPJ Pratique?</h3>    <p>GPJ Pratique est tout désigné pour vous si :</p>    <ul>   <li>Vous voulez en avoir plus pour votre argent quand vous faites des dépenses juridiques.</li>   <li>Vous voulez éviter les surprises de facturation.</li>   <li>Vous voulez savoir clairement, dès le départ, qui travaillera dans votre dossier, quels sont les coûts prévus et combien de temps il faudra pour compléter le tout.</li>   <li>Vous voulez plus de fiabilité et de transparence de la part de votre cabinet juridique quant à la valeur des services offerts et aux résultats obtenus.</li>   <li>Vous voulez tous ces avantages sans que le niveau de qualité ou de service ne soit compromis.</li>  </ul>    <h3>Ête-vous prêt à obtenir GPJ Pratique?</h3>    <p>Pour en savoir davantage sur GPJ Pratique par Gowling WLGMC, écrivez-nous à <a href=""mailto:getpractical@gowlingwlg.com?subject=GPJ%20Pratique%20par%20Gowling%20WLG"">getpractical@gowlingwlg.com</a>, ou communiquez avec l&#39;un de nos chefs GPJ Pratique du cabinet.</p>  ",GWLG.Canada,NULL,1B8FE12A-0095-43F3-B58B-2FEBD2F7E8A0,NULL,0,NULL,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
325,/Services/Trademarks-Brands-Designs/UAE,en-GB,1991B7F1-A8C5-4D86-B071-F6FE29F22241,UAE,UAE,"As one of Gowling WLG's newest IP teams, the MENA IP team is fast establishing a reputation as the go-to firm for organisations seeking trademark, branding and designs advice in the MENA region.",NULL,NULL,"<p>Trademarks, brands and designs are key assets for your business. To make the most of them, you need to develop a strategy: developing protectable assets and products, clearing use, obtaining registration, and ensuring effective protection and exploitation of these assets. In the United Arab Emirates (UAE) and the wider Middle East and North Africa (MENA) region, these are essential components to your success as the region is built on licensed/franchised rights.</p>    <p>To assist you in the region, you will need a team which has the expert local knowledge to provide solutions in the <abbr title=""Middle East and North Africa"">MENA</abbr> region, as well as the global reach to position and maximise your intellectual property (IP) assets.</p>    <p>Our team of <abbr title=""intellectual property"">IP</abbr> professionals, based in our <abbr title=""Middle East and North Africa"">MENA</abbr> hub office in the <abbr title=""United Arab Emirates"">UAE</abbr>, has significant experience through the region. As one of Gowling WLG&#39;s newest <abbr title=""intellectual property"">IP</abbr> teams, the <abbr title=""Middle East and North Africa"">MENA</abbr> <abbr title=""intellectual property"">IP</abbr> team is fast establishing a reputation as the go-to firm for organisations seeking trademark, branding and designs advice in the <abbr title=""Middle East and North Africa"">MENA</abbr> region.</p>    <p>Areas we cover include:</p>    <ul>   <li>Domain name protection, retrievals and disputes, including related strategies</li>   <li>Licensing, franchising and <abbr title=""intellectual property"">IP</abbr> transactional work</li>   <li>Trademark and design audits</li>   <li>Trademark and design protection and enforcement strategies</li>   <li>Trademark and design development and clearance</li>   <li>Trademark and design enforcement and anti-counterfeiting</li>   <li>Trademark and design registration &amp; portfolio management</li>   <li>Trademark and design litigation</li>   <li>Local branding and localisation to respect cultural aspects of doing business in the <abbr title=""Middle East and North Africa"">MENA</abbr> region</li>  </ul>    <p>We take pride in not only delivering outstanding, practical legal advice, but also exceptional client service and value. This is reflected in the personal, responsive service we provide, in the innovative, tailored solutions we create, and in our commitment to giving you the best possible value for your legal spend.</p>    <h3>Learn more</h3>    <p>We partner with many of the world&#39;s leading organisations to create and execute thoughtful, effective branding and design strategies. Let&#39;s work together to make your assets work for you.</p>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}
326,/Services/Patents/UAE,en-GB,3D44BBFD-9D55-4D7F-A08C-A16A3E25A310,UAE,UAE,"Our United Arab Emirates (UAE) based intellectual property (IP) team handles patent matters throughout the MENA region, including work before the GCC Patent Office (GCCPO).",NULL,NULL,"<p>Research and development is one of the fastest areas of commercial growth in the Middle East and North Africa (MENA) region, as governments look to move towards knowledge economies. With this development, it means that protecting patents and innovation in the <abbr title=""Middle East and North Africa"">MENA</abbr> region is crucial in order to obtain and maintain your commercial advantage. You need lawyers who can help you to confidently stake a claim and mitigate long-term risk. Gowling WLG is well placed to assist local and international companies who are looking to secure and commercialise innovation. Our United Arab Emirates (UAE) based intellectual property (IP) team handles patent matters throughout the <abbr title=""Middle East and North Africa"">MENA</abbr> region, including work before the GCC Patent Office (GCCPO).</p>    <p>The <abbr title=""Middle East and North Africa"">MENA</abbr> team works closely with Gowling WLG&#39;s award-winning group of patent agents and patent lawyers in Canada, China&nbsp;and Singapore for technical patent work, such as the drafting of patents. With the support of Gowling WLGs international patent team, we can cover all technical areas of potential interest. Across Gowling WLGs global platform, we manage tens of thousands of patent and industrial design files in over 100 countries. The global patent team combined files over 5,500 new patent applications annually.</p>    <p>This means Gowling WLG has rightfully earned a reputation as the go-to team for those seeking ironclad protection for their most valuable innovations in the <abbr title=""Middle East and North Africa"">MENA</abbr> region and further afield.</p>    <p>Areas we cover include:</p>    <ul>   <li>Patent filing and protection strategies, and <abbr title=""intellectual property"">IP</abbr> audits</li>   <li>Patent portfolio management</li>   <li>Patent drafting</li>   <li>Industrial designs</li>   <li>Licensing and transactional</li>   <li>Patent litigation/enforcement (contentious)</li>   <li>Trade secrets and confidential information (including non-disclosure agreements (NDA))</li>  </ul>    <p>We&#39;re a part of one of the world&#39;s most-respected <abbr title=""intellectual property"">IP</abbr> practices. Whether you need protection in the <abbr title=""Middle East and North Africa"">MENA</abbr> region or anywhere in the world, we work seamlessly as part of our global team, which comprises nearly 200 <abbr title=""intellectual property"">IP</abbr> professionals.</p>    <h3>Find out more</h3>    <p>Protect your patents and promote your business in the <abbr title=""United Arab Emirates"">UAE</abbr> and wider <abbr title=""Middle East and North Africa"">MENA</abbr> region. We&#39;re looking forward to helping you make the most of the opportunities.</p>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}
327,/Services/Advertising-Product-Regulatory/UAE,en-GB,3FA0ED13-413C-49AE-A82C-652ED50DBFD1,UAE,UAE,"Great advertising needs a different type of legal advice. When you are working in the MENA region you often face unknown laws and uncertain markets, together with cultural differences from other international markets. ",NULL,NULL,"<p>Great advertising needs a different type of legal advice. When you are working in the Middle East and North Africa (MENA) region you often face unknown laws and uncertain markets, together with cultural differences from other international markets. Our United Arab Emirates (UAE) based team can help you to be disruptive - pushing boundaries whilst respecting local culture, they will support you in identifying and managing the risk. Grounded in the digital age, the team understands you need solutions and immediate assistance or the moment might be gone.</p>    <p>That&#39;s exactly what Gowling WLG can offer in the <abbr title=""United Arab Emirates"">UAE</abbr> and wider <abbr title=""Middle East and North Africa"">MENA</abbr> region. Our lawyers combine local and international expertise with creativity and keen insight to ensure that your campaigns are both legal and effective.</p>    <p>From product licensing, to the review of advertising copy, to social media strategies, to advice regarding marketing competitions, we provide you with considerable hands-on experience and a flexible and effective approach to solving your unique issues.</p>    <p>Our experience includes:</p>    <ul>   <li>Advising on a regional disruptive campaign for an international sportswear company, the aim of which was to challenge certain local cultural viewpoints</li>   <li>Advising automotive companies on advertising campaigns and advertising claims for the <abbr title=""United Arab Emirates"">UAE</abbr></li>   <li>Advising a US dietary supplement company in relation to product registration and labelling requirements in the <abbr title=""United Arab Emirates"">UAE</abbr></li>   <li>Advising an fast-moving consumer goods (FMCG) company on social media campaigns and competitions for deployment in the <abbr title=""United Arab Emirates"">UAE</abbr> and wider Gulf region</li>   <li>Advising a European pharma company on a distribution strategy for its products in a number of <abbr title=""Middle East and North Africa"">MENA</abbr> countries which included regulatory advice relating to medical devices, pharmaceutical products, dietary supplements and cosmetics.</li>   <li>Advising many companies in relation to taking action against parallel imports to the <abbr title=""United Arab Emirates"">UAE</abbr> and wider Gulf, through use of regulatory based challenges</li>  </ul>    <p>Our team assists advertising agencies, media outlets, publishing houses, law firms and big brands in relation to advertising and product regulatory matters. Our team combines exceptional industry insight with unparalleled expertise to deliver a full range of effective, innovative client solutions.</p>    <h3>Find out more</h3>    <p>We&#39;re looking forward to helping you make the most of the opportunities in relation to your advertising and promotional campaigns and for distributing your products in the <abbr title=""United Arab Emirates"">UAE</abbr> and wider <abbr title=""Middle East and North Africa"">MENA</abbr> region.</p>  ",GWLG.UAEDubai,4baeb47b-7f23-4fe4-a387-8f8097912506,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4baeb47b-7f23-4fe4-a387-8f8097912506
328,/Services/IP-Litigation-Strategy/UAE,en-GB,AE4C3193-7725-4DC3-9530-64480B46FF2C,UAE,UAE,"Whether you are selling products or services, protecting and enforcing your intellectual property in the MENA region is possible, provided you have the rights upon which to bring an action. Expert, strategic advice is required at the outset.",NULL,NULL,"<p>Doing business in the United Arab Emirates (UAE) and wider Middle East and North Africa (MENA) region can be challenging. Whether you are selling products or services, protecting and enforcing your intellectual property in the <abbr title=""Middle East and North Africa"">MENA</abbr> region is possible, provided you have the rights upon which to bring an action. Expert, strategic advice is required at the outset.</p>    <p>As a region which is generally civil law based, the court systems and available dispute resolution options can also present problems, particularly for rights holders from common law jurisdictions. You need to understand which options are right for you taking into account the circumstances of the dispute. We can assist you to maximise your chances of achieving the preferred result for your business.</p>    <p>With our mix of Western and Arab knowledge and expertise, Gowling WLG can be the guide you need in the Middle East. Driven to find practical solutions, we understand the concerns and frustrations that you have when looking to litigate in <abbr title=""Middle East and North Africa"">MENA</abbr> countries. We can pre-empt these issues by using our deep understanding of the court systems and enforcement options throughout the region.</p>    <p>Our <abbr title=""United Arab Emirates"">UAE</abbr> based team has the support of a global platform, which allows work to be carried out around the clock. You&#39;ll also benefit from our wide sector knowledge in key areas such as tech, automotive, fast-moving consumer goods (FMCG), hospitality, retail, and life sciences.</p>    <p>We manage the litigation of a wide range of intellectual property (IP) rights, including infringement opinions, criminal actions, civil actions and administrative actions, as well as working closely with custom authorities.</p>    <h3>Learn more</h3>    <p>We always strive to become an extension of your team. Get in touch with our award-winning team and let&#39;s protect your interests together.</p>  ",GWLG.UAEDubai,4baeb47b-7f23-4fe4-a387-8f8097912506,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4baeb47b-7f23-4fe4-a387-8f8097912506
345,/Services/Advertising-Product-Regulatory/Overview,fr-CA,EE3420F2-064F-4BA6-B2E8-65C3A59F070F,Aperçu,Aperçu,"Notre expérience en matière de publicité et de réglementation des produits vous aide à réussir tout au long du cycle de conception, de lancement, de commercialisation et de protection de vos produits.",NULL,NULL,"<p>La mise en marché de nouveaux produits et services requiert une bonne dose d&#39;innovation et de créativité. Il faut aussi posséder une réelle compréhension de l&#39;environnement réglementaire au sein duquel ils seront conçus, commercialisés et vendus.</p>    <p>Gowling&nbsp;WLG allie expérience en publicité et réglementation des produits pour vous guider tout au long du cycle de conception, lancement, commercialisation et protection de vos produits.</p>    <p>Une campagne publicitaire réussie demande une grande perspicacité et une créativité débridée. Elle exige aussi une équipe de professionnels juridiques tout aussi perspicaces et créatifs, qui peuvent s&#39;assurer que vous respectez les contraintes de l&#39;industrie et les exigences juridiques, tout en préservant l&#39;intégrité et l&#39;originalité de vos idées.</p>    <p>Qu&#39;il s&#39;agisse d&#39;octroi de licences de produits, de révision de textes publicitaires ou de représentation dans des différends commerciaux, grâce à son expérience concrète du monde publicitaire, les professionnels de Gowling WLG proposent à leurs clients une démarche à la fois souple et efficace à la résolution des problèmes auxquels ils font face.</p>    <p>La réglementation des produits exige des connaissances approfondies de produits donnés et du marché de même que de la loi y afférente. Il faut donc pouvoir compter sur une équipe juridique qui peut vous guider efficacement dans vos interactions avec une vaste gamme d&#39;organismes de réglementation. Les avocats ne doivent pas seulement être des experts dans leurs champs de compétences, mais aussi posséder une perspective commerciale et une grande capacité de résolution de problèmes réglementaires. De plus, avec l&#39;avènement des médias numériques et sociaux, il vous faut compter sur des avocats qui comprennent les plus récents réseaux et technologies et qui sont à même d&#39;interpréter les lois portant sur les nouvelles façons de faire de la publicité au moyen de ces médias.</p>    <p>Gowling WLG est à l&#39;avant-garde de ces questions. Non connaissons la publicité, et surtout, nous saisissons vos objectifs. Nous sommes là pour vous aider à commercialiser vos biens et services en conformité avec la législation.</p>    <p>Nos clients sont issus d&#39;une variété d&#39;industries&nbsp;: packaging, commerce de détail et télécommunications, automobile, entre autres. Nous sommes souvent appelés à faciliter des lancements et des publicités de produits à l&#39;échelle nationale et à adapter des publicités et du packaging de sociétés désireuses de percer les marchés du Royaume-Uni, d&#39;ailleurs en Europe, du Canada ou du Moyen-Orient ou d&#39;y introduire de nouveaux produits et services.</p>    <p>Notre équipe leader de la propriété intellectuelle à Moscou est à même de vous aider à faire fructifier les affaires dans l&#39;important marché russe. Elle offre une gamme complète de services de publicité et de commercialisation aux multinationales souhaitant s&#39;implanter dans &nbsp;ce marché, et aux entreprises qui y sont déjà établies.</p>    <h3>Nos champs de compétences couvrent divers aspects de la publicité, commercialisation et réglementation des produits :</h3>    <ul>   <li>Commandites et événements</li>   <li>Commercialisation à paliers multiples et ventes directes (conformité et licences y afférentes)</li>   <li>Concours et promotions</li>   <li>Contenu de marques</li>   <li>Déclarations environnementales</li>   <li>Déclarations quant aux prix, ventes et réductions</li>   <li>Différends liés à la publicité</li>   <li>Droit d&#39;auteur et marques de commerce</li>   <li>Ententes de distribution, fabrication, d&#39;assurance qualité en commerce électronique</li>   <li>Ententes de représentation d&#39;artistes</li>   <li>Ententes de services d&#39;agence, de placements média et de publicité</li>   <li>Examen des aliments et approbations réglementaires, y compris les déclarations relatives à la santé et à la nutrition</li>   <li>Examens de publicité</li>   <li>Gestion des rappels et mesures d&#39;exécution</li>   <li>Libre circulation des marchandises et des services</li>   <li>Lois sur la protection du consommateur</li>   <li>Marketing insidieux</li>   <li>Marquage CE (directive européenne de conformité), certification et accréditation pour les marchés de l&#39;UE</li>   <li>Médias numériques (applications, blocage de publicités, placements de publicités, visibilité et fraude au clic, blogueurs et vlogueurs, publicité native, ciblage et analyse comportementaux, marketing affilié et diffusion vidéo en continu en direct)</li>   <li>Médias sociaux</li>   <li>Octroi de licences de produits</li>   <li>Octroi de licences touchant les pharmaceutiques et les appareils médicaux</li>   <li>Packaging et étiquetage</li>   <li>Plaintes de consommateur et différends entre compétiteurs</li>   <li>Promotions/représentation avec des célébrités à des fins publicitaires</li>   <li>Protection des renseignements personnels et des données, protection contre le marketing direct/l&#39;hameçonnage</li>   <li>Publicité à l&#39;intention des enfants</li>   <li>Publicité comparative et soutien aux réclamations</li>   <li>Publicité internationale, musique et autres droits d&#39;auteur</li>  </ul>    <p>Reconnus pour leur leadership et leur expertise par des répertoires juridiques respectés du monde entier, nos professionnels demeurent au fait des dernières tendances juridiques. Ils veillent à partager leurs analyses dans une variété de publications et participent régulièrement à des conférences et des événements dans le monde entier.</p>    <p>Compétente, pratique et au diapason du marché, l&#39;équipe de Gowling WLG possède la créativité et les connaissances commerciales et réglementaires nécessaires pour vous aider à faire fructifier vos affaires. Nous sommes là pour vous aider à prospérer. N&#39;hésitez pas à communiquer avec l&#39;un des membres de notre équipe pour de plus amples détails.</p>  ",GWLG.Global,NULL,65C34333-2A1A-4FBA-8D2A-65496D535F64,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
371,/Services/Tax/Overview,fr-CA,DDCA2CA8-E8A8-4C6C-8E7E-84C39CF2B9CA,Aperçu,Aperçu,Le paysage fiscal international évolue plus rapidement que jamais auparavant. C'est pourquoi il est essentiel de rechercher l'aide de conseillers fiscaux chevronnés qui maîtrisent ce secteur. ,NULL,NULL,"<p>Le paysage fiscal international évolue plus rapidement que jamais auparavant. C&#39;est pourquoi il est essentiel de rechercher l&#39;aide de conseillers fiscaux chevronnés qui maîtrisent ce secteur.</p>    <p>En planifiant et en faisant appel à la bonne équipe, vous obtiendrez des solutions fiscales sur mesure et efficaces qui permettront à votre entreprise de croître et de prospérer.</p>    <p>Chez Gowling&nbsp;WLG, nous communiquons des analyses fiscales détaillées et complexes dans un langage limpide et direct. Nos professionnels travaillent avec vous pour mettre au point des structures fiscales et d&#39;entreprise efficaces, personnalisées selon vos besoins uniques. Notre approche pragmatique vous permet de rester concentré sur votre entreprise. Jumelant les compétences avancées d&#39;avocats-fiscalistes, de comptables et d&#39;économistes expérimentés, nous pouvons vous conseiller sur une vaste gamme de questions fiscales&nbsp;:</p>    <ul>   <li>Droit successoral</li>   <li>Fonds d&#39;investissement</li>   <li>Fusions et acquisitions</li>   <li>Immobilier</li>   <li>Impôt indirect</li>   <li>Prix de transfert entre sociétés</li>   <li>Règlement de litiges fiscaux</li>   <li>Transactions internationales</li>  </ul>    <p>La diversité des domaines que couvre Gowling&nbsp;WLG signifie que vous aurez toujours accès à l&#39;expertise qu&#39;il vous faut de la part de professionnels ayant l&#39;expérience appropriée pour votre secteur. Au diapason de vos exigences fiscales, nous sommes sur le terrain avec des solutions pour vous aider.</p>    <p>N&#39;hésitez pas à communiquer avec nous pour savoir exactement comment notre équipe fiscale peut vous aider.</p>  ",GWLG.Global,d60ac666-57c3-41c0-a0e6-88626659b060;2de02f2d-4a7f-490a-8a3b-73ebf0c8073f,5E7A4C28-1F41-45D6-9485-1A23041B34F6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1BCB2B88-1239-415F-A645-7C57FBB13590}|{1F689D48-2700-4C33-BD5A-E43FD302AB75}
373,/Services/Real-Estate/Overview,fr-CA,1CAB01B8-38C6-4919-978C-BE27091702EE,Aperçu,Aperçu,"Le marché immobilier mondial est à la fois dynamique et complexe. Pour vous y retrouver dans ce secteur exigeant qui évolue rapidement, il vous faut des conseillers juridiques à l'écoute de vos besoins ayant une connaissance approfondie des marchés internationaux et locaux. ",NULL,NULL,"<p>Afin de s&#39;adapter aux exigences d&rsquo;un marché immobilier mondial dynamique et complexe, notre pratique juridique internationale en droit immobilier est axée sur nos clients, sur les marchés locaux et les secteurs d&#39;activités qu&#39;ils englobent. Œuvrant dans une industrie aux facettes multiples et dans des dossiers tout aussi variés, nos avocats possèdent une expérience avérée en droit immobilier.</p>    <p>Parallèlement à la demande d&#39;actifs traditionnels sur le marché actuel, l&#39;utilisation de certains biens immeubles se diversifie, le commerce au détail en ligne et les installations logistiques prennent de l&#39;expansion, et les espaces de bureau à vocation flexible sont de plus en plus en demande. Si on ajoute à cela les avancées technologiques et l&rsquo;importance grandissante des mesures visant l&#39;environnement, la société et la gouvernance (ESG), une évidence s&#39;impose : pour s&#39;y retrouver dans ce secteur au rythme rapide, il faut pouvoir compter sur des conseillers de confiance.</p>    <p>Nos solutions juridiques intégrées permettent à nos clients de mener à bien les transactions les plus complexes. Vous serez judicieusement conseillés sur les questions quotidiennes liées aux placements et aménagements immobiliers, ainsi que sur chacune des étapes du cycle de vie d&rsquo;un projet. Que ce soit dans le secteur commercial, résidentiel ou public, vous bénéficierez d&rsquo;une vaste gamme de services en droit immobilier, ce qui facilitera votre prise de décisions au moment d&#39;évaluer les nouvelles occasions d&rsquo;affaires et les risques potentiels de ce secteur dynamique.</p>    <h2>Notre réseau international</h2>    <p>Certaines des plus grandes organisations du marché immobilier international comptent sur les conseils de nos quelque 460 avocats spécialisés en droit immobilier et œuvrant depuis nos bureaux au Canada, à Londres, à Birmingham et à Paris. Forte d&rsquo;un solide réseau de cabinets juridiques alliés, Gowling WLG peut vous prêter main-forte dans l&#39;ensemble des pays qu&#39;elle dessert et vous offrir une expertise locale rehaussée d&rsquo;un service de portée mondiale.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/real-estate/#canada"" target=""_blank"">Canada</a></li>   <li><a href=""~/en/services/real-estate/#france"" target=""_blank"">France</a></li>   <li><a href=""~/en/services/real-estate/#uk"" target=""_blank"">Royaume-Uni</a></li>  </ul>  ",GWLG.Global,dc37a2c5-d22d-49f9-932a-0d8054b36385;28adebbb-5239-4131-b123-eb860852ce0c,C27F9D3F-C358-48FB-B057-9A291FEA02AA,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{FE8591DB-3DA8-4182-9B2A-A532BD263105}|{78D88FC3-0344-402B-85ED-AF69D1596497}
374,/Services/Trademarks-Brands-Designs/Overview,fr-CA,9AAED1AA-2B2E-4425-A2A5-D0B03074E5A9,Aperçu,Aperçu,"Votre image de marque est le visage de votre organisation. Elle est étroitement associée à votre réputation, et la réputation est ce qui compte le plus. ",NULL,NULL,"<p>Votre image de marque est le visage de votre organisation. Elle est étroitement associée à votre réputation, et la réputation est ce qui compte le plus. Avec plus d&#39;un siècle d&#39;expérience dans le domaine, nous saisissons l&#39;importance critique de vos besoins en matière d&#39;image de marque et nous offrons les conseils les plus pertinents, pratiques et créatifs.</p>    <p>De la conception et de la mise en œuvre à l&#39;exploitation et à la défense des marques, Gowling&nbsp;WLG travaille sur tous les aspects de l&#39;image de marque, y&nbsp;compris les marques de commerce, les dessins, les droits d&#39;auteur, les noms de domaine, la concession de licences et l&#39;application.</p>    <p>Que ce soit par nos bureaux au Canada,&nbsp;en Chine ou aux Émirats arabes unis, ou par l&#39;intermédiaire de notre vaste réseau international d&#39;associés de confiance, nous vérifions avec soin la disponibilité des nouvelles marques, nous gérons les portefeuilles locaux et internationaux stratégiquement et nous protégeons les droits enregistrés d&#39;une manière à la fois rentable et judicieuse sur le plan commercial.</p>    <p>Nos professionnels vous offrent une expérience inégalée de défense des marques de commerce et des dessins, y&nbsp;compris en ce qui concerne les procédures d&#39;opposition, les violations, les annulations et les invalidations, la tromperie commerciale, la dilution, la lutte contre la contrefaçon, le transbordement et les importations parallèles. Nous représentons régulièrement nos clients devant les tribunaux de tous les niveaux au Royaume-Uni, ailleurs en Europe, en Russie, en Chine et au Canada, et nous gérons et coordonnons des litiges dans d&#39;autres pays.</p>    <p>Notre expertise sectorielle est sans limites, et comprend un éventail de marques à dimension internationale ou locale, qui vont des biens de consommation aux services financiers.</p>    <p>De plus, nous adaptons notre service afin qu&#39;il corresponde à vos besoins. Nous n&#39;adoptons pas une approche universelle, mais créons plutôt avec vous les stratégies et les modalités d&#39;honoraires qui vous conviennent le mieux.</p>    <p>Qu&#39;il s&#39;agisse d&#39;aider les entreprises en démarrage à mettre au point une stratégie de protection rentable, de mener des dossiers importants, de gérer des programmes de défense des marques de commerce, des dessins et des droits d&#39;auteur sur plusieurs continents, vous pouvez être certain que nous avons l&#39;expérience nécessaire pour vous aider de la manière la plus appropriée.</p>    <p>Les membres de notre équipe sont déjà les conseillers de confiance de certaines des marques les plus prestigieuses au monde et peuvent vous aider pour tous vos besoins d&#39;ordre juridique liés à l&#39;image de marque. N&#39;hésitez pas à communiquer avec un membre de notre groupe pour savoir en quoi nous pouvons vous aider.</p>  ",GWLG.Global,8ad0e3f6-68e6-45b9-a509-c5811ebc77af;5f39b2b0-1232-4c03-abce-300149d85f9b,AA72EA93-20F8-455A-8E77-6F6CEA510684,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2D06D20E-608B-4A50-A0AF-CC2F741D9E62}|{82CE0637-0A67-4363-A071-1FB76B014D04}
375,/Services/Insurance-Professional-Liability/Overview,fr-CA,020AD184-0872-4850-AFE9-2D2E286750F6,Aperçu,Aperçu,"Le secteur de l'assurance subit actuellement de très grands changements : consolidation de l'industrie, concurrence accrue entre les compagnies d'assurances et les banques, modifications législatives et réglementaires, augmentation des réclamations de mauvaise foi, des risques de recours collectifs et des attributions de dommages-intérêts exemplaires au Canada et aux États-Unis. ",NULL,NULL,"<p>Le secteur de l&#39;assurance subit actuellement de très grands changements&nbsp;: consolidation de l&#39;industrie, concurrence accrue entre les compagnies d&#39;assurances et les banques, modifications législatives et réglementaires, augmentation des réclamations de mauvaise foi, des risques de recours collectifs et des attributions de dommages-intérêts exemplaires au Canada et aux États-Unis.</p>    <p>Chez Gowling&nbsp;WLG, nous aidons nos clients à relever ces défis avec succès. Notre équipe gère un large éventail de questions d&#39;assurance et de réassurance pour des assureurs et des réassureurs nationaux et internationaux ainsi que d&#39;autres acteurs du secteur de l&#39;assurance. Si vous avez besoin d&#39;aide dans le domaine du droit de l&#39;assurance, nous avons les connaissances, l&#39;expérience et la créativité nécessaires pour vous offrir des solutions pratiques et efficaces.</p>    <p>Nous représentons des assureurs, des réassureurs, des courtiers, d&#39;autres intermédiaires et des assurés. Nous sommes experts en défense des actions en responsabilité et en réclamations liées à la propriété, ainsi qu&#39;en matière de gestion des problèmes de couverture d&#39;assurance quand ils se présentent. Nous maîtrisons toutes les formes de règlement des litiges, notamment les procédures contentieuses, l&#39;arbitrage national et commercial, l&#39;arbitrage international en vertu des règles institutionnelles communes et le règlement extrajudiciaire des différends (y compris la médiation).</p>    <p>Nous fournissons aussi de l&#39;aide quant au libellé des polices, à l&#39;examen des contrats, aux escomptes, aux sanctions, au travail d&#39;enquête connexe et aux vérifications préalables dans le domaine des assurances transactionnelles.</p>    <p>Spécialisés en droit des sociétés et dans le domaine des lois à caractère réglementaire, nos avocats connaissent le secteur de l&#39;assurance dans ses moindres détails. Ils fournissent notamment des conseils essentiels sur la réglementation nationale des sociétés d&#39;assurance. Ils s&#39;occupent aussi des fusions et des acquisitions dans le secteur de l&#39;assurance, dont celles des assureurs d&#39;entreprise et des courtiers internationaux.</p>    <p>Dans cet univers complexe, vous pouvez compter sur l&#39;une des équipes de droit des assurances les plus grandes et les plus expérimentées au monde. Vous pouvez nous faire confiance, nous savons à quel point il vous importe d&#39;obtenir des conseils rapides et axés sur les résultats.</p>    <p>L&#39;équipe Gowling&nbsp;WLG est axée sur les résultats, la réduction des risques grâce à nos connaissances et notre expérience, et la représentation de vos intérêts à l&#39;aide de notre expertise dans un grand nombre de domaines d&#39;importance pour le secteur de l&#39;assurance. Nos services concernent les domaines suivants&nbsp;:</p>    <ul>   <li>Administrateurs et dirigeants</li>   <li>Assurance maritime et assurance transport</li>   <li>Assurance vie et assurance-invalidité</li>   <li>Aviation</li>   <li>Cautions</li>   <li>Compétence</li>   <li>Conception, construction et entretien d&#39;autoroutes</li>   <li>Construction</li>   <li>Délégation de production</li>   <li>Diffamation</li>   <li>Énergie</li>   <li>Fusions et acquisitions</li>   <li>Garantie et indemnité</li>   <li>Garanties en cas de pertes dans le secteur</li>   <li>Libellé des polices</li>   <li>Litiges en matière de couverture</li>   <li>Pertes d&#39;exploitation</li>   <li>Préjudice corporel</li>   <li>Réassurance</li>   <li>Réassurance facultative et obligatoire</li>   <li>Réclamations liées à la propriété</li>   <li>Recours collectifs</li>   <li>Réglementation</li>   <li>Responsabilité civile en matière de pratiques d&#39;emploi</li>   <li>Responsabilité des fiduciaires</li>   <li>Responsabilité des régimes de retraite</li>   <li>Responsabilité du fait des produits</li>   <li>Responsabilité liée aux brevets et marques de commerce</li>   <li>Responsabilité professionnelle</li>   <li>Risques financiers</li>   <li>Services aux sociétés</li>   <li>Société d&#39;assurance captive</li>   <li>Subrogation</li>  </ul>    <p>Notre engagement en faveur de l&#39;excellence, d&#39;un service personnalisé, d&#39;une réflexion innovante et des connaissances pointues peut vous aider à relever les défis que posent les problématiques du secteur de l&#39;assurance au XXI <sup>e</sup> siècle.</p>    <p>Pour en savoir plus sur la façon dont nous pouvons vous aider, n&#39;hésitez pas à communiquer avec un membre de notre équipe.</p>  ",GWLG.Global,bd7f8b8d-ad9f-4a23-a17c-8f9950d52b6d,3389C6CF-54C5-47DB-81A0-7C09BE2BE982,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2A8A0308-C190-4661-B67D-E6A2457C1017}
376,/Services/Climate-Change-and-Environmental-Law/Overview,fr-CA,32065946-AFDB-4C09-9F66-24F96BF8E768,Survol,Survol,Le droit de l’environnement doit être pris en compte dans de nombreux aspects de vos activités commerciales. ,NULL,NULL,"<h2>Qu&#39;est-ce que le droit de l&#39;environnement?</h2>    <p>Dans le domaine de l&rsquo;environnement, les lois veillent à minimiser l&#39;impact des changements climatiques et à protéger l&rsquo;environnement. Elles peuvent couvrir un certain nombre de domaines, notamment le contrôle du climat, la pollution de l&#39;eau, l&#39;énergie renouvelable, la gestion des déchets et les facteurs ESG.</p>    <p>Ces lois s&rsquo;appliquent à tous les secteurs des affaires et à tous les organismes et corps publics. La non-conformité aux lois, si elle n&#39;est pas gérée avec soin, risque d&#39;entraîner d&#39;importants dommages financiers pour les entreprises, ainsi que de causer atteinte à leur réputation.</p>    <p>Nos avocats en droit de l&#39;environnement possèdent des connaissances approfondies en la matière et fournissent des conseils pratiques et faciles à comprendre. Nous agissons pour le compte d&rsquo;entrepreneurs, d&rsquo;entreprises, de bailleurs de fonds, de pouvoirs publics et d&#39;administrations locales, et ce, dans tous les secteurs de l&#39;environnement.</p>    <p>Notre équipe d&#39;avocats chevronnés en droit de l&#39;environnement et changements climatiques est dirigée par des associés qui démontrent, par leur passion, leur grande expérience de ce domaine d&rsquo;activité. Traduisant une législation complexe en points clairs et exploitables, nos avocats tirent parti de leurs vastes connaissances pour vous proposer des solutions adaptées aux besoins de votre entreprise.</p>    <h2>Découvrez notre équipe internationale</h2>    <p>Pour obtenir des conseils dans ce domaine du droit, n&rsquo;hésitez pas à communiquer dès aujourd&rsquo;hui avec l&rsquo;un des membres de notre équipe.</p>  ",GWLG.Global,a24654f5-1304-42da-a118-aade9777aae0;1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;29d7e340-a6af-49b5-b223-993a69997a78;3d0d2ba1-fe4c-43cd-81d1-f7265baecea0;a7981dca-18b5-4064-b9ea-340d3fba1862;0efee052-a0c0-4bdb-9de2-1227c5fa1551,064C02F0-FF64-42F8-8A71-C8DECE3600FD,NULL,0,1,t-white,"<p>En ce XXI<sup>e</sup>&nbsp;siècle, l&#39;un des principaux défis de l&#39;humanité est de protéger le monde dans lequel nous vivons. Les entreprises ont à la fois l&rsquo;obligation légale et la responsabilité morale de veiller à ce que leur impact sur l&#39;environnement soit minimal. La conformité aux lois sur l&rsquo;environnement et les changements climatiques concerne toutes les entreprises, pas seulement celles qui présentent un risque évident de pollution.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,a24654f5-1304-42da-a118-aade9777aae0|{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{6582D9E4-B79F-4BB2-BABA-1F2B20537003}|{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}|{2979DC8F-BB6F-4A9F-85DE-BC8AAC3F071B}|{A6A3B0BC-061F-4F98-9949-16E412DF9D32}
377,/Services/Pensions/Overview,fr-CA,68E43E2E-36AF-4636-A44F-17E2FD16C674,Aperçu,Aperçu,Les lois qui régissent les régimes de retraite et les avantages sociaux sont complexes et en constante évolution.,NULL,NULL,"<p>Les lois qui régissent les régimes de retraite et les avantages sociaux sont complexes et en constante évolution. Les gestes posés par les employeurs, les fiduciaires, les administrateurs de régimes et leurs fournisseurs de services sont assujettis à des examens par les autorités en matière de réglementation et peuvent occasionner des problèmes d&#39;ordre juridique. Par conséquent, il n&#39;a jamais été aussi important d&#39;obtenir des conseils judicieux et pratiques en la matière.</p>    <p>Gowling&nbsp;WLG peut vous venir en aide. Reconnue pour communiquer dans un langage limpide, notre équipe des régimes de retraite offre des conseils concrets et éclaire les zones d&#39;ombre. Nos avocats sont brillants et savent décoder les subtilités des lois sur les régimes de retraite, tout en veillant à trouver des solutions commerciales.</p>    <p>Avoir accès à de l&#39;expertise juridique diversifiée est plus important que jamais. Nos professionnels peuvent rapidement mettre à profit leurs connaissances approfondies en matière de caisses de retraite, de fiscalité, d&#39;entreprises, d&#39;immobilier, de services bancaires, de produits dérivés, d&#39;énergie, d&#39;infrastructures et de services financiers. Voici les sujets liés aux régimes de retraite que nous couvrons :</p>    <ul>   <li>fusions et restructurations d&#39;entreprises;</li>   <li>liquidation, structure et gouvernance des régimes;</li>   <li>méthodes de gestion du passif;</li>   <li>modifications des avantages sociaux;</li>   <li>négociations relatives à la capitalisation;</li>   <li>placements directs dans d&#39;autres solutions (comme des projets d&#39;infrastructure);</li>   <li>et transfert des risques à tous les niveaux.</li>  </ul>    <p>Nous analysons vos besoins et nous appliquons à y répondre, en plus de répondre à vos questions de nature juridique. Notre mission? Nous assurer que vous posiez les bonnes questions, trouver le moyen le plus rentable d&#39;aller de l&#39;avant et envisager toutes les conséquences potentielles de vos décisions. En faisant équipe avec nous, vous recevrez des conseils marqués sous le sceau de l&#39;innovation.</p>    <p>Comme nous travaillons pour toutes les parties dans le domaine des régimes de retraite, souvent à l&#39;international, nous en connaissons tous les aspects. Parmi nos clients, nous comptons des&nbsp;:</p>    <ul>   <li>actuaires;</li>   <li>conseillers ou administrateurs;</li>   <li>compagnies d&#39;assurance;</li>   <li>fiduciaires;</li>   <li>gouvernements et organismes nationaux et régionaux;</li>   <li>organismes sectoriels (de réglementation notamment);</li>   <li>et des promoteurs de régimes de retraite.</li>  </ul>    <p>Auprès de nos avocats chevronnés en matière de régimes de retraite, vous obtiendrez des conseils juridiques sur divers problèmes connexes avant même qu&#39;ils se manifestent. Pour trouver la tranquillité d&#39;esprit à laquelle vous aspirez, veuillez communiquer avec notre équipe.</p>  ",GWLG.Global,91c9c57f-d1b5-4113-862f-60addeffaa4f;b932ec2d-5f3e-413d-a75f-2269018135a2,A19C4C5E-C05A-4FA5-95AA-C5A274279D8C,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C9573CE8-3032-4368-A2F6-75C972CC3708}|{A4F26BC7-4AD5-4286-A317-3A49C6C3EAAE}
378,/Services/Medical-Defence-Health-Law/Overview,fr-CA,DE7BE534-8C09-469D-B18A-87888AC1A596,Aperçu,Aperçu,"Le secteur de la médecine et de la santé évoluant constamment, il vous faut une protection robuste pour faire face à toute épreuve. ",NULL,NULL,"<p>Le secteur de la médecine et de la santé évoluant constamment, il vous faut une protection robuste pour faire face à toute épreuve. Que ce soit pour défendre vos droits à titre de professionnel ou dans le cadre d&#39;une enquête des autorités de réglementation, ou encore pour une atteinte à votre réputation ou à vos produits, il est essentiel que vous puissiez compter sur des experts qui comprennent la loi, mais surtout, votre univers.</p>    <p>Ce qui nous intéresse chez Gowling&nbsp;WLG, c&#39;est la protection des professionnels de la santé et des entreprises de ce secteur. Notre équipe compte plus d&#39;un siècle d&#39;expérience en défense en responsabilité des professionnels de la santé et en sciences de la santé, et plus de 100&nbsp;professionnels travaillent dans votre secteur.</p>    <p>Que vous soyez un professionnel de la santé ou une société pharmaceutique, d&#39;équipement médical ou de biotechnologie, nous pouvons nous adapter à la complexité de votre situation.</p>    <p>Dans le cas des professionnels de la santé, nous vous suivons dans votre pratique, et nous protégeons vos objectifs professionnels et votre réputation. Si vous êtes une entreprise innovante en sciences de la vie, nous vous appuierons pendant tout le cycle de vie de vos produits, des premiers&nbsp;stades de la recherche aux approbations réglementaires, à la commercialisation et à l&#39;incidence sur le marché.</p>    <p>Grâce à nos connaissances médicales et scientifiques approfondies, nous parlons le même langage que vous. Nombre de nos professionnels ont une formation en sciences, en médecine et en technologies connexes, ce qui fait que nous sommes les mieux placés pour vous défendre contre des allégations pouvant nuire à votre vie professionnelle ou à vos produits.</p>    <p>Par ailleurs, que ce soit auprès des collèges autoréglementés ou des organismes de réglementation gouvernementaux, nous avons contribué à façonner le cadre réglementaire qui régit vos activités, en travaillant toujours dans votre intérêt. De plus, chacun des dossiers qui nous est confié vient enrichir notre base de connaissances, ce qui dénote à quel point nous évoluons au diapason de votre industrie.</p>    <p>En matière de gestion des dossiers de litige, nous sommes connus pour notre façon de faire transparente et nous sommes des leaders confirmés dans l&#39;élaboration et l&#39;adoption d&#39;outils et d&#39;approches efficaces, dont <a href=""https://gowlingwlg.com/fr/services/practical-lpm-by-gowling-wlg/canada"">GPJ&nbsp;PratiqueMC</a> &nbsp;(notre plateforme de gestion de projets juridiques personnalisée), la gestion des connaissances, la gestion des fichiers et dossiers électroniques, et l&#39;établissement d&#39;un budget par projet. Nous avons aussi recours à des modes alternatifs de tarification (tarification hybride, conditionnelle au succès ou à la valeur ajoutée, et honoraires fixes ou plafonnés).</p>    <h3>Voici nos domaines d&#39;expertise&nbsp;:</h3>    <ul>   <li>aliments et boissons;</li>   <li>biotechnologie, bio-ingénierie;</li>   <li>conformité réglementaire;</li>   <li>cosmétiques;</li>   <li>gestion de crise et gestion des médias;</li>   <li>gestion des dossiers de santé électroniques;</li>   <li>gestion des risques;</li>   <li>gestion des données de santé transfrontalières et des violations de données;</li>   <li>processus d&#39;approbation de l&#39;équipement médical et des médicaments;</li>   <li>produits agricoles;</li>   <li>produits biologiques;</li>   <li>produits de santé naturels, y&nbsp;compris les suppléments;</li>   <li>produits pharmaceutiques;</li>   <li>rappels et enquêtes en santé publique;</li>   <li>recherche de produits et sociétés de recherche sous contrat;</li>   <li>réglementation et responsabilité professionnelles;</li>   <li>responsabilité du fait des produits;</li>   <li>soins et traitements en milieu clinique;</li>   <li>et tarification et remboursement des médicaments.</li>  </ul>    <p>Vos contributions et celles de vos collègues en matière de santé améliorent la qualité de vie de tout un chacun. Nous en sommes reconnaissants et ce serait une grande fierté de pouvoir faire équipe avec vous. Pour en savoir plus sur nos services, n&#39;hésitez pas à communiquer avec nous.</p>  ",GWLG.Global,54584e1a-f44e-4d61-9efe-eeecf78d7cc1,55B82F16-382D-4D6B-8BBB-590924E54046,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{68E51A97-CE73-432D-A521-DE68604E9DCE}
379,/Services/Private-Client-Services/Overview,fr-CA,EEC9A60A-3622-4A2F-9E06-6160C039FC36,Aperçu,Aperçu,"Nombre de particuliers à hauts revenus partagent des préoccupations communes : règles fiscales qui changent constamment, enjeux successoraux, et protection de l'actif, pour n'en nommer que quelques-unes. ",NULL,NULL,"<p>Nombre de particuliers à hauts revenus partagent des préoccupations communes&nbsp;: règles fiscales qui changent constamment, enjeux successoraux, et protection de l&#39;actif, pour n&#39;en nommer que quelques-unes. Chez Gowling&nbsp;WLG, nous comprenons cela, car notre équipe chevronnée de droit successoral conseille les familles les plus fortunées aux quatre coins du monde ainsi que les gestionnaires de patrimoine familial, les banques et les fiduciaires à l&#39;étranger&nbsp;qui travaillent avec ces dernières.</p>    <p>Pour vous guider dans ce dédale en constante évolution, il vous faut une équipe juridique qui possède les qualités suivantes&nbsp;:</p>    <ul>   <li><strong>Expérience de longue date</strong>&nbsp;: notre vaste expérience de conseil à des particuliers fortunés, acquise au fil de nombreuses générations, nous permet d&#39;éviter la courbe d&#39;apprentissage susceptible de causer des retards et d&#39;ajouter des coûts. Si un problème survient, nous trouverons la solution. Vous pouvez vous attendre à des solutions rapides adaptées à votre situation particulière, et fondées sur ce que nous avons appris de notre expérience avec d&#39;autres familles.</li>   <li><strong>Orientation commerciale</strong>&nbsp;: en plus de nos connaissances techniques, nous sommes forts d&#39;une grande rigueur sur le plan commercial, car de nombreuses familles auprès desquelles nous travaillons possèdent de grandes entreprises et ont besoin notamment d&#39;une expertise innovante en structuration de patrimoine.</li>   <li><strong>Orientation internationale</strong>&nbsp;: nos bureaux internationaux et notre réseau de contacts dans le secteur extraterritorial font que, où que vous soyez, vous travaillerez avec une équipe qui maîtrise les lois locales en matière de fiscalité et de succession. Nous disposons d&#39;une expertise particulière au Moyen-Orient et en Extrême-Orient, où nous avons des bureaux à Dubaï, à Beijing, à Guangzhou et à Singapour. Avec des bureaux dans toute l&#39;Europe et au Canada, nous avons aussi des liens solides avec les îles Anglo-Normandes, l&#39;île de Man, la Suisse, les Bermudes, les Caraïbes et l&#39;Amérique du Sud.</li>  </ul>    <p>Notre équipe est réputée pour son travail international et ses services-conseils dans les domaines suivants&nbsp;:</p>    <ul>   <li>administration de successions internationales;</li>   <li>enjeux successoraux;</li>   <li>fiducies litigieuses;</li>   <li>gouvernance familiale;</li>   <li>immigration;</li>   <li>planification de la relève;</li>   <li>planification fiscale au Royaume-Uni et au Canada;</li>   <li>planification successorale internationale;</li>   <li>structures de détention d&#39;actifs transfrontaliers avantageuses sur le plan fiscal pour les particuliers à hauts revenus;</li>   <li>et transfert de propriétés résidentielles de grande valeur.</li>  </ul>    <h3>Des solutions sur mesure pour les particuliers à hauts revenus</h3>    <p>Comment transférer mon entreprise à ma descendance? Quelle est la meilleure structure à mettre en place avant de vendre ma société? Quels que soient vos objectifs ou vos préoccupations à titre de particulier à hauts revenus, nos avocats de renommée internationale trouveront la meilleure solution pour vos besoins personnels et d&#39;affaires. C&#39;est pourquoi nos clients internationaux, dont 35&nbsp;milliardaires, choisissent de travailler avec nous.</p>    <p>Les gestionnaires de patrimoine et les fiduciaires font appel à nous pour obtenir des conseils d&#39;experts sur la mise en œuvre de structures de planification fiscale et successorale internationales robustes. Nous aidons aussi des clients de banques privées et d&#39;autres personnes ayant des visées philanthropiques à réaliser leurs objectifs dans ce domaine en mettant sur pied des structures de bienfaisance.</p>    <h3>Partenaires de vos ambitions</h3>    <p>Notre équipe offre également son expertise en matière de successions et de fiducies pour régler des différends à l&#39;échelle nationale ou à l&#39;étranger. L&#39;équipe aide les clients à éviter les litiges par la constitution de structures de fiducie sécurisées et d&#39;arrangements de famille, et en offrant des conseils sur les régimes matrimoniaux. Les conseils de spécialistes en matière de risques administratifs et de dispositions réglementaires peuvent aussi aider à éviter et à gérer l&#39;exposition des clients à des différends potentiels.</p>    <p>Lorsqu&#39;un litige ne peut être évité, nous disposons d&#39;une grande expérience en gestion des atteintes à la réputation, en gestion de projets lors de poursuites en justice impliquant diverses juridictions, et en négociation dans des situations de conflit de lois.</p>    <p>Pour découvrir comment nous pouvons répondre à vos besoins, n&#39;hésitez pas à communiquer avec un membre de notre équipe.</p>  ",GWLG.Global,159cc9f9-3c5b-460e-930b-1abbec4ed250,231F78A0-0796-40D1-A428-F3F450094B7B,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{CD875495-DB4D-4891-892D-24115E43DBE5}
382,/Services/Patents/Overview,fr-CA,0856F682-DBC0-42FF-9DE8-8E049EE40FC5,Aperçu,Aperçu,"Protéger vos innovations engendre une succession de défis inédits et sans précédent, notamment en raison des avancées effrénées des nouvelles technologies. ",NULL,NULL,"<p>Protéger vos innovations engendre une succession de défis inédits et sans précédent, notamment en raison des avancées effrénées des nouvelles technologies.&nbsp;</p>    <p>Pour préserver vos droits avec confiance et minimiser les risques à long terme, votre organisation doit pouvoir compter sur une équipe d&#39;experts juridiques hautement qualifiés apte à vous proposer des solutions concrètes. Cette équipe doit tout autant être dotée d&#39;une longue expérience en droit des brevets ainsi que d&#39;une feuille de route convaincante au chapitre de la protection et du respect des droits de propriété intellectuelle (PI) à l&#39;international.&nbsp;</p>    <p>L&#39;équipe des brevets de Gowling WLG jouit d&#39;une réputation internationale inégalée tant pour ses connaissances de l&#39;industrie que pour sa représentation efficace à l&#39;égard de tous les aspects des brevets.&nbsp;</p>    <p>Des entreprises en démarrage innovantes, aux universités et instituts de recherches, en passant par les multinationales, notre équipe brevet veille au dépôt, à la commercialisation et à la protection des brevets et des dessins industriels dans une variété de domaines. Notre riche expérience nous permet de vous aider à surmonter n&#39;importe quel problème complexe dans un langage que vous comprendrez.&nbsp;</p>    <p>Nous vous offrons une gamme complète de services liés à la poursuite de demandes de brevet au Canada, en Chine et aux Émirats arabes unis (EAU), ainsi que des services en litige et support transactionnel au Canada, en Europe, en Russie, en Chine et aux EAU. De plus, nous mettons à profit notre solide réseau de cabinets juridiques alliés d&#39;envergure pour vous donner une portée véritablement mondiale.&nbsp;</p>    <p>Disponibles, dévoués, axés sur les résultats et les clients, nous sommes des conseillers de confiance pour les plus éminents et exigeants innovateurs du monde, fournissant protection et stratégies au service de votre réussite.&nbsp;</p>    <h3>Notre équipe des brevets couvre les aspects suivants&nbsp;:&nbsp;</h3>    <ul>   <li>Développement de portefeuille de brevets et dessins industriels (design)&nbsp;</li>   <li>Développement de portefeuille de modèles d&#39;utilité (Chine et Russie)&nbsp;</li>   <li>Droit de la concurrence&nbsp;</li>   <li>Ententes de licences et mandats transactionnels&nbsp;</li>   <li>Fiscalité&nbsp;</li>   <li>Litige, arbitrage et médiation&nbsp;</li>   <li>Protection des obtentions végétales&nbsp;</li>   <li>Secrets commerciaux et renseignements confidentiels&nbsp;</li>   <li>Technologie&nbsp;</li>   <li>Traduction (Russie et Chine)&nbsp;</li>  </ul>    <p>En choisissant Gowling WLG, vous optez pour une équipe primée en matière de brevets (agents et avocats) qui constitue une référence pour les innovateurs souhaitant maximiser la protection et la défense de leurs droits.&nbsp;</p>    <p>Outre nos connaissances dans le domaine des brevets, notre expérience couvre tous les domaines technologiques et notamment la biotechnologie, la pharmaceutique, les télécommunications, l&#39;électronique, la fabrication de semi-conducteurs, les produits de consommation et l&#39;énergie, y compris les plus récentes technologies comme l&#39;infrastructure &laquo;&nbsp;Cloud&nbsp;&raquo;, les dispositifs portables et les nanotechnologies.&nbsp;</p>    <p>Notre portée géographique nous permet de coordonner les mandats que vous nous confiez à l&#39;échelle de nos bureaux mondiaux pour que vous puissiez bénéficier de conseils éclairés sur des questions complexes, notamment sur la gestion de dépôts à l&#39;étranger, les litiges multiterritoriaux, l&#39;octroi de licences et autres exigences en matière d&#39;exportation de technologie, les sanctions et toute autre question de conformité. Grâce à notre réseau international de cabinets alliés, nous coordonnons et dirigeons également la poursuite de demandes de brevets et de dessins industriels à l&#39;échelle mondiale.&nbsp;</p>    <p>Vos droits de propriété intellectuelle sont précieux. L&#39;équipe de Gowling WLG peut les protéger, les faire respecter et les défendre de manière à en maximiser la valeur. Pour découvrir comment nous pouvons vous aider à le faire, n&#39;hésitez pas à contacter l&#39;un ou l&#39;autre de nos membres.&nbsp;</p>  ",GWLG.Global,6767b2fc-7817-42ae-a54e-05595fe6c1cd;09384fee-e32a-4187-a414-c9d17129c184,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}|{A906D811-6A7A-4DCF-AED8-23EEAE8E3B78}
383,/Services/Litigation-Dispute-Resolution/Overview,fr-CA,87D154CB-0FAD-41E7-BD1C-8A73DA61F0B0,Aperçu,Aperçu,"Plusieurs événements peuvent mener votre entreprise à un conflit : accord rompu, enquête menée par une agence gouvernementale, comparution devant un tribunal administratif, perte imprévue, désaccord avec des actionnaires, etc. ",NULL,NULL,"<p>Plusieurs événements peuvent mener votre entreprise à un conflit&nbsp;: accord rompu, enquête menée par une agence gouvernementale, comparution devant un tribunal administratif, perte imprévue, désaccord avec des actionnaires, etc.</p>    <p>Lorsqu&rsquo;un différend survient, vous pouvez compter sur Gowling WLG car nous savons à quel point les litiges peuvent avoir des répercussions négatives sur les activités quotidiennes de votre entreprise. Notre priorité est donc de réduire les coûts, minimiser les inconvénients, et protéger votre marque du début à la fin du différend.</p>    <p>Grâce à notre connaissance de votre entreprise, nous sommes en mesure de travailler avec vous pour trouver des solutions qui s&rsquo;harmonisent à vos objectifs commerciaux. Vous avez des obstacles à surmonter ou des occasions à saisir? Axés sur les résultats, nous trouverons les moyens les plus créatifs et les plus efficaces d&rsquo;y parvenir. Nos services de règlement de différends sont accessibles dans le monde entier, et comprennent le règlement efficace de litiges transfrontaliers, la gestion de projet intégrée, le tout accompagné de conseils stratégiques propres au territoire.</p>    <p>Nous vous aidons à chaque étape du processus de règlement de différends, de la négociation et la médiation à l&rsquo;arbitrage et l&rsquo;action en justice. En plus d&rsquo;effectuer une recherche minutieuse des faits et une analyse des risques, nous abordons chaque étape avec attention et appliquons notre approche conformément à la stratégie établie ensemble. Nous veillons également à ce que les comparutions devant les tribunaux soient gérées avec efficacité afin d&rsquo;en tirer le meilleur parti.</p>    <p>Tout au long du processus, nous rendons compte de la situation et la réévaluons régulièrement pour nous assurer de répondre à vos attentes, voire les surpasser.</p>    <h3>Nous prodiguons des conseils sur toutes les formes de litige&nbsp;:</h3>    <ul>   <li>Arbitrage international</li>   <li>Assurance et réassurance</li>   <li>Délits environnementaux et toxiques</li>   <li>Différends contractuels</li>   <li>Différends entre actionnaires</li>   <li>Dommages matériels</li>   <li>Droit bancaire</li>   <li>Droit commercial</li>   <li>Droit de la construction</li>   <li>Droit du travail et de l&#39;emploi</li>   <li>Enquêtes et droit pénal des affaires</li>   <li>Fraude</li>   <li>Gestion de crise</li>   <li>Gestion de l&#39;habitation</li>   <li>Insolvabilité</li>   <li>Propriété intellectuelle</li>   <li>Recours collectifs</li>   <li>Réglementation/conformité/enquêtes</li>   <li>Responsabilité des administrateurs et des dirigeants</li>   <li>Responsabilité du fait des produits</li>   <li>Responsabilité professionnelle</li>   <li>Technologies de l&#39;information</li>   <li>Transports</li>   <li>Valeurs mobilières</li>  </ul>    <p>Nous sommes passés maîtres dans l&rsquo;élaboration et la mise en place d&rsquo;outils opportuns, efficaces et axés sur la valeur nous permettant d&rsquo;assurer la gestion des litiges avec transparence, ce qui est essentiel aux besoins de votre entreprise. Parmi ces outils, on compte entre autres GPJ Pratique (notre plateforme de gestion de projets juridiques personnalisée), la budgétisation de projets, la gestion du savoir, ainsi que les ententes spéciales quant aux honoraires et à la facturation (honoraires fixes, taux plafonnés, taux pondérés, honoraires conditionnels ou taux axés sur les résultats ou le rendement).</p>    <p>Quels que soient votre situation ou vos objectifs commerciaux, Gowling WLG possède l&rsquo;expérience, le réseau international et l&rsquo;expertise juridique nécessaires pour vous aider à atteindre vos objectifs.</p>    <p>Pour découvrir comment nous pouvons vous aider, veuillez contacter <a href=""~/fr/people/davinia-gransbury"">Davinia Gransbury</a> (Royaume-Uni) ou <a href=""~/fr/people/mary-thomson"">Mary M.&nbsp;Thomson</a> (Canada).</p>  ",GWLG.Global,90573229-adbc-497c-9e6e-7ee61952f25b;759bfb1e-8027-465c-b5fa-e9f445cf2182,82475447-1CF2-4AA7-9A23-24E5B1A7B3BD,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{DB180194-4B02-46F8-A0CE-0DFB051009EE}|{16703D48-CE3A-435A-A12B-1BB4423C78FE}
384,/Services/Banking-Finance/UAE,fr-CA,EBD83957-CA9F-4E53-A66D-ABCF7F67B45D,EAU,EAU,L'équipe de Gowling WLG peut vous fournir la sécurité dont vous avez besoin pour financer votre croissance et votre expansion.,NULL,NULL,"<p>Security: it matters a great deal to you - particularly when it comes to financing your growth and expansion. In an uncertain world, where technology is disrupting the way everything is done, you need to ensure that you have the finances in place to meet your ambitions across the Middle East region.</p>    <p>The Gowling WLG team can provide you with that security. We&#39;ve been based in Dubai for more than 10 years, and have a full grasp of the area&#39;s financial landscape. Our professionals possess a detailed understanding of your competitive, regulatory and legislative environments, as well as their emerging economic trends.</p>    <p>Drawing from the expertise of our cross-disciplinary industry groups, our team will always innovate on your behalf to offer creative solutions that are tailored to your specific goals.</p>    <p>We offer a wide range of finance services and collaborate with our corporate team to advise on equity, hedge fund and venture capital financing, as well as facility agreements.</p>    <p>In addition, we have an unmatched breadth of experience in the essential areas of Islamic, conventional and project financing. You can count on our on-the-ground advice to be efficient and, above all, accurate.</p>    <h3>Learn more</h3>    <p>If you&#39;re looking for a team with a commercial and pragmatic approach that&#39;s fully embedded in the Middle East, then we&#39;re fully primed to offer you the security you demand.</p>  ",GWLG.UAEDubai,7059cc87-a926-43b7-9bc2-ac05557e9e16,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,7059cc87-a926-43b7-9bc2-ac05557e9e16
386,/Services/Banking-Finance/UK,fr-CA,907B97EF-69EC-4BD9-A72A-1B16BCA86203,Royaume-Uni ,Royaume-Uni ,"Le fait de compter sur l’équipe qui conseille déjà bon nombre des plus grandes banques, institutions financières et grandes entreprises du monde est un avantage majeur du choix de l’équipe financière de Gowling WLG.",NULL,NULL,"<p>The confidence that only comes from working with a team already advising many of the world&#39;s leading banks, financial institutions and major corporate clients is a major advantage of choosing the Gowling WLG finance team.</p>    <p>Greater than the sum of its total parts, the team is known for:</p>    <ul>   <li><strong>High levels of expertise</strong> - inside experience from previous in-house roles, access to related legal experts in private equity, pensions, litigation, real estate and funds, plus sector expertise give the team an added edge. Client feedback in Chambers praises the team for being &quot;extremely commercial and always prepared to give a view&quot;, &quot;practically minded&quot; while &quot;their opinions are thorough and provided quickly&quot;</li>   <li><strong>Exceptional service</strong> - our team is &quot;professional, well run ... prepared to go that extra mile&quot; and has &quot;magic circle quality but with a refreshing personal touch&quot;. One of the team&#39;s partners will work with you at every stage of your transaction to ensure you &quot;get partner input and market knowledge&quot;, and achieve the best possible outcome</li>   <li><strong>Developing lasting relationships</strong> - some of the our longstanding clients and repeat panel appointments include HSBC, Bank of America, BNP Paribas, Deutsche Bank, RBS, European Investment Bank, Santander, Handelsbanken and Bank of Ireland</li>  </ul>    <p>Financial institutions, major corporates and public bodies also choose us. The likes of Ballymore Properties, Sanctuary Housing Association, Bridgepoint, CBPE Capital, Conygar Investments, Dyson, Euro Exide Corporation, GE Capital, Isis Equity Partners, JP Morgan Asset Management, Lyceum Capital, Marks &amp; Spencer, Mazda, Mercedes Benz and Smith News plc and Pension Insurance Corporation Limited.</p>    <p>The team provides a full service in all types of general corporate and investment grade financing, both in a national and an international context, through the following sub-teams:</p>    <ul>   <li><strong>Leveraged finance</strong> - Advising lenders, borrowers, infrastructure funds and private equity houses on structuring and negotiation of a wide range of transactions across different industry sectors and in different jurisdictions</li>   <li><strong>Asset finance/invoice discounting</strong> - All elements of asset based finance are covered including invoice and receivables finance, leasing, equipment finance, asset based facilities and syndicated facilities</li>   <li><strong>General banking and derivatives</strong> - We advise a wide range of corporates, banks, pension trustees and other organisations on their financing needs and facilities, including derivative products and other specialist products including funds at Lloyd&#39;s</li>   <li><strong>Real estate finance</strong> - Together with our leading real estate practice, we advise banks, funds and other financial institutions as well as borrowers on all aspects of real estate financing, including innovative structures and large portfolio financings</li>   <li><strong>Capital markets and securitisation</strong> - With a reputation for innovation in funding, the team advises issuers, sponsors, funds and originators on raising finance through securitisation, capital markets issues and other treasury products</li>   <li><strong>Restructuring and Corporate Recovery</strong> - Working with insolvency practitioners, banks, institutional investors, asset-based lenders, LPA receivers, corporates and company directors, the team offers advice on the full range of corporate recovery and insolvency related work and LPA appointment. Highlights for the team include securing the future of the iconic black cab on behalf of Manganese Bronze Holdings and heavy involvement in the restructuring of UK Coal</li>  </ul>  ",GWLG.UK,NULL,CCB3B009-BA81-4FF5-8E8A-9200813A2A54,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
387,/Services/IP-Litigation-Strategy/Overview,fr-CA,9E04BE25-E976-4178-B50E-7D6F0CD553CD,Aperçu,Aperçu,"Protéger et promouvoir vos actifs de propriété intellectuelle (PI) nécessite une approche stratégique, une planification minutieuse et une vigilance constante. Quand vos droits de PI sont menacés, vous devez être en mesure de les faire valoir dans le monde entier. ",NULL,NULL,"<p>Protéger et promouvoir vos actifs de propriété intellectuelle (PI) nécessite une approche stratégique, une planification minutieuse et une vigilance constante. Quand vos droits de <abbr title=""Propriété Intellectuelle"">PI</abbr> sont menacés, vous devez être en mesure de les faire valoir dans le monde entier.</p>    <p>Si vous souhaitez retenir les services d&rsquo;une équipe internationale de professionnels capable de travailler étroitement avec ses clients, Gowling&nbsp;WLG est la référence pour les litiges en <abbr title=""Propriété Intellectuelle"">PI</abbr>, et ce depuis plus de 100&nbsp;ans.</p>    <p>Le règlement des litiges en <abbr title=""Propriété Intellectuelle"">PI</abbr> est l&rsquo;une des principales forces de notre cabinet, et nous savons comment obtenir les résultats souhaités. Qu&rsquo;il s&rsquo;agisse d&rsquo;un litige en <abbr title=""Propriété Intellectuelle"">PI</abbr> qui menace l&rsquo;existence même de votre société ou d&rsquo;une modeste escarmouche, nous travaillons avec vous afin d&rsquo;obtenir les résultats qui correspondent à vos objectifs d&rsquo;affaires.</p>    <p>Considérés comme des chefs de file de leur secteur à l&rsquo;échelle mondiale, nombre de nos professionnels classés parmi les meilleurs dans leur domaine sont formés en génie ou en sciences, nous apportant ainsi des capacités d&rsquo;analyse technique essentielles pour les dossiers de brevets ou de secrets commerciaux. Qu&rsquo;il s&rsquo;agisse de produits pharmaceutiques ou de logiciels, nous comprenons votre technologie.</p>    <p>Nos services&nbsp;comprennent&nbsp;:</p>    <h3>Brevets</h3>    <ul>   <li>Conseils et soutien pour les recours en justice quant aux médicaments brevetés&nbsp;et l&rsquo;inscription au registre des brevets</li>   <li>Enjeux de concurrence&nbsp;</li>   <li>Enjeux liés au cycle de vie des produits (dont les questions de réglementation)</li>   <li>Exclusivité des données</li>   <li>Licences de brevets &ndash; Dossiers contentieux et précontentieux</li>   <li>Protection des droits de PI de sociétés innovantes</li>   <li>Protection et respect des brevets</li>  </ul>    <h3>Droit d&rsquo;auteur, dessins industriels et secrets commerciaux</h3>    <ul>   <li>Poursuites liées au droit d&rsquo;auteur et défense en la matière</li>   <li>Poursuites liées aux dessins industriels</li>   <li>Protection des secrets commerciaux et défense en la matière &ndash; dossiers contentieux et précontentieux</li>  </ul>    <h3>Marques de commerce</h3>    <ul>   <li>Annulation et radiation</li>   <li>Lutte contre la contrefaçon et respect des marques de commerce (sous juridiction civile et pénale)</li>   <li>Mesures visant à faire respecter les droits à la frontière</li>   <li>Poursuites liées à la publicité comparative</li>   <li>Protection et respect des marques de commerce et litiges y afférents</li>  </ul>    <p>Nos experts travaillent partout dans le monde&nbsp;: où que vous soyez, ils peuvent vous aider. Notre équipe européenne a gagné des causes devant la Cour de justice européenne et les tribunaux du Royaume-Uni, de l&rsquo;Allemagne et de la France. Les avocats de notre bureau de Moscou possèdent une grande expérience de la protection et de l&rsquo;application des droits de <abbr title=""Propriété Intellectuelle"">PI</abbr> auprès des tribunaux russes, des autorités antitrust et des divers organismes gouvernementaux chargés de l&rsquo;application de la loi, dont les douanes.</p>    <p>Au Canada, nos avocats plaidants interviennent dans plus de procédures devant la Cour fédérale que tout autre cabinet, et plaident fréquemment dans des affaires de brevets et de marques de commerce devant toutes les instances des tribunaux canadiens.</p>    <p>Notre équipe en Chine possède une vaste expérience au chapitre de la protection des brevets, des modèles d&rsquo;utilité, des dessins et des marques de commerce devant les tribunaux chinois. Toutes les options sont explorées &ndash; procédures administratives, système douanier, etc. &ndash; pour produire les résultats recherchés par nos clients.</p>    <p>Quant à l&rsquo;équipe des Émirats arabes unis (EAU), elle possède également une grande expérience de la protection et de l&rsquo;application des droits de <abbr title=""Propriété Intellectuelle"">PI</abbr> tant aux EAU qu&rsquo;ailleurs au Moyen-Orient, notamment devant les tribunaux nationaux et auprès des autorités, dont le service des douanes.</p>    <p>En matière de PI, il vous faut une protection mondiale par des professionnels qui comprennent votre entreprise. Fiez-vous à Gowling&nbsp;WLG pour protéger vos actifs et vos droits de <abbr title=""Propriété Intellectuelle"">PI</abbr>, et n&rsquo;hésitez pas à communiquer avec nous pour découvrir notre vaste gamme de services.</p>  ",GWLG.Global,NULL,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
388,/Services/IP-Litigation-Strategy/China,fr-CA,CF02943A-F058-4F0B-BBB1-80BFB61E0EC9,Chine,Chine,"With our mix of Western and Chinese knowledge and expertise and our wide network of investigation agents and local counsel, Gowling WLG can be the guide you need. Driven to find practical solutions, we understand the concerns and frustrations that you have when looking to litigate in China. We can pre-empt these issues by using our deep understanding of the court system throughout the country.",NULL,NULL,"<p>Doing business in China can be challenging. When you&#39;re selling products and services, protecting and enforcing your intellectual property is possible but difficult. Expert, strategic advice is required at the outset.</p>    <p>China&#39;s court system and available dispute resolution options can also present problems. You need to understand which courts are right for you and how best to present your case to maximise your chances of winning.</p>    <p>With our mix of Western and Chinese knowledge and expertise and our wide network of investigation agents and local counsel, Gowling WLG can be the guide you need. Driven to find practical solutions, we understand the concerns and frustrations that you have when looking to litigate in China. We can pre-empt these issues by using our deep understanding of the court system throughout the country.</p>    <p>Our China team has the support of a global platform, which allows work to be carried out around the clock. You&#39;ll also benefit from our wide sector knowledge in key areas such as tech, automotive, advanced manufacturing, fast-moving consumer goods (FMCG) and life sciences.</p>    <p>We have an impressive track record of acting for companies of all different shapes and sizes. We&#39;ve managed well over 150 cases against infringing companies with an unprecedented success rate. In 2016, we achieved a take-down rate of approximately 95% for infringing links as a result of vigilant internet monitoring and online enforcement.</p>    <p>We manage the litigation of a wide range of IP rights, including infringement opinions, civil actions and administrative actions.</p>    <h3>Learn more</h3>    <p>We always strive to become an extension of your team. Get in touch with our award-winning team and let&#39;s protect your interests together.</p>  ",GWLG.China,324b94dc-effd-40f6-9b4b-de402aa7d013;a7b766bf-7e7c-4961-887d-1acbebd19ed4;b99b67c2-ee8b-4545-99ec-65c66e10278f;69b13bf2-abe8-4151-b3db-86f73482fb9e,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,324b94dc-effd-40f6-9b4b-de402aa7d013|a7b766bf-7e7c-4961-887d-1acbebd19ed4|{F85F7148-7F31-47AA-AB00-553293591079}|69b13bf2-abe8-4151-b3db-86f73482fb9e
391,/Services/IP-Litigation-Strategy/UK,fr-CA,7CFA97C9-AEDD-4DD0-B0BD-56C78B190F4E,Royaume-Uni ,Royaume-Uni ,"For over 125 years, Gowling WLG has been helping the world’s top organisations maximise their intellectual property assets and protect what makes them unique.",NULL,NULL,"<p>Ranked as a top-tier IP litigation team by the world&rsquo;s leading legal publications, Gowling WLG&rsquo;s unique combination of legal experience and in-depth industry knowledge enables us to better understand your business and protect the full value of your IP.</p>    <p>For over 125 years, Gowling WLG has been helping the world&rsquo;s top organisations maximise their intellectual property assets and protect what makes them unique.</p>    <p>From &ldquo;bet the company&rdquo; IP litigation to the smallest skirmish, our top-ranked IP litigators can work with you to obtain outcomes that are strategically aligned with your business goals.</p>    <p>We&rsquo;ve successfully represented clients in all levels of court and administrative tribunals on cases involving trademark and patent infringement and validity, the misappropriation of confidential information and theft of trade secrets, IP licensing disputes, and copyright infringement.</p>    <p>Gowling WLG provides services to clients across a wide range of industries &mdash; from life sciences, energy and natural resources to information technology, entertainment, aviation, manufacturing and automotive. Our broad sector-focused expertise allows us to understand the areas that matter to your business and the specific needs of your industry. Our services include the following:</p>    <h3>Copyright, design and trade secrets</h3>    <ul>   <li>Copyright litigation and advocacy</li>   <li>Design right litigation</li>   <li>Trade secret enforcement and defence - both litigation and pre-litigation</li>  </ul>    <h3>Patents</h3>    <ul>   <li>Patent enforcement and defence</li>   <li>Patented medicines advice and litigation, including listing</li>   <li>Data package exclusivity</li>   <li>Product life cycle issues, including regulatory</li>   <li>Protecting innovator rights</li>   <li>Licensing - both litigation and pre-litigation</li>   <li>Related competition issues</li>  </ul>    <h3>Trademarks</h3>    <ul>   <li>Trademark enforcement and litigation</li>   <li>Border enforcement</li>   <li>Impeachment and cancellation</li>   <li>Anti-piracy and enforcement (civil and criminal)</li>   <li>Comparative advertising litigation</li>  </ul>    <p>The protection and promotion of your intellectual property assets requires strategic thinking, careful planning and constant vigilance. When your IP is threatened, you need the support of a top-ranked legal team.</p>    <p>Our UK team delivers practical, cost-effective legal advice to help you grow and protect your business &mdash; wherever it takes you. Please get in touch with us to find out how we can help you.</p>  ",GWLG.UK,6767b2fc-7817-42ae-a54e-05595fe6c1cd,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}
392,/Services/IP-Litigation-Strategy/UAE,fr-CA,AE4C3193-7725-4DC3-9530-64480B46FF2C,EAU,EAU,"Whether you are selling products or services, protecting and enforcing your intellectual property in the MENA region is possible, provided you have the rights upon which to bring an action. Expert, strategic advice is required at the outset.",NULL,NULL,"<p>Doing business in the United Arab Emirates (UAE) and wider Middle East and North Africa (MENA) region can be challenging. Whether you are selling products or services, protecting and enforcing your intellectual property in the <abbr title=""Middle East and North Africa"">MENA</abbr> region is possible, provided you have the rights upon which to bring an action. Expert, strategic advice is required at the outset.</p>    <p>As a region which is generally civil law based, the court systems and available dispute resolution options can also present problems, particularly for rights holders from common law jurisdictions. You need to understand which options are right for you taking into account the circumstances of the dispute. We can assist you to maximise your chances of achieving the preferred result for your business.</p>    <p>With our mix of Western and Arab knowledge and expertise, Gowling WLG can be the guide you need in the Middle East. Driven to find practical solutions, we understand the concerns and frustrations that you have when looking to litigate in <abbr title=""Middle East and North Africa"">MENA</abbr> countries. We can pre-empt these issues by using our deep understanding of the court systems and enforcement options throughout the region.</p>    <p>Our <abbr title=""United Arab Emirates"">UAE</abbr> based team has the support of a global platform, which allows work to be carried out around the clock. You&#39;ll also benefit from our wide sector knowledge in key areas such as tech, automotive, fast-moving consumer goods (FMCG), hospitality, retail, and life sciences.</p>    <p>We manage the litigation of a wide range of intellectual property (IP) rights, including infringement opinions, criminal actions, civil actions and administrative actions, as well as working closely with custom authorities.</p>    <h3>Learn more</h3>    <p>We always strive to become an extension of your team. Get in touch with our award-winning team and let&#39;s protect your interests together.</p>  ",GWLG.UAEDubai,4baeb47b-7f23-4fe4-a387-8f8097912506,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4baeb47b-7f23-4fe4-a387-8f8097912506
394,/Services/Mergers-Acquisitions/Overview,fr-CA,E41D9738-BAD0-466B-8F2A-29F8E0621F0C,Aperçu,Aperçu,"Le marché mondial des fusions et acquisitions a été très dynamique ces dernières années. Ayant participé à de nombreuses transactions internationales d’envergure, en particulier dans le marché intermédiaire, Gowling WLG offre l’expérience et l’expertise dont vous avez besoin pour atteindre vos objectifs. ",NULL,NULL,"<p>Le marché mondial des fusions et acquisitions a été très dynamique ces dernières années. Ayant participé à de nombreuses transactions internationales d&rsquo;envergure, en particulier dans le marché intermédiaire, Gowling&nbsp;WLG offre l&rsquo;expérience et l&rsquo;expertise dont vous avez besoin pour atteindre vos objectifs.</p>    <p>En misant sur les forces de nos bureaux au Canada, au Royaume-Uni, en Europe, en Asie et au Moyen-Orient, nous contribuons à la réussite d&rsquo;un grand nombre de transactions dans un éventail de secteurs d&rsquo;activités clés. Étant l&rsquo;un des cabinets juridiques les plus sollicités au chapitre des fusions et acquisitions dans le marché intermédiaire, nous comprenons vos défis, car nous les surmontons au quotidien.</p>    <p>Nos professionnels ont une connaissance approfondie de divers secteurs d&rsquo;activité et sont au fait des dernières tendances et des derniers développements dans le monde des fusions et acquisitions, y&nbsp;compris sur le marché américain. De plus, grâce à l&rsquo;esprit entrepreneurial de Gowling WLG et aux nombreuses distinctions qui nous ont été octroyées, vous avez la garantie d&rsquo;obtenir le meilleur service qui soit pour assurer votre réussite.</p>    <p>Travaillant en étroite collaboration avec les sociétés cibles, les acquéreurs &ndash; y&nbsp;compris les fonds de capital d&rsquo;investissement et les acheteurs stratégiques &ndash;, les conseillers financiers, les comités spéciaux et d&rsquo;autres parties, nous offrons une gamme complète de services de fusions et acquisitions tant auprès des sociétés à capital ouvert qu&rsquo;à capital fermé, dont les suivants&nbsp;:</p>    <ul>   <li>Achat d&rsquo;actions et d&rsquo;actifs et transactions de vente</li>   <li>Contrats d&rsquo;entiercement</li>   <li>Conventions de souscription et contrats d&rsquo;entiercement des actionnaires</li>   <li>Fusions, regroupements d&rsquo;entreprises, plans d&rsquo;arrangement et prises de contrôle</li>   <li>Gouvernance d&rsquo;entreprise et responsabilités des administrateurs</li>   <li>Lancement d&rsquo;offres publiques d&rsquo;achat hostiles et défense contre de telles offres</li>   <li>Offres publiques de rachat, offres publiques d&rsquo;achat par un initié, regroupements d&rsquo;entreprises et opérations entre apparentés</li>   <li>Placements en aval de fonds de capital d&rsquo;investissement, tel que les rachats</li>   <li>Prises de contrôle inversées</li>   <li>Ventes aux enchères et processus de soumission&nbsp;</li>  </ul>    <p>&nbsp;</p>    <p>En fin de compte, vous souhaitez obtenir la solution la mieux adaptée à votre situation. C&rsquo;est pourquoi nous vous offrons l&rsquo;ensemble de notre expérience juridique, culturelle, linguistique et commerciale et nous sommes à l&rsquo;écoute de vos préoccupations. Bien que nous intervenions dans un volume élevé d&rsquo;opérations, répondre rapidement à vos besoins est notre priorité. En posant les bonnes questions pour bien saisir vos objectifs, nous vous aidons à analyser les difficultés afin de structurer et d&rsquo;exécuter des transactions fructueuses.</p>    <p>Nous comptons également sur nos spécialistes en fiscalité, en droit de la concurrence, en réglementation, en emploi, en propriété intellectuelle, en environnement et autres secteurs pour prêter main-forte dans toutes nos opérations. Ainsi, nous pouvons favoriser les structures transactionnelles les plus efficientes, les vérifications diligentes les plus rigoureuses et une exécution efficace des opérations.</p>    <p>La réussite de vos opérations repose sur l&rsquo;efficacité, c&rsquo;est pourquoi nous recourons à des technologies et à des outils personnalisés, dont GPJ&nbsp;Pratique par Gowling WLG<sup>MC</sup>, notre plateforme novatrice de gestion de projets juridiques. Cette technologie propre au cabinet aide à assurer la progression de vos dossiers dans le respect des échéances et des budgets, tout en évitant les surprises en cours de route.</p>    <p>Grâce à des modalités d&rsquo;honoraires variées fondées sur des structures de prix personnalisées plutôt que des tarifs horaires, vous bénéficiez également d&rsquo;une valeur ajoutée en ayant toujours accès à une tarification transparente, concurrentielle et prévisible.</p>    <p>Quels que soient votre emplacement et vos objectifs, nous menons tous les dossiers de fusions et acquisitions avec l&rsquo;équipe de Gowling&nbsp;WLG la mieux adaptée à vos besoins. N&rsquo;hésitez pas à communiquer avec un membre de notre groupe pour découvrir comment nous pouvons guider votre entreprise vers la réussite.</p>  ",GWLG.Global,84530f84-a454-42ea-8570-cbef382d27eb;e296f021-59e1-410e-a0ad-0626e49ce506,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{5F4265DF-9C48-4089-B726-17E09BF4D83E}|{783579A7-C423-44B6-AC93-3C05ADB31EBC}
395,/Services/Mergers-Acquisitions/Germany,fr-CA,96D1434B-7187-40CE-8614-F1BC6F4AF6B6,Allemagne,Allemagne,"Through our close ties with partner law firms, we offer services across all areas of law related to M&A. The depth of our capabilities means that we're always able to assign the right lawyers at the right level to the right job. Partner-led and sector-focused, we've worked in-house, and know how corporates operate and what they expect.",NULL,NULL,"<p>Mergers and acquisitions can be the best way to drive the growth of your business. But in today&#39;s business environment, M&amp;A deals are more complicated than ever before.</p>    <p>Cross-border matters are often a part of any transaction. To handle the complexities of these deals, you require lawyers who have strong expertise in the sector in which you operate -&nbsp;and have an equally strong grasp of the bigger international picture.</p>    <p>At Gowling WLG, we offer you first-class legal service whenever and wherever you need it throughout the M&amp;A process. We do this by combining in-depth sector knowledge with an unparalleled understanding of the scope of services required in your transaction.</p>    <p>We regularly support major listed (domestic and foreign) companies, medium-sized businesses and financial investors. We advise a number of the family-controlled Mittelstand companies, many of which are true hidden champions.</p>    <h3>The bigger picture</h3>    <p>Our offices in Stuttgart and Munich have&nbsp;significant strengths and expertise in all things international and cross-border. We&#39;re comfortable working in multiple jurisdictions and cultures, and have a great deal of success in steering international clients - many of whom have never done business in Germany - through projects in the country and beyond.</p>    <p>Through our close ties with partner law firms, we offer services across all areas of law related to M&amp;A. The depth of our capabilities means that we&#39;re always able to assign the right lawyers at the right level to the right job. Partner-led and sector-focused, we&#39;ve worked in-house, and know how corporates operate and what they expect.</p>    <p>Areas we cover include:</p>    <ul>   <li>Anti-trust and merger control</li>   <li>Commercial</li>   <li>Corporate</li>   <li>Employment and pension</li>   <li>Export control</li>   <li>Finance</li>  </ul>    <p>We have particular sector expertise, which is not limited to the automotive sector. Our other specialty areas include manufacturing, tooling, engineering and tech.</p>    <h3>Learn more</h3>    <p>Let us guide you through your complex M&amp;A transactions in Germany and beyond. Our team is ready and able to advise you, so let&#39;s start a conversation.</p>  ",GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
396,/Services/Intellectual-Property-Law/Global,fr-CA,CD8ADEF1-B43C-4FD2-9A0E-19D5ECEDD85B,Aperçu,Aperçu,"Des défis sont associés à chaque étape de la mise en marché des produits et services. Gowling WLG vous aide à les relever en protégeant vos actifs de propriété intellectuelle (PI), en vous aidant à en maximiser la valeur, et en faisant respecter les droits y afférents.",NULL,NULL,"<p>Des défis sont associés à chaque étape de la mise en marché des produits et services. Gowling&nbsp;WLG vous aide à les relever en protégeant vos actifs de propriété intellectuelle (PI), en vous aidant à en maximiser la valeur, et en faisant respecter les droits y afférents.</p>    <p>Grâce à notre expertise sans pareille en matière de <a href=""https://gowlingwlg.com/fr/services/patents/canada"">brevets</a>, <a href=""https://gowlingwlg.com/fr/services/trademarks-brands-designs/canada"">marques de commerce, marques et dessins</a>, droit d&rsquo;auteur, <a href=""https://gowlingwlg.com/fr/services/advertising-product-regulatory/canada"">publicité</a>, <a href=""https://gowlingwlg.com/fr/services/ip-litigation-strategy/canada"">litige en droit de la PI </a>et bien plus encore, voilà plus de 125&nbsp;ans que nous avons gain de cause dans des affaires de PI pour nos clients à l&rsquo;échelle mondiale, et nous offrons des services de représentation exceptionnels sur un marché caractérisé par le dynamisme et la concurrence.</p>    <p>Nos clients choisissent Gowling&nbsp;WLG dans ce domaine, car notre engagement à l&rsquo;égard de la protection, la gestion et l&rsquo;application de leurs droits fait écho à leur implication dans la création et l&rsquo;utilisation de leurs biens incorporels. Les clients apprécient également la valeur de notre plateforme internationale de services complets et ont recours à nos professionnels juridiques pour obtenir des conseils sur des questions qui vont au-delà les enjeux traditionnels de PI.</p>    <p>Nous sommes l&rsquo;un des plus grands et plus estimés cabinets en droit de la PI au Canada, et nous détenons également une&nbsp;pratique&nbsp;de premier plan au Royaume-Uni, nous possédons des équipes d&rsquo;experts en Allemagne, en Chine et à Dubaï ainsi qu&rsquo;un réseau mondial de professionnels de la PI. Bref, l&rsquo;équipe internationale de Gowling&nbsp;WLG peut aider ses clients sur tous les continents.</p>    <p>Que vous soyez impliqués dans des litiges de plusieurs millions de dollars, des transactions de plusieurs milliards de livres, ou des litiges aux coûts plafonnés devant des tribunaux spécialisés dans la PI, nous appliquons notre réflexion innovante et notre approche collaborative à tous vos dossiers. Notre priorité? Élaborer des solutions pratiques et efficaces qui répondent à vos besoins commerciaux et plus encore.</p>    <p>Chevronnés en science, en génie et en technologie, un grand nombre de nos professionnels sont dotés d&rsquo;une combinaison unique de talent juridique et de connaissances approfondies de l&rsquo;industrie ce qui nous permet de mieux comprendre votre entreprise et de vous aider à exploiter toute la valeur de vos éléments d&rsquo;actifs incorporels.</p>    <p>Voici certains des domaines que nous couvrons&nbsp;:</p>    <ul>   <li><a href=""https://gowlingwlg.com/fr/sectors/food-beverage/global"">Aliments et boissons</a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/aviation-aerospace-defence"">Aviation, aéronautique et défense </a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/construction-engineering"">Construction et génie </a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/energy/global"">Énergie</a></li>   <li>Fabrication</li>   <li><a href=""https://gowlingwlg.com/fr/sectors/automotive/global"">Industrie automobile </a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/financial-institutions-services"">Institutions financières et services financiers </a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/natural-resources"">Ressources naturelles </a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/life-sciences"">Sciences de la vie </a></li>   <li><a href=""https://gowlingwlg.com/fr/sectors/tech"">Technologie </a></li>   <li>Vente au détail et mode</li>  </ul>    <h3>En savoir plus</h3>    <p>Où que vous soyez dans le monde et quel que soit votre objectif, nous ferons appel aux meilleurs professionnels du droit pour gérer vos dossiers de PI et nous vous fournirons un service de première classe. N&rsquo;hésitez pas à communiquer avec un membre de notre équipe pour savoir en quoi nous pouvons vous aider.</p>    <h3>Demandes générales concernant les dépôts de demandes</h3>    <p>Pour toute question sur les poursuites de demandes de PI ou les dépôts de demandes de brevets ou d&rsquo;enregistrement d&rsquo;une marque de commerce, veuillez écrire à <a href=""mailto:ipinfo@gowlingwlg.com"">ipinfo@gowlingwlg.com</a></p>  ",GWLG.Global,6767b2fc-7817-42ae-a54e-05595fe6c1cd;273eab86-9e6f-4b43-ae6c-0a91be64e92c,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}|{0621B0FA-0387-4450-96A8-00D4D8C90A13}
397,/Services/Intellectual-Property-Law/Germany,fr-CA,3F08F3BD-A144-404F-B81F-27876A123737,Allemagne,Allemagne,"By working with Gowling WLG, you can be sure that your patents, trademarks, brands, copyrights and other intangible assets are both secure and delivering on their potential.",NULL,NULL,"<p>Your intellectual property (IP) is a key asset of your business. You need to protect it, and often that means acting fast when it comes to IP infringements before the damage is done. But you&#39;re also concerned about maximising your revenue, which requires effective IP portfolio strategies and longer-term thinking.</p>    <p>By working with Gowling WLG, you can be sure that your patents, trademarks, brands, copyrights and other intangible assets are both secure and delivering on their potential. We&#39;ll make sure that you use your IP rights in a way that adds value to your business. That means seeing your challenges from both a legal and economic perspective.</p>    <p>We&#39;re home to one of the strongest and most focused IP practice groups worldwide, with offices on the ground in Germany and in many other major jurisdictions. We have offices&nbsp;in every major jurisdiction with a future division of the UPC (Paris, Munich and London) and we are deeply familiar with many of the judges who will be active in the Unified Patent Court (UPC). Equally, we are aware of the subtle cultural differences across all jurisdictions.</p>    <p>Areas we cover include:</p>    <ul>   <li>Contentious and contractual IP matters</li>   <li>Copyrights</li>   <li>Counterfeit</li>   <li>Database rights</li>   <li>Dispute resolution</li>   <li>Fraud</li>   <li>IP audits</li>   <li>Licensing</li>   <li>Patent litigation</li>   <li>Portfolio advice</li>   <li>Preliminary injunctions</li>   <li>Product piracy</li>   <li>Trademarks</li>   <li>Unfair competition</li>   <li>Unitary patents</li>  </ul>    <h3>Learn more</h3>    <p>Combining in-depth technical expertise with broad sector experience, we&#39;re passionate about securing you intellectual property rights. Talk to us now to start protecting your assets.</p>  ",GWLG.Germany,bc89113e-4507-4a3d-812a-d8d8a9d9573e;573d1455-ea45-45db-a443-9b45707a1db2;cb19b704-ff8e-46a8-a9fa-3a14031fb024,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,bc89113e-4507-4a3d-812a-d8d8a9d9573e|573d1455-ea45-45db-a443-9b45707a1db2|cb19b704-ff8e-46a8-a9fa-3a14031fb024
398,/Services/Intellectual-Property-Law/UAE,fr-CA,690E4C4F-0D5B-4996-ADA3-75CAD648A901,EAU,EAU,"Intellectual property protection in the Middle East can be costly. This means that you need lawyers who know how to maximise your assets, prioritise your profitability and take a shoulder-to-shoulder approach to your business.",NULL,NULL,"<p>Intellectual property protection in the Middle East can be costly. This means that you need lawyers who know how to maximise your assets, prioritise your profitability and take a shoulder-to-shoulder approach to your business.</p>    <p>Gowling WLG should be your first choice. With an office in Dubai, we have the expert local knowledge to provide solutions throughout the Middle East - and the global reach to position and maximise your IP assets around the world. You&#39;ll be working with lawyers who are immersed in your world, providing advice that is completely commercial and always attuned to your needs.</p>    <p>But your IP needs don&#39;t stop at border - and neither do we. With more than 1,400 legal professionals internationally, we have the breadth and depth of knowledge to support your business and protect your IP wherever your commercial interests may lead.</p>    <p>Areas of intellectual property we cover include:</p>    <ul>   <li>Advertising and marketing</li>   <li>Anti-counterfeiting</li>   <li>Arabic branding</li>   <li>Commercialisation of IP rights</li>   <li>Copyright</li>   <li>Enforcing IP rights throughout the MENA region</li>   <li>Franchising and distribution advice</li>   <li>IP rights litigation throughout the MENA region</li>   <li>IP transfer, co-existence, joint ownership, licensing</li>   <li>Management of MENA patent filings</li>  </ul>    <h3>Client work highlights</h3>    <ul>   <li>Managing the global IP portfolio for one of the world&#39;s leading hotel businesses</li>   <li>Helping a leading US university to protect its pharmaceutical compound patents in Qatar</li>   <li>Advising a UAE footwear designer on trademark and design strategy in the MENA region</li>   <li>Successfully representing a European safety equipment manufacturer in enforcing its IP rights against a number of infringers in Iran</li>   <li>Advising a leading construction company on enforcement of its IP rights in the Gulf region</li>  </ul>    <h3>Find out more</h3>    <p>Get in touch with a team that includes some of the most prominent IP specialists operating in the Middle East today. We&#39;re here to help.</p>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}
399,/Services/Intellectual-Property-Law/UK,fr-CA,C0D20CDD-3628-4CCB-B77A-A3635417556D,Royaume-Uni ,Royaume-Uni ,"If you want an intellectual property (IP) team that knows how to win anywhere in the world, puts your profitability at the top of its priorities and takes a shoulder-to-shoulder approach to client relationships, then Gowling WLG should be your first choice. ",NULL,Experts in intellectual property law in the UK,"<p>If you want an intellectual property law (IP) team that knows how to win anywhere in the world, puts your profitability at the top of its priorities and takes a shoulder-to-shoulder approach to client relationships, then Gowling WLG should be your first choice. Chambers refers to the team as &quot;a quality operation ... there is no doubt that they are leading the field.&quot;</p>    <p>From multi-million pound disputes and billion pound deals to cost-capped litigation for SMEs in the <abbr title=""Intellectual Property"">IP</abbr> courts, our starting point is looking at what you want to achieve and then setting out a strategy to find the best solution. A large experienced team taking a holistic, commercial approach guarantees a perfectly tailored solution for every client.</p>    <p>Sometimes a settlement will secure what you want. But, if necessary, this team will go all the way to achieve the right result. Our team has won cases in the ECJ (<em>02 v 3G</em>), Supreme Court (<em>Zodiac v Virgin</em>), the High Court (British Telecommunications plc (BT) for Californian client ASSIA,) and IPEC (Cobra UK in a dispute with BOS GmbH &amp; Co. KG.)</p>    <p>Our cutting-edge work won three awards in the space of a few months - TMT team of the Year for Legal Business Awards 2014 and the British Legal Awards and Patent Contentious firm of the Year at the Managing Intellectual Property Awards. We offer:</p>    <ul>   <li><strong>Technical excellence</strong> - Academic attainments and earlier careers in biochemistry, physics, engineering, IT and microbiology means this team is more than a match for specialist technicians on the other side. Take Dr Luke Kempton who is commended for his &quot;scientific understanding&quot; in Legal 500. Four of India&#39;s fastest growing technology businesses have chosen this team as their lead adviser</li>   <li><strong>Global coverage</strong> - Multi-jurisdictional coverage, with contacts around the world, means clients can be certain of a speedy and cost-effective approach. Global giants such as Aston Martin, Dyson, Unilever, GlaxoSmithKline, Lundbeck and Hasbro turn to the team for expert advice on clearance, exploitation and enforcement of their <abbr title=""Intellectual Property"">IP</abbr> rights. Members of the team are known for their thought leadership presentations at international conferences</li>   <li><strong>A competitive edge</strong> - Whatever the challenge or opportunity, they have the experience and resource to offer the very best legal advice. As acknowledged by Legal 500 2014, this team &quot;provides outstanding service at all times&quot;. Regular legal updates keep our clients and contacts at the forefront of intellectual property law developments.</li>  </ul>    <h3>Overturning 100 years of patent law</h3>    <p>The team saved Zodiac Seats from a very substantial potential pay out in a six-year battle that went all the way to the Supreme Court and overturned 100 years of law in the process.</p>    <p>Michael England, instructing the firm, said: &quot;The team&#39;s ingenuity and perseverance was instrumental in handling each legal challenge Virgin threw at us. The outcome speaks volumes about the team&#39;s commitment to win which saved us from paying out potentially many millions in damages.&quot;</p>    <h3>Design infringement in China</h3>    <p>Dyson, a client since 2000, was successful in its case against China-based manufacturer Yongkang Yixuan for design infringement relating to its Air Multiplier&trade; fan.</p>    <p>Gill Smith at Dyson said: &quot;Dyson is a highly innovative company in both design and technology. Its intellectual property rights are key to its success, and Dyson has proven that it will enforce those rights wherever in the world they are infringed.</p>    <p>&quot;China is a difficult jurisdiction, but with help and guidance from Gordon and his team we have had a string of successes, culminating in this first full trial win. We have more cases in hand or under investigation and we will pursue relentlessly those companies which flagrantly steal the fruits of Dyson&#39;s highly innovative engineers and scientists.&quot;</p>    <h3>Business survival in David v Goliath battle</h3>    <p>In a classic David v Goliath battle, the team helped Comic Enterprises Ltd, owner of the Glee Club comedy and music group, to secure a high-profile High Court victory against 20th Century Fox. The case concerned whether Fox&#39;s hit television series &#39;glee&#39;, a live show based on the series, DVDs and various glee-branded merchandise, infringed our client&#39;s UK registered trade mark.</p>    <p>In its judgment, the High Court recognised the &quot;likelihood of confusion&quot;, and the potential for customers to &quot;believe there is a link&quot; between the Glee Club and the TV show, and be discouraged from attending the Glee Club venues.</p>    <p>Mark Tughan, managing director of Comic Enterprises, said: &quot;We are incredibly relieved and pleased with today&#39;s decision. We spent 15 years building up our Glee brand before the TV show was launched in the UK and the show has had a very damaging effect on our business. Potential customers wrongly assumed we were connected, and were being put off.&quot;</p>    <h3>&#39;Patent Box&#39; tax relief</h3>    <p>The UK&#39;s &#39;Patent Box&#39; regime offers companies an attractive lower rate of UK corporation tax on worldwide profits earned from their patents and other qualifying <abbr title=""Intellectual Property"">IP</abbr> rights. The effective rate of tax will gradually be reduced and, by 1 April 2017, will be as low as 10%.</p>    <p>You can benefit from the Patent Box if your company is liable to UK corporation tax and makes a profit from exploiting patented inventions. Our intellectual property and tax experts can assist you and your patent attorneys in making the most of the Patent Box. Please contact <a href=""~/en/people/luke-kempton"">Dr Luke Kempton</a> to find out more.</p>    <h3>The Unified Patent Court</h3>    <p>The Unified Patent Court (UPC) is a brand new court system for owners of European Patents and Unitary Patents (UPs). With a single judgment, the court is able to determine validity and infringement of a patent across nearly all EU member states.</p>    <p>Gowling WLG&#39;s award winning patent litigation team draws on its extensive experience patent litigation in the UK, Germany, France and beyond to provide clients with comprehensive guidance as to the opportunities and challenges presented by this new court system.</p>    <p>To find out more, visit our <a href=""~/en/insights-resources/articles/2016/the-unified-patent-court""><abbr title=""Unified Patent Court"">UPC</abbr> information hub</a>.</p>  ",GWLG.UK,6767b2fc-7817-42ae-a54e-05595fe6c1cd,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{6C0186DE-CA32-4527-B97B-E63197AD1EB2}
401,/Services/Restructuring-Insolvency/Overview,fr-CA,36DDFE30-84FF-48AC-998D-4AAADEC6C7C4,Aperçu,Aperçu,"Certaines sociétés connaîtront des difficultés financières même dans un environnement économique sain. Que vous ayez besoin de conseils aux premiers ou aux derniers stades d’une restructuration, Gowling WLG règle vos problèmes rapidement, de façon pragmatique et rentable, tout en veillant à limiter au maximum les risques d’atteintes à la réputation. ",NULL,NULL,"<p>Certaines sociétés connaîtront des difficultés financières même dans un environnement économique sain. Que vous ayez besoin de conseils aux premiers ou aux derniers stades d&rsquo;une restructuration, Gowling&nbsp;WLG règle vos problèmes rapidement, de façon pragmatique et rentable, tout en veillant à limiter au maximum les risques d&rsquo;atteintes à la réputation.</p>    <p>Les dossiers d&rsquo;insolvabilité comportent souvent des questions juridiques complexes en constante évolution. Vous avez donc besoin d&rsquo;un conseiller qui, en plus de comprendre la loi et son incidence sur votre situation, proposera des solutions commerciales pratiques. En apprenant à vous connaître et en cernant votre situation rapidement, nous deviendrons le prolongement de votre équipe.</p>    <p>Spécialisés en restructurations d&rsquo;envergure à la fois complexes et confidentielles, ainsi qu&rsquo;en services consultatifs connexes, notre perspective commerciale des questions juridiques s&rsquo;accompagne d&rsquo;un service à la clientèle de premier&nbsp;ordre, d&rsquo;une rapidité de réaction et d&rsquo;une aptitude à anticiper les problèmes.</p>    <p>Grâce aux talents et aux compétences des membres de notre équipe ayant le plus d&rsquo;expérience et d&rsquo;ancienneté, nous savons comment nous attaquer aux problèmes les plus épineux de nos clients. Par ailleurs, notre approche globale repose sur une expertise éprouvée dans des domaines comme l&rsquo;immobilier, le droit du travail et la fiscalité pour parvenir à des solutions optimales.</p>    <p>Nous offrons nos services dans les domaines suivants :</p>    <ul>   <li>Activités de fusions et acquisitions de sociétés en difficulté (dont les examens de vérification diligente des sociétés cibles)</li>   <li>Conformité réglementaire</li>   <li>Conseils aux prêteurs et autres parties prenantes en situation de difficulté et de recouvrement</li>   <li>Ententes de prêts restructurés et de montages financiers</li>   <li>Faillite et liquidation</li>   <li>Négociations avec les créanciers, les fournisseurs et les clients</li>   <li>Problèmes de responsabilité des prêteurs</li>   <li>Propositions en vertu de la&nbsp;<em>Loi sur la faillite et l&rsquo;insolvabilité</em> (LFI) et de la&nbsp;<em>Loi sur les arrangements avec les créanciers des compagnies</em> (LACC)</li>   <li>Responsabilité et obligations des administrateurs (y&nbsp;compris les avis indépendants au conseil d&rsquo;administration)</li>   <li>Restructuration de sociétés</li>   <li>Restructurations financières et opérationnelles précoces en vue d&rsquo;obtenir le paiement des garanties et des sûretés</li>   <li>Risques d&rsquo;insolvabilité associés aux opérations de financement structurées (titrisation)</li>   <li>Solutions de financement provisoires et permanentes</li>   <li>Structuration et exécution du processus de vente</li>  </ul>    <p>Forts de professionnels du droit au Canada, au Royaume-Uni, ailleurs en Europe, en Asie et au Moyen-Orient, nous possédons de vastes connaissances et une grande expertise dans les domaines de l&rsquo;insolvabilité et de la restructuration transfrontalières et dans divers pays, et nous représentons des prêteurs, d&rsquo;autres créanciers, des débiteurs, des officiers de justice nommés par le tribunal, des fournisseurs de crédit-relais (financement du débiteur-exploitant) et des acheteurs (activités de fusions et acquisitions de sociétés en difficulté).</p>    <p>Notre expérience couvre un large éventail de secteurs&nbsp;:</p>    <ul>   <li>Agriculture</li>   <li>Aliments et boissons</li>   <li>Aquaculture</li>   <li>Aviation</li>   <li>Centres de santé</li>   <li>Construction</li>   <li>Embouteillage</li>   <li>Expédition et logistique</li>   <li>Hôtellerie</li>   <li>Immobilier</li>   <li>Industrie automobile,</li>   <li>Logement</li>   <li>Matières plastiques</li>   <li>Médias</li>   <li>Mines et ressources minières</li>   <li>Pensions</li>   <li>Produits pour usage récréatif</li>   <li>Services financiers</li>   <li>Services professionnels</li>   <li>Soins de santé</li>   <li>Télécommunications</li>   <li>Vente au détail</li>  </ul>    <p>Nos professionnels peuvent aussi vous prêter main-forte en ce qui a trait à la gestion et à la protection de vos droits de propriété intellectuelle en contexte de restructuration et vous aider à minimiser les risques.</p>    <p>Vous pouvez compter sur Gowling&nbsp;WLG pour vous aider à faire face au processus nébuleux lié à la restructuration et à l&rsquo;insolvabilité, pour surmonter les obstacles, protéger votre marque et obtenir le meilleur résultat possible. Pour en savoir plus, n&rsquo;hésitez pas à communiquer avec un membre de notre équipe.</p>  ",GWLG.Global,31589b1d-8773-40f3-b07d-0b7a1a5eee2f;cb21bbea-e21c-41ad-9aa3-f9a9d0497fe9,CB3477A6-C725-4D55-8FA9-194ABC3A4EC4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4611A725-FCDD-493D-9FD2-487B932D5A80}|{003AB4E6-2B4A-4BB4-A56B-357A9D18EE29}
402,/Services/Restructuring-Insolvency/UK,fr-CA,B17A145E-919C-4F5A-B1F3-7CED4EB03A72,Royaume-Uni,Royaume-Uni,"Restructurings and insolvency cases often involve complex and evolving legal issues. Your adviser has to understand the law and how it affects your situation. We provide guidance quickly, pragmatically and cost-effectively.",NULL,NULL,"<h3>We are with you - through it all</h3>    <p>From time to time, businesses face financial challenges, or have to deal with risk because the companies they are dealing with run into difficulties or have collapsed. This can present both threats and opportunities. To make the best of these situations, you will need specialists to help navigate the various challenges. However complex, high-profile or sensitive the scenario, our restructuring experts are experienced in finding realistic and optimal solutions. Restructurings and insolvency cases often involve complex and evolving legal issues. Your adviser has to understand the law and how it affects your situation. We provide guidance quickly, pragmatically and cost-effectively. Our team consists of dedicated specialists in complex, high-profile and confidential restructurings, advisory and insolvency work. We do this work day in, day out.</p>    <p>The specialist teams work in the UK, Canada, Europe, Asia and the Middle East and have a broad practice which includes a high level of expertise in multi-jurisdictional, cross-border insolvencies and restructurings. The team act for boards of directors, all types of lenders, private equity and other funders, government and public bodies, sponsors, pension and other trustees, creditors, debtors, court appointed officers, interim lenders, insolvency practitioners, receivers and purchasers.</p>    <p>As specialists we are immersed in our industry and both the technical and policy aspects of restructuring and insolvency. Members of the team have spent time in government departments helping shape policy, provide regular technical updates, host the Gowling WLG Annual Restructuring &amp; Insolvency Conference and are members of R3, the IFT and the TMA.</p>    <h3>How we help</h3>    <h4>Holistic approach</h4>    <p>Using the talents and skills of our most senior and experienced team members, we tackle a range of issues facing our clients. We will call on our experts in our real estate, employment, and tax teams who regularly work with us in distressed situations, to identify and help implement the best solutions for you.</p>    <h4>Dedicated support</h4>    <p>We will get to know you and understand your situation, your risk and your opportunity quickly. We will act as an extension of your team and we will work to your time pressures and the demands of your business. Our combined technical and commercial perspective on legal issues will provide you with first-class client service, speed of response and an ability to anticipate issues.</p>    <h4>Adding value</h4>    <p>Working as part of your team, we can help to devise strategies and innovative structures to protect against insolvency risk in relation to development contracts, mergers, outsourcing and other commercial contracts. We also deal with intellectual property rights in restructuring situations, ensuring that these rights are managed and protected.</p>    <h4>Multi-jurisdictional, cross-sector knowledge</h4>    <p>Practised in multi-jurisdictional, cross-border insovencies and restructurings, our experience spans the broadest cross-section of sectors. Notably: automotive, agriculture, aquaculture, aviation, care homes, construction, financial services, healthcare, retail and leisure, real estate, technology, natural resources and pensions.</p>    <blockquote>  <p>&quot;The team combines breadth of specialist expertise with first class client service and rapid response. The team felt like part of our team. Above all they are commercially astute and don&#39;t lose sight of the commercial aspects when providing legal advice, with a fair and flexible approach to fees.&quot;<br />  <cite>Deloitte UK LLP.</cite></p>  </blockquote>    <h3>Areas of expertise</h3>    <ul>   <li>Administration, liquidation, receivership and bankruptcy</li>   <li>Company voluntary arrangements</li>   <li>Corporate restructuring</li>   <li>Creditor, supplier and customer negotiations</li>   <li>Directors&#39; liability and duties</li>   <li>Distressed sale and purchase transactions</li>   <li>Advice on security and enforcement</li>   <li>Pensions restructuring and covenant advisory</li>   <li>Insolvency risks in structured transactions</li>   <li>Security reviews and pre-insolvency contingency planning</li>  </ul>  ",GWLG.UK,cb21bbea-e21c-41ad-9aa3-f9a9d0497fe9,CB3477A6-C725-4D55-8FA9-194ABC3A4EC4,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{003AB4E6-2B4A-4BB4-A56B-357A9D18EE29}
403,/Services/Employment-Labour-Equalities/UAE,fr-CA,E4D987DF-A0CC-43C3-A226-8F38F27BAE3F,EAU,EAU,"With over 12 years of employment law experience in the Middle East we provide practical, pragmatic advice to employers who need to comply with a multitude of rules and regulations and who also want to attract top talent and motivate their people.",NULL,NULL,"<p>As an employer, you need to understand how to comply with a multitude of rules and regulations - and how to attract top talent and motivate people to meet their full potential.</p>    <p>Working in the Middle East means coming to terms with a range of employee rights and employer obligations. It&#39;s essential that you know how to incentivise your employees while safeguarding your intellectual property, confidentiality agreements and post-term restrictions.</p>    <p>Gowling WLG has over 12 years of employment law experience in the Gulf Cooperation Council (GCC), having advised multinationals, start-ups and family offices on a wide range of matters. We also have significant corporate and commercial experience, which allows us to see the big picture and provide you with practical, pragmatic legal advice.</p>    <p>In working with us, we won&#39;t just tell you how to do something - we&#39;ll show you how to achieve your objectives with an acceptable level of risk. We&#39;ll apply our commercial savvy and creativity to provide advice that&#39;s always timely, focused and suited to your needs.</p>    <p>Employment-related areas we advise on include:</p>    <ul>   <li>Dispute resolution management</li>   <li>General business protection</li>   <li>HR support</li>   <li>Incentive schemes</li>   <li>IP/confidentiality</li>  </ul>    <h3>Learn more</h3>    <p>You&#39;ll find us to be lawyers who genuinely care about the health and well-being of your business - and who will work at your pace to ensure you have the support required. Let&#39;s talk.</p>  ",GWLG.UAEDubai,c5e38127-9af8-40be-8f7c-7a8d2ff45ec8;7574853e-b1e1-4eba-8604-1a01d0d0a056,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,c5e38127-9af8-40be-8f7c-7a8d2ff45ec8|{70545C59-D6F4-4F8A-A98E-6FAFCC9D3665}
404,/Services/Employment-Labour-Equalities/UK,fr-CA,BA26CFA6-5275-480D-B83F-ADBC69F5DF6B,Royaume-Uni ,Royaume-Uni ,"When it comes to employment law, the best option is always to avoid problems in the first place. Our team will make sure you do that, and we will also help you to reduce risk while ensuring managers act more commercially.",NULL,NULL,"<p>When it comes to employment law, the best option is always to avoid problems in the first place. Our team will make sure you do that, and we will also help you to reduce risk while ensuring managers act more commercially.</p>    <p>From the everyday to the strategic, our global team advises a broad client base, comprising commercial, corporate and public sector entities, on the full range of employment issues.</p>    <p>You can expect our team to be:</p>    <ul>   <li><strong>Creative&nbsp;</strong>- The team is &quot;excellent all round - they go the extra mile and know their stuff&quot; (Chambers 2014). Recognising diverse client needs, a comprehensive range of support solutions are on offer, including bespoke training, a Combined Human Resource Solutions team and a range of innovative products like our gamified e-learning scenario</li>   <li><strong>Decisive&nbsp;</strong>- Our experts &quot;get off the fence and give you the options as well as telling you what they think is best&quot; (Chambers 2014). While broad sector expertise and collective experience give clients access to tried and tested success strategies, the team loves to take on new challenges and find new solutions</li>   <li><strong>Trusted&nbsp;</strong>- Working as an extension of your team, our experts will always act in your best interests. Our approach is to stand in your shoes, and with several team members lending experience from previous in-house roles, our understanding of your commercial drivers and challenges is second-to-none</li>  </ul>    <p>We have a number of overseas offices with employment experts who can help our clients with employment issues in their local jurisdictions. We also call upon a tried and tested network of employment experts in other jurisdictions who share our approach to client service.</p>    <p>Wherever you are in the world, we - or someone we trust and recommend - can help you resolve any employment issue you have.</p>    <p>What&#39;s more, if an employment matter leads into other areas, our cross-sector specialists can step in at a moment&#39;s notice to provide you with expert advice on anything unexpected.</p>    <p>Our services include:</p>    <ul>   <li><strong>Combined Human Resources Solutions team</strong>- Unique in the UK, our Combined Human Resource Solutions team deals with the interaction of pensions and employment law. Typical work includes high-profile and high-value age discrimination claims and multi-billion pound restructuring projects</li>   <li><strong>Commercial and corporate support</strong>- We are experts in advising on all aspects of the application of TUPE - Transfer of Undertakings (Protection of Employment) - offering practical solutions to our employer clients, in the context of mergers and acquisitions and outsourcings, or change of service provision arrangements. We have extensive experience of public and private sector outsourcings, property management agreements and international outsourcing</li>  </ul>  ",GWLG.UK,799cf040-59c7-4986-825a-e4b909364823,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E105E1FE-58D4-44E0-B32B-4367806B155E}
405,/Services/Commercial/Overview,fr-CA,38F5D749-4F02-4691-92BF-E1387E600E39,Aperçu,Aperçu,C’est au moyen d’ententes commerciales que les entreprises peuvent gagner en valeur et se parer aux risques éventuels. L’équipe de Gowling WLG aide ses clients à lancer et à diriger des entreprises efficaces et rentables grâce à des contrats commerciaux bien structurés. ,NULL,NULL,"<p>C&rsquo;est au moyen d&rsquo;ententes commerciales que les entreprises peuvent gagner en valeur et se parer aux risques éventuels. L&rsquo;équipe de Gowling WLG aide ses clients à lancer et à diriger des entreprises efficaces et rentables grâce à des contrats commerciaux bien structurés.</p>    <p>Nos clients peuvent compter sur des conseils juridiques pragmatiques pour les aider à obtenir et à maximiser leurs occasions d&rsquo;affaires. Nos avocats sont aussi qualifiés pour fournir des conseils sur des projets complexes, à valeur élevée et de grande portée territoriale ou pour gérer de grands volumes d&rsquo;exigences contractuelles au quotidien.</p>    <p>Issus de divers champs de compétences et différents pays, nos experts sont à même de garantir que vos ententes puissent s&rsquo;appliquer partout où vous faites des affaires. Nos conseils sont renforcés par notre expertise pointue dans des secteurs clés comme les sciences de la vie, l&rsquo;immobilier, la vente au détail, les services financiers, les aliments et boissons, l&rsquo;automobile, les technologies de l&rsquo;information, la télécommunication, la défense, la santé, les projets gouvernementaux, l&rsquo;aviation et l&rsquo;industrie des voyages.</p>    <p>Parmi nos clients à l&rsquo;échelle internationale figurent des marques de biens de consommation, des fabricants industriels et des chaînes d&rsquo;approvisionnement connus dans le monde entier, ainsi que des ministères, des organismes publics ou de la Couronne ainsi que d&rsquo;importantes institutions financières.</p>    <p>Nous rédigeons et négocions des ententes commerciales qui portent notamment sur des voies d&rsquo;accès au marché ou des chaînes d&rsquo;approvisionnement, et ce, tant pour les entreprises locales en démarrage que pour les grandes multinationales. Également versés en technologie et en TI, nous possédons un savoir-faire qui se démarque sur le marché en ce qui a trait à l&rsquo;infonuagique, la protection et la sécurité des données ainsi que la &laquo;&nbsp;safe harbor&nbsp;&raquo; ou sphère de sécurité.</p>    <p>Voici un aperçu de nos services additionnels&nbsp;:</p>    <ul>   <li>Approvisionnement</li>   <li>Commandite</li>   <li>Commerce électronique</li>   <li>Contrats liés aux télécommunications</li>   <li>Contrats de courtage et de distribution</li>   <li>Contrats de franchise</li>   <li>Développement des TI, octroi de licences et impartition de logiciels</li>   <li>Droit de la consommation et du voyage</li>   <li>Fabrication</li>   <li>Gestion de propriétés et d&rsquo;installations</li>   <li>Impartition des&nbsp;processus d&rsquo;affaires</li>   <li>Logistique</li>   <li>Marchandisage</li>   <li>Protection des données et sphère de sécurité</li>   <li>Ventes et marketing</li>  </ul>    <p>Connus pour notre expertise en résolution de problèmes, nous sommes axés sur les solutions innovantes. En jumelant notre expérience du droit à notre expertise technique, nous fournissons des conseils qui maximisent vos occasions d&rsquo;affaires et votre positionnement sur le marché.</p>    <p>Pour traiter vos questions liées aux contrats commerciaux et en savoir plus à ce sujet, n&rsquo;hésitez pas à communiquer avec nous.</p>  ",GWLG.Global,a2b7b2e1-b2ce-441b-8021-2c65bd258ef7,549CBE28-F188-44CD-85C0-0F4E23A23817,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F3420C43-8321-4BBF-A6E7-D2AA815C7420}
406,/Services/Commercial/Germany,fr-CA,D8926684-379C-4EB8-8B4B-B1500AAEB1E1,Allemagne,Allemagne,"Choose Gowling WLG for all your commercial law needs. Responsive and approachable, we're committed to delivering premium legal services at a reasonable cost.",NULL,NULL,"<p>Your business relies on a range of agreements and contracts that allow you to operate efficiently and profitably across the supply chain. With global markets becoming increasingly regulated, getting these agreements right is crucial to your success.</p>    <p>What you need are sector-focused lawyers who don&#39;t just understand the small print but see the bigger picture when it comes to what you&#39;re trying to achieve.</p>    <p>That&#39;s why you should choose Gowling WLG for all your commercial law needs. Responsive and approachable, we&#39;re committed to delivering premium legal services at a reasonable cost.</p>    <p>With offices in Stuttgart and Munich, we know how to steer clients - including those who have little experience doing business in Germany - through their projects successfully. Our lawyers hold comprehensive experience in private practice and have also worked in-house, giving us a broad understanding of how corporates work and what they expect.</p>    <p>Whether you need assistance on a negotiation or a complex contractual scheme, we&#39;re just as comfortable in managing your high-volume, day-to-day contracting requirements as we are in handling your specific projects.</p>    <p>You can count on us for timely, high-quality legal advice relating to matters such as research and development, engineering, tech, procurement and supply chain, tooling, manufacturing, sales, merchandising, advertising and marketing, e-commerce, logistics, sponsorship, property and facility management.</p>    <p>Our specialty areas include commercial work relating to:</p>    <ul>   <li>Nomination letters and agreements</li>   <li>Procurement contracts and (framework) supply agreements</li>   <li>Quality assurance agreements</li>   <li>Warranty agreements</li>   <li>Interface agreements and &quot;back-to-back&quot;&nbsp;(supply chain)</li>   <li>Logistic and consignment stock agreements</li>   <li>Tool contracts and tool transfer agreements</li>   <li>Agency, distribution and franchise agreements</li>   <li>General terms and conditions, CISG, Incoterms</li>   <li>Cross-border business</li>   <li>Business process outsourcing</li>   <li>Distribution schemes</li>   <li>Product roll-outs</li>  </ul>    <p>We have particular in-depth industry expertise in the automotive sector - a natural fit, with Stuttgart being home to numerous major auto manufacturers and suppliers. Our specialty areas include commercial work relating to manufacturing, tooling, engineering and tech.</p>    <h3>Learn more</h3>    <p>For a hands-on, partner-led service that offers you quality in every aspect, then get in touch and let&#39;s talk about how we can help you achieve more.</p>  ",GWLG.Germany,bc89113e-4507-4a3d-812a-d8d8a9d9573e;199becac-9a85-4082-aec2-fd0969f7da84;ff81fa74-4ef9-46a0-af1d-21f561ef7806,549CBE28-F188-44CD-85C0-0F4E23A23817,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,bc89113e-4507-4a3d-812a-d8d8a9d9573e|{B836F4F7-16A5-4E2A-9907-2341BCC30D29}|{B4C93BD5-071C-4E85-8099-C1A161D90259}
407,/Services/Commercial/UK,fr-CA,5BBE3255-6766-4417-9251-F0F2082C9B5E,Royaume-Uni ,Royaume-Uni ,"The best possible deal, delivered on time by lawyers who understand you, your business and your sector. That is what you'll receive from our commercial team.",NULL,NULL,"<p>The best possible deal, delivered on time by lawyers who understand you, your business and your sector. That is what you&#39;ll receive from our commercial team.</p>    <p>The firm &quot;treats this area as a standalone specialism&quot; and &quot;punches well above its weight&quot; with &quot;proven abilities in handling large and complex mandates&quot; (Legal 500).</p>    <p>In-house legal teams can outsource commercial contracts of all sizes, description and complexity to our expert team, which has worked with the likes of Marks and Spencer, AstraZeneca and Premier Foods on meeting and exceeding compliance standards.</p>    <p>What you can expect from one of the UK&#39;s largest dedicated commercial teams of more than 30 lawyers:</p>    <ul>   <li><strong>Breadth of capability</strong> - from high volume routine contracts, such as more than 100 contracts for Marks and Spencer, to the most complex, such as advising CBRE on Europe&#39;s largest property management requirement for PRUPIM with 1300 properties</li>   <li><strong>Sector experience</strong> - established track-record in food and drink, life sciences, real estate, retail, financial services, automotive, IT, aviation and travel industries</li>   <li><strong>Keen and confident</strong> - a natural ability to put ourselves in our clients&#39; shoes and become an extension of the in-house legal team. Positive client feedback secured David Lowe a win as UK Projects and Procurement lawyer of the year 2013 International Law Office Client Choice Awards</li>  </ul>    <p>The team works closely with colleagues in real estate, corporate, employment and insurance. Public procurement experts also provide valuable insight into contracting with private sector.</p>  ",GWLG.UK,ad056fcd-7211-4da7-a9e2-30612d332954,549CBE28-F188-44CD-85C0-0F4E23A23817,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}
409,/Services/Capital-Markets/Overview,fr-CA,C243B49C-BEAC-46FC-8F4D-E7DA06E38973,Aperçu,Aperçu,"Que vous souhaitiez entrer en Bourse ou conserver votre inscription à la cote, que vous recherchiez du financement ou souhaitiez en procurer, faites confiance à nos avocats chevronnés qui possèdent une expérience pertinente en marchés financiers et savent comment vous conseiller. ",NULL,NULL,"<p>Que vous souhaitiez entrer en Bourse ou conserver votre inscription à la cote, que vous recherchiez du financement ou souhaitiez en procurer, faites confiance à nos avocats chevronnés qui possèdent une expérience pertinente en marchés financiers et savent comment vous conseiller.</p>    <p>Chez Gowling&nbsp;WLG, nous sommes forts d&rsquo;une vaste expérience en projets de financement et représentation de participants aux marchés financiers, et nous tirons une grande fierté de ce que nous aidons nos clients à accomplir au fil des ans.</p>    <p>Reconnu comme l&rsquo;un des cabinets les plus actifs et performants en matière de levée de fonds propres et d&rsquo;entrée en Bourse, nos professionnels juridiques prennent le temps de connaître les caractéristiques uniques de votre entreprise pour bien cerner vos objectifs. Ils s&rsquo;assurent aussi de contrôler les coûts, d&rsquo;éviter les risques et de faire preuve de prévisibilité afin de mener vos projets à bien. En effet, dans le cadre de vos opérations,&nbsp;nous adoptons toujours une approche qui tient compte de votre budget en mettant en œuvre des modes alternatifs de paiement, et en offrant des taux réduits dans le but d&rsquo;optimiser vos dépenses juridiques.</p>    <p>Pour favoriser votre réussite, nous proposons aussi des outils personnalisés novateurs comme <a href=""https://gowlingwlg.com/fr/services/practical-lpm-by-gowling-wlg/canada"">GPJ Pratique</a>, notre outil de gestion de projets juridiques qui permet de gérer la portée, les tâches, les ressources et les coûts affectés à votre dossier, le tout dans le respect de vos délais et de votre budget.</p>    <p>Nos services comprennent des conseils juridiques stratégiques sur ce qui suit&nbsp;:</p>    <ul>   <li>Activisme des intervenants</li>   <li>Inscription en Bourse incluant les inscriptions multiples sur des Bourses étrangères</li>   <li><em>Global deposit receipt</em>&nbsp;: investissement dans des reçus de dépôt de titres &nbsp;</li>   <li>Opérations de financement de sociétés (placements privés, émissions publiques, prises fermes, financements transfrontaliers et autres modes alternatifs de financements)</li>   <li>Opérations de restructuration du capital</li>   <li>Opérations portant sur les titres d&rsquo;emprunt et titres de participations</li>   <li>Représentation auprès d&rsquo;organismes de réglementation des valeurs mobilières et d&rsquo;intervenants des marchés boursiers</li>   <li>Vérification diligente</li>  </ul>    <p>Nous conseillons des investisseurs, des conseillers financiers, des agents, des preneurs fermes, ainsi que des sociétés cotées en Bourse et des sociétés privées, dont leurs conseils d&rsquo;administration et comités spéciaux. En plus de donner des conseils sur la conformité aux exigences réglementaires des valeurs mobilières et des marchés boursiers, nous vous tiendrons informés de manière proactive des nouvelles tendances quant aux obligations de divulgation, à la gouvernance d&rsquo;entreprise et aux obligations des administrateurs.</p>    <p>Notre équipe conseille également les commandités et commanditaires, les promoteurs de fonds d&rsquo;investissement, les caisses de retraite et les fonds de pensions, et d&rsquo;autres bassins de capitaux sur tous les aspects de la formation des fonds d&rsquo;investissement et de la restructuration de placements.</p>    <p>Particulièrement reconnus pour notre vaste expérience internationale, nous avons mené des opérations de financement au nom de sociétés menant leurs activités dans de nombreux pays d&rsquo;Europe, de l&rsquo;Asie, des Amériques, de l&rsquo;Afrique, de l&rsquo;Australasie, de la Communauté des États indépendants et en Russie.</p>    <p>Confiez vos mandats à Gowling&nbsp;WLG et vous ferez affaires avec une équipe de professionnels chevronnés des marchés financiers qui offrent un service personnalisé et qui tiennent votre entreprise et sa réussite à cœur. N&rsquo;hésitez pas à communiquer avec un membre de notre groupe pour savoir comment nous pouvons vous être utiles.</p>  ",GWLG.Global,e296f021-59e1-410e-a0ad-0626e49ce506;a2b7b2e1-b2ce-441b-8021-2c65bd258ef7,60BB1A30-82DE-4038-AA38-9B01A87215C6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{783579A7-C423-44B6-AC93-3C05ADB31EBC}|{F3420C43-8321-4BBF-A6E7-D2AA815C7420}
410,/Services/Competition-Law-Antitrust/Overview,fr-CA,4ABA8EB7-8BEA-4965-9D80-BFC125F2583E,Aperçu,Aperçu,"Les questions touchant au droit de la concurrence sont de plus en plus complexes et les enjeux qui en découlent sont considérables, dépassant souvent les simples frontières nationales. ",NULL,NULL,"<p>Les questions touchant au droit de la concurrence sont de plus en plus complexes et les enjeux qui en découlent sont considérables, dépassant souvent les simples frontières nationales.</p>    <p>Vous faites l&rsquo;objet d&rsquo;un recours collectif ou d&rsquo;une enquête sur un cartel? Vous envisagez réaliser une acquisition? Vous êtes aux prises avec des questions de distribution ou d&rsquo;établissement de prix? Vous êtes accusé d&rsquo;abus de pouvoir sur le marché? Ou vous devez répliquer à la dernière manœuvre d&rsquo;un concurrent? Peu importe ce qui vous empêche de dormir la nuit, il est primordial de consulter des conseillers compétents et chevronnés en qui vous avez confiance.</p>    <p>Forts d&rsquo;une solide feuille de route, les spécialistes de Gowling&nbsp;WLG vous guideront dans ce domaine complexe et dynamique en vous fournissant un avantage concurrentiel, des conseils stratégiques et judicieux sur le plan technique, ainsi que des directives claires quant aux prochaines étapes à suivre.</p>    <p>Dans la plupart des cas, vous avez besoin de solutions urgentes. Notre équipe réagit rapidement dans n&rsquo;importe quelle situation touchant des secteurs clés &ndash; l&rsquo;agrochimie, l&rsquo;aviation, l&rsquo;automobile, la construction, l&rsquo;énergie, les biens de consommation courante, les aliments et boissons, les soins de santé, la construction mécanique lourde, les sciences de la vie ainsi que la technologie, les médias et les télécommunications.</p>    <p>Nos clients du monde entier apprécient notre expertise et nous font confiance&nbsp;: ils considèrent notre équipe comme étant le prolongement de la leur. Nous recherchons constamment des solutions pratiques uniques aux problématiques propres à votre marché, et nous partageons la connaissance des processus et des tactiques que nous avons acquise en travaillant auprès des instances réglementaires et de concurrence.</p>    <p>Composée de spécialistes de première instance et du droit antitrust, notre équipe est fière de régler les problèmes de ses clients quant à divers domaines et questions de droit de la concurrence et droit antitrust&nbsp;:</p>    <ul>   <li>Aide publique</li>   <li>Autorisation de fusion&nbsp;à l&rsquo;échelle nationale et multiterritoriale (y compris les examens d&rsquo;investissement étranger, au besoin)</li>   <li>Cartels&nbsp;&ndash; enquêtes et demandes de renseignements dans le cadre de procédures civiles et criminelles dans plusieurs pays (incluant des enquêtes internes et des demandes de clémence et d&rsquo;immunité)</li>   <li>Consultation quotidienne pour les sociétés mondiales et les nouveaux arrivants novateurs sur le marché</li>   <li>Enjeux tarifaires</li>   <li>Ententes de coopération et alliances stratégiques</li>   <li>Interface relative à la propriété intellectuelle et au droit de la concurrence&nbsp;(incluant l&#39;utilisation équitable, raisonnable et non discriminatoire ainsi que le mauvais usage des systèmes de réglementation)</li>   <li>Litige et arbitrage privés en matière de concurrence (y compris les recours collectifs nationaux et transfrontaliers pour infraction aux lois antitrust)</li>   <li>Monopole (position dominante)</li>   <li>Avis&nbsp;stratégiques concernant des questions essentielles liées aux activités commerciales</li>   <li>Poursuites criminelles menées contre des individus</li>   <li>Problèmes liés à l&rsquo;association commerciale</li>   <li>Stratégies d&rsquo;approvisionnement et de distribution</li>  </ul>    <p>Gowling&nbsp;WLG vous offre aussi des services de planification essentiels aux activités commerciales pour minimiser votre exposition aux risques antitrust dans la réalisation de vos objectifs commerciaux. Nous fournissons un soutien pratique et un leadership éclairé stratégique, en particulier dans le contexte d&rsquo;examen de fusion, et nous opposons une défense vigoureuse lors des litiges et enquêtes touchant au droit antitrust.</p>    <p>Nous avons de l&rsquo;expérience en matière de présentation d&rsquo;affaires complexes auprès d&rsquo;organismes chargés de l&rsquo;application du droit de la concurrence, notamment le Tribunal de la concurrence du Canada, la Commission européenne, la Cour européenne de justice et les tribunaux des États membres de l&rsquo;UE, y compris la Haute Cour de justice d&rsquo;Angleterre et le <em>Competition Appeal Tribunal. </em></p>    <p>Gowling WLG compte plus de 1&nbsp;400&nbsp;professionnels juridiques à l&rsquo;échelle mondiale. Soyez assurés que nous mobiliserons les meilleures ressources pour régler efficacement vos problèmes liés au droit de la concurrence et au droit antitrust auxquels vous êtes confronté, tout en fournissant un service, une plus-value et des résultats exceptionnels. N&rsquo;hésitez pas à communiquer avec nous pour en savoir plus.</p>  ",GWLG.Global,2563a6d6-5f45-46c5-8698-e572a35f100b;ec64dba1-ee7d-40c8-8fc2-4bf4bf90939a,B3F9FCE6-B77C-4E15-978E-EAA664C609DC,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A81A1C5B-5720-46E3-A4D2-B244FDCE9F4B}|{AF678F2D-6656-417B-8705-EC3BAE51208E}
411,/Services/International-Arbitration/Overview,fr-CA,A6D7410A-49EE-4D65-9171-CC09D8E761A5,Aperçu,Aperçu,"Dans un marché aux dimensions mondiales, les litiges prennent de plus en plus l’ampleur d’affaires internationales. Notre équipe d’arbitrage international peut vous conseiller quant au règlement de tout litige, notamment quant aux procédures liées aux contrats transfrontaliers.",NULL,NULL,"<p>Dans un marché aux dimensions mondiales, les litiges prennent de plus en plus l&rsquo;ampleur d&rsquo;affaires internationales. Notre équipe d&rsquo;arbitrage international peut vous conseiller quant au règlement de tout litige, notamment quant aux procédures liées aux contrats transfrontaliers.</p>    <p>L&rsquo;arbitrage international offre plusieurs avantages potentiels aux intervenants commerciaux. En effet, ceux-ci bénéficient de plus d&rsquo;options et d&rsquo;un meilleur contrôle quant à la gestion du litige qui ne fera pas l&rsquo;objet d&rsquo;un procès devant des tribunaux nationaux. Ils profitent aussi de l&rsquo;expertise plus pertinente que les avocats possèdent d&rsquo;un tribunal en particulier, de la confidentialité qui découle de l&rsquo;arbitrage et de la possibilité accrue de la reconnaissance et de l&rsquo;exécution des sentences.</p>    <p>L&rsquo;arbitrage international est une forme de règlement des litiges que nous privilégions tout particulièrement et notre équipe saura vous guider tout au long du processus &ndash; de la rédaction de vos dispositions de règlement des différends à l&rsquo;arbitrage qui peut en découler.</p>    <p>Composée d&rsquo;avocats au Royaume-Uni, dans d&rsquo;autres pays d&rsquo;Europe, en Asie, au Moyen-Orient et au Canada, notre équipe compte sur des experts situés dans les grands centres d&rsquo;arbitrage de Londres, Paris, Dubaï et Singapour. Les membres de l&rsquo;équipe possèdent une grande expérience de l&rsquo;arbitrage partout dans le monde (tout particulièrement aux Bermudes, à Calgary, à Dubaï, à Genève, à Hong Kong, à Londres, à Moscou, à Paris, à Singapour et à Toronto).</p>    <p>Nous avons représenté des clients dans un large éventail d&rsquo;arbitrages institutionnels selon les règles de tous les grands organismes d&rsquo;arbitrage internationaux, dont la Cour pénale internationale (CPI), la Commission des Nations Unies pour le droit commercial international (CNUDCI), la Cour d&rsquo;arbitrage internationale de Londres (LCIA), le Centre international pour le règlement des différends relatifs aux investissements (CIRDI), le Centre d&rsquo;arbitrage international de Singapour (SIAC), la Commission chinoise d&rsquo;arbitrage de l&rsquo;économie et du commerce international (CIETAC), l&rsquo;Association américaine d&rsquo;arbitrage (AAA) et la Chambre de Commerce de Stockholm (SCC).</p>    <p>Peu importe le litige, nos conseils seront toujours à la hauteur des besoins uniques de votre entreprise. Nous avons réglé des différends complexes d&rsquo;ordre national et international par voie d&rsquo;arbitrage dans les domaines suivants&nbsp;:</p>    <ul>   <li>Assurances</li>   <li>Aviation</li>   <li>Bancaire et financier</li>   <li>Construction et génie</li>   <li>Énergie</li>   <li>Exploitation minière et environnement</li>   <li>Litiges entres les investisseurs et l&rsquo;État</li>   <li>Pétrole et gaz</li>   <li>Propriété intellectuelle</li>   <li>Ressources naturelles</li>   <li>Technologies de l&rsquo;information</li>  </ul>    <h3>Mandats représentatifs</h3>    <p>Parmi nos clients figurent d&rsquo;importants entrepreneurs en construction, des assureurs, des gouvernements nationaux, et des clients dans les secteurs de la technologie et de l&rsquo;aérospatiale. Voici quelques mandats marquants récents&nbsp;:</p>    <ul>   <li>Représentation du gouvernement de l&rsquo;Albanie dans un litige lié à la concession d&rsquo;une centrale hydroélectrique à l&rsquo;occasion d&rsquo;un arbitrage devant la Cour pénale internationale (CPI) découlant de réclamations d&rsquo;un concessionnaire italien, et à l&rsquo;occasion d&rsquo;un arbitrage connexe devant le Centre international pour le règlement des différends relatifs aux investissements (CIRDI) en vertu du traité bilatéral d&rsquo;investissement conclu entre l&rsquo;Italie et l&rsquo;Albanie.</li>   <li>Représentation d&rsquo;un entrepreneur d&rsquo;ingénierie international dans un litige portant sur 100&nbsp;M$ découlant de retards et de dépassements de coûts en lien avec la conception et la construction d&rsquo;un établissement industriel au Moyen-Orient.</li>   <li>Représentation d&rsquo;un entrepreneur international d&rsquo;envergure devant la Haute Cour de justice de l&rsquo;Angleterre et à l&rsquo;occasion d&rsquo;un arbitrage devant la CPI concernant un contrat pour des travaux liés à une institution emblématique de recherche sur l&rsquo;énergie à Riyad, impliquant une réclamation d&rsquo;un montant dépassant 150&nbsp;M$ US.</li>   <li>Représentation des réassureurs concernant les pertes découlant du naufrage du paquebot de croisière Costa Concordia.</li>   <li>Représentation des assureurs complémentaires d&rsquo;institutions financières dans le cadre de procédures d&rsquo;arbitrage ponctuelles (<em>Bermuda form</em>) visant une police d&rsquo;assurance, impliquant une réclamation sous-jacente d&rsquo;un montant d&rsquo;environ 50&nbsp;M$&nbsp;US liée aux commissions conditionnelles des courtiers.</li>   <li>Participation à un arbitrage devant la Cour d&rsquo;arbitrage internationale de Londres où le demandeur réclamait l&rsquo;annulation d&rsquo;une obligation non garantie et des dommages-intérêts concernant des allégations de violation d&rsquo;une entente de souscription d&rsquo;actions.</li>   <li>Représentation d&rsquo;un chantier naval dans le cadre d&rsquo;un arbitrage devant la <em>London Maritime Arbitration Association</em>, à l&rsquo;occasion d&rsquo;un litige avec l&rsquo;acheteur de l&rsquo;un des plus grands yachts au monde.</li>   <li>Représentation du défendeur dans le cadre d&rsquo;un arbitrage devant la CPI concernant la construction d&rsquo;une centrale nucléaire dans le nord de l&rsquo;Europe (4&nbsp;G$ &euro;) et à l&rsquo;occasion de deux&nbsp;règlements distincts et connexes.</li>  </ul>  ",GWLG.Global,4abe6d56-7b8f-463c-95b7-801fbc7e63da;3ae82526-329e-41d7-8e7e-7b14a7af12bc,CBACBAC0-ABB0-4B36-A8FC-3A060A5EF154,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B9DCAE1B-BB6D-4F10-AFC3-7C935B690008}|{3275D488-797C-47CE-A9DE-98A8ABFED5A2}
413,/Services/International-Arbitration/UK,fr-CA,C31FAFBE-DC11-48DF-A83F-E30C4D053FD1,Royaume-Uni ,Royaume-Uni ,"In a global marketplace, disputes are increasingly international affairs. Our international arbitration team can advise you on suitable dispute resolution procedures for cross-border contracts, and on resolving disputes when they arise.",NULL,NULL,"<p>In a global marketplace, disputes are increasingly international affairs. Our international arbitration team can advise you on suitable dispute resolution procedures for cross-border contracts, and on resolving disputes when they arise</p>    <p>International arbitration offers a number of potential benefits to commercial parties. These include a greater degree of choice and control over how a dispute is managed (when compared to litigation in national courts), greater relevant expertise of the tribunal, the confidentiality that comes with arbitration, and the potential for easier recognition and enforcement of awards.</p>    <p>International arbitration is a key part of our global dispute resolution offering, and our team is well placed to guide you through the process, from drafting your dispute resolution provisions to conducting any resulting arbitration.</p>    <p>The team comprises lawyers in the UK, Europe, Asia, the Middle East and Canada, with international arbitration experts situated in the major arbitration centres of London, Paris, Dubai and Singapore. Members of the team have extensive experience of arbitrations across the globe (including, in particular, Calgary, Dubai, Geneva, Hong Kong, London, Moscow, Paris, Singapore and Toronto)</p>    <p>We have represented clients in a wide range of institutional arbitrations under the rules of all of the major international arbitration bodies including ICC, LCIA, ICSID, SIAC, CIETAC, HKIAC, ICDR, AAA and the SCC, as well as in ad hoc disputes including under the UNCITRAL rules.</p>    <p>Regardless of the type of dispute, we will provide you with a consistent level of service that matches the unique needs of your business. We have resolved complex international and domestic arbitrations in the following areas:</p>    <ul class=""o-2-columns is-list-unstyled"">   <li>Aviation, aerospace and defence</li>   <li>Banking and finance</li>   <li>Construction and engineering</li>   <li>Energy</li>   <li>Information technology</li>   <li>Intellectual property</li>   <li>Investor state disputes</li>   <li>Insurance</li>   <li>IT</li>   <li>Life sciences</li>   <li>Oil and gas</li>   <li>Mining and environment</li>   <li>Natural Resources</li>   <li>Shipbuilding</li>   <li>Telecoms</li>  </ul>    <h3>Client Work</h3>    <p>The team&#39;s clients include major construction contractors, energy companies, clients in the technology and aerospace industries, and national governments. Recent highlights of our team members include:</p>    <ul>   <li>Acting for a Middle Eastern oil and gas company in ad hoc arbitration proceedings claiming multi-billion dollar damages against a national oil company in relation to its total failure to supply pursuant to a long-term gas supply agreement.</li>   <li>Acting for the Republic of Albania in two ICSID arbitrations pursuant to the Energy Charter Treaty and the Italy-Albania BIT relating to the alleged expropriation of a hydroelectric plant, a waste management project and a television station, as well as in two related ICC arbitration pursuant to a BOT Concession Agreement relating to the construction of a hydroelectric plant, with total claims exceeding US$1 billion.</li>   <li>Representing an international engineering contractor in a $100m dispute, arising out of time and monetary overruns arising in connection with the design and construction of an industrial facility in the Middle East.</li>   <li>Acting for the Respondent on an ICC Arbitration concerning the construction of a Nuclear Power Plant in Northern Europe (&euro;4 billion) and on two separate, connected adjudications.</li>   <li>Acting for a CIS-based high net worth individual in US$1 billion LCIA dispute against joint venture partners concerning mineral processing and mining assets, and involving the commencement of multiple related arbitrations relating to a complex corporate holding structure, applications to the Cypriot court for statutory relief, and to the US court for section 1782 discovery in support of foreign proceedings.</li>   <li>Acting for European pipeline gas and Middle Eastern LNG producers in price reviews under long term agreements subject to ICC arbitration.</li>   <li>Acting for an oil and gas major in a dispute against a national oil company subject to ICC arbitration for clarification of development rights under a North African production sharing contract.</li>   <li>Acting for numerous Russian and CIS based investors in LCIA arbitrations relating to claims for breaches of warranty under share purchase agreements, and breaches of joint venture and/or shareholder agreements.</li>   <li>Representing a high-profile international contractor in English High Court proceedings and in an ICC arbitration concerning a contract for work on a landmark energy research institution in Riyadh, for a claim in excess of US$150 million.</li>  </ul>  ",GWLG.UK,4abe6d56-7b8f-463c-95b7-801fbc7e63da;5a1d08c1-d6f1-46a7-8f11-b0a904a5bb3b;d860ac5f-06d9-4ddb-ab3a-fe70cc71745e,CBACBAC0-ABB0-4B36-A8FC-3A060A5EF154,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B9DCAE1B-BB6D-4F10-AFC3-7C935B690008}|5a1d08c1-d6f1-46a7-8f11-b0a904a5bb3b|{D6AE24B7-23BB-4364-AACB-EA33FDB9F5FB}
414,/Services/Corporate/Overview,fr-CA,2CFA2BE2-DA17-4B48-A630-19F54AAEA8A3,Aperçu,Aperçu,"Chez Gowling WLG, nous savons qu’il vous faut pouvoir compter sur des avocats de confiance prêts à s’adapter à vos besoins et répondre à vos attentes.",NULL,NULL,"<p>Pour fonctionner de manière optimale, une société a besoin de conseils avisés en droit des entreprises. Les fusions et restructurations à dimension mondiale ont tendance à faire les manchettes, mais votre entreprise doit aussi pouvoir traiter de nombreuses questions du quotidien pour favoriser sa croissance et aller de l&rsquo;avant.</p>    <p>Chez Gowling&nbsp;WLG, nous savons qu&rsquo;il vous faut pouvoir compter sur des avocats de confiance prêts à s&rsquo;adapter à vos besoins et répondre à vos attentes. Notre équipe spécialisée en droit des entreprises à l&rsquo;échelle internationale vous offre une gamme complète de services, du simple enregistrement de sociétés aux réorganisations complexes. Faites-nous part de vos attentes et nous y répondrons.</p>    <p>Gowling WLG compte parmi ses clients internationaux de grandes sociétés ouvertes et d&rsquo;importants organismes financiers, de même que des entreprises privées et des entrepreneurs. Nous offrons un vaste éventail de services de premier plan en matière d&rsquo;inscription d&rsquo;entreprises aux marchés alternatifs comme le <em>Alternative investment market</em> (AIM) et adoptons une approche dynamique des secteurs comme l&rsquo;énergie, l&rsquo;exploitation minière, l&rsquo;immobilier, les sciences de la vie et la technologie. C&rsquo;est ce dynamisme et l&rsquo;ampleur de notre gamme de services qui nous ont permis de conseiller des clients quant à des centaines d&rsquo;opérations d&rsquo;envergure ces dernières années.</p>    <p>Grâce à nos liens avec tous les intervenants du marché, nous saisissons bien la réalité de votre entreprise. De plus, notre portée nous permet d&rsquo;affecter les spécialistes tout indiqués à vos dossiers épineux, aidés notamment d&rsquo;un &nbsp;groupe de techniciens juridiques talentueux et d&rsquo;avocats chevronnés qui assurent la supervision des dossiers.</p>    <p>En faisant appel à nous, vous travaillerez avec des équipes intégrées composées de professionnels issus de nombreux domaines de pratique et capables de vous fournir des renseignements et conseils personnalisés. Afin de produire les résultats escomptés, nous nous adaptons aux échéanciers les plus serrés et résolvons efficacement les questions complexes.</p>    <p>Nos bureaux étant situés dans des pays clés partout dans le monde, nous pouvons gérer des projets de toute taille et fournir rapidement des services juridiques concertés, là où nos clients ont pignon sur rue.</p>    <p>Nous produisons des résultats concluants dans une variété de domaines du droit des entreprises, notamment&nbsp;:</p>    <ul>   <li>Capital d&rsquo;investissement</li>   <li>Convention entre actionnaires</li>   <li>Financement par actions</li>   <li>Fonds</li>   <li>Fusion, plan d&rsquo;arrangement et prise de contrôle</li>   <li>Gouvernance d&rsquo;entreprise</li>   <li>Prestation de services d&rsquo;un avocat général</li>   <li>Prestation de services de constitution et de secrétariat d&rsquo;une personne morale</li>   <li>Restructuration</li>   <li>Société de personnes</li>  </ul>    <p>Gowling&nbsp;WLG est un cabinet d&rsquo;avocats international axé sur ses clients et fournissant des services de calibre mondial en droit des entreprises à des sociétés nationales et internationales. N&rsquo;hésitez pas à communiquer avec nous pour déterminer comment nous pouvons vous être utiles.</p>  ",GWLG.Global,a2b7b2e1-b2ce-441b-8021-2c65bd258ef7;e296f021-59e1-410e-a0ad-0626e49ce506,CA126CE8-3692-45E8-A1BE-AA0808B0C37E,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F3420C43-8321-4BBF-A6E7-D2AA815C7420}|{783579A7-C423-44B6-AC93-3C05ADB31EBC}
415,/Services/Corporate/Germany,fr-CA,CEC7557E-DA53-4715-B890-C5F471607F54,Allemagne,Allemagne,"At Gowling WLG, we know how to steer international clients within Germany and beyond through the challenges associated with German corporate law.",NULL,NULL,"<p>Corporate law is practised the world over. But laws are different in every jurisdiction. How can you be sure that you&#39;re both complying with the law and getting the best deal when operating in Germany?</p>    <p>You need lawyers who understand both the local law and the global landscape.</p>    <p>At Gowling WLG, we know how to steer international clients within Germany and beyond through the challenges associated with German corporate law. With on-the-ground corporate teams in Stuttgart and Munich, we&#39;re also tightly integrated with our offices across Europe, Canada, the Middle East and Asia.</p>    <p>Many of our lawyers have worked in-house, and truly understand the needs and demands of corporates. We&#39;re committed to giving you our total focus through a service that&#39;s both hands-on and partner-led.</p>    <p>We regularly support major listed (domestic and foreign) companies, medium-sized businesses and financial investors. We advise many of the family-controlled Mittelstand companies, many of which are true hidden champions.</p>    <p>We&#39;re also sector experts, particularly in the automotive field: Stuttgart is home to many industry titans, including hundreds of suppliers and big players in other related sectors, such as mechanical engineering, tech, banking and insurance. We understand the unique requirements of our clients in their respective sectors.</p>    <p>Areas we cover include:</p>    <ul>   <li>Change of management</li>   <li>Compliance</li>   <li>Corporate governance</li>   <li>Corporate secretarial</li>   <li>General management and supervisory board matters</li>   <li>Reorganisations and restructurings</li>   <li>Shareholders&#39; meetings</li>   <li>Succession</li>  </ul>    <h3>Learn more</h3>    <p>If you want lawyers with the cultural awareness and legal skills required to give you the service you need in Germany, then let&#39;s work together.</p>  ",GWLG.Germany,199becac-9a85-4082-aec2-fd0969f7da84,CA126CE8-3692-45E8-A1BE-AA0808B0C37E,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B836F4F7-16A5-4E2A-9907-2341BCC30D29}
416,/Services/Projects/Overview,fr-CA,C100E8BB-F18A-4BB4-B84C-60863B557C5B,Aperçu,Aperçu,"Chaque projet comporte son lot de particularités au niveau commercial et juridique, et pour le mener à terme, chacun de ces niveaux doit être pris en compte. Il faut donc prévoir les risques et les obstacles potentiels, et assurer un solide leadership afin que toutes les parties prenantes travaillent de concert. ",NULL,NULL,"<p>Chaque projet comporte son lot de particularités au niveau commercial et juridique, et pour le mener à terme, chacun de ces niveaux doit être pris en compte. Il faut donc prévoir les risques et les obstacles potentiels, et assurer un solide leadership afin que toutes les parties prenantes travaillent de concert.</p>    <p>Gowling&nbsp;WLG offre des services juridiques couvrant tous les aspects de votre projet, quelle qu&#39;en soit la nature. À titre de chefs de file en gestion de projets juridiques, nous appliquons notre connaissance approfondie de votre milieu de travail pour traiter votre mandat dans le respect du budget et des délais impartis. Outre les questions de droit, nous pouvons jouer un rôle important pour amener les parties prenantes à transiger, veiller à ce que l&#39;échéancier du projet soit respecté et à ce que toutes les approbations nécessaires soient obtenues.</p>    <p>Travaillant auprès de tous les intervenants &ndash; des gouvernements, des entrepreneurs IAC et IAGC, des concepteurs-constructeurs, des exploitants, des banques et preneurs fermes, des consultants, des mandataires des prêteurs, des créanciers, etc. &ndash; nous avons une vision globale des enjeux et nos effectifs diversifiés garantissent que vous recevrez un service intégré, quel que soit l&#39;expertise requise ou l&#39;endroit où celle-ci est nécessaire.</p>    <p>Grâce à une expertise reconnue dans tous les domaines de compétences connexes, nous fournissons à votre équipe d&#39;infrastructure une assistance pendant toute la durée de votre projet. Notre large éventail de compétences découle de notre expérience sectorielle pointue dans des domaines comme les infrastructures en PPP, autres modes alternatifs, l&#39;énergie sous toutes ses formes, les secteurs minier, pétrolier et gazier et tous les types de construction et d&#39;ingénierie classiques.</p>    <p>Voici un aperçu des services que nous offrons :</p>    <ul>   <li>Approvisionnement : appels de qualification, appels de propositions, processus de sélection et de décision, différends liés à l&#39;approvisionnement</li>   <li>Conseils aux autorités gouvernementales et de réglementation</li>   <li>Construction et ingénierie</li>   <li>Droits et aménagement fonciers : acquisitions, location, permis, expropriation, zonage</li>   <li>Élaboration, rédaction et négociation de tous types de contrats, de concession, de construction, d&#39;exploitation, de maintenance et de gestion</li>   <li>Financement de projets (titres d&#39;emprunt et avoirs propres)</li>   <li>Planification de projets et stratégies de réalisation</li>   <li>Règlement de différends</li>   <li>Structuration de sociétés de projet</li>  </ul>    <p>Avant, pendant ou après l&#39;élaboration et la construction de votre projet, notre équipe peut vous aider à vendre ce dernier ou à le monétiser. Inversement, que vous soyez un acquéreur stratégique ou financier, nous pouvons vous aider pour l&#39;acquisition d&#39;un projet, quel que soit son stade de développement.</p>    <p>Présents dans le monde entier, nous sommes en mesure de traiter les complications qui peuvent survenir dans le contexte de projets transfrontaliers. Peu importe le lieu où se déroulent vos activités, vous pouvez nous faire confiance pour une gestion efficiente et efficace de votre projet.</p>    <p>Pour découvrir nos services, n&#39;hésitez pas à communiquer avec un membre de notre équipe.</p>  ",GWLG.Global,dd6fafb1-ecf7-491d-ac34-0e0f405cea0d;ce26ed51-95b0-44fd-86b0-2667fae0d46e,96FB7E9F-2D22-40A2-B6F6-5122615347A6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C1433A92-0CF3-4D12-B94E-64BCEDBF0F11}|{D56A07D1-3171-48B1-B4C1-D123FC657893}
417,/Services/Projects/UK,fr-CA,58033F2D-A69D-4A48-B090-64A3B8940DB0,Royaume-Uni ,Royaume-Uni ,"When it comes to choosing lawyers to handle large, complex projects anywhere in the world, Gowling WLG offers a winning combination.",NULL,NULL,"<p>When it comes to choosing lawyers to handle large, complex projects anywhere in the world, Gowling WLG offers a winning combination:</p>    <ul>   <li><strong>Experience</strong> - we advise on the most challenging and complex infrastructure and PPP projects being undertaken in the UK and internationally.</li>   <li><strong>Trusted advisers</strong> - our lawyers are established advisers to government bodies, contractors, sponsors and funders, and have a strong track record of delivering strategically important and high value projects.</li>   <li><strong>Commercial</strong> - we understand the full range of procurement models and advise on bid tactics and strategic procurement issues. Our team regularly advises on the sale and purchase of equity in PFI/PPP projects, different contracting structures including PFI/PPP, alliancing and partnering, wider markets initiative, outsourcing, prime contracting and long-term collaboration agreements.</li>  </ul>    <h3>PFI/PPP</h3>    <p>Ranked a first tier firm by Legal 500, we benchmark international best practice from our experience in the UK (which is a world leader in PFI and PPP) added to our work in the Middle East and Africa on PPP projects.</p>    <p>Team members have acted for the UK Government for nearly 20 years and have successfully closed a number of PPPs for the Department of Health Commercial Directorate, the Ministry of Justice and the Ministry of Defence.</p>    <p>Our lawyers are among the leading names for PFI/PPP work, with partner Stephen Kenny described as &quot;... a deal doer and solution finder, and he knows a lot about the subject&quot;, while partner David Fennellis &quot;diligent and commercial&quot;.</p>    <p>For international projects, partner Jonathan Brufal is considered a &quot;great lawyer&quot;, who is &quot;impressive, confident, articulate and knowledgeable&quot;.</p>    <p>Our expertise covers the following sectors:</p>    <h3>Transport and ports</h3>    <p>For organisations involved in transport infrastructure projects, our team has a strong track record including ports, highways, rail and light rail projects. We advised on three of the largest highways PPP schemes: the &pound;2.7 billion Birmingham Highways PFI, the &pound;2 billion Sheffield Highways PPP, and March&#39;s &pound;500 million M8 Project in Scotland.</p>    <p>Current international mandates include advising the Government of Rwanda on the development of several trade logistics PPP projects. Our lawyers are also working with the Kenya Ports Authority on restructuring the legal and regulatory framework for the ports sector in Kenya.</p>    <p>We won the Kenya mandate thanks to an impressive track record of advising on domestic and international maritime transactions, including the London Gateway Port and the Dakar, New Doha and Sokhna ports development projects.</p>    <h3>Waste</h3>    <p>The Gowling WLG team is at the forefront of waste infrastructure development in the UK, making it the ideal choice for cutting-edge advice in this developing area. Skills and experience have been honed waste management and treatment projects, including energy from waste.</p>    <p>Stephen Kenny advised the South London Waste Partnership on the development of an energy-from-waste PPP at Beddington. This project won the &quot;Best Waste/Energy/Water Project&quot; Award at the 2013 Partnerships Awards.</p>    <p>Our team also advised Waste Recycling Group (part of FCC) on its successful bid to design, build and operate a landmark &pound;145 million Energy from Waste facility for Lincolnshire County Council. Elsewhere in the UK, we act for bidders and funders on bids for waste PFI projects.</p>    <p>Internationally, team members advised CNM on the Bahrain Solid waste PPP project, the first project financed waste project in the Gulf Cooperation Council.</p>    <h3>Defence</h3>    <p>Clients choose our team for its market-leading knowledge of the defence sector, developed over time on a number of high-profile projects.</p>    <p>We acted for the UK Ministry of Defence on the CVF Carrier Project, the nuclear submarine programme and significant defence estates contracts. Our team also helped the MoD complete a major Air Traffic Services project to provide long-term air traffic management capability for the safe operation of all the MoD&#39;s main bases, airfields and air weapon ranges in the UK and overseas.</p>    <p>Further afield, our experts advised Organisation Conjointe de Coopération en matière d&#39;Armement (OCCAR) on the re-negotiation of a ground-breaking contract for the development and supply of up to 170 A400M military transport aircraft from Airbus Military S.L.</p>    <h3>Social infrastructure</h3>    <p>Acting on PFI/PPP projects in the health, social care, leisure and, social housing and serviced accommodation sectors gives our team an in-depth understanding of the legal and commercial issues and opportunities. We advised Lovell on the &pound;300 million North Tyneside Social Housing PFI and have extensive experience of acting on courts and secure accommodation PPP projects.</p>    <p>Our health expertise is bolstered by an ever-growing client list, which includes the biggest names among private sector healthcare providers, social care providers, life sciences, pharmaceuticals and the NHS. We advised the Worcestershire Acute Hospital NHS Trust on a project for the construction and operation of a new radiotherapy unit. The firm&#39;s healthcare team distinctive expertise and specialisms which set it apart from other healthcare practices.</p>    <p>Infrastructure clients include Abengoa, Amec, Amey, BNP Paribas, Equitix, Gloucestershire County Council, Government of Rwanda, Government of Kenya, Health Authority of Abu Dhabi, International Finance Corporate, London Borough of Croydon, Ministry of Defence, Morgan Sindall, National Health Service, Shropshire Council, South London Waste Partnership and TradeMark East Africa.</p>    <h3>Recognition</h3>    <p>The Projects team won the award for Infrastructure Projects Team of the Year category at The Lawyer 2017 after advising South London Waste Partnership on a programme of infrastructure works that will deliver significant investment in waste treatment infrastructure (including Energy from Waste) on one of the largest municipal waste services programmes in Europe.</p>  ",GWLG.UK,612ac63e-b8e8-4615-beb9-be3097aed2cf;ce26ed51-95b0-44fd-86b0-2667fae0d46e,96FB7E9F-2D22-40A2-B6F6-5122615347A6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}|{D56A07D1-3171-48B1-B4C1-D123FC657893}
420,/Services/Technology-media-and-telecoms/UAE,en-GB,1201FD76-7918-4313-BA14-25A3E316842F,UAE,UAE,"As the United Arab Emirates implements its National Innovation Strategy, we are witnessing a surge in convergence, disruption and technological innovation in the UAE.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Why Gowling WLG Dubai?</h3>    <h4>Global expertise, local knowledge and market insight</h4>    <p>You need a team which has local knowledge with an international perspective to provide you with expert, internationally benchmarked and effective solutions to address your legal needs in the Middle East. Your business interests don&#39;t stop at borders and neither do we.</p>    <p>Our Technology team in Dubai has worked across multiple jurisdictions (all GCC states, Europe, Asia Pacific and Africa), gaining a wealth of knowledge and experience and is therefore able to offer you international and market leading expertise. We have the ability to leverage from our 300 strong global tech team which spans markets such as the UK and the EU, Canada, Singapore and China.</p>    <p>We work closely with tech innovators/entrepreneurs, telecoms operators, media and digital organisations, regulators, IT service providers and disruptors in the Middle East&#39;s technology ecosystem.</p>    <h4>Sector-focused experience</h4>    <p>Technology and the connectivity that enables it will soon be ubiquitous. It will be applied across all sectors. As a firm, our sector approach sees our Technology practice advising across many sectors, including:</p>    <ul>   <li>Aviation, Aerospace &amp; Defence</li>   <li>Health &amp; Care</li>   <li>Automotive</li>   <li>Life Sciences</li>   <li>Retail, Leisure &amp; Hotels</li>   <li>Infrastructure</li>   <li>Energy</li>   <li>Construction and Engineering</li>  </ul>    <h4>We collaborate and work with our clients</h4>    <p>We work as an extension of your business so you can take full advantage of the emerging technologies that are changing the way industries operate around the world; but especially here in the Middle East.</p>    <p>Whether it&#39;s assisting you in developing your technology platforms; your first to market strategies and legal documentation; protecting and commercialising your technology; ensuring compliance with evolving regulatory frameworks; negotiating your supply chain contracts; advising on IT system integration transactions or guiding you through the regulatory complexities of FinTech and data privacy - we have the legal expertise to provide your business with peace of mind.</p>    <h4>We know technology and what matters to our clients</h4>    <p>We specialise in all tech and digital communications work, including:</p>    <div class=""grid-container grid-container-inline"" style=""padding-top:0;"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Strategic Sourcing</li>   <li>Protection &amp; Commercialisation of your Technology</li>   <li>Emerging &amp; Disruptive Technologies</li>   <li>FinTech (Blockchain, Cryptocurrencies, Robotics, Advanced Analytics, Smart Contracts &amp; IoT)</li>   <li>Infratech &amp; Smart Cities</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Digital Communications (telecoms, broadcasting and new media)</li>   <li>Cyber Security &amp; Data Privacy and Protection</li>   <li>Cloud Solutions &amp; Data Centres</li>   <li>E-commerce, Retail and Logistics</li>  </ul>  </div>  </div>  </div>    <p>Please contact us to find out more. We&#39;re here to help and guide you with any technology needs you have in the Middle East. &nbsp;&nbsp;</p>  ",GWLG.UAEDubai,34e4f40d-a7d6-4a3c-80e5-a3aa69943fa7;96a6554a-2ede-4287-8d0a-cab5081bdd4e,D6CD11A8-8003-488D-91B1-32F8C4FEF082,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e4f40d-a7d6-4a3c-80e5-a3aa69943fa7|{A49E3D63-72CE-45F1-9AC8-47BD9E6CBCFC}
421,/Services/Administrative-Law/Canada,en-GB,21F62516-CF8E-4B1F-AE78-0BF5DFB6B7EB,Canada,Canada,"We can help you navigate the complexities of administrative law and achieve your objectives. Our professionals have exceptional experience in the public and private sectors, enabling us to provide sophisticated administrative, constitutional, regulatory and public policy advice on virtually any matter.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Administrative law is a subset of public law that aims to regulate the relationship between the government and the governed (i.e., people and businesses) and serve as a check on governmental power. More specifically, it represents the body of general principles, including constitutional limitations, that shape the exercise of such power by public authorities.</p>    <p>Whether your business growth is hampered by governmental regulatory schemes, licensing issues or legislative limitations; or you are an individual who is subject to discriminatory or other types of measures that infringe upon your personal rights, Gowling WLG can help you navigate the complexities of administrative law and achieve your objectives.</p>    <h3>Industry-leading experience</h3>    <p>Our leading professionals&nbsp;have exceptional experience in both the public and private sectors, affording us a 360-degree perspective that equips us to provide sophisticated administrative, constitutional, regulatory and public policy advice on virtually any matter.</p>    <p>Leveraging our deep industry experience and strong track record of success, we give you a competitive advantage, delivering technically sound, strategic guidance and absolute certainty on what needs to be done and when.</p>    <h3>Diverse experience</h3>    <p>Our clients include businesses of all types, as well as all levels of government and their agencies, trade and professional associations, First Nations, Métis and Inuit peoples, non-governmental agencies, Crown corporations, utilities companies, developers, and educational institutions.</p>    <p>Our professionals have represented the interests of our clients before public sector and government committees (including in the context of investigations), government task forces, administrative tribunals across Canada, and all levels of provincial, national and federal court.</p>    <p>We frequently act for individuals and businesses in constitutional cases concerning Division of Powers under ss. 91 and 92 of the <em>Constitution Act, 1867</em>, the <em>Canadian Charter of Rights and Freedoms</em> and s. 35 of the <em>Constitution Act, 1982</em>. We also represent clients in human rights complaints under provincial human rights legislation or the <em>Canadian Human Rights Act</em>.</p>    <h3>Attuned to your world</h3>    <p>In a world with increasing regulation and compliance requirements, you need to know what changes are around the corner and how they could affect your business. Our international network of business law professionals are actively engaged with critical regulatory departments and industry organizations across the globe. Harnessing the power of these relationships, we help clients stay in the know and advance proposed regulatory amendments with key decision-makers.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fAdmin-Law%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Highlights|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Related services</h3>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li><a href=""~/en/services/canada-north/#canada"">Canada North</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#canada"">Climate Change</a></li>   <li><a href=""~/en/services/competition-law-antitrust/#canada"">Competition &amp; Antitrust</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#canada"">Employment, Labour &amp; Equalities</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#canada"">Environmental Law</a></li>   <li><a href=""~/en/services/financial-services-regulation/#overview"">Financial Institutions Regulatory</a></li>   <li><a href=""~/en/services/gaming/#canada"">Gaming</a></li>   <li><a href=""~/en/services/government-affairs/#canada"">Government Affairs</a></li>   <li><a href=""~/en/services/immigration/#canada"">Immigration</a></li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li><a href=""~/en/services/indigenous-law/#canada"">Indigenous Law</a></li>   <li><a href=""~/en/services/international-trade-and-customs/#canada"">International Trade</a></li>   <li><a href=""~/en/services/medical-defence-health-law/#canada"">Medical Defence &amp; Health Law</a></li>   <li><a href=""~/en/services/mergers-acquisitions/#canada"">Mergers &amp; Acquisitions</a></li>   <li><a href=""~/en/services/pensions/#canada"">Pensions</a></li>   <li><a href=""~/en/services/procurement/#canada"">Procurement</a></li>   <li><a href=""~/en/services/restructuring-insolvency/"">Restructuring, Bankruptcy &amp; Insolvency</a></li>   <li><a href=""~/en/services/trademarks-brands-designs/#canada"">Trademarks, Brands &amp; Designs</a></li>   <li><a href=""~/en/services/supreme-court-of-canada-services/#canada"">Supreme Court of Canada Services</a></li>  </ul>  </div>  </div>  </div>    <h3>Learn more</h3>    <p>To learn more about how we can help you succeed, please contact any member of our team.</p>  ",GWLG.Canada,e1494d17-697e-438b-9484-5ad5e822fffc;f63465af-154c-4d26-b2ab-6bc7cc79f913,2238A4D0-69C4-4C59-8DBC-79CB6E766BDF,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{78C22170-1BB8-4A5E-82F3-D7DA5E1C1EAB}|{5B635900-49C8-4921-A179-D6EAB83D1146}
422,/Services/Capital-Markets/Singapore,fr-CA,73B72541-77A9-4CAA-A358-7F59F4DBFE1F,Singapour,Singapour,,NULL,NULL,<p>Singapore</p>  ,GWLG.Singapore,NULL,60BB1A30-82DE-4038-AA38-9B01A87215C6,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
424,/Services/Administrative-Law/Canada,fr-CA,21F62516-CF8E-4B1F-AE78-0BF5DFB6B7EB,Canada,Canada,Nous pouvons vous aider à naviguer dans les complexités du droit administratif et à atteindre vos objectifs.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Le droit administratif est une branche du droit public qui vise à réglementer la relation entre le gouvernement et les gouvernés (les personnes et les entreprises) et qui permet de contrôler le pouvoir gouvernemental. Plus précisément, il représente l&#39;ensemble de principes généraux, y compris les limites constitutionnelles, qui définissent l&#39;exercice de cette autorité par les pouvoirs publics.</p>    <p>Que vous soyez une entreprise dont la croissance est entravée par des régimes de réglementation gouvernementaux, des questions relatives aux licences ou à des contraintes législatives, ou que vous soyez une personne visée par des mesures discriminatoires ou d&#39;autres types de mesures portant atteinte à vos droits personnels, Gowling&nbsp;WLG peut vous guider dans le dédale du droit administratif et vous aider à atteindre vos objectifs.</p>    <h3>Une expertise à la pointe de l&#39;industrie</h3>    <p>L&#39;expérience exceptionnelle de nos professionnels dans les secteurs public et privé nous donne une perspective à 360&nbsp;degrés, nous permettant ainsi d&#39;offrir des conseils judicieux en matière de droit administratif, de droit constitutionnel, de réglementation et de politique publique sur pratiquement tout sujet.</p>    <p>Forts de notre expérience sectorielle approfondie et de nos longs antécédents de succès, nous conférons un avantage concurrentiel en vous offrant des conseils stratégiques et solides sur le plan technique, en plus d&#39;une certitude absolue quant à ce qui doit être fait et à quel moment.</p>    <h3>Une expérience diversifiée</h3>    <p>Nous comptons parmi nos clients des entreprises de tous genres, ainsi que tous les paliers de gouvernement et leurs agences, des associations commerciales et professionnelles, les Premières Nations, les Métis et les Inuits, des organismes non gouvernementaux, des sociétés d&#39;État, des sociétés de services publics, des promoteurs et des établissements d&#39;enseignement.</p>    <p>Nos professionnels ont représenté les intérêts de nos clients devant des comités du secteur public et du gouvernement (y compris dans le cadre d&#39;enquêtes), des groupes de travail du gouvernement, des tribunaux administratifs partout au Canada, ainsi que devant tous les paliers des tribunaux provinciaux et fédéraux.</p>    <p>Nous représentons fréquemment des personnes et des entreprises dans des affaires de droit constitutionnel quant au partage des compétences conformément aux articles&nbsp;91 et 92 de la <em>Loi constitutionnelle de 1867</em>, à la <em>Charte canadienne des droits et libertés </em>et à l&#39;article&nbsp;35 de la <em>Loi constitutionnelle de 1982</em>. Nous représentons aussi des clients dans le cadre de plaintes relatives aux droits de la personne en vertu des lois provinciales à cet égard ou de la <em>Loi canadienne sur les droits de la personne</em>.</p>    <h3>Axés sur votre monde</h3>    <p>Compte tenu de la réglementation et des exigences accrues en matière de conformité, vous devez connaître les changements imminents et leur incidence potentielle sur votre entreprise. Notre réseau international de professionnels du droit des affaires intervient activement auprès des ministères responsables de la réglementation ainsi qu&#39;auprès des organisations sectorielles à l&#39;échelle internationale. En exploitant le potentiel de ces relations, nous aidons nos clients à rester informés et promouvons des modifications réglementaires proposées auprès de décideurs clés.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fAdmin-Law%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Voici+quelques+mandats+repr%c3%a9sentatifs+r%c3%a9cents+%3a|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Pour en savoir plus</h3>    <p>Pour en savoir davantage sur la façon dont nous pouvons vous guider vers la réussite, veuillez communiquer avec l&#39;un ou l&#39;autre des membres de notre équipe.</p>  ",GWLG.Canada,e1494d17-697e-438b-9484-5ad5e822fffc;f63465af-154c-4d26-b2ab-6bc7cc79f913,2238A4D0-69C4-4C59-8DBC-79CB6E766BDF,NULL,0,1,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{78C22170-1BB8-4A5E-82F3-D7DA5E1C1EAB}|{5B635900-49C8-4921-A179-D6EAB83D1146}
426,/Services/International-Trade-and-Customs/Overview,en-GB,A4BA10B3-81A8-432B-843F-DC2CA3B1979B,Overview,Overview,"Expertise in international trade and customs, assisting with compliance challenges in the fields of customs, trade and cross-border regulatory matters.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fInternational-Trade-and-Customs%2fFAQ-Services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)International+Trade+and+Customs+Services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <p><iframe allow=""autoplay; fullscreen"" allowfullscreen="""" frameborder=""0"" height=""360"" src=""https://player.vimeo.com/video/383573985"" style=""width:100%;"" title=""Why you should choose us for international trade &amp; customs"" width=""640""></iframe></p>    <h2>Customs and trade specialists with expertise</h2>    <blockquote>  <p style=""text-align:center;"">[They are]&hellip; able to anticipate likely policy responses as well as advise on the law.<cite>Chambers UK</cite></p>  </blockquote>    <p>Our work has enabled us to provide our clients with a first-class understanding of this area of the law. Examples of past projects include:</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Audit Support</h3>     <p>Assisting a high street retailer through a prolonged voluntary disclosure process. The disclosure involved a review of the classification of products and the implementation of a process for instructing freight forwarders. The client was able to avoid penalties of over &pound;300,000.</p>   </li>   <li>   <h3>Customs valuation</h3>     <p>Advising on the customs valuation to be applied at import following the re-organisation of a multi-national consumer products business. Working with our supply chain and contract law teams, we tested the supportability of the proposed value as an arms-length transaction for customs purposes.</p>   </li>   <li>   <h3>Tariff Suspension Application</h3>     <p>Acting for an importer of fine chemicals for the oil and gas industry. We successfully applied for the suspension of EU customs duties on a highly technical product. This involved building a business case that demonstrated that the product could not be sourced on the EU domestic market.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Brexit</h3>     <p>Working with a major pharmaceutical company to assess the regulatory landscape post-Brexit and the impact for them on customs compliance. We advised on which entity could legally act as an importer/exporter of record, the data required to complete the import/export declaration and the process for an Authorised Economic Operator Application.</p>   </li>   <li>   <h3>Trade Controls</h3>     <p>Conducting a pan European multi-site remote review of a Tier 1 supplier to the defence industry. Our team advised on any compliance risks with EU export controls legislation. We provided the Head of Legal and Compliance with an indication of sites that required a more comprehensive audit whilst ensuring business disruption was minimised.</p>   </li>  </ul>    <h2>Global recognition for customs and trade</h2>    <blockquote>  <p style=""text-align:center;"">&quot;[The team&#39;s advice] is &quot;very commercial, coherent and clear.&quot;<cite>Chambers UK</cite></p>  </blockquote>    <p>Recognised by a host of prestigious legal directories worldwide, our International Trade and Customs team have the expertise to advise you on both the opportunities and risks in this area.</p>    <p>Chambers and Partners ranks our Canadian team in tier two, highlighting its track record in handling litigation in the international trade arena. The team were recognised in the 2019 <em>Canadian Legal Lexpert Directory</em> for International Trade Regulation.</p>    <p>Our UK team are ranked by Legal 500 in tier three for EU and Competition: Trade, WTO Anti-Dumping and Customs, highlighting the &quot;professional service with queries answered clearly&quot;.</p>    <h2>Industry expertise</h2>    <p>Our understanding of the international trade and customs landscape has taken our team to matters across industries. Our areas of sector expertise include:</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/sectors/automotive/global/"" target=""_blank"">Automotive</a></li>   <li><a href=""~/en/sectors/food-beverage/global/"" target=""_blank"">Food &amp; Beverage</a></li>   <li><a href=""~/en/sectors/life-sciences/global/"" target=""_blank"">Life Sciences</a></li>   <li><a href=""~/en/sectors/mining/global/"" target=""_blank"">Natural Resources</a></li>   <li><a href=""~/en/sectors/retail-leisure-hotels/global/"" target=""_blank"">Retail, Leisure &amp; Hotels</a></li>   <li><a href=""~/en/sectors/tech/global/"" target=""_blank"">Tech</a></li>  </ul>    <h2>Contact our international team</h2>    <p>Our team of trade and customs specialists have the expertise and knowledge to support you with the challenges you face. Contact us today to navigate the uncertainty and find new opportunities.</p>    <p style=""text-align: center;""><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>    <h3><a href=""https://gowlingwlg.com/en/people/bernardine-adkins/"">Bernardine Adkins</a><br />  Partner, Head of EU, Trade and Competition (UK)</h3>    <p>Bernardine has over 25 years&#39; experience in EU, trade and competition law. She provides strategic advice to clients before the European Commission and the Competition Markets Authority. Bernardine is utterly client-focused and brings the technical cutting edge to every matter on which she works.</p>    <h3><a href=""https://gowlingwlg.com/en/people/wendy-wagner/"">Wendy J. Wagner</a><br />  Partner (Canada)</h3>    <p>Wendy&#39;s practice focuses on international trade law, as well as privacy, access to information and defamation law. She represents clients in matters involving trade and investment agreements, export controls and sanctions/embargoes, and all aspects of customs compliance.</p>  ",GWLG.Global,2563a6d6-5f45-46c5-8698-e572a35f100b;afc382e9-2b75-4a26-9e20-0a8c68694164,BAC2F2F8-09C0-4D06-B0C8-98D9567ADFC7,NULL,0,1,NULL,"<p>With trade wars and Brexit making the headlines, the world of international trade and customs is in flux. To grow existing markets and access new ones, businesses need to be confident in the advice they receive to navigate the uncertainty.</p>    <p>By understanding the world you do business in we can help you to overcome the challenges presented right now in the global trade landscape. As governments and trade blocs look to forge new relationships through trade agreements, we can assist you in identifying opportunities to lower costs and shape the supply chain.</p>  ",Expertise in Trade and Customs,1db3879a-3100-43b7-b5a5-27e1b7f7bdac;a6acb16d-36d8-4607-8157-ea4d7707c2f9,See more articles,Stay ahead,"<p>Keep up-to-date with the latest in customs and trade by registering for our updates.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us today,"<p>For advice on international trade and customs, contact a member of our team.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",e37fc7fb-2cf9-453c-a841-9f228d86f66e,/en/insights-resources/?page=1&locations=&services=463,NULL,{A81A1C5B-5720-46E3-A4D2-B244FDCE9F4B}|{5AFA17F4-B29F-4E20-A9C6-AFD5CDAE180D}
430,/Services/Municipal-Law/Canada,en-GB,BC9AA2A9-DBDC-4392-8B74-BE4F4BB055E0,Canada,Canada,"Acting for property owners, developers and municipalities, as well as an array of private stakeholders that regularly interface with municipal bodies, Gowling WLG's Municipal lawyers apply a creative, practical approach to a range of challenges.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Private sector advice you can count on</h3>    <p>Whether developing land, forging public-private partnerships or fine-tuning your land-use planning strategy, you need an experienced legal partner that can provide exceptional service and practical solutions to keep your municipal project on the right track.</p>    <p>Gowling WLG works closely with a range of private-sector clients - including developers, landowners, rate-payer groups, urban planners, appraisers, engineers and brokerage firms - on a host of municipal/planning law issues. Whatever your objective, we help you navigate the municipal/planning landscape and work to ensure your project has the best chance of success.</p>    <h3>Helping Canada&#39;s municipalities grow</h3>    <p>Gowling WLG is the trusted adviser to many of Canada&#39;s major municipalities, and we have multiple retainers that cover a suite of key strategic legal services. These include matters relating to codes of conduct, municipal liability, municipal planning, environmental assessments, expropriation, contaminated lands and reclamation, environmental regulatory approvals &amp; orders, and public tenders.</p>    <h3>Multidisciplinary expertise</h3>    <p>Operating in both official languages, our Municipal Law Group works within one of Canada&#39;s largest and most respected full-service law firms. Members of our team represent a diverse range of practice areas - including environmental law, expropriations law, Indigenous law, civil and commercial litigation, infrastructure, real estate and government relations.</p>    <h3>Personal service, efficient results</h3>    <p>Gowling WLG is guided by the belief that the best way to serve our clients is to be in tune with their world, aligned with their opportunity and ambitious for their success. That&#39;s why our team is always focused on your evolving needs and demands, helping you anticipate opportunities and obstacles well in advance.</p>    <p>We&#39;re collaborative, flexible, responsive and available - whenever and wherever you need us. We&#39;re also committed to conducting business in the most efficient, effective way possible, ensuring that you get the maximum value out of your legal spend.</p>    <h3>Areas of expertise</h3>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Appellate and real property related litigation</li>   <li>Civil claims involving municipalities</li>   <li>Conservation authorities</li>   <li>Construction law</li>   <li>Contaminated lands</li>   <li>Development</li>   <li>Development charges</li>   <li>Environmental reviews &amp; assessments</li>   <li>Environmental planning</li>   <li>Expropriation</li>   <li>Government relations</li>   <li>Heritage</li>   <li>Indigenous law</li>   <li>Infrastructure</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Judicial reviews</li>   <li>Lobbying</li>   <li>Local Planning Appeal Tribunal appeals</li>   <li>Municipal conflict of interest</li>   <li>Municipal finance</li>   <li>Municipal law</li>   <li>Municipal privacy matters</li>   <li>Municipal project management</li>   <li>P3 contracts</li>   <li>Planning and zoning</li>   <li>Property tax assessment and appeals</li>   <li>Regulatory matters</li>   <li>Real estate &amp; urban development</li>   <li>Rural property</li>  </ul>  </div>  </div>  </div>  ",GWLG.Canada,33136a2e-83db-4377-81d9-81fa56cf4154,BCB53FC6-325B-4847-AF54-0BCD1C56043F,NULL,0,0,NULL,"<p>Acting for property owners, developers and municipalities, as well as an array of private stakeholders that regularly interface with municipal bodies, Gowling WLG&#39;s Municipal Law Group applies a creative, practical approach to a range of challenges - from nuanced development and planning issues to complex civil litigation actions, and much more.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2FF1DAE3-0F9E-4CF2-BAA4-B427608C5207}
431,/Services/Intellectual-Property-Transactions/Canada,en-GB,FEC24485-662A-4D0C-A71D-24EE91C6C1EA,Canada,Canada,"We are dedicated to helping Canadian and international clients strategically manage, protect and maximize their IP portfolios and successfully execute IP transactions and investments.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Drawing on our global network of IP professionals, we provide practical advice to large corporations and early-stage businesses alike &mdash; from tech, life sciences and health care organizations to financial services, media and telecommunications, and food and beverage companies. Our team members are specialists within these sectors, which means we have the in-depth experience required to help our clients overcome their industry&#39;s unique challenges and realize the full value of their IP.</p>    <h2>Leading your IP transactions</h2>    <p>Intangible assets are playing an increasingly integral role in the operations of many businesses. That is why our IP team provides proactive, strategic advice on a full range of technology and IP matters including:</p>    <ul>   <li>Examining and negotiating patent and trade secret licenses</li>   <li>Trade secrets, protection and management advice</li>   <li>Open source matters and cloud computing matters</li>   <li>IP audits and due diligence</li>   <li>IP portfolio management</li>   <li>Complex strategic transactions involving IP and technology matters</li>   <li>Commercial agreements and contracts&nbsp;(such as&nbsp;outsourcing agreements and IT equipment contracts)</li>   <li>Patent strategies/patent portfolio valuation</li>  </ul>    <h2>One-stop shop</h2>    <p>Gowling WLG&#39;s full-service platform allows us to offer top-tier IP advice alongside renowned corporate, commercial and corporate finance M&amp;A capabilities. This unique mix of expertise enables us to handle any legal issue that may arise for your business.</p>    <p>As a one-stop shop for legal services, we are just as comfortable advising on patent and trademark filings as we are on tax, competition or Indigenous rights issues. And with seven Canadian offices, we provide seamless, multi-jurisdictional&nbsp;legal support in major business centres across the country.</p>    <h2>Working with you</h2>    <p>Clients trust us to help them grow and protect their business, making us the go-to firm for their all of their legal needs. We know that IP is critical to commercial success, which is why we keep our clients informed and engaged throughout the process &ndash; from startup to acquisition and everything in between. Our firm collaborates seamlessly across all practice areas and countries to ensure that all of your needs are met.</p>    <h2>Global capabilities</h2>    <p>With 19 offices across Canada, the UK, Continental Europe, the Middle East and Asia, we&#39;ve built a large network of local counsel in jurisdictions around the world to manage our clients&#39; global IP portfolios. The diversity of services we offer to the global market is unmatched by any other IP boutique in Canada.</p>    <h2>Related expertise</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/corporate-commercial/#canada"">Corporate</a></li>   <li><a href=""~/en/services/mergers-acquisitions/#canada"">Mergers and Acquisitions</a></li>   <li><a href=""~/en/services/capital-markets/#canada"">Capital Markets</a></li>   <li><a href=""~/en/sectors/food-beverage/global/"">Food &amp; Beverage</a></li>   <li><a href=""~/en/services/intellectual-property/#canada"">Intellectual Property</a></li>   <li><a href=""~/en/sectors/life-sciences/global/"">Life Sciences</a></li>   <li><a href=""~/en/services/patents/#canada"">Patents</a></li>   <li><a href=""~/en/sectors/tech/global/"">Tech</a></li>  </ul>    <h2>Top-ranked team</h2>    <p>Gowling WLG is continually ranked among the top IP firms in Canada and the world. We were named the 2019 &quot;Canadian Firm of the Year&quot; by <em>Managing Intellectual Property (MIP) </em>in recognition of our unparalleled ability to help our clients protect and enhance their IP&nbsp;assets. We are also consistently ranked as a top IP firm by prestigious legal directories such as <em>Chambers</em>, <em>Legal 500</em>, <em>Best Lawyers</em> and <em>Lexpert</em>.</p>    <h2>Learn more</h2>    <p>Let us help you make the most of your IP portfolio. For more information about our IP transaction services, please contact <a href=""~/en/people/viona-m-duncan"">Viona Duncan</a> or <a href=""~/en/people/john-norman"">John Norman</a>.</p>  ",GWLG.Canada,425a9689-d70c-46ff-b7b6-8994bb782c5f;870774bf-534e-466c-be9a-e89fb3fb38bf,B27944DB-178F-4382-8DB7-7F29F749DE1C,NULL,0,1,NULL,"<p align=""left"">With one of the largest and most-respected intellectual property (IP) practices in Canada, Gowling WLG holds unmatched legal expertise in the areas of patents, trademarks, brands, designs, copyright and advertising. Working across a broad range of industries, we are dedicated to helping Canadian and international clients strategically manage, protect and maximize their IP portfolios and successfully execute IP-focused business transactions and investments.</p>  ",Highlights,NULL,More IP highlights from Canada,Stay connected,"<p><a href=""https://gowlingwlg.com/en/footer/updates"" id=""p_lt_ctl07_pageplaceholder_p_lt_ctl00_GWLG_Widgets_Banner2_lnk"">Sign up to receive our IP report newsletter for updates on the latest IP trends and developments that matter most to you.</a></p>  ",General filing inquiries,"<p>For inquiries pertaining to&nbsp;<abbr title=""Intellectual Property"">IP</abbr>&nbsp;prosecution filings or patent/trademark application filings, please contact us at&nbsp;<a href=""mailto:ipinfo@gowlingwlg.com"">ipinfo@gowlingwlg.com</a>.</p>  ",f096817c-914a-48af-8a3e-0ade98d26dc6,NULL,NULL,{680CF4CA-5812-4762-A9E4-D3A93109F739}|{A98C2246-8DFB-4F74-8E3F-6ED4A5BA4A75}
432,/Services/Expropriation-Law/Canada,en-GB,7F45E4CF-A848-45EB-81A1-1F320364DB7C,Canada,Canada,"Acting for both expropriated owners and expropriating authorities, Gowling WLG's national expropriation lawyers apply a creative, practical approach to a range of challenges.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Members of our team are recognized nationally for their expertise, including by <em>The Best Lawyers in Canada</em> and the <em>Canadian Legal Lexpert Directory.&nbsp; </em></p>    <h2>Expropriated owners</h2>    <p>Serving clients throughout Canada, our team helps guide expropriated owners &mdash; and other parties impacted by public infrastructure projects &mdash; through the expropriation process. Our private-sector clients include landowners, developers, corporations, homeowners and tenants. Whatever your objective, we help you overcome complex legal obstacles and achieve the best possible outcome. &nbsp;</p>    <h2>Expropriating authorities</h2>    <p>We act for a variety of public-sector clients in the acquisition of lands for public infrastructure projects (e.g., small municipal projects, light rail transit projects, hydro projects, highway expansions etc.) and advise on all aspects of expropriation law. Our services include the drafting of staff reports, by-laws, resolutions, notices, and pleadings; and the management and direction of all professional and expert services throughout the expropriation process.</p>    <h2>Multidisciplinary experience</h2>    <p>Operating in both official languages, our Expropriation Law Group works within one of Canada&#39;s largest and most respected full-service law firms. Members of our multidisciplinary team represent a diverse range of practice areas &mdash; including environmental law, land use planning, municipal law, Indigenous law, civil and commercial litigation, infrastructure, real estate and government relations.<strong> </strong></p>    <h2>Personal service, efficient results</h2>    <p>Gowling WLG is guided by the belief that the best way to serve our clients is to be in tune with their world, aligned with their opportunity and ambitious for their success. That&#39;s why our team is always focused on your evolving needs and demands, helping you anticipate opportunities and obstacles well in advance.</p>    <p>We&#39;re collaborative, flexible, responsive and available &mdash; whenever and wherever you need us. We&#39;re also committed to conducting business in the most efficient, effective way possible, ensuring that you get the maximum value out of your legal spend.</p>  ",GWLG.Canada,a57883c9-3681-4a3c-8b93-168264a3608f,91A5DE61-E923-49D1-B777-612B9F18F4E9,NULL,0,0,NULL,"<p>Acting for both expropriated owners and expropriating authorities, Gowling WLG&#39;s national Expropriation Law Group applies a creative, practical approach to a range of challenges &mdash; from informal negotiations to arbitration proceedings before administrative tribunals, including the Local Planning Appeal Tribunal and the courts.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{723A2C92-A911-47EB-A6D2-17761F7B8CE1}
433,/Services/Expropriation-Law/Canada,fr-CA,7F45E4CF-A848-45EB-81A1-1F320364DB7C,Canada,Canada,Le groupe de pratique national Droit de l’expropriation de Gowling WLG agit à la fois pour les propriétaires expropriés et les autorités expropriantes.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Les membres de notre équipe sont reconnus à l&rsquo;échelle nationale pour leur expertise, notamment par les publications The Best Lawyers in Canada et Canadian Legal Lexpert Directory. &nbsp;</p>    <h2>Propriétaires expropriés&nbsp;</h2>    <p>Au service de clients de partout au Canada, notre équipe guide les propriétaires expropriés (et les autres parties touchées par des projets d&rsquo;infrastructure publiques) dans le processus d&rsquo;expropriation. Nous comptons parmi nos clients du secteur privé des propriétaires fonciers, des promoteurs, des sociétés, des propriétaires résidentiels et des locataires. Quel que soit votre objectif, nous vous aidons à surmonter des obstacles juridiques complexes pour assurer votre succès. &nbsp;</p>    <h2>Autorités expropriantes &nbsp;</h2>    <p>Nous agissons pour un éventail de clients du secteur public dans le cadre d&rsquo;acquisitions de terrains pour des projets d&rsquo;infrastructure publique (p. ex., des petits projets municipaux, des projets de trains légers sur rail, des projets hydroélectriques, des prolongements d&rsquo;autoroutes, etc.), et nous offrons des conseils sur tous les aspects du droit de l&rsquo;expropriation. Nos services comprennent la rédaction de rapports, de règlements municipaux, de résolutions, d&rsquo;avis et de plaidoyers, ainsi que la gestion et l&rsquo;encadrement de tous les services professionnels et spécialisés tout au long du processus d&rsquo;expropriation.</p>    <h2>Une expertise multidisciplinaire</h2>    <p>Œuvrant dans les deux langues officielles du Canada, notre groupe Droit de l&rsquo;expropriation fait partie des cabinets juridiques multidisciplinaires les plus importants et respectés au pays. Les membres de notre équipe œuvrent dans une variété de domaines de pratique : droit de l&rsquo;environnement, aménagement urbain, droit municipal, droit autochtone, litige civil et commercial, infrastructures, immobilier, relations gouvernementales, etc.&nbsp;</p>    <h2>Un service personnalisé, des résultats probants</h2>    <p>Pour Gowling WLG, la meilleure façon de servir nos clients est d&rsquo;être axés sur leur monde, partenaires de leurs ambitions et investis dans leurs succès. C&rsquo;est pourquoi notre équipe est toujours à l&rsquo;écoute de vos besoins et requêtes en constante évolution, vous aidant à anticiper les possibilités comme les obstacles.</p>    <p>Collaboratifs, polyvalents et réactifs, nous sommes à votre disposition en tout temps. Nous nous engageons aussi à faire des affaires avec la plus grande efficacité, tout en veillant à maximiser la valeur de vos dépenses juridiques.</p>  ",GWLG.Canada,a57883c9-3681-4a3c-8b93-168264a3608f,91A5DE61-E923-49D1-B777-612B9F18F4E9,NULL,0,0,NULL,"<p>Le groupe de pratique national Droit de l&rsquo;expropriation de Gowling WLG agit à la fois pour les propriétaires expropriés et les autorités expropriantes. Il applique une approche créative et pratique à une gamme de défis : des négociations informelles en passant par les procédures d&rsquo;arbitrage devant les tribunaux administratifs, dont le Tribunal d&rsquo;appel de l&rsquo;aménagement local et les cours.&nbsp;</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{723A2C92-A911-47EB-A6D2-17761F7B8CE1}
434,/Services/Cyber-Security-Data-Protection-Law/Overview,en-GB,1CEEA5A3-800B-46DE-B329-AA1102C2E308,Overview,Overview,International data privacy and cyber security law firm with experienced data protection lawyers working across multiple jurisdictions. ,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>We are now living in a new world of technology and data. They are essential to both a business&#39; operations and its success. However, as innovations move forward the challenges that these assets present will only increase. Our team of cyber security and data protection lawyers takes a pro-active approach to safeguarding your world.</strong></p>    <p>Cyber attacks, special/sensitive data and data privacy regulations like <abbr title=""General Data Protection Regulation"">GDPR</abbr> are a worry for all businesses. The risk of financial loss and reputational damage is extremely real. We will work with you to both reduce any potential risks and manage them when they arise.</p>    <p>We have extensive experience advising national and international clients on their data protection, privacy and cyber security needs. Our team of legal professionals can help you strengthen your cyber security defences, protect your data and manage cyber breaches.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fCyber-Security-and-Data-Protection%2fCyber-Security-and-Data-Protection-Services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Cyber+security+and+data+protection+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>An experienced cyber security and data protection law firm</h2>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Online+ticket+company|(headline3)Housing+associations|(headline2)Financial+institutions|(copy1)Advised+on+a+security+incident+involving+customer+data.+Provided+counsel+on+the+data+breach+and+PCI+compliance%2c+as+well+as+implementing+a+breach+response+plan.|(copy3)Assisting+with+advice+around+data+protection%2c+the+Freedom+of+Information+Act+and+the+Environmental+Information+Regulations.|(copy2)Advising+international+financial+institutions+in+data+breach+crisis+management+and+using+new+technologies.+Advising+on+credit+card+operations%2c+including+cross-country+reviews+of+consumer+protection.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Loss+of+data|(headline3)Airlines+and+airports|(headline2)Tech+companies|(copy1)Advising+many+companies+on+data+breaches+caused+by+loss+or+theft+of+physical+records%2c+incorrect+security+settings+or+admin+errors.|(copy3)Advising+a+major+airport+on+drafting+agreements+for+IT+procurement+projects+that+were+essential+to+the+digital+transformation+of+the+business.|(copy2)Acting+for+some+of+the+largest+global+technology+companies+on+specific+privacy+issues+relating+to+their+latest+innovations+and+other+aspects+of+data+protection+and+GDPR+compliance.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightred|(width)|(height)^}{^widget|(bghover1)colour-lightblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)The+international+council+of+shopping+centres|(headline3)Health+services+provider|(headline2)Retail+and+web-based+companies|(copy1)Carrying+out+a+data+protection+audit%2c+as+well+as+creating+and+updating+data+maps%2c+privacy+notices%2c+policies+and+terms+and+conditions.|(copy3)Provided+cyber+breach+coaching+services+and+coordinated+notifications+after+the+client+had+experienced+unauthorised+access+to+their+cloud+storage+system.|(copy2)Advising+on+remote+data+storage%2c+privacy+policies%2c+information+collection%2c+employee+data+and+anti-spam+laws.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-aubergine|(width)|(height)^}</p>    <h2>Awards and recognition</h2>    <blockquote style=""text-align: center"">  <p style=""text-align:center"">They are the go-to firm for legal advice... they also have a nice way about them and are extremely approachable.<cite>Chambers UK</cite></p>  </blockquote>    <p>In the UK, Gowling WLG was recognised as &#39;Firm of the Year (Outside London)&#39; by the Legal 500 Awards in 2019 for Technology, Media and Telecoms. Our Canadian team were also recognised in 2019 by Chambers Canada and the Canadian Legal Lexpert Directory for their work in technology. The Best Lawyers in Canada 2019 recognised the team for its work in technology law and privacy and data security law.</p>    <p>Our international team brings together professionals from across a wide range of services to provide an all-encompassing cyber security and data protection practice.</p>    <p>Our level of experience allows us to give advice that understands how data protection standards should differ across industries. Our cross-sector and cross-border work gives us knowledge with a high level of detail but a broad perspective.</p>    <h2>Sectors</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/sectors/automotive/"" target=""_blank"">Automotive</a></li>   <li><a href=""~/en/sectors/energy/"" target=""_blank"">Energy</a></li>   <li><a href=""~/en/sectors/government-contracting-public-sector/"" target=""_blank"">Government Contracting &amp; Public Sector</a></li>   <li><a href=""~/en/sectors/real-estate/"" target=""_blank"">Real Estate</a></li>   <li><a href=""~/en/sectors/life-sciences/"" target=""_blank"">Life Sciences</a></li>   <li><a href=""~/en/sectors/health-care/"" target=""_blank"">Health &amp; Care</a></li>   <li><a href=""~/en/sectors/financial-institutions-services/"" target=""_blank"">Financial Institutions &amp; Services</a></li>   <li>Education/Universities</li>  </ul>    <h2>Contact our International team</h2>    <p>Our team of data protection lawyers spans across multiple jurisdictions. As information security and data privacy become more prevalent, your reputation and finances hang in the balance. Ensure you have practical and experienced counsel on hand to support you with your compliance and to guide you if the worst happens.</p>    <p>If you are seeking advice regarding data protection and cyber security, please do contact our team today.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/helen-davenport/"" target=""_blank"">Helen Davenport</a></strong><br />  Partner (UK)</p>    <p><a href=""~/en/people/jocelyn-paulley/"" target=""_blank""><strong>Jocelyn Paulley</strong></a><br />  Partner (UK)</p>    <p><a href=""~/en/people/wendy-wagner/"" target=""_blank""><strong>Wendy Wagner</strong></a><br />  Partner (Canada)</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><a href=""~/en/people/danhoe-reddy-girard/"" target=""_blank""><strong>Danhoé Reddy-Girard</strong></a><br />  Partner (France)</p>    <p><a href=""~/en/people/le-rong/"" target=""_blank""><strong>Le Rong</strong></a><br />  Director (China)</p>  </div>  </div>  </div>    <p style=""text-align:center""><a class=""c-button-red"" href=""~/en/people/?page=1&amp;services=516&amp;locations="" target=""_blank"">View our full team</a></p>  ",GWLG.Global,d3e0fa3e-1011-4fe0-b62a-88c920f62d49;75a219e7-ea84-4ba2-9990-61b83de62877;afc382e9-2b75-4a26-9e20-0a8c68694164;3972c5df-6060-467e-beeb-14ad8a3583c2;b0a7b3fc-4cb7-4be6-926c-4b5e385f1bb1;4bcdddc1-a500-4dd4-ac52-fd05abee5ef7;c0660c2d-79e7-42d8-b553-235b03ce0d4b,2E9A87E2-3D2E-4D69-BA9C-06B4B358CA0D,NULL,0,1,NULL,NULL,Expertise in Cyber Security and Data Protection Law,NULL,See more articles,NULL,NULL,NULL,NULL,e37fc7fb-2cf9-453c-a841-9f228d86f66e,/en/insights-resources/?page=1&locations=&services=516,NULL,{590B36A4-2EFB-4089-AE05-87B9B88B0154}|{2895F3B4-A117-4E62-AB3C-C05D4A1527B5}|{5AFA17F4-B29F-4E20-A9C6-AFD5CDAE180D}|{914BE6E6-9B28-4EEE-B0A7-3B0513F27D14}|{DE8EAE4B-1D4C-4084-B1C9-A00852B8C205}|{9CE439C1-2253-4714-81A2-A2EB6B9064A2}|{C68E493C-D649-481E-8A6A-DBC2117F96A9}
435,/Services/Governance-Risk-and-Compliance-GRC/Overview,en-GB,32F58465-4AA0-4469-B298-E3298B3520E4,Overview,Overview,"Integrated governance, risk and compliance services including ESG. International law firm with a cross-practice approach to risk management and compliance.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fGovernance-Risk-and-Compliance%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Governance%2c+Risk+and+Compliance+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Recognition</h2>    <blockquote>  <p style=""text-align:center;&quot;"">They are the go-to firm for legal advice... they also have a nice way about them and are extremely approachable.<cite>Chambers UK</cite></p>  </blockquote>    <p>Our team of risk management and compliance lawyers comprises of individuals from across our practice areas worldwide. Gowling WLG is consistently recognised by the likes of The Legal 500, Chambers UK, Chambers Canada, The Best Lawyers in Canada and the Canadian Legal Lexpert Directory.</p>    <h2>Client work</h2>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Housing+associations|(headline3)Trade+controls|(headline2)Brexit|(copy1)Assisting+with+advice+around+data+protection%2c+the+Freedom+of+Information+Act+and+the+Environmental+Information+Regulations.+Rolling+out+data+protection+compliance+programs+and+training+internal+data+protection+advisors.|(copy3)Conducting+a+pan+European+multi-site+remote+review+of+a+Tier+1+supplier+to+the+defence+industry.+Advised+on+any+compliance+risks+with+EU+export+controls+legislation.+Provided+an+indication+of+sites+that+required+a+more+detailed+audit+while+minimising+business+disruption.|(copy2)Working+with+a+major+pharmaceutical+company+to+assess+the+regulatory+landscape+post-Brexit+and+the+impact+for+them+on+customs+compliance.+We+advised+on+which+entity+could+legally+act+as+an+importer%2fexporter+of+record+and+the+process+for+an+Authorised+Economic+Operator+Application.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightblue|(width)|(height)^}{^widget|(bghover1)colour-lightred|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkblue|(headline1)Investment+banks|(headline3)Investment+funds|(headline2)Automotive|(copy1)Advising+on+a+variety+of+regulatory+matters+including+MiFID+II%2c+corporate+governance%2c+the+SMCR+and+board+remuneration%2c+FCA+Custody+Rules+and+the+new+EU+market+abuse+regime.|(copy3)Advising+the+managers+of+an+investment+fund+on+its+annual+environmental+report+and+GHG+emissions+reporting+duties.+This+included+undertaking+an+audit+of+its+reports+to+ensure+compliance.|(copy2)Advising+a+major+automotive+manufacturer+on+FCA+regulation+relating+to+consumer+finance%2c+on+a+major+project+involving+marketing+and+digital+distribution.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-aubergine|(width)|(height)^}</p>    <h2>Sectors</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/sectors/automotive/"">Automotive</a></li>   <li><a href=""~/en/sectors/energy/"">Energy</a></li>   <li><a href=""~/en/sectors/financial-institutions-services/"">Financial Institutions &amp; Services</a></li>   <li><a href=""~/en/sectors/food-beverage/"">Food &amp; Beverage</a></li>   <li><a href=""~/en/sectors/government-contracting-public-sector/"">Government Contracting &amp; Public Sector</a></li>   <li><a href=""~/en/sectors/real-estate/"">Real Estate</a></li>   <li><a href=""~/en/sectors/tech/"">Tech</a></li>  </ul>    <h2>Meet the international team</h2>    <p>If you are in need of advice in this area, please speak to one of our key jurisdictional contacts.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/sharon-ayres/"">Sharon Ayres</a></strong><br />  Partner (UK)</p>    <p><strong><a href=""~/en/people/david-lowe/"">David Lowe</a></strong><br />  Partner (UK)</p>    <p><strong><a href=""~/en/people/ben-stansfield/"">Ben Stansfield</a></strong><br />  Partner (UK)</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/marcus-hinkley/"">Marcus Hinkley</a></strong><br />  Associate (Canada)</p>    <p><strong><a href=""~/en/people/stephen-pike/"">Stephen Pike</a></strong><br />  Partner (Canada)</p>    <p><strong><a href=""~/en/people/danhoe-reddy-girard/"">Danhoé Reddy-Girard</a></strong><br />  Partner (France)</p>  </div>  </div>  </div>  ",GWLG.Global,d7a64117-fe8d-47a0-ace6-75c8607bfcdd;ad056fcd-7211-4da7-a9e2-30612d332954;1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;03d6dce1-2df8-4f24-8e6b-d7bcda0b6509;4b827bd7-79e3-4db7-9446-950eaf10c14f;b0a7b3fc-4cb7-4be6-926c-4b5e385f1bb1,200FA82C-4BB5-48AD-BEA1-2A574DFECDAB,NULL,0,1,NULL,"<p>Taking a pro-active approach to governance, risk and compliance is essential in a world of changing regulatory compliance. Corporate governance issues can have a lasting effect on the success of your organisation, brand, and reputation.</p>    <p>Bringing together experts from across our global services, our governance, risk and compliance team will work alongside you to ensure you are protecting your business from all angles. From internal audits of your current operations to drafting policies and reporting to the board, our lawyers can offer you practical advice that is tailored to your organisation. Our team can support all of your risk management and compliance requirements, ensuring all aspects of good governance are covered.</p>  ","Expertise in governance, risk and compliance",NULL,See more articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.UK&services=43773,NULL,{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{A7B882E4-34EF-49D2-BBA0-D320669A55A8}|{B31D8398-25A1-48F2-85E2-C7E6F8F00AA3}|{DE8EAE4B-1D4C-4084-B1C9-A00852B8C205}
439,/Services/Competition-Law-Antitrust/UK,en-GB,45495488-0E43-46AF-AFCC-0BCFCC4D0758,UK,UK,"Competition lawyers with expertise in antitrust and competition law, including antitrust, intellectual property, litigation and merger control.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>What is antitrust and competition law?</h2>    <p>Antitrust and competition law exists to ensure that markets are competitive. Infringements of competition law and antitrust violations can have significant financial and reputational consequences for companies. They can also affect individuals if criminal sanctions and director disqualification orders are imposed.</p>    <p>Amongst other aspects, antitrust and competition law:</p>    <ul>   <li>prohibits arrangements that restrict competition (e.g. under Article 101 of the Treaty on the Functioning of the European Union, and the Chapter I Prohibition of the Competition Act 1998), including price fixing cartels;</li>   <li>prohibits conduct which is an abuse of a dominant position (e.g. under Article 102 of the Treaty on the Functioning of the European Union, and the Chapter II Prohibition of the Competition Act 1998);</li>   <li>enables authorities to intervene in mergers and joint ventures, potentially blocking deals, or ordering that these are undone;</li>   <li>applies to distribution arrangements, including in relation to e-commerce and online sales;</li>   <li>applies to the licensing and enforcement of intellectual property rights, including patents;</li>   <li>enables authorities to investigate markets and sectors, potentially imposing market or sector-wide remedies to address any identified competition concerns; and</li>   <li>prohibits certain forms of State aid, preventing support from public bodies giving companies advantages over their competitors.</li>  </ul>    <p>Antitrust and competition law can be complex, with its application evolving constantly as markets emerge and develop. New products and services are always raising novel questions and issues to consider. Developments may present opportunities but they also present challenges and compliance risks.</p>    <p>Working across our offices, our team is at the forefront of legal developments. We have a proven track record of enabling businesses to achieve their commercial goals in compliance with antitrust and competition law.</p>    <p>Clients worldwide trust and value our expertise and see the team as an extension of their own in-house legal function (with the added benefit of external counsel legal privilege).</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fCompetition-Law-and-Antitrust%2fUK%2fServices%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Antitrust+and+competition+law+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Antitrust and competition law specialists with practical experience</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">[The team] excels at advising on cartels, contentious matters, &hellip;merger control issues, and on the competition law aspects of distribution agreements and other commercial arrangements. <cite>The Legal 500 (UK)</cite></p>  </blockquote>    <p>Our work across a wide range of sectors and matters enables us to provide our clients with the advice they need, when they need it. Examples of previous past engagements include:</p>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Dawn+raids+and+investigations|(headline3)Intellectual+property|(headline2)Competition+law+and+antitrust+litigation|(copy1)Advising+an+energy+supplier+in+an+investigation+by+a+national+authority+into+a+suspected+market+sharing+cartel%2c+including+attending+the+dawn+raid+and+defending+the+client.|(copy3)Advising+a+technology+owner+on+antitrust+and+competition+law+issues+in+relation+to+patents+declared+essential+to+standards+(SEPs).+|(copy2)Advising+Thai+Airways+in+defending+a+multi-million+pound+action+for+damages+brought+before+the+High+Court+following+the+European+Commission%27s+cartel+decision+in+respect+of+air+cargo.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Merger+control|(headline3)State+aid|(headline2)Distribution+and+e-commerce|(copy1)Advising+companies+across+a+range+of+sectors+on+merger+control+issues%2c+including+advising+The+Est%c3%a9e+Lauder+Companies+on+a+%241.45+billion+acquisition.|(copy3)Advising+a+key+government+department+on+State+aid+issues+arising+from+the+planned+award+of+a+major+long-term+contract+with+a+value+exceeding+%c2%a31+billion.|(copy2)Advising+brand+owners+and+OEMs+on+competition+law+and+antitrust+issues+in+relation+to+the+distribution+of+products+within+the+UK+and+EU%2c+including%2c+luxury+goods%2c+pharmaceuticals+and+automotive+parts.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightred|(width)|(height)^}</p>    <h2>Recognition for antitrust and competition law expertise</h2>    <blockquote>  <p>[The team] stands out for representing claimants and defendants in follow-on damages claims. [The team also] assists clients with the competition aspects of corporate transactions, such as merger control matters [and] advised clients on dawn raids and sector investigations.<cite>Chambers &amp; Partners (UK)</cite></p>  </blockquote>    <p>Chambers and Partners (UK) recommends and ranks partner Bernardine Adkins as a Band 1 leading individual. Commentators describe her as &quot;fantastic, very practical and very friendly&quot;.</p>    <p>The Legal 500 (UK) recommends partner Bernardine Adkins for EU and competition law, as well as for competition litigation.</p>    <p>The Legal 500 (UK) recommends partner Samuel Beighton, and ranks him as a &quot;Next Generation Partner&quot; for EU and competition law.</p>    <p>Our Competition and Antitrust team has recently been shortlisted in the Competition Team of the Year category for The Lawyer Awards 2020, The Legal Business Awards 2020 and The British Legal Awards 2020.</p>    <p>Our work advising an energy supplier on a dawn raid investigation was &quot;Highly Commended&quot; at the British Legal Awards.</p>    <p>The team received a &quot;Cartel Defence&quot; award from the Global Competition Review for its work advising Thai Airways.</p>    <h2>Sectors</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/sectors/automotive/global/"">Automotive</a></li>   <li><a href=""~/en/sectors/construction-engineering/global/"">Construction &amp; Engineering</a></li>   <li><a href=""~/en/sectors/energy/global/"">Energy</a></li>   <li><a href=""~/en/sectors/food-beverage/global/"">Food &amp; Beverage</a></li>   <li><a href=""~/en/sectors/retail-leisure-hotels/global/"">Retail, Leisure &amp; Hotels</a></li>   <li><a href=""~/en/sectors/health-care/global/"">Health &amp; Care</a></li>   <li><a href=""~/en/sectors/mining/global/"">Natural Resources</a></li>   <li><a href=""~/en/sectors/life-sciences/global/"">Life Sciences</a></li>   <li><a href=""~/en/sectors/tech/global/"">Tech</a></li>  </ul>    <h2>Contact the team</h2>    <h3><a href=""~/en/people/bernardine-adkins/"">Bernardine Adkins</a><br />  Partner, Head of Antitrust, Competition and Trade Law (Birmingham / London / Brussels)</h3>    <p>Bernardine has over 25 years&#39; experience in antitrust and competition law. Providing strategic advice and support, Bernardine is utterly client-focused and brings first class technical ability to every matter on which she is engaged.</p>    <h3><a href=""~/en/people/samuel-beighton/"">Samuel Beighton</a><br />  Partner, Antitrust and Competition Law (London / Brussels)</h3>    <p>With a background in competition law economics, Samuel&#39;s practice addresses all aspects of UK and EU antitrust and competition law. Samuel works closely with clients to enable them to grow and protect their business interests.</p>  ",GWLG.UK,2563a6d6-5f45-46c5-8698-e572a35f100b;f13a9240-2482-4077-be83-ebaa741dc3f0,B3F9FCE6-B77C-4E15-978E-EAA664C609DC,NULL,0,1,NULL,"<p>When you are choosing a legal partner, we believe you will always be in the best position if you select a law firm that understands your world. When it comes to antitrust and competition law, you need experts on hand that can provide strategic advice based upon extensive experience. Your competition lawyer needs to understand the issues that will affect you now, and in the future.</p>    <p>We take the time to gain an overview of your goals and to understand how these fit into your wider commercial ambitions. We combine first-class legal expertise with a deep understanding of evolving policy, providing you with practical advice on how to promote and protect your business interests.</p>  ",Expertise in Competition Law & Antitrust,f4589048-a317-47ec-abd0-7a45cc26b9e6;d1619ce0-37bb-4038-b8dd-10abe8fb2851;4ff6ee98-cd32-4917-8b12-f090bf2d7bdd;c6f626cb-35f8-4b5b-aff5-834807ba368d;86f7ed5f-c9b7-4890-8614-a6f5894ea12c,View all articles,Stay ahead,"<p>Keep up-to-date with the latest in competition law by registering for our updates.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/footer/updates/"">Register for updates</a></p>  ",Contact us today,"<p>For advice on competition &amp; antitrust, contact a member of our team.</p>    <p style=""center""><a class=""c-button-red"" href=""~/en/contact-us/"">Contact the team</a></p>  ",01bdea82-8148-40d9-9f5d-f977064865b5;7733f6d8-1573-4154-a95f-a46e5e176e5a;e37fc7fb-2cf9-453c-a841-9f228d86f66e,/en/insights-resources/?page=1&locations=GWLG.UK&services=284,NULL,{A81A1C5B-5720-46E3-A4D2-B244FDCE9F4B}|{EA89C591-FC3C-433C-AF3A-EED13E6FE06D}
441,/Services/Fraud-and-Asset-Recovery/UK,en-GB,804F1890-3AB3-47F1-BBC3-546E319459CD,UK,UK,Fraud and asset recovery lawyers based in the UK working on civil fraud and corporate asset recovery matters across jurisdictions.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The impact of fraud goes beyond financial loss. Our civil fraud and asset recovery lawyers work quickly to recover your stolen assets across multiple jurisdictions. Acting for clients in both the public and private sector, our strength lies in the depth and breadth of experience across our full practice firm. The level of coverage that we can provide will ensure you are in the very best of hands.</strong></p>    <p>Our Fraud, Insolvency and Asset Recovery (FIA) Group has advised on some of the most significant and high profile cases on an international level. Our team is partner-led, proactive and responsive to ensure your commercial interests are protected.</p>    <p>If you are in need of advice in this area, please do <a href=""mailto:andrew.witts@gowlingwlg.com?subject=Fraud%20and%20Asset%20Recovery%20Services"">contact us</a>.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fFraud-and-Asset-Recovery%2fUK%2fServices%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Fraud+and+Asset+Recovery+Services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Client work</h2>    <p>Our <abbr title=""Fraud, Insolvency and Asset Recovery"">FIA</abbr> Group is experienced in working on high value, complex matters. Examples of past and current projects include:</p>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Cross-border+corruption|(headline3)Fraudulent+misrepresentation|(headline2)Injunctive+relief|(copy1)Acting+for+the+Federal+Republic+of+Brazil+and+the+City+of+S%c3%a3o+Paulo+since+2005+on+the+long+running+fraud+and+asset+recovery+case+against+the+City+of+S%c3%a3o+Paulo%27s+former+Mayor%2c+Paulo+Maluf.|(copy3)Advised+on+a+%c2%a3132+million+claim+for+CPC+Group+Limited.+The+claim+included+serious+allegations+of+fraudulent+misrepresentation%2c+conspiracy%2c+unlawful+interference+and+extortion.|(copy2)Advising+New+York-based+clients+on+an+alleged+fraud+relating+to+a+series+of+loans+made+by+the+client+and+obtaining+a+freezing+injunction+from+the+High+Court+of+over+%c2%a310+million+of+assets.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Property+Fraud|(headline3)Public+Sector+and+Sovereign+State|(headline2)Investment+Fraud|(copy1)Acting+for+a+consortium+of+high-net-worth+individuals+to+pursue+claims+and+recover+assets+in+connection+with+a+%c2%a3100m+property+fraud+scheme.+Freezing+orders+were+obtained+in+the+UK%2c+Jersey+and+the+BVI.|(copy3)Acting+for+the+UK+Insolvency+Service+for+over+30+years+on+fraud+and+corruption+cases%2c+as+well+as+advising+numerous+overseas+sovereign+states+on+anti-fraud+matters.|(copy2)Acting+for+professional+trustees+of+Bernard+L.+Madoff+Investment+Securities+LLC+and+advising+the+joint+liquidators+of+Stanford+International+Bank+Limited+in+connection+with+their+individual+collapses.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightred|(width)|(height)^}</p>    <h2>Recognition in Fraud and Asset Recovery</h2>    <blockquote style=""text-align:center;"">  <p>They are really sharp, on top of their game and have a great bedside manner with individuals who are stressed about their circumstances.<cite>Chambers UK</cite></p>  </blockquote>    <p>Our <abbr title=""Fraud, Insolvency and Asset Recovery"">FIA</abbr> Group is at the forefront of fraud and asset recovery. We are recognised as &#39;global elite&#39; thought leaders for asset recovery by Who&#39;s Who Legal. The guide describes Andrew Witts as an &#39;international heavyweight&#39; and praises his &#39;good mix of litigation trust and insolvency skills, which make him the go-to person for large asset recovery matters.&#39;</p>    <p>We are also ranked for our expertise in civil fraud by Chambers and Partners and The Legal 500, with the latter noting our &#39;great international credibility&#39;.</p>    <p>Our <abbr title=""Fraud, Insolvency and Asset Recovery"">FIA</abbr> Group is a founding member of FraudNet, benefitting from access to an ICC endorsed network of fraud and asset recovery specialists, which extends to more than 50 jurisdictions and operates in 60 countries. Through the network, the team can engage fraud specialists and investigators anywhere in the world, 24 hours a day, and can arrest identified assets before they are dissipated.</p>    <h2>Meet the team</h2>    <p>If you are in need of fraud or asset recovery advice, please do get in touch.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/andrew-witts/"">Andrew Witts</a></strong><br />  Partner</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/davinia-gransbury/"">Davinia Gransbury</a></strong><br />  Partner, Head of Dispute Resolution</p>  </div>  </div>  </div>  ",GWLG.UK,c36a0bf5-318f-4d02-a8ed-479bad6a8469;90573229-adbc-497c-9e6e-7ee61952f25b,20B4ABDB-B2FF-4890-A225-B432BD7B664A,NULL,0,1,NULL,NULL,Expertise in Fraud and Asset Recovery,NULL,View all articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.UK&services=45654,NULL,{D58F0310-4126-47D7-AD7C-8635438037FA}|{DB180194-4B02-46F8-A0CE-0DFB051009EE}
442,/Services/Artificial-Intelligence-Law/Overview,en-GB,6C884043-1F81-4312-9AB2-E6AD66C6A22D,Overview,Overview,International law firm with experience in artificial intelligence law. Our AI lawyers can support you across a multitude of practice areas related to AI law. ,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>We offer an international team of experienced, technically strong <abbr title=""artificial intelligence"">AI</abbr> lawyers to help you identify and navigate the practical, legal, regulatory and ethical challenges presented by <abbr title=""artificial intelligence"">AI</abbr>.</p>    <p>We have experience across the key practice areas for <abbr title=""artificial intelligence"">AI</abbr>, including corporate, commercial, financing, competition law, cyber security, data protection, employment, intellectual property and product liability. We help with strategy, acquisition, collaborations, <abbr title=""intellectual property"">IP</abbr> protection, licensing, and litigation in the areas where <abbr title=""artificial intelligence"">AI</abbr> and the law overlap.</p>    <p>We have a deep understanding of the technology, the applicable law and regulation and the developing policy and legislative landscape to make any <abbr title=""artificial intelligence"">AI</abbr> project a real success. <strong><a href=""#anc_one"">Contact us today for more information</a>.</strong></p>    <h3>What is <abbr title=""artificial intelligence"">AI</abbr>?</h3>    <p>There is no universally accepted definition of AI, but a reasonable summary is that it covers the automation of tasks that are generally considered to require intelligence. Much of <abbr title=""artificial intelligence"">AI</abbr>&#39;s recent breakthroughs are in &quot;machine learning&quot;, where a computer system follows procedures to learn from data or an environment. The dramatic advances are typically accompanied by significant limitations, such as a lack of transparency as to how the <abbr title=""artificial intelligence"">AI</abbr> works, risks of unpredictable failure and potential bias.</p>    <p>AI&#39;s technical powers and limitations, combined with ethical concerns around the influence of <abbr title=""artificial intelligence"">AI</abbr> systems, raise new legal issues in areas such as product liability, negligence, intellectual property and competition law. With intense scrutiny from regulators and legislatures worldwide, <abbr title=""artificial intelligence"">AI</abbr> is one of the most complex and fast moving areas of the law.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fArtificial-Intelligence-Law%2fAI-Services-Global%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Artificial+intelligence+legal+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3 id=""anc_one"">Meet our global team</h3>    <p>Our <abbr title=""artificial intelligence"">AI</abbr> lawyers advise across a host of sectors and practice areas worldwide. Find out more about our teams in Canada and the UK.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/artificial-intelligence-law/#canada"">Canada</a></li>   <li><a href=""~/en/services/artificial-intelligence-law/#uk"">UK</a></li>  </ul>  ",GWLG.Global,7fb29160-44a7-4f27-b030-99ef5d9941cf;a198222e-fff0-47b3-bbca-b7c042e76a69,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,"<p>Artificial intelligence (AI) law creates new opportunities and challenges traditional business models across many sectors. It is accelerating drug discovery, diagnosing disease, automating transport, reducing insurance costs, tailoring customer experiences and driving efficiencies across multiple sectors.</p>  ",Expertise in Artificial Intelligence,NULL,See more AI articles,NULL,NULL,NULL,NULL,50facc67-f27f-48d2-a25b-b437175be340,/en/insights-resources/?page=1&locations=&services=46292,NULL,{22CC6655-0A11-4BA3-8A6A-FA1D6F639642}|{AC4471A4-8672-459B-852B-CC43B6933D45}
444,/Services/Artificial-Intelligence-Law/UK,en-GB,21ED8BD6-A679-43CB-99BC-B71D12807854,UK,UK,International law firm with experience in artificial intelligence law. Our AI lawyers can support you across a multitude of practice areas related to AI law. ,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Client work</h3>    <p>{^widget|(name)FourBlockWidget|(Headline1)IP+strategy|(Copy1)Advising+a+FTSE+100+company+on+its+IP+strategy+for+AI%2c+including+its+trade+secrets+policies+and+procedures.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Mining|(Copy2)Advising+on+contracts+concerning+autonomous+vehicle+systems+in+the+mining+sector.|(LinkText2)Read+more|(BgHover2)colour-darkblue|(Headline3)St.+Modwen|(Copy3)Advising+St.+Modwen+on+its+acquisition+of+an+AI-powered+tool+to+support+decision-making+on+property+development.|(LinkText3)Read+more|(BgHover3)colour-darkred|(Headline4)Sosei+Heptares|(Copy4)Advising+Sosei+Heptares+on+a+collaboration+with+PharmEnable+for+AI-driven+3D+discovery+tool.+The+tool+identifies+drug+candidates+to+target+a+biological+receptor+associated+with+neurological+diseases.|(LinkText4)Read+more|(BgHover4)colour-lightred|(widget_displayname)Four+Block+Widget^}</p>    <h3>Recognition</h3>    <p>Gowling WLG is consistently recognised by the likes of <em>The Legal 500</em> and <em>Chambers and Partners</em>. <em>JUVE Patent</em> has recognized our &quot;dedicated AI practice&quot; as one of the strengths of our IP team.</p>    <p>We are the only law firm to have been part of UK Autodrive, the largest UK consortia trialling automated vehicle technology. The consortia was part of an initiative to supported by the government to support the introduction of self-driving cars into the UK.</p>    <p>Matt Hervey, our Head of AI in the UK, is immersed in the impacts of <abbr title=""artificial intelligence"">AI</abbr> across the key practice areas, market trends and regulatory and legal developments. He is joint General Editor of <em>The Law of Artificial Intelligence</em> (Sweet &amp; Maxwell), the leading practitioner&#39;s textbook covering <abbr title=""artificial intelligence"">AI</abbr> technology, ethics, regulation and law. He participates in AI-related committees and working groups for the International Association for the Protection of Intellectual Property (AIPPI), the Chartered Institute of Patent Attorneys (CIPA), the American Intellectual Property Law Association (AIPLA), the International Chamber of Commerce (ICC), the IP Federation, and the World Law Group.</p>    <h3>Contact the UK team</h3>    <p><a href=""~/en/people/matt-hervey/"">Matt Hervey</a><br />  Partner, Head of Artificial Intelligence (UK)</p>  ",GWLG.UK,a198222e-fff0-47b3-bbca-b7c042e76a69,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,"<p>The strength of our UK <abbr title=""artificial intelligence"">AI</abbr> team lies in our full-service approach. We draw on the experience of lawyers from across our many practice areas including corporate, commercial, competition law, cyber security, data protection, employment, intellectual property and product liability, pairing technically excellent legal advice with a deep understanding of AI-related matters.</p>  ",Insight in Artificial Intelligence from the UK,e7fb738d-85ae-437c-a90f-89fe120b937e;e72d6926-741d-49e5-b4d5-d832028a6ba1,View all articles,NULL,NULL,NULL,NULL,e37fc7fb-2cf9-453c-a841-9f228d86f66e;50facc67-f27f-48d2-a25b-b437175be340,/en/insights-resources/?page=1&locations=GWLG.UK&services=46292,NULL,{AC4471A4-8672-459B-852B-CC43B6933D45}
445,/Services/Artificial-Intelligence-Law/Canada,en-GB,ACC1ABA3-D27B-47AD-9E93-AE820752DB0B,Canada,Canada,International law firm with experience in artificial intelligence law. Our AI lawyers can support you across a multitude of practice areas related to AI law. ,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Client work</h3>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(copy1)Advising+on+the+US%245+million+investment+in+Grid4C%2c+a+worldwide+leader+in+AI+and+machine+learning+solutions+for+the+energy+sector.+|(url3)%7e%2fen%2finsights-resources%2fclient-work%2f2020%2fmcrock-capital-leads-us%2410-million-financing%2f|(bghover3)colour-lightred|(headline1)Alectra+Energy+Solutions|(headline3)McRock+Fund+II+LLP|(headline2)Datametrex+AI+Limited|(url1)%7e%2fen%2finsights-resources%2fclient-work%2f2020%2falectra-via-util-assist-invests-in-grid4c%2f|(copy3)Advising+on+fund+and+securities+law+matters+in+connection+with+the+US%2410+million+financing+in+ThoughtTrace+Inc%2c+an+AI-powered+Document+Intelligence+Platform.|(copy2)Advising+on+the+transaction+of+a+non-brokered+private+placement+of+units+for+aggregate+gross+proceeds+of+%241%2c202%2c200.|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(url2)%7e%2fen%2finsights-resources%2fclient-work%2f2019%2fdatametrex-closes-non-brokered-private-placement-o%2f|(width)|(height)^}{^widget|(name)ThreeBlockWidget|(Headline1)Podium+Advertising+Technologies+Ltd|(Copy1)Counsel+to+Podium+Advertising+Technologies+Ltd.+d%2fb%2fa+ADCORE%2c+in+the+acquisition+of+all+of+its+issued+and+outstanding+securities+by+ADCORE+Inc.+|(Url1)%7e%2fen%2finsights-resources%2fclient-work%2f2019%2fadcore-completes-qualifying-transaction%2f|(LinkText1)Read+more|(BgHover1)colour-lightred|(Headline2)SafeToNet+Limited|(Copy2)Counsel+to+British+cyber+safety+company+SafeToNet+Limited+in+its+cross-border+acquisition+of+the+entire+issued+share+capital+of+VISR+Inc.%2c+industry+specialists+in+using+AI.|(Url2)%7e%2fen%2finsights-resources%2fclient-work%2f2018%2fsafetonet-completes-cross-border-acquisition-visr%2f|(LinkText2)Read+more|(BgHover2)colour-aubergine|(Headline3)Miovision+Technologies+Inc|(Copy3)Advising+on+the+completion+of+a+%24120+million+minority+funding+round.+The+company+uses+AI+and+advanced+modelling+to+he+traffic+management+in+cities.|(Url3)%7e%2fen%2finsights-resources%2fclient-work%2f2020%2fmiovision-attracts-%24120-million-in-funding%2f|(LinkText3)Read+more|(BgHover3)colour-darkblue|(widget_displayname)Three+Block+Widget^}</p>    <h3>Recognition in Canada</h3>    <p>Our <abbr title=""Artificial Intelligence"">AI</abbr> members represent our many practice areas and regions, with many of them recognised by a host of prestigious legal directories such as <em>The Legal 500</em>, <em>Chambers &amp; Partners</em>,<em> Canadian Legal Lexpert</em> and <em>Best Lawyers</em>. Our team was also recognised in the <em>Lexpert Special Edition: Technology</em>.</p>    <p>Gowling WLG was named Law Firm of the Year at the 4th Annual Canadian FinTech &amp; <abbr title=""Artificial Intelligence"">AI</abbr> Awards. The awards celebrate the very best in Canadian financial technology and artificial intelligence innovation.</p>    <h3>Contact our team in Canada</h3>    <p><a href=""~/en/people/naim-antaki/"">Naïm Antaki</a><br />  Partner, Co-head of <abbr title=""Artificial Intelligence"">AI</abbr> Law Group (Canada)</p>    <p><a href=""~/en/people/christopher-n-alam/"">Christopher Alam</a><br />  Partner Co-head of <abbr title=""Artificial Intelligence"">AI</abbr> Law Group (Canada)</p>  ",GWLG.Canada,7fb29160-44a7-4f27-b030-99ef5d9941cf;45042386-e87e-4fa2-8f87-101784526d0a,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,"<p>Our Canadian team of <abbr title=""Artificial Intelligence"">AI</abbr> lawyers work across a broad range of sectors and legal services. The team offers a high level of technical expertise combined with the flexibility to advise start-ups and small enterprises alongside large institutions.</p>  ",Insight from our Canadian AI team,ae3a3020-75e0-4251-b2e7-64106b7d92c5;86e31a8d-bf2f-4c6e-aea4-9b285a9fc040,View all AI articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=46292,NULL,{22CC6655-0A11-4BA3-8A6A-FA1D6F639642}|{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
446,/Services/Brand-Protection/Overview,en-GB,BF8AC993-A5DA-4531-829A-2F75D1E15A2E,Overview,Overview,"Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated global, brand protection team assists clients in tackling counterfeits offline and online, wherever they may operate.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Comprehensive Coverage</h3>    <p style=""margin-left:2em""><q><em>For many global brand owners, these international titans are the first port of call. [Gowling WLG] gets a lot of repeat business because brand owners see immense value in its well-rounded IP toolkit, holistic problem-solving approach and international reach and coordination dexterity.</em></q> &ndash; <strong>World Trademark Review</strong></p>    <p>Gowling WLG&#39;s dedicated Brand Protection Group operates at the front lines of the fight against counterfeiting. Harnessing our far-reaching global platform, state-of-the-art software tools and longstanding relationships with customs authorities the world over, we offer &quot;one stop&quot; solutions that respond decisively to the latest species of threat.</p>    <p>Our practice encompasses all means of combatting counterfeiting and related illicit activity &ndash; both online and offline. Members of our team have broad experience identifying &quot;at risk&quot; products, establishing customs recordal programs, stopping sales of counterfeit goods, enforcing domain names, combatting copyright and trademark infringement online and offline, and managing complex litigation.</p>    <h3>Client service as distinct as your brand</h3>    <ul>   <li><strong><em>Gowling WLG brand protection without borders</em></strong> &ndash; Gowling WLG is home to leading IP practices in Canada, the UK and Europe, as well as &quot;challenging jurisdictions&quot; such as the UAE, Singapore and China. We complement our global offices with an extensive network of trusted local counsel in jurisdictions across every continent.</li>   <li><strong><em>Gowling WLG Data</em></strong> &ndash; Gowling WLG operates a private secure centralized global data management platform in Ottawa, Canada. This platform is updated in near real time with client file data, including worldwide trademark registrations and customs recordals, in formats customizable to individual client business needs.</li>   <li><a href=""~/en/insights-resources/guides/2023/anti-counterfeiting-country-guides/"" target=""_blank""><strong><em>Gowling WLG Anti-Counterfeiting Country Guides</em></strong></a> &ndash; We offer practical and comprehensive anti-counterfeiting country guides for all of the regions in which we operate.</li>   <li><strong><em>Gowling WLG Investigations</em></strong> &ndash; We work closely with established agencies for online and offline investigations and maintain close ties with customs officials the world over.</li>  </ul>    <h3>Experience you can trust</h3>    <p>Gowling WLG has been helping businesses protect their unique qualities for more than a century. In that time, we&#39;re proud to have achieved outstanding results for our clients again and again.</p>    <p>Some highlights of our recent work includes:</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Computer manufacturing</h4>     <p>Counsel to a large computer manufacturer&#39;s anti-counterfeiting portfolio in Asia Pacific, and in successful seizures, raids and actions against infringers in the UAE, Saudi Arabia, Bahrain, Egypt, Pakistan, Qatar and the West Bank.</p>   </li>   <li>   <h4>Online complaints</h4>     <p>Representing Chinese clients in issues relating to online complaints. The firm is also involved in a pilot program to try to secure faster take-down times.</p>   </li>   <li>   <h4>Clothing manufacturing</h4>     <p>Represented brand name clothing manufacturer in obtaining a finding of infringement and injunctive relief from the Federal Court of Canada &ndash; under Canada&#39;s new anti-counterfeiting legislation &ndash; against a party who imported more than 8,000 counterfeit T-shirts.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Counterfeit merchandise</h4>     <p>Obtained preliminary injunctions and seizure orders in western Canada against counterfeiters in the apparel, electronics, nutraceuticals and building supply industries.</p>   </li>   <li>   <h4>Technology</h4>     <p>Counsel to one of the world&#39;s largest Internet-related technology companies with respect to trademark and patent portfolio management.</p>   </li>   <li>   <h4>Luxury goods</h4>     <p>Counsel to a British multinational manufacturer of luxury automotive vehicles in trademark prosecution and custom enforcement actions.</p>   </li>  </ul>    <h3>Discover how we can help</h3>    <p><a href=""~/en/people/?page=1&amp;services=47912"" target=""_self"">Contact any member of our team</a> today to explore how we can help you grow your brand with confidence.</p>  ",GWLG.Global,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080;3fd4913d-3096-46ba-93b4-f365a5b14944,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<h3>Brand protection and anti-counterfeiting</h3>    <p>Brand Protection is the comprehensive strategy that brand owners need in the fight against all forms of counterfeiting and collateral wrongdoing. It includes border controls, blocking sales in physical and electronic markets, reclaiming misappropriated domain names, stopping online copyright and trademark infringement, shutting down online vendors and anything to do with fakes.</p>    <p>Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated global brand protection team assists clients in tackling counterfeiters offline and online, wherever they may operate.</p>  ",Featured resources,a21d9780-e213-4f4b-8878-676409f8313c;27c0b34a-2fca-4ca0-affa-b104931dfeaa;4ef471a2-bd8b-4dbf-a0f5-226f220c0b92;2595b533-2090-4fb8-a5c1-1981d132525d,View all articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=&services=47912,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}|{1F056C95-3A1E-4F01-BD32-0D488C66101C}
447,/Services/Municipal-Law/Canada,fr-CA,BC9AA2A9-DBDC-4392-8B74-BE4F4BB055E0,Canada,Canada,"Agissant pour le compte de propriétaires, de promoteurs et de municipalités, de même que pour une variété d’intervenants privés qui interagissent régulièrement avec des organismes municipaux, le groupe Droit municipal de Gowling WLG applique une approche créative et pratique à une gamme de défis. Qu’il s’agisse de subtils enjeux de promotion et d’aménagement ou de litiges civils complexes, notre équipe est prête à vous aider.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Des conseils fiables axés sur le secteur privé</h3>    <p>Que vous cherchiez à aménager des terrains, établir des partenariats public-privé ou élaborer une stratégie d&rsquo;aménagement du territoire, il vous faut un partenaire juridique chevronné qui vous fournira un service exceptionnel et des solutions pratiques afin de mener votre projet municipal à bien.</p>    <p>Gowling&nbsp;WLG collabore étroitement avec un éventail de clients du secteur privé, dont des promoteurs, des propriétaires, des groupes de contribuables, des urbanistes, des évaluateurs, des ingénieurs et des maisons de courtage quant à une variété d&rsquo;enjeux relatifs au droit municipal et au droit de l&rsquo;aménagement. Peu importe votre objectif, nous savons vous guider dans le paysage municipal et de l&rsquo;aménagement urbain, et mettons toutes les chances de votre côté pour assurer votre succès.</p>    <h3>Favoriser la croissance de municipalités canadiennes</h3>    <p>Gowling&nbsp;WLG est un conseiller de confiance pour plusieurs municipalités canadiennes de taille et exécute à ce titre de nombreux mandats couvrant une gamme de services juridiques clés&nbsp;: codes de déontologie, responsabilité municipale, aménagement municipal, évaluations environnementales, expropriation, terrains contaminés et réclamations, approbations et ordonnances environnementales réglementaires, et appels de soumission publics.</p>    <h3>Une expertise pluridisciplinaire</h3>    <p>Œuvrant dans les deux langues officielles du Canada, notre groupe Droit municipal fait partie des cabinets juridiques pluridisciplinaires les plus importants et respectés au pays. Les membres de notre équipe représentent une variété de domaines de pratique dont le droit de l&rsquo;environnement, le droit de l&rsquo;expropriation, le droit autochtone, le litige civil et commercial, les infrastructures, l&rsquo;immobilier et les relations gouvernementales.</p>    <h3>Un service personnalisé, des résultats probants</h3>    <p>Pour Gowling&nbsp;WLG, la meilleure façon de servir nos clients est d&rsquo;être axés sur leur monde, partenaires de leurs ambitions et investis dans leurs succès. C&rsquo;est pourquoi notre équipe est toujours à l&rsquo;écoute de vos besoins et requêtes en constante évolution, vous aidant à anticiper les possibilités comme les obstacles.</p>    <p>Collaboratifs, polyvalents et réactifs, nous sommes à votre disposition en tout temps. Nous nous engageons aussi à faire des affaires avec la plus grande efficacité, tout en veillant à maximiser la valeur de vos dépenses juridiques.</p>    <h3>Champs de compétences</h3>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Aménagement et zonage</li>   <li>Appels auprès du Tribunal d&rsquo;appel de l&rsquo;aménagement local</li>   <li>Appels et litiges relatifs aux biens immobiliers</li>   <li>Conflits d&rsquo;intérêts municipaux</li>   <li>Contrats de P3</li>   <li>Droit immobilier et développement urbain</li>   <li>Droit municipal</li>   <li>Droits d&rsquo;aménagement</li>   <li>Évaluations et appels relatifs à la taxe foncière</li>   <li>Évaluations et examens environnementaux</li>   <li>Examens judiciaires</li>   <li>Finances municipales</li>   <li>Gestion de projets municipaux</li>   <li>Infrastructures</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Lobbying</li>   <li>Patrimoine</li>   <li>Propriétés rurales</li>   <li>Questions de protection de la confidentialité municipale</li>   <li>Relations gouvernementales</li>   <li>Droit autochtone</li>   <li>Droit de la construction</li>   <li>Expropriation</li>   <li>Offices de protection de la nature</li>   <li>Planification écologique</li>   <li>Poursuites civiles impliquant des municipalités</li>   <li>Promotion</li>   <li>Questions réglementaires</li>   <li>Terrains contaminés</li>  </ul>  </div>  </div>  </div>  ",GWLG.Canada,33136a2e-83db-4377-81d9-81fa56cf4154,BCB53FC6-325B-4847-AF54-0BCD1C56043F,NULL,0,0,NULL,"<p>Agissant pour le compte de propriétaires, de promoteurs et de municipalités, de même que pour une variété d&rsquo;intervenants privés qui interagissent régulièrement avec des organismes municipaux, le groupe Droit municipal de Gowling&nbsp;WLG applique une approche créative et pratique à une gamme de défis. Qu&rsquo;il s&rsquo;agisse de subtils enjeux de promotion et d&rsquo;aménagement ou de litiges civils complexes, notre équipe est prête à vous aider.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{2FF1DAE3-0F9E-4CF2-BAA4-B427608C5207}
448,/Services/Brand-Protection/Overview,fr-CA,BF8AC993-A5DA-4531-829A-2F75D1E15A2E,Aperçu,Aperçu,"Quiconque a investi temps et efforts afin de développer une marque réputée a intérêt à se protéger des risques majeurs de la contrefaçon. L’équipe mondiale de Gowling WLG consacrée à la protection des marques aide les clients dans leur lutte anti-contrefaçon (commerce électronique ou autre), où qu’ils mènent leurs activités.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Une vaste portée</h3>    <p style=""margin-left:.5in;""><em>&laquo; Ce titan international est le premier port d&rsquo;escale pour bon nombre de titulaires de marques du monde entier. En effet, [Gowling WLG] est régulièrement sollicitée par ces derniers qui constatent la valeur inestimable de son guide convivial sur les brevets, de son approche holistique de la résolution de problèmes ainsi que de sa présence mondiale et sa capacité de coordination des services à l&rsquo;international. &raquo;&nbsp;&nbsp;&ndash; <strong>World Trademark Review</strong></em></p>    <p>Le groupe Protection des marques de commerce de Gowling WLG agit à l&rsquo;avant-plan de la lutte anti-contrefaçon. Grâce à notre présence internationale, nos outils logiciels ultramodernes et nos relations de longue date avec des autorités douanières à l&rsquo;échelle mondiale, nous offrons des solutions de style &laquo; guichet unique &raquo; afin d&rsquo;aider les clients à combattre les plus récentes formes de menaces.</p>    <p>Notre pratique couvre tous les moyens de lutte ciblant la contrefaçon et les activités illicites s&rsquo;y rattachant. Faites confiance aux membres chevronnés de notre équipe qui vous viendront en aide afin de déterminer les produits à risque d&rsquo;être touchés par la contrefaçon, établir des programmes d&rsquo;enregistrement auprès des douanes, stopper la vente de marchandises contrefaites, sécuriser vos noms de domaines, combattre le détournement du droit d&rsquo;auteur et des marques de commerce en ligne&nbsp;ou hors ligne, et gérer des litiges complexes.</p>    <h3>Un service client aussi distinctif que votre marque</h3>    <ul>   <li><strong><em>Protection des marques de commerce sans frontières de Gowling WLG </em></strong>&ndash; Nous disposons de pratiques chefs de file en matière de propriété intellectuelle au Canada, au Royaume-Uni et ailleurs en Europe, ainsi que dans des pays où la protection est plus difficile à assurer comme aux Émirats arabes unis, à Singapour et en Chine. Outre nos bureaux mondiaux, nous bénéficions d&rsquo;un vaste réseau de conseillers juridiques de confiance œuvrant sur tous les continents.</li>   <li><strong><em>Accès aux données de Gowling WLG</em></strong> &ndash; Nous exploitons une plateforme sécurisée pour la gestion de données mondiales, laquelle est privée, centralisée et située à Ottawa (Canada). Cette plateforme met à jour en temps quasi réel les renseignements des dossiers clients, dont les enregistrements de marques de commerce et les enregistrements auprès des douanes, et ce, dans des formats pouvant être personnalisés selon les besoins spécifiques du client.</li>   <li><strong><em>Guides informatifs de Gowling WLG</em></strong> &ndash; Nous fournissons des guides pratiques et détaillés sur la lutte anti-contrefaçon pour chaque pays où nous offrons nos services.</li>   <li><strong><em>Enquêtes Gowling WLG </em></strong>&ndash; Nous travaillons en étroite collaboration avec des agences bien établies dans le cadre d&rsquo;enquêtes (en ligne et hors ligne) et entretenons de solides liens avec des agents de douanes à l&rsquo;échelle mondiale.</li>  </ul>    <h3>Une expérience éprouvée</h3>    <p>Depuis plus d&rsquo;un siècle, Gowling WLG permet aux entreprises de protéger leurs précieux atouts. Nous sommes fiers de ce partenariat de longue date, et de les aider année après année à obtenir satisfaction de leurs revendications.</p>    <p>Voici quelques mandats récents :</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Fabrication d&rsquo;ordinateurs</h4>     <p>Représentation d&rsquo;un important fabricant d&rsquo;ordinateurs quant à son portefeuille d&rsquo;outils anti-contrefaçon en Asie-Pacifique, et en lien avec la réalisation de saisies, de perquisitions et d&rsquo;actions intentées contre des contrefacteurs dans divers pays : Émirats arabes unis, Iran, Arabie saoudite, Bahreïn, Égypte, Pakistan, Qatar et Cisjordanie.</p>   </li>   <li>   <h4>Plaints en ligne</h4>     <p>Représentation de clients chinois quant à des plaintes liées au commerce en ligne. Le cabinet participe également à un programme pilote en vue d&rsquo;accélérer le processus de retrait de contenu en ligne.</p>   </li>   <li>   <h4>Confection de vêtements</h4>     <p>Représentation d&rsquo;un fabricant de vêtements de marque quant à l&rsquo;obtention auprès de la Cour fédérale du Canada d&rsquo;une mesure injonctive et d&rsquo;un jugement confirmant l&rsquo;existence d&rsquo;une contrefaçon, en vertu de la nouvelle législation anti-contrefaçon du Canada, contre une partie qui avait importé plus de 8 000 tee-shirts contrefaits.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Marchandise contrefaite</h4>     <p>Obtention d&rsquo;injonctions préliminaires et d&rsquo;ordonnances de saisie dans l&rsquo;Ouest canadien à l&rsquo;encontre de contrefacteurs dans les industries du vêtement, de l&rsquo;électronique, des produits nutraceutiques et des matériaux de construction.</p>   </li>   <li>   <h4>Technologie</h4>     <p>Représentation de l&rsquo;une des plus grandes sociétés au monde liée à l&rsquo;Internet quant à la gestion de portefeuilles de marques de commerce et de brevets, ainsi qu&rsquo;en lien avec des dossiers de protection de la PI en Russie et dans la CEI.</p>   </li>   <li>   <h4>Produits de luxe</h4>     <p>Représentation d&rsquo;une multinationale britannique fabricante de véhicules motorisés de luxe dans le cadre de la poursuite de demandes de marques de commerce et de recours douaniers en Russie, au Bélarus et dans les pays baltes.</p>   </li>  </ul>    <h3>Gowling WLG vous accompagne</h3>    <p>Vous souhaitez obtenir des conseils sur la meilleure stratégie de protection de votre marque? Contactez un membre de notre équipe dès aujourd&rsquo;hui!</p>  ",GWLG.Global,cba60c6d-eb6d-4fa1-b4b4-a4b8c0d0c080;3fd4913d-3096-46ba-93b4-f365a5b14944;2c25a2d7-1ea3-479b-8b72-0ca6d897a8d4,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<h3>Protection des marques de commerce et lutte anti-contrefaçon</h3>    <p>La protection des marques de commerce est une stratégie globale qui aide les titulaires de marques à lutter contre différentes formes d&rsquo;usurpations et à éviter les conséquences qui en découlent. Une telle protection consiste à mettre en œuvre des dispositifs de contrôle douaniers, à bloquer des ventes sur les marchés physiques et virtuels, à récupérer des noms de domaine frauduleusement appropriés, à lutter contre la contrefaçon du droit d&rsquo;auteur et des marques de commerce en ligne, et à interrompre des activités des vendeurs en ligne et toute activité liée à des objets contrefaits.</p>    <p>Quiconque a investi temps et efforts afin de développer une marque réputée a intérêt à se protéger des risques majeurs de la contrefaçon. L&rsquo;équipe mondiale de Gowling WLG consacrée à la protection des marques aide les clients dans leur lutte anti-contrefaçon (commerce électronique ou autre), où qu&rsquo;ils mènent leurs activités.</p>  ",Actualités et ressources,af9c3e05-7b9f-44d8-a090-0686d888c0e4;86c1a48a-f397-41c8-9bc5-8fa211358d34,NULL,NULL,NULL,NULL,NULL,18e451f2-f2d9-48fc-9f15-afca502e28a7,NULL,NULL,{6465601E-0811-4D9C-A940-3AC18734FAA1}|{1F056C95-3A1E-4F01-BD32-0D488C66101C}|{C0113A64-6C11-4978-80BD-94283D3DE73A}
449,/Services/Brand-Protection/UK,en-GB,98220D89-A4D0-4209-B108-47DBF1E26FD6,UK,UK,"Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated UK, brand protection team assists clients in tackling counterfeits offline and online, wherever they may operate.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Whether identifying &quot;at risk&quot; products, establishing customs recordal programs or managing major litigation, we always have our clients&#39; interests and commercial objectives at heart. Working with businesses of all sizes and across a range of diverse sectors, we help you grow your brand equity with confidence, while mitigating risk and maximising potential.</p>    <p>Outside of our brand protection services, we offer full-lifecycle coverage for all your intellectual property assets &ndash; from registration and portfolio management to transactions and enforcement. Contact any member of our team to learn more.</p>    <h2>Contact our UK team</h2>    <p><a href=""~/en/people/kate-swaine/"" target=""_blank"">Kate Swaine</a></p>    <p>Partner, Co-Head of Intellectual Property, Global</p>  ",GWLG.UK,5f39b2b0-1232-4c03-abce-300149d85f9b,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<p>For successful companies everywhere, a strong brand is a critical asset. Having a strategy in place to protect that brand from attack is no less critical.</p>    <p>In the UK, our award-winning team of brand protection professionals has a long-standing reputation as the go-to practice for organisations seeking sophisticated anti-counterfeiting and anti-infringement strategies.</p>  ",Featured resources,a21d9780-e213-4f4b-8878-676409f8313c;27c0b34a-2fca-4ca0-affa-b104931dfeaa,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{82CE0637-0A67-4363-A071-1FB76B014D04}
451,/Services/Brand-Protection/UAE,en-GB,8A07F6B9-9AD6-492E-8975-15021A357160,UAE,UAE,"Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated brand protection team in the UAE assists clients in tackling counterfeits offline and online, wherever they may operate.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Our services include the following:</h2>    <ul>   <li>Anti-counterfeiting and preventing the trade of illicit goods &ndash; both online and offline</li>   <li>Identifying ""at risk"" products</li>   <li>Establishing customs recordal programs</li>   <li>Establishing and delivering online enforcement programs</li>   <li>Delivering training to enforcement officials</li>   <li>Protecting and enforcing IP rights throughout the MENA region</li>   <li>Overseeing complex IP litigation through the MENA region</li>   <li>Assisting in domain name recovery and domain name disputes</li>   <li>Managing IP portfolios throughout the MENA region and further afield</li>  </ul>    <p>Get in touch with a member of our team today. We&#39;re ready to help.</p>    <h2>Contact our UAE team</h2>    <p><a href=""~/en/people/jon-parker/"" target=""_blank"">Jon Parker</a></p>    <p>Partner</p>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<p>For those seeking advanced brand protection solutions throughout the Middle East, Gowling WLG offers a robust suite of services tailored to your every need.</p>    <p>Based in Dubai, our team complements extensive local knowledge with broad experience across a range of key sectors &ndash; including consumer products, fashion, pharmaceuticals and luxury goods. No matter the challenges you face, we work in conjunction with our global offices to offer you coordinated, customized strategies that evolve with your brand.</p>  ",Featured resources,a21d9780-e213-4f4b-8878-676409f8313c;27c0b34a-2fca-4ca0-affa-b104931dfeaa,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}
452,/Services/Brand-Protection/Germany,en-GB,7D24DDDF-901A-454A-B3B8-9BDE97B7B7F7,Germany,Germany,"Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated brand protection team assists clients in tackling counterfeits offline and online, wherever they may operate.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>The areas we cover include:</h2>    <ul>   <li>Anti-counterfeiting programs, including take-down procedures</li>   <li align=""left"">Infringement, invalidity, opposition and cancellation proceedings</li>   <li align=""left"">Litigation before German and European Community authorities and civil courts (including German Patent and Trademark Office &ndash; DPMA and EUIPO)</li>   <li align=""left"">Market-entry support and brand roll-outs, including EU clearance work</li>  </ul>    <h2>Contact our Germany team</h2>    <p>Combining in-depth technical expertise with broad sector experience, we&#39;re passionate about securing you intellectual property rights. Talk to us now to start protecting your assets.</p>    <p><a href=""~/en/people/kate-swaine/#panel-button1"" target=""_blank"">Kate Swaine</a></p>    <p>Partner</p>  ",GWLG.Germany,5f39b2b0-1232-4c03-abce-300149d85f9b,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<p>Based in Munich, our Brand Protection team in Germany possesses advanced experience safeguarding and enforcing intellectual property rights across a range of industry sectors.</p>    <p>As a key hub in Gowling WLG&#39;s expansive IP services platform, we work closely with the firm&#39;s other global offices to deliver informed advice and comprehensive solutions &ndash; no matter where you choose to grow your brand.</p>  ",Featured resources,a21d9780-e213-4f4b-8878-676409f8313c;27c0b34a-2fca-4ca0-affa-b104931dfeaa,View all insights,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{82CE0637-0A67-4363-A071-1FB76B014D04}
453,/Services/Brand-Protection/China,en-GB,57FCC471-9865-42E6-91AA-0C3753FA9D4E,China,China,"Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated brand protection team assists clients in tackling counterfeits offline and online, wherever they may operate.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Our services include:</h2>    <ul>   <li>Trademark, copyright and unfair competition enforcement and litigation</li>   <li>Anti-piracy and anti-counterfeiting strategies (civil and criminal)</li>   <li>Online and offline enforcement strategies and take-downs</li>   <li>Customs recordal and enforcement</li>   <li>Entitlement proceedings</li>  </ul>    <h2>Contact our China team</h2>    <p>You can rely on our award-winning China team with extensive experience and commercial expertise in&nbsp;IP&nbsp;portfolio management. Let&#39;s make the most of your&nbsp;IP&nbsp;together.</p>    <p><a href=""~/en/people/ivy-liang/#panel-button1"" target=""_blank"">Ivy Liang</a></p>    <p>Director</p>  ",GWLG.China,49370d7b-1121-45da-90e6-96dcc50c1710,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<p>When it comes to the trade of counterfeit goods, China is a notoriously challenging jurisdiction. Indeed, the US Chamber of Commerce estimates that China and Hong Kong SAR, China (hereinafter referred to as &quot;Hong Kong&quot;) alone represent approximately 86% of the global counterfeit market.</p>    <p>With offices in Beijing and Guangzhou, along with a far-reaching network of local counsel and private investigators, our team in China offers clients robust brand protection strategies designed to stop counterfeiting activity in its tracks &ndash; both online and offline.</p>  ",Featured resources,a21d9780-e213-4f4b-8878-676409f8313c;27c0b34a-2fca-4ca0-affa-b104931dfeaa,View all insights,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A57A1C6B-A0A8-42B1-A486-547F584C5F82}
454,/Services/Brand-Protection/France,en-GB,95D749F4-A83E-4B63-BF04-25FDC1AFCC78,France,France,"Counterfeiting poses a material risk to anyone who has invested the time and effort in growing a successful brand. At Gowling WLG, our dedicated brand protection team assists clients in tackling counterfeits offline and online, wherever they may operate.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Our areas of expertise include:</h2>    <ul>   <li>Identifying ""at risk"" products.</li>   <li>Establishing customs recordal programs and other border controls.</li>   <li>Blocking sales in physical and electronic markets.</li>   <li>Stopping online copyright and trademark infringement</li>   <li>Managing complex intellectual property litigation</li>  </ul>    <h2>Contact our France team</h2>    <p>Contact any member of our team to learn how we can protect the value of your brand. We look forward to hearing from you.</p>    <p><a href=""~/en/people/celine-bey/"" target=""_blank"">Céline Bey</a></p>    <p>Partner</p>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<p>Tactical, resourceful, and creative, our team in France delivers a range of brand protection strategies tailored for today&#39;s competitive global market.</p>    <p>With the sophisticated experience across an array of sectors &ndash; including fashion, cosmetics, luxury good, pharmaceuticals and tech &ndash; we work closely with clients to develop customized solutions that harness the full spectrum of anti-counterfeiting tools. We complement this approach with a nuanced understanding of French litigation procedures and a unique ability to handle complex, pan-European litigation and disputes.</p>  ",Featured resources,a21d9780-e213-4f4b-8878-676409f8313c;27c0b34a-2fca-4ca0-affa-b104931dfeaa,View all insights,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}
455,/Services/Governance-Activism-Investigations/Canada,en-GB,9D0BBF4D-27A8-497A-8DCB-3050D9372275,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Who we are</h2>    <p>Clients turn to the Governance, Activism &amp; Investigations Group of Gowling WLG when faced with a crisis, or while striving to avoid one. We&#39;re a national, multi-disciplinary team of experienced practitioners working with clients ranging from publicly traded and private companies, hedge funds, activitists and boards of directors, among other areas, who partner with us to handle all manner of circumstances.</p>    <p>Our team is comprised of professionals with extensive experience in complex, situational and high-risk transactions, as well as related corporate matters.</p>    <h2>How we help</h2>    <p>We work alongside clients to quickly and effectively assess and resolve or provide timely strategic advice with respect to their most pressing situations, including, but not limited to:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Complex or contested corporate transactions</li>   <li>Proxy contests</li>   <li>Insider bids</li>   <li>Hostile takeovers</li>   <li>Director liability matters</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Internal and external investigations</li>   <li>Crisis or risk management</li>   <li>Corporate and securities litigation</li>   <li>Data breaches and cyber security events</li>  </ul>  </div>  </div>  </div>    <p>Clients know we&#39;re adept at assessing vulnerabilities and mitigating risk, as well as providing best practices and defensive readiness through governance reviews and vulnerability analyses. Our experienced advisors are able to review your specific situation and develop customized &quot;playbooks&quot; to help prepare for and respond to legal crisis events.</p>    <p>Most matters that fit within the scope of the Governance, Activism and Investigations Group require practitioners to assess and resolve issues, or provide timely strategic advice, in a compressed timeframe. The depth and breadth of our team&#39;s knowledge allows us to swiftly assist with issues in a convenient one-stop shop setting, including:</p>    <ul>   <li>Shareholders and members (such as proxy contests), contested shareholders&#39;/members&#39; meetings (including requisitioned meetings), securities litigation, shareholder/member proposals and other activist and defense situations, as well as activism preparedness.</li>   <li>Matters affecting Boards of directors and management, including: directors&#39; or officers&#39; disputes and liability situations, insider trading, tipping, fraud, financial misconduct, corporate malfeasance, and any other unique or serious governance matter that relates to breaches of the fiduciary obligations, including independent committee and/or regulatory investigations.</li>   <li>Transactions that are (or expected to be) contested or complex, generally requiring the establishment of a special committee. Such transactions include: conflict of interest matters, complex reorganization transactions, hostile takeovers, insider bids, significant related party transactions, plans of arrangement, and board independence matters.</li>   <li>Matters involving stock exchange and/or securities regulatory authorities, which may also include other adverse parties--regulatory actions resulting from shareholder or other stakeholder complaints, for example. This may include enforcement proceedings, continuous disclosure or issue-oriented reviews, cease-trade orders, stock exchange compliance &amp; disclosure reviews, and similar situations.</li>  </ul>    <h2>Client service highlights</h2>    <p>Clients know we offer advisement on the full scope of governance, activism &amp; investigations matters, and work diligently to ensure they can navigate their latest challenge. Recent client highlights include serving as:</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Special Committee of Rocky Mountain Dealership Inc. (RMD)</h3>   </li>   <li>   <p>Counsel to Canada&#39;s largest agriculture equipment dealer, on the insider bid acquisition of all of RMDs issued and outstanding shares pursuant to a plan of arrangement</p>   </li>   <li>   <h3>Special Committee of Central Fund of Canada Limited (CFCL)</h3>     <p>Counsel to the company&#39;s $4.3 billion acquisition by Sprott Inc. pursuant to a plan of arrangement</p>   </li>   <li>   <h3>Sayer Energy Advisors</h3>     <p>Counsel to which provided a fairness opinion to the Special Committee of Toscana Energy Income Corporation with respect to Toscana&#39;s acquisition of Cortona Energy Ltd.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Echelon Wealth Partners Inc.</h3>     <p>Counsel to financial advisor to the special committee of Tangelo Games Corp., with respect to Tangelo&#39;s acquisition by GoGel Holdings Ltd. by way of a plan of arrangement under the <em>Business Corporations Act</em> (Ontario)</p>   </li>   <li>   <h3>Mosquito Consolidated (now American CuMo)</h3>     <p>Counsel to dissident shareholders, Hongxue Fu, Shaun Dykes and others, of Mosquito Consolidated (now American CuMo) at a court-ordered meeting the outcome of which was a successful ousting of the incumbent board</p>   </li>   <li>   <h3>Land &amp; Buildings Investment Management LLC</h3>     <p>Counsel to a high-profile activist investor, in an urgent proceeding at the <abbr title=""Ontario Securities Commission"">OSC</abbr> contesting a TSX decision that would have allowed Hudson&#39;s Bay Company to complete a complex and dilutive share issuance within the context of a multi-billion dollar transaction; only successfully contested motion argued at the <abbr title=""Ontario Securities Commission"">OSC</abbr>; subsequently negotiated a settlement</p>   </li>  </ul>    <h2>Applying global capabilities locally</h2>    <p>Gowling WLG is a global, sector-focused law firm with legal professionals in seven cities across Canada. The Firm also conducts business in major markets in the UK, Europe, Asia, South America, and the Middle East. When Gowling WLG legal professionals are asked for advice, it&#39;s delivered with a global perspective that helps companies navigate shifting markets, trends and technologies in their local contexts.</p>    <h2>Ask us how</h2>    <p>Your urgent business matters are important, no matter how complex. Any of the lawyers in our Governance, Activism &amp; Investigations Group are ready to partner with your team to assess your needs.</p>    <p><strong><a href=""~/en/people/greg-peterson/"">Greg Peterson</a></strong><br />  Head, Calgary Corporate Finance, M&amp;A and Private Equity Group</p>    <p><strong><a href=""~/en/people/jacob-cawker/"">Jacob Cawker</a></strong><br />  Partner</p>  ",GWLG.Canada,f52c18f0-f75d-443c-8edf-8eb8851b7f75;cc734a17-f747-445a-8ccf-47df174c90b9,DBF8B6E0-9948-4A8F-907D-7A5A72AAC527,NULL,0,1,NULL,"<p>Matters involving governance, activism &amp; investigations have the potential to critically affect a company&#39;s profitability or survival, or threaten the value of a strategic investment. Be prepared for any special situation with the help of a Gowling WLG professional.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,cbcb1b43-c598-4774-8f2b-1008ca50fe7c;67cc482a-3577-4c6d-99fc-80e684f6ea08;773e9f22-2875-463d-accf-3e110856ca10,NULL,NULL,{ECC027C9-82CC-4859-86C2-D05976465855}|{C90851CC-FC15-4C12-B60E-D9A6B48610B1}
456,/Services/Real-Estate-Development/Canada,en-GB,93904F12-C865-46A3-B1CA-AE77DD684D58,Canada,Canada,"Go-to firm for developers looking for practical advice and solutions on commercial, residential, institutional, planned community, mixed-use, and condominium developments.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Trusted real estate advisors</h2>    <p>Canada&#39;s real estate developers turn to Gowling WLG&#39;s Real Estate Group for guidance on the complete life cycle of their development projects. A driving legal force in Canada&#39;s metropolitan centres, Gowling WLG is the go-to firm for developers looking for practical advice and forward-thinking solutions on commercial, residential, institutional, planned community, mixed-use, and condominium developments.</p>    <p>We understand the challenges associated with real estate development in Canada. Our team works closely with developers to mitigate risks, capitalize on opportunities, and advance projects efficiently and cost-effectively. Our national network of planners, surveyors, architects, engineers, and environmental consultants gives our clients a commercial edge, and assists them in the successful and timely completion of projects and transactions.</p>    <p><img alt=""steps to real estate development acquisition, development, leasing and sales"" src=""~/getmedia/fda66e6b-8633-4476-a2ab-da2d7754f79a/Commercial-Real-Estate-Life-Cycle-R3.png.xml?width=927&amp;height=331"" style=""width: 927px; height: 331px;"" /></p>    <h2>From conception to completion</h2>    <p>Our collaborative approach and in-depth experience ensures timely and efficient results that help drive projects forward. From conception to completion, Gowling WLG real estate lawyers tackle the full spectrum of legal challenges that arise during a project.</p>    <h3>Acquisition</h3>    <p>At the acquisition stage, clients trust in Gowling WLG to carry out due diligence, advise on perspective structures for ownership and establish structures and processes to ensure an efficient and cost-effective closing. These services include:​</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Land acquisitions and/or assembly</li>   <li>Due diligence &ndash; title and off-title searches, contract, lease, and environmental due diligence review</li>   <li>Corporate structuring and tax advice</li>   <li>Cost-sharing agreements among developers</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Purchase, project and/or construction financing</li>   <li>Ownership arrangements (limited partnerships, co-ownership, joint ventures, and PPP)</li>  </ul>  </div>  </div>  </div>    <h3>Development</h3>    <p>Once a development is underway, we work alongside clients to ensure each stage of the development process is seamless and&nbsp;smooth. We know this is where a development can be stalled or costs incurred get out of hand. We provide advice on project development, municipal/planning approval, environmental remediation, construction, and contract preparation. More specifically, this includes:​</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Municipal, provincial, and federal development approvals and building permits</li>   <li>Subdivision planning</li>   <li>Site plan analysis and approvals</li>   <li>Zoning, rezoning, Ministerial Zoning Orders, Official Plan Amendments, variances, and severances</li>   <li>Brownfield development and remediation/risk assessment strategies</li>   <li>Construction contracts and other vendor/supplier agreements</li>   <li>Development management and project management</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Plans of Condominium including by-laws, rules, and condominium declarations (freehold, leasehold, vacant land, strata, and common-element condominiums)</li>   <li>Easements and Shared Services Agreements</li>   <li>Transfers for easements, road widening, reserves, Parkland dedications&nbsp;and other requirements of approvals</li>   <li>Restrictive Covenants, reciprocal rights agreements, building schemes, and other property or project-specific matters</li>  </ul>  </div>  </div>  </div>    <h3>Leasing and Operations</h3>    <p>Our professionals oversee the leasing, financing, and operational stage of a given project, including:</p>    <ul>   <li>Leasehold and take-out financing</li>   <li>Landlord/tenant leases&nbsp;(ground, whole building, multi-tenant, sublease) and indemnifier agreements</li>   <li>Operating covenants and radius restrictions</li>   <li>Standardized leases&nbsp;for multi-tenanted projects or portfolios</li>   <li>Cost recovery, realty tax allocation, reporting obligations, risk allocation and insurance matters</li>  </ul>    <h3>Sales</h3>    <p>When a real estate project is complete, clients look to Gowling WLG to prepare the necessary documents to conclude the sale of their entire project (or individual lots, blocks, or units) in a timely and cost-effective manner, including:​</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Purchase, sale, and lease-back agreements</li>   <li>Standard form Agreements of Purchase and Sale for a development</li>   <li>Standardized closing packages for builder sales, lot/block sales, and condominium sales</li>   <li>Deposit Trustee for condominiums</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Disclosure statements for purchasers</li>   <li>Closing of individual sites, lots/blocks, and condominiums</li>   <li>Options to purchase or rights of first refusal</li>   <li>Financing covenants for prepayment obligations/restrictions.</li>  </ul>  </div>  </div>  </div>    <h2>Experience across Canada</h2>    <p>With offices across Canada, we offer clients market-leading solutions by leveraging the firm&#39;s know-how in tax, environmental law, corporate law, municipal planning, litigation, Indigenous law, construction, employment law, and financial services to advance our clients&#39; development projects.</p>    <p>Real estate developers from a broad range of sectors trust us to manage their legal challenges. We offer advice on the full scope of real estate development matters, and work diligently to ensure clients can execute their latest development project.</p>    <p>{^widget|(headingtext)Recent+client+highlights|(name)GWLG.Widgets.FAQList|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fReal-Estate-Development%2f%2525|(widget_displayname)FAQ+List|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(width)|(height)^}</p>    <h2>Ask us how</h2>    <p>Your strategic business objectives are important, no matter the size or scale of your real estate development project. Let&#39;s take the next step together.</p>    <h2>Contact our Canadian team</h2>    <p><a href=""~/en/people/pamela-green/"" target=""_blank"">Pamela Green</a></p>    <p>Partner</p>  ",GWLG.Canada,22caa3a7-ab34-47a7-866b-892c7db3973a,0397D82F-2E03-40D6-856C-712EB9BF6014,NULL,0,1,NULL,"<p>No matter the size or shape of your real estate project, our objective is to deliver effective legal advice and efficient business solutions combined with a distinctive client experience - each and every time.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{36E93708-75F3-4055-BEA8-2C30210EFB9A}
457,/Services/Environmental-Social-and-Governance-ESG/Overview,en-GB,7FEEB006-2D17-4585-A744-3B8756F430C8,Overview,Overview,"While financial, regulatory, employment and pensions matters may be a priority for now, Environmental, Social and Governance (ESG) issues remain high on board agendas.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Businesses face a number of challenges in the current climate. While financial, regulatory, employment and pensions matters may be a priority for now, Environmental, Social and Governance (ESG) issues remain high on board agendas. Discussions are increasing around green growth and how businesses can respond to new opportunities as our environment and society evolves. Doing good is being equated more and more with doing well, making it essential for businesses to understand where <abbr title=""Environmental, Social and Governance"">ESG</abbr> risks and rewards may lie.</p>    <h2>What is <abbr title=""Environmental, Social and Governance"">ESG</abbr>?</h2>    <p><abbr title=""Environmental, Social and Governance"">ESG</abbr> covers a range of topics that combine to measure how ethically a company behaves:</p>    <ul>   <li><strong>Environment</strong>: climate change, carbon footprint, circular economy, biodiversity, waste, water and resource use, pollution,</li>   <li><strong>Social</strong>: human rights, labour practices, health &amp; safety, community, diversity &amp; inclusion, systematic racism, pay equity, shareholder activism, corporate purpose,</li>   <li><strong>Governance</strong>: corporate governance, company ethics, regulatory compliance, executive pay, board diversity, lobbying, approach to taxation</li>  </ul>    <h2>Why <abbr title=""Environmental, Social and Governance"">ESG</abbr> is important</h2>    <p>ESG has evolved over the past few years and has now become a critical focus for businesses, investors, NGOs, governments, stakeholders, consumers, lenders, insurers and consumers. Expectations of businesses in this dynamic landscape have never been higher.</p>    <p>The potential impact is vast, affecting a number of areas including strategy, reporting, human capital management, operations, risk management and long-term value. While the companies that choose to work with you may take into account your business&#39; ESG performance, there are increasingly other factors to consider.</p>    <p>The rise in benchmarks and indices that track a company&#39;s performance on ESG metrics means that the publication of &#39;warm and fuzzy&#39; sounding pronouncements is no longer enough. ESG has moved from the domain of a PR and Communications team to become a board-level concern. ESG issues present a series of governance risks in relation to reputation, regulating compliance, investment and sales.</p>    <p>However, alongside managing such risks and requirements, there are many opportunities around sustainability and ESG. Those that are forward thinking in this area are likely to thrive in the &#39;new normal&#39;.</p>    <h2><abbr title=""Environmental, Social and Governance"">ESG</abbr> risks in business</h2>    <p><abbr title=""Environmental, Social and Governance"">ESG</abbr> risks are increasingly becoming a focus for shareholders, with decisions built on data and planning that considers long-term risk assessments and investment strategies. Institutional investors are likely to ask questions about a range of different areas that can destroy or create value for businesses, from how well they can defend themselves against cyber security attacks to whether senior leadership has diverse backgrounds.</p>    <p>Companies that can demonstrate that they are managing these risks and meeting these standards are better equipped to sustain their operational and financial performance, and ultimately their value for socially responsible investments.</p>    <h2>How can we help?</h2>    <p>While <abbr title=""Environmental, Social and Governance"">ESG</abbr> factors can often be associated with sustainability or Corporate Social Responsibility (CSR), the bottom line is that they are a reflection on how a business or institution manages risk, as well as how they contribute to society. Whatever your current position, there are opportunities now to &#39;reset&#39; and consider how your business can be better aligned to sustainability goals.</p>    <p>Gowling WLG&#39;s specialist team is fully engaged in developments around <abbr title=""Environmental, Social and Governance"">ESG</abbr>. Comprising of lawyers working across practice areas in our international offices, the team provides a wide spectrum of advice helping clients to understand their responsibilities and identify where risks and opportunities may lie.</p>    <p>If you are in need of advice and guidance regarding <abbr title=""Environmental, Social and Governance"">ESG</abbr> issues, <strong>contact one of our teams today</strong>.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/environmental-social-and-governance-esg/#canada"">Canada</a></li>   <li><a href=""~/en/services/environmental-social-and-governance-esg/#uk"">UK</a></li>  </ul>  ",GWLG.Global,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;03d6dce1-2df8-4f24-8e6b-d7bcda0b6509;d7a64117-fe8d-47a0-ace6-75c8607bfcdd;e1fcdf49-26d1-491c-8fd4-d7cc34fdcfb8;a1a4c901-7400-490f-8357-9db439f7dfee;ad056fcd-7211-4da7-a9e2-30612d332954;6ed517b8-3709-4234-8c1b-a66d3f7e6080;2d03f2db-bf91-45db-a827-470484fe7ddb;f63465af-154c-4d26-b2ab-6bc7cc79f913,B305A1B6-D0BA-41DC-8E53-579FD077B871,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4fece204-ba3c-4f6f-a416-359cac0d10f9,NULL,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{A7B882E4-34EF-49D2-BBA0-D320669A55A8}|{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{3D70D8CA-CF7C-4153-874D-C164399C6B5F}|{55081D04-3BD8-4E64-A752-137A9B30CE9D}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|{04845612-0BAA-49B6-832B-70C585175F10}|2d03f2db-bf91-45db-a827-470484fe7ddb|{5B635900-49C8-4921-A179-D6EAB83D1146}
458,/Services/Environmental-Social-and-Governance-ESG/Canada,en-GB,CD5121A5-5950-4624-9883-8272CEAE1B9A,Canada,Canada,Our ESG advisory team provides a wide spectrum of advice helping clients to understand their responsibilities and identify where risks and opportunities may lie.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2><abbr title=""Environmental, Social and Governance"">ESG</abbr>&nbsp;factors for businesses</h2>    <p>Businesses are doing a deep dive into how critical factors in ESG&nbsp;present risks and require careful management and oversight as well as opportunities to be explored and activated.</p>    <p>In addition to the internal structure and reporting issues and requirements, there are stronger external pressures. Proponents of responsible investing, impact investing and sustainable investing are continually pressing for better and more standardized reporting of Canadian&nbsp;<abbr title=""Environmental, Social and Governance"">ESG</abbr> issues. Simultaneously, governments around the globe are continuing the transcendence of &quot;hard&quot;&nbsp;law over &quot;soft&quot;&nbsp;law and originating new and more complex regulatory and compliance programs which create additional risks and obligations for businesses.</p>    <p>Class actions and single plaintiff litigation have opened the door for more far-reaching and impactful jurisprudence that stresses risk management efforts.</p>    <p>The adoption and application of international standards, principles, guidelines and goals, which may impact strategies and operations across a business and in a multiplicity of jurisdictions, have many businesses working diligently in unfamiliar territory.</p>    <h2>We can help</h2>    <p>Our <abbr title=""Environmental, Social and Governance"">ESG</abbr> advisory team provides a wide spectrum of advice helping clients to understand their responsibilities and identify where risks and opportunities may lie.</p>    <p>Our <abbr title=""Environmental, Social and Governance"">ESG</abbr> advisory services include Governance, Risk Management, and Due Diligence advice; Investment &amp; Financing options, and Compliance &amp; Reporting in connection with the following:</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fEnvironmental-Social-and-Governance%2fCanada-ESG-advisory-services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Our+ESG+advisory+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Contact our Canadian team</h2>    <p><strong><a href=""~/en/people/elizabeth-burton/"">Elizabeth (Beth) Burton</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/stephen-pike/"">Stephen Pike</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/maya-stano/"">Maya Stano</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/jennifer-king/"">Jennifer King</a></strong><br />  Partner</p>  ",GWLG.Canada,e1fcdf49-26d1-491c-8fd4-d7cc34fdcfb8;03d6dce1-2df8-4f24-8e6b-d7bcda0b6509;6ed517b8-3709-4234-8c1b-a66d3f7e6080;f63465af-154c-4d26-b2ab-6bc7cc79f913,B305A1B6-D0BA-41DC-8E53-579FD077B871,NULL,0,1,NULL,"<h2>ESG advisory services</h2>    <p>Adding to the list of challenges businesses face, <abbr title=""Environmental, Social and Governance"">ESG</abbr>&nbsp;issues are rapidly becoming priorities. Discussions abound on how businesses can plan for, and comply with, increasing market demands for enhanced environmental activism, a stronger commitment to sustainability, an active role in addressing social issues and an overall improvement as to how businesses govern their entire supply chain. It is essential that businesses understand risks and opportunities.</p>  ",Recent insights,cdc93b10-69f8-4721-a844-93437786e07f;f1515b54-1c04-4739-849d-2d2b1daade71;9e33618c-a487-4bd0-8a51-5ce7b685ea1a;13cd485c-b8f2-4484-8587-69b46e61a92c,View all ESG insights from Canada,NULL,NULL,NULL,NULL,4ea04a9a-660a-48ea-b583-e3f3f3dd0383,NULL,NULL,{3D70D8CA-CF7C-4153-874D-C164399C6B5F}|{A7B882E4-34EF-49D2-BBA0-D320669A55A8}|{04845612-0BAA-49B6-832B-70C585175F10}|{5B635900-49C8-4921-A179-D6EAB83D1146}
459,/Services/Environmental-Social-and-Governance-ESG/Overview,fr-CA,7FEEB006-2D17-4585-A744-3B8756F430C8,Aperçu,Aperçu,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Dans le climat actuel, les entreprises sont confrontées à bon nombre de défis. Tandis que les questions de nature financière et réglementaire ou liées à l&#39;emploi et aux régimes de retraite peuvent sembler prioritaires, les facteurs environnementaux, sociaux et de gouvernance (ESG) figurent au cœur des préoccupations des conseils d&#39;administration. En effet, à mesure qu&#39;évoluent notre environnement et la société, on accorde de plus en plus d&#39;importance à la croissance verte et à la façon dont les entreprises peuvent saisir de nouvelles occasions à cet égard. D&#39;ailleurs, à l&#39;ère où faire le bien est synonyme de prospérité pour les entreprises aujourd&#39;hui, il est d&#39;autant plus important pour ces dernières de bien comprendre les risques et les avantages liées aux facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>.</p>    <h2>Qu&#39;entend-on précisément par <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>?</h2>    <p>Les principes <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> couvrent une série de sujets qui, combinés, reflètent l&#39;éthique d&#39;une entreprise:</p>    <ul>   <li><strong>Environnement&nbsp;</strong>: changements climatiques, empreinte carbone, économie circulaire, biodiversité, gestion des déchets, utilisation de l&#39;eau et des ressources, contrôle de la pollution</li>   <li><strong>Société&nbsp;</strong>: droits de la personne, pratiques de travail, santé et sécurité, apport à la collectivité, diversité et inclusion, équité salariale, activisme des actionnaires, raison d&#39;être des entreprises</li>   <li><strong>Gouvernance&nbsp;</strong>: gouvernance d&#39;entreprise, éthique d&#39;entreprise, conformité réglementaire, rémunération des membres de la direction, diversité des membres du conseil d&#39;administration, lobbying, approche de la fiscalité</li>  </ul>    <h2>Importance des facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr></h2>    <p>Alors qu&#39;on accorde une place de plus en plus importante aux facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> dans le monde des affaires ces dernières années, les sociétés, les investisseurs, les ONG, les gouvernements, les parties prenantes, les consommateurs, les prêteurs et les assureurs n&#39;ont d&#39;autre choix que de les intégrer à leurs activités. En effet, jamais les attentes n&#39;ont été aussi élevées à leur égard en matière de protection de l&#39;environnement, de responsabilité sociale et de bonne gouvernance.</p>    <p>L&#39;intégration des facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> peut-être de vaste portée pour les sociétés, car elle affecte de multiples éléments dont la stratégie d&#39;entreprise, la divulgation de certaines données, la gestion du capital humain, les opérations, la gestion du risque et la valeur à long-terme. Les sociétés qui choisissent de travailler avec vous tiendront probablement compte du rendement des facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> de votre entreprise; cependant, elles examineront très certainement d&#39;autres critères également.</p>    <p>À voir la multiplication des indicateurs qui permettent de faire le suivi du rendement des entreprises en matière d&#39;<abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>, on comprend qu&#39;il ne suffit plus de jeter de la poudre aux yeux à cet égard. Au-delà du domaine des relations publiques et des communications, les facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> sont désormais à l&#39;avant-plan des enjeux des conseils d&#39;administration, car ils peuvent représenter des risques de gouvernance, notamment en ce qui a trait à la réputation, à la conformité réglementaire, aux investissements et aux ventes d&#39;une entreprise.</p>    <p>Toutefois, parallèlement à la gestion de tels risques et exigences, il existe de nombreux moyens d&#39;assurer la durabilité et l&#39;application des normes <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>, et les sociétés qui font preuve d&#39;avant-gardisme dans ce domaine sont plus susceptibles de prospérer dans la &laquo;&nbsp;nouvelle normalité&nbsp;&raquo;.</p>    <h2>Gestion des risques <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> par les entreprises et affaires</h2>    <p>Comme les décisions sont fondées sur des données et sur une planification tenant compte de l&#39;évaluation des risques et des stratégies d&#39;investissement à long terme, les actionnaires accordent de plus en plus d&#39;importance aux enjeux d&#39;ESG. Les investisseurs institutionnels sont également portés à poser des questions aux entreprises sur toute une gamme de domaines différents susceptibles de détruire ou de créer de la valeur pour une entreprise. Ces questions peuvent notamment porter sur la diversité dont sont issus les hauts dirigeants de l&#39;entreprise ou la capacité de cette dernière à se défendre contre des cyberattaques.</p>    <p>Les entreprises qui peuvent démontrer une saine pratique de gestion de ces risques et leur respect des normes <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> sont plus aptes à maintenir leur rendement opérationnel et financier, et par le fait même, à maintenir leur valeur pour assurer des investissements socialement responsables.</p>    <h2>Notre approche</h2>    <p>Si les principes <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> sont souvent associés à la durabilité ou à la responsabilité sociale d&#39;entreprise (RSE), ils reflètent en fait la manière dont une entreprise ou une institution gère le risque, ainsi que la façon dont elle contribue à la société. Quelle que soit votre position actuelle, vous pouvez &laquo;&nbsp;repartir sur de nouvelles bases&nbsp;&raquo; et réfléchir à la manière dont votre entreprise peut mieux atteindre ses objectifs de durabilité.</p>    <p>Forte d&#39;avocats spécialistes œuvrant dans différents domaines du droit au sein de nos bureaux à l&#39;international, l&#39;équipe de Gowling&nbsp;WLG se tient constamment au courant des développements en matière de normes&nbsp;<abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>. Elle fournit un large éventail de conseils en la matière, aidant ainsi les clients à comprendre leurs responsabilités et à cerner les risques et les perspectives possibles.</p>    <p>Si vous avez besoin de conseils ou de directives à l&#39;égard des enjeux environnementaux, sociaux ou de gouvernance, <strong>communiquez avec l&#39;une de nos équipes dès aujourd&#39;hui</strong>.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/environmental-social-and-governance-esg/#canada"">Canada</a></li>   <li><a href=""~/fr/services/environmental-social-and-governance-esg/#uk"">Royaume-Uni</a></li>  </ul>  ",GWLG.Global,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;03d6dce1-2df8-4f24-8e6b-d7bcda0b6509;d7a64117-fe8d-47a0-ace6-75c8607bfcdd;e1fcdf49-26d1-491c-8fd4-d7cc34fdcfb8;a1a4c901-7400-490f-8357-9db439f7dfee;ad056fcd-7211-4da7-a9e2-30612d332954;5e63e862-776c-4170-aca2-ed23d6702294;2d03f2db-bf91-45db-a827-470484fe7ddb,B305A1B6-D0BA-41DC-8E53-579FD077B871,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{A7B882E4-34EF-49D2-BBA0-D320669A55A8}|{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{3D70D8CA-CF7C-4153-874D-C164399C6B5F}|{55081D04-3BD8-4E64-A752-137A9B30CE9D}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|{AD7B64EC-5BBF-450E-BAB4-6B3A0FF15BF4}|2d03f2db-bf91-45db-a827-470484fe7ddb
460,/Services/Brand-Protection/Canada,en-GB,7BEB4631-7381-4B1E-8708-8F293EA36150,Canada,Canada,"In Canada, our Brand Protection Group holds formidable experience in all aspects of trademark enforcement – including opposition proceedings, infringement, passing off, look alike/sound alike issues dilution, anti-counterfeiting, trans-shipping and parallel import matters. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>In tune with your sector</h2>    <p>Our team routinely advises brands across an array of global sectors &ndash; including consumer goods, retail and professional services, chemical, manufacturing, pharmaceuticals, technology, and financial services, among others. This first-hand industry knowledge allows us to tailor your brand strategy around the commercial realities you face daily.</p>    <h2>Comprehensive brand strategy</h2>    <p>In addition to our brand protection services, we offer full-lifecycle coverage of your brand assets &ndash; from initial prosecution to portfolio management to complex litigation.</p>    <p>We consistently file more trademark applications and have more registrations under management than any other Canadian firm. We regularly appear before all levels of court in Canada, and manage and co-ordinate litigation files in international jurisdictions.</p>    <h2>Contact our team</h2>    <p><a href=""~/en/people/monique-couture/"" target=""_blank"">Monique Couture</a></p>    <p>Partner</p>  ",GWLG.Canada,8881287e-24c9-49cc-9a9b-985ad209d75d,063A4663-15FF-4950-8946-3944EE403426,NULL,0,1,NULL,"<p>In Canada, our Brand Protection Group holds formidable experience in all aspects of trademark enforcement &ndash; including opposition proceedings, infringement, passing off, look alike/sound alike issues dilution, anti-counterfeiting, trans-shipping and parallel import matters.</p>    <p>We complement our brand protection services with some of the country's leading Entertainment &amp; Sports Law and Advertising &amp; Product Regulatory practices.</p>  ",Featured resources,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C7B5E5C7-4F33-44C1-813B-24F21D27C96D}
461,/Services/Real-Estate-Development/Canada,fr-CA,93904F12-C865-46A3-B1CA-AE77DD684D58,Canada,Canada,"Quelle que soit l'envergure de votre projet immobilier, notre objectif est de vous fournir des conseils juridiques efficaces et des solutions commerciales adaptées, tout en vous assurant une expérience client unique. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2 align=""left"">Conseillers de confiance en immobilier</h2>    <p align=""left"">Les promoteurs immobiliers du Canada font confiance au groupe Droit immobilier de Gowling&nbsp;WLG pour obtenir des conseils à toutes les étapes de leurs projets de développement. Avec ses équipes d&#39;avocats chevronnés dans les grands centres urbains canadiens, Gowling&nbsp;WLG est le cabinet de référence pour les promoteurs à la recherche de conseils pratiques et de solutions novatrices en matière d&#39;aménagements de développements commerciaux, résidentiels, institutionnels, à usage mixte et de copropriétés.</p>    <p align=""left"">Les défis associés au développement immobilier au Canada n&#39;ont pas de secrets pour nous. Notre équipe collabore étroitement avec les promoteurs pour atténuer les risques, profiter des occasions qui se présentent et faire avancer les projets de manière efficace et rentable. Notre réseau national composé d&#39;urbanistes, d&#39;arpenteurs-géomètres, d&#39;architectes, d&#39;ingénieurs et de consultants en environnement garantit à nos clients un avantage commercial et contribue à la réalisation de leurs projets et opérations immobilières en temps opportun.</p>    <p align=""left""><img alt=""steps to real estate development acquisition, development, leasing and sales"" src=""~/getmedia/ef23fe8b-6730-4d5f-bea2-55acf0efcf64/Commercial-Real-Estate-Life-Cycle-French.png.xml"" /></p>    <h2 align=""left"">De la conception à la réalisation de vos projets</h2>    <p align=""left"">Notre approche collaborative et notre riche expérience permettent aux clients d&#39;obtenir des résultats efficients au bon moment pour assurer la réussite de leurs projets. De la conception à la réalisation de ces derniers, les avocats en droit immobilier de Gowling&nbsp;WLG relèvent les défis juridiques qui surviennent en cours de route.</p>    <h3 align=""left"">Acquisition</h3>    <p align=""left"">Au stade de l&#39;acquisition, les clients se fient à Gowling&nbsp;WLG pour effectuer la vérification diligente, donner des conseils sur des structures potentielles de propriété, et mettre en place des structures et des processus pour garantir une clôture efficace et rentable. Voici en quoi consistent notamment nos services-conseils :</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Acquisitions et/ou assemblage de terrains</li>   <li>Vérification diligente&nbsp;: recherches de titres et hors titres, contrats, baux, et vérifications diligentes environnementales</li>   <li>Structuration d&#39;entreprises et conseils fiscaux</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Financement d&#39;achats, de projets et/ou de construction</li>   <li>Ententes de propriété (sociétés en commandite, indivision, coentreprises et PPP)</li>  </ul>  </div>  </div>  </div>    <h3 align=""left"">Développement</h3>    <p align=""left"">Une fois qu&#39;un projet de développement est lancé, nous accompagnons les clients pour que chaque étape du processus de développement se déroule sans heurts. En effet, c&#39;est à ce stade qu&#39;un projet peut être bloqué et que les coûts peuvent s&#39;envoler. Nos services-conseils portent sur le développement du projet, l&#39;approbation municipale et du zonage, la caractérisation environnementale, la construction et la préparation des contrats, et sur ce qui suit plus précisément&nbsp;:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Les approbations d&#39;aménagement et les permis de construction municipaux, provinciaux et fédéraux</li>   <li>La planification de l&#39;aménagement et du lotissement</li>   <li>L&#39;analyse et l&#39;approbation des plans d&#39;implantation</li>   <li>Le zonage, le rezonage, les arrêtés de zonage du ministre, les modifications du plan officiel et les dérogations</li>   <li>Les stratégies d&#39;aménagement et de réhabilitation/d&#39;évaluation des terrains contaminés</li>   <li>Les contrats de construction et les autres ententes fournisseurs/entrepreneurs</li>   <li>La gestion d&#39;aménagement et de projets</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>Les plans de copropriétés, les règlements de copropriété et la rédaction des déclarations de copropriétés</li>   <li>Les servitudes et les ententes de services partagés</li>   <li>Les transferts pour les servitudes, les élargissements de la chaussée, les réserves, les aménagements de parcs et autres exigences d&#39;approbation</li>   <li>Les clauses restrictives, les accords de réciprocité, les projets de bâtiments et autres enjeux de propriété ou propres à des projets</li>  </ul>  </div>  </div>  </div>    <h3 align=""left"">Location et opérations</h3>    <p align=""left"">Nos professionnels supervisent la location, le financement et les différentes phases d&#39;un projet donné, y compris&nbsp;:</p>    <ul>   <li>Les acquisitions et les prêts hypothécaires</li>   <li>Les baux propriétaire/locataire (fonciers, immeubles à conception intégrée, multi-locataires, sous-location à bail) et les ententes d&#39;indemnisation</li>   <li>Les ententes d&#39;exploitation et les clauses de restriction dans un rayon déterminé</li>   <li>Les baux standard pour les projets ou portefeuilles multi-locataires&nbsp;</li>   <li>Le recouvrement des coûts, la répartition de l&#39;impôt foncier, les obligations de déclaration, la répartition des risques et les questions d&#39;assurance.</li>  </ul>    <h3 align=""left"">Ventes</h3>    <p align=""left"">À la clôture d&#39;un projet immobilier, les clients se tournent également vers Gowling&nbsp;WLG pour préparer les documents nécessaires à la conclusion de la vente de l&#39;ensemble de leur projet (lots, blocs ou unités individuels) en temps opportun et de manière rentable, dont&nbsp;:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li>Les ententes d&#39;achat, de vente et de cession-bail</li>   <li>Les documents standard de contrat d&#39;achat et de vente visant un projet de développement</li>   <li>Les documents de clôture pour les ventes par les constructeurs et les ventes d&#39;unités en copropriétés</li>   <li>La gestion de dépôt pour les copropriétés</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li>La clôture des transactions</li>   <li>Les options d&#39;achat ou de droits de premiers refus</li>   <li>Les ententes de financement (obligations/restrictions de remboursement anticipé)</li>  </ul>  </div>  </div>  </div>    <h2 align=""left"">Une expérience à l&#39;échelle du Canada</h2>    <p align=""left"">Forts de la présence de nos bureaux au Canada et de nos connaissances pratiques en matière de fiscalité, du droit de l&#39;environnement, du droit des sociétés, de la planification municipale, du litige, du droit autochtone, de la construction, du droit du travail et des services financiers, nous offrons à nos clients des solutions des plus novatrices sur le marché pour faire avancer leurs projets de développement.</p>    <p align=""left"">Les promoteurs immobiliers d&#39;un large éventail de secteurs se fient à nous pour gérer leurs enjeux juridiques. Nous conseillons nos clients sur l&#39;ensemble des questions relatives au développement immobilier et travaillons avec diligence pour qu&#39;ils puissent réaliser leurs projets de développement.</p>    <p align=""left"">{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fReal-Estate-Development%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)%3ch3+style%3d%22text-align%3aleft%22%3eVoici+quelques+mandats+que+nous+avons+r%c3%a9alis%c3%a9s+r%c3%a9cemment+%3a%3c%2fh3%3e|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2 align=""left"">Pour en savoir plus</h2>    <p align=""left"">Peu importe la taille ou l&#39;envergure de votre projet de développement immobilier, vos objectifs d&#39;affaires stratégiques sont au cœur de nos priorités. Franchissons ensemble les prochaines étapes pour concrétiser vos projets.</p>    <h2>Communiquez avec notre équipe canadienne</h2>    <p><a href=""~/fr/people/pamela-green/"" target=""_blank"">Pamela Green</a></p>    <p>Avocate</p>  ",GWLG.Canada,22caa3a7-ab34-47a7-866b-892c7db3973a,0397D82F-2E03-40D6-856C-712EB9BF6014,NULL,0,1,NULL,"<p align=""left"">Quelle que soit l&#39;envergure de votre projet immobilier, notre objectif est de vous fournir des conseils juridiques efficaces et des solutions commerciales adaptées, tout en vous assurant une expérience client unique.&nbsp;</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{36E93708-75F3-4055-BEA8-2C30210EFB9A}
462,/Services/Governance-Activism-Investigations/Canada,fr-CA,9D0BBF4D-27A8-497A-8DCB-3050D9372275,Canada,Canada,,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2 align=""left"">Qui sommes-nous?</h2>    <p align=""left"">Que vous soyez au cœur d&#39;une crise ou que vous tentiez d&#39;en éviter une, vous pouvez compter sur le groupe Gouvernance, activisme et enquêtes de Gowling&nbsp;WLG. Forte de juristes expérimentés, notre équipe nationale pluridisciplinaire travaille auprès de fonds spéculatifs, d&#39;activistes, de conseils d&#39;administration, et de sociétés inscrites en bourse ou privées pour les aider à gérer divers enjeux.&nbsp;</p>    <p align=""left"">Nos professionnels possèdent une expérience étendue des transactions complexes, immédiates ou à risque élevé, ainsi que des questions corporatives connexes.</p>    <h2 align=""left"">Notre approche</h2>    <p align=""left"">De concert avec nos clients, nous évaluons et résolvons rapidement et efficacement les situations les plus urgentes. Nous offrons également des conseils stratégiques opportuns concernant divers enjeux, notamment&nbsp;:</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <ul>   <li align=""left"">Les opérations complexes ou contestées des entreprises</li>   <li align=""left"">Les courses aux procurations</li>   <li align=""left"">Les offres par un initié</li>   <li align=""left"">Les offres publiques d&#39;achat hostiles</li>   <li align=""left"">Les questions relatives à la responsabilité des administrateurs</li>  </ul>  </div>    <div class=""small-12 medium-6 cell"">  <ul>   <li align=""left"">Les enquêtes internes et externes</li>   <li align=""left"">La gestion des risques ou des crises</li>   <li align=""left"">Le litige en droit des sociétés et en valeurs mobilières</li>   <li align=""left"">La violation des données et les questions de cybersécurité</li>  </ul>  </div>  </div>  </div>    <p align=""left"">Les clients savent que nous possédons l&#39;expertise appropriée pour évaluer les vulnérabilités, atténuer les risques et offrir des pratiques et des mesures de défense exemplaires par le biais d&#39;examens de gouvernance et d&#39;analyses de vulnérabilité. Nos conseillers expérimentés sont en mesure d&#39;examiner votre situation particulière et d&#39;élaborer des &laquo;&nbsp;guides&nbsp;&raquo; personnalisés afin de vous préparer à réagir aux crises de nature juridique.</p>    <p align=""left"">Les questions relevant du groupe Gouvernance, activisme et enquêtes exigent, pour la plupart, que les juristes évaluent et résolvent les problèmes, ou qu&#39;ils fournissent des conseils stratégiques au bon moment et dans des délais souvent serrés. Grâce à nos connaissances pointues et étendues, nous pouvons intervenir rapidement et de manière concertée pour gérer ce qui suit, sans s&#39;y limiter :</p>    <ul>   <li align=""left"">Les actionnaires et membres du conseil (courses aux procurations), les assemblées contestées d&#39;actionnaires et de membres du conseil (y compris les demandes de convocations d&#39;assemblées), les litiges en matière de valeurs mobilières, les propositions d&#39;actionnaires et de membres du conseil et autres cas de défense et d&#39;activisme, ainsi que la préparation à l&#39;activisme.</li>   <li align=""left"">Les questions touchant les conseils d&#39;administration et la direction (différends et cas de responsabilité des administrateurs ou des dirigeants), les délits d&#39;initiés, le tuyautage, les fraudes, l&#39;inconduite financière, les délits d&#39;entreprises et autres questions de gouvernance unique ou grave liées à la violation des obligations fiduciaires, y compris les enquêtes des comités indépendants et/ou des autorités de réglementation.</li>   <li align=""left"">Les opérations contestées ou complexes (ou susceptibles de l&#39;être) qui exigent généralement la mise sur pied d&#39;un comité spécial. Ces opérations comprennent les questions de conflits d&#39;intérêts, les opérations de réorganisation complexes, les offres publiques d&#39;achat hostiles, les offres par un initié, les opérations importantes entre personnes apparentées, les plans d&#39;arrangement et les questions liées à l&#39;indépendance du conseil d&#39;administration.</li>   <li align=""left"">Les questions portant sur les autorités de réglementation des bourses et/ou des valeurs mobilières pouvant également inclure d&#39;autres parties adverses, c&#39;est-à-dire les mesures réglementaires résultant de plaintes d&#39;actionnaires ou d&#39;autres parties intéressées, par exemple. Il peut s&#39;agir de procédures de mise à exécution, d&#39;examens axés sur les problèmes ou d&#39;examens sur les obligations d&#39;information continue, d&#39;ordonnances d&#39;interdiction d&#39;opérations, d&#39;examens relatifs à la conformité et à aux procédures de divulgation en visant les marchés boursiers et d&#39;autres situations semblables.</li>  </ul>    <h2 align=""left"">Mandats représentatifs</h2>    <p align=""left"">Nous offrons aux clients des conseils sur l&#39;ensemble des questions relatives à la gouvernance, à l&#39;activisme et aux enquêtes, et nous travaillons avec diligence pour qu&#39;ils puissent relever leurs défis. Voici quelques mandats réalisés récemment&nbsp;:</p>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Comité spécial de Rocky Mountain Dealership Inc. (RMD)</h3>   </li>   <li>   <p>Représentation du plus important concessionnaire d&rsquo;équipement agricole du Canada dans le cadre de son acquisition au moyen d&rsquo;une offre par un initié de toutes les actions émises et en circulation de RMD aux termes d&rsquo;un plan d&rsquo;arrangement.</p>   </li>   <li>   <h3>Comité spécial de Central Fund of Canada Limited (CFCL)</h3>     <p>Représentation de la société dans le cadre de son acquisition par Sprott inc. en contrepartie de 4,3 G$, aux termes d&rsquo;un plan d&rsquo;arrangement.</p>   </li>   <li>   <h3>Sayer Energy Advisors</h3>     <p>Représentation dans le cadre de laquelle nous avons fourni, au Comité spécial de Toscana Energy Income Corporation, un avis sur le caractère équitable en ce qui a trait à l&rsquo;acquisition, par Toscana, de Cortona Energy Ltd.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Echelon Wealth Partners Inc.</h3>     <p>Représentation du conseiller financier pour le comité spécial de Tangelo Games Corp. relativement à l&rsquo;acquisition de Tangelo par GoGel Holdings Ltd. par voie d&rsquo;un plan d&rsquo;arrangement en vertu de la Loi sur les sociétés par actions (Ontario). (Ontario)</p>   </li>   <li>   <h3>Mosquito Consolidated (aujourd&rsquo;hui, American CuMo)</h3>     <p>Représentation des actionnaires dissidents, Hongxue Fu, Shaun Dykes et autres, de Mosquito Consolidated (aujourd&#39;hui American CuMo), dans le cadre d&#39;une assemblée ordonnée par le tribunal, qui s&rsquo;est soldée par l&#39;éviction du conseil d&#39;administration en place.</p>   </li>   <li>   <h3>Land &amp; Buildings Investment Management LLC</h3>     <p>Représentation d&rsquo;un investisseur activiste de premier plan dans le cadre d&rsquo;une instance urgente devant la CVMO pour contester une décision de la Bourse de Toronto qui aurait permis à la Compagnie de la Baie d&rsquo;Hudson de réaliser une émission d&rsquo;actions très complexe et dilutive dans le cadre d&rsquo;une opération de plusieurs milliards de dollars; nous avons eu gain de cause dans la seule requête contestée présentée à la CVMO et, par la suite, nous avons négocié un règlement.</p>   </li>  </ul>    <h2 align=""left"">Des ressources internationales au service des clients locaux</h2>    <p align=""left"">Gowling&nbsp;WLG est un cabinet d&#39;avocats international spécialisé dans des secteurs donnés, qui mène des activités dans sept bureaux canadiens tout en œuvrant dans de grands marchés au Royaume-Uni et ailleurs en Europe, ainsi qu&#39;en Asie, en Amérique du Sud et au Moyen-Orient. Ainsi, s&#39;adresser à un conseiller juridique de Gowling&nbsp;WLG, c&#39;est obtenir une perspective mondiale qui oriente les entreprises dans les méandres de l&#39;évolution des marchés, des tendances et des technologies au sein de leurs contextes locaux.</p>    <h2 align=""left"">Pour en savoir plus</h2>    <p align=""left"">Peu importe leur complexité, vos affaires urgentes sont importantes pour nous. L&#39;un des avocats de notre groupe Gouvernance, activisme et enquêtes est prêt à travailler avec votre équipe et à évaluer vos besoins.</p>    <p align=""left""><a href=""https://gowlingwlg.com/en/people/greg-peterson/"">Greg Peterson</a><br />  Chef, Groupe Financement des entreprises, fusions et acquisitions et capital d&#39;investissement, Calgary</p>    <p align=""left""><a href=""https://gowlingwlg.com/en/people/jacob-cawker/"">Jacob Cawker</a><br />  Associé</p>  ",GWLG.Canada,f52c18f0-f75d-443c-8edf-8eb8851b7f75;cc734a17-f747-445a-8ccf-47df174c90b9,DBF8B6E0-9948-4A8F-907D-7A5A72AAC527,NULL,0,1,NULL,"<p align=""left"">Les questions relatives à la gouvernance, à l&#39;activisme et aux enquêtes peuvent gravement affecter la rentabilité et la survie d&#39;une entreprise, voire menacer la valeur d&#39;un investissement stratégique. En retenant les services d&rsquo;un professionnel de Gowling&nbsp;WLG, vous serez parés à toute éventualité.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,cbcb1b43-c598-4774-8f2b-1008ca50fe7c;67cc482a-3577-4c6d-99fc-80e684f6ea08;773e9f22-2875-463d-accf-3e110856ca10,NULL,NULL,{ECC027C9-82CC-4859-86C2-D05976465855}|{C90851CC-FC15-4C12-B60E-D9A6B48610B1}
464,/Services/Project-Finance/Overview,en-GB,5F70766F-176D-4B55-99CE-DC4E5EB29A06,Overview,Overview,International project finance lawyers with a proven track record advising on all aspects of your financing needs.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Creative, innovative and structured financial solutions are vital to any large-scale project. Ensuring you have legal advice you can trust is key to the management of risk and reward and securing your success. Our lawyers have a proven track record across the project finance lifecycle and can advise on all aspects of your financing needs.</strong></p>    <p>As decarbonisation, sustainability and efficiency, and the transmission and storage of power and data continue to be economic priorities, it is clear that investment in areas such as construction and infrastructure, telecommunications and energy will grow over the short, mid and long term. Acting for both sponsors and funders, we structure finance solutions across numerous sectors. Whether helping clients finance projects in new jurisdictions or brokering international deals covering multiple regions, we offer seamless legal advice built on real knowledge and experience.</p>    <p>We believe clients always benefit from a cross-practice approach. Our project finance lawyers work closely with professionals in other areas such as financial services, M&amp;A and capital markets, and procurement, to seamlessly manage all aspects of transactions and identify and mitigate any potential risks. Our lawyers have been at the forefront of the renewed international focus on projects, public-private partnerships and infrastructure development, and have acted in some of the world&#39;s most significant and complex projects.</p>    <h3>Project finance services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Alternative debt</li>   <li>Bespoke debt solutions</li>   <li>Construction project debt</li>   <li>Export credit agency finance</li>   <li>Indigenous financing</li>   <li>Infrastructure funds providing senior debt</li>   <li>Islamic finance solutions</li>   <li>Land acquisition and development credit facilities</li>   <li>Mezzanine finance</li>   <li>Public-private partnership (PPP) financing</li>   <li>Royalty and streaming finance</li>   <li>Senior secured and unsecured lending</li>   <li>Structured debt solutions</li>   <li>Sub-debt and second lien lending</li>   <li>Syndicated, club and joint venture transactions</li>  </ul>    <h3>Meet our team</h3>    <p>In addition to our offices in Canada and the UK, we provide international reach through our offices overseas, and have acted on major project financings in Europe, the Middle East, Africa, Latin America and Asia. <strong>Contact us today for more information on how our team can support you with your latest project.</strong></p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/project-finance/#canada"">Canada</a></li>   <li><a href=""~/en/services/project-finance/#uae"">UAE</a></li>   <li><a href=""~/en/services/project-finance/#uk"">UK</a></li>  </ul>  ",GWLG.Global,45042386-e87e-4fa2-8f87-101784526d0a;48e3e3b9-b01e-4ac5-85dc-e78eaca0468e;b8180d18-a523-4d12-9a03-f76949a53796,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}|{F8B10F74-2DE9-42E4-8AEC-215E9AB51EC9}|{BFB5A75A-AEAF-4A97-9008-D117F3180CC3}
467,/Services/Project-Finance/Canada,en-GB,67F22F85-F3CE-43A9-B030-D514905D2CB5,Canada,Canada,International project finance lawyers with a proven track record advising on all aspects of your financing needs.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>To take your project from vision to reality, you need a legal adviser with in-depth knowledge of financing techniques, industry-specific experience and a practical, solutions-oriented approach. With a team of skilled project finance lawyers in key regions across Canada, we are well equipped to lay a strong financing foundation for your project - regardless of its size, complexity or location.</strong></p>    <p>As one of Canada&#39;s largest infrastructure and construction law firms, our professionals advise clients across the lifecycle of construction and infrastructure projects - from design and procurement to completion and dispute resolution. Our project finance practice includes infrastructure and large project financing, PPP project financing, and large development project credit facilities.</p>    <p>We are a qualified service provider to all six major domestic Canadian banks, as well as several foreign banks, and have widespread relationships with other major financial institutions. Our leading-edge advice on emerging technologies and unique product offerings combined with our deep sector experience ensures we can support all of your project finance needs.</p>    <p>We are also proud to offer our clients access to one of the largest Indigenous law practice groups in Canada, with many project financings performed in this area.</p>    <h3>Client work</h3>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)ACCIONA+and+Aecon|(Copy1)Counsel+to+ACCIONA+as+it+reached+financial+close+on+the+%241.728+billion+contract+to+design+and+build+the+Vancouver+Broadway+Subway+project.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)ACCIONA|(Copy2)Counsel+to+the+Fraser+Crossing+Partners+consortium+as+it+reached+financial+close+on+the+%24967.5+million+contract+to+design%2c+build+and+partially+finance+the+Pattullo+Bridge+DBF+project.|(LinkText2)Read+more|(BgHover2)colour-darkred|(Headline3)NAV+Canada|(Copy3)Counsel+to+NAV+Canada+with+respect+to+an+issuance+of+%24850+million+of+general+obligation+notes+in+two+series+on+a+private+placement+basis+pursuant+to+exemptions+from+the+prospectus+requirements+of+applicable+Canadian+securities+laws.|(LinkText3)Read+more|(BgHover3)colour-darkblue|(widget_displayname)Three+Block+Widget^}</p>    <h3>Awards and accolades</h3>    <p>Our team is repeatedly recognized in the industry by a wide range of awards and directories<ins cite=""mailto:Walker,%20Karen"" datetime=""2021-04-08T12:57"">,</ins> including <em>Chambers and Partners</em>, <em>The Legal 500</em>, <em>Best Lawyers</em>, <em>Lexpert</em>&nbsp;and <em>Acritas</em>. The annual <em>Lexpert</em> survey of leading infrastructure firms consistently includes more Gowling WLG lawyers than any other.</p>    <p>In 2020, our firm was co-awarded the OCNI Export Award for our work on the US$35- billion Al-Dabaa nuclear power plant in Egypt. We also received the Chairman&#39;s Award in 2020 by the Alberta Construction Association.</p>    <h3>Contact our team</h3>    <p><a href=""~/en/people/christopher-n-alam/#panel-button1"">Christopher N. Alam</a><br />  Partner</p>  ",GWLG.Canada,45042386-e87e-4fa2-8f87-101784526d0a,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
468,/Services/Project-Finance/UAE,en-GB,71DAFD72-1872-4A32-B880-C7C578333A74,UAE,UAE,International project finance lawyers with a proven track record advising on all aspects of your financing needs.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Embarking on large and complex energy and infrastructure projects in the UAE can bring challenges as well as opportunities. When it comes to project financing, you need to be sure that you have access to a detailed understanding of the region's competitive, regulatory and legislative environments, as well as any emerging economic trends.</strong></p>    <p>Drawing on the experience of our cross-practice sector professionals, our international projects team is dedicated to finding solutions that are tailored to your commercial objectives. With a wealth of experience in the Middle East&#39;s financial landscape, our lawyers advise across all aspects of project financing. Working with you at every stage, we offer an international perspective and full-service platform to provide industry-leading legal support and risk management.</p>    <h3>Client work</h3>    <ul class=""o-2-columns is-list-unstyled"">   <li>   <h4>ARMPOWER</h4>     <p>Advised Renco SpA and Siemens Project Ventures on all aspects of this US$260 million, 240MW CCGT power station which recently reached financial close, including advising them on the multi-sourced project financing involving IFC, MIGA, Asian Development Bank, OPEC Fund for International Development and DEG. This was the <a href=""~/en/insights-resources/client-work/2019/gowling-wlg-advises-on-armenia-greenfield-project/"">first Greenfield project financing and development in Armenia</a>.</p>   </li>   <li>   <h4>Far east utility company</h4>     <p>Advising a utility on its bid for a new electricity transmission project in Abu Dhabi, including advising on the multi-sourced project finance aspects of the project which has anticipated project costs of circa US$2 billion.</p>   </li>  </ul>    <h3>Awards and accolades</h3>    <p>Head of international projects Jonathan Brufal leads on project financing in the UAE. Jonathan is widely recognised in the industry and is ranked by <em>The Legal 500</em> as a leading individual for Emerging Markets.</p>    <p>The team was also recognised across six categories by the <a href=""~/en/news/awards-recognition/2021/ij-global-awards-2020/"">IJ Global Awards 2020</a> for its work on complex and high profile transactions.</p>    <h3>Contact our team</h3>    <p><a href=""~/en/people/jonathan-brufal/"">Jonathan Brufal</a><br />  Partner</p>  ",GWLG.UAEDubai,612ac63e-b8e8-4615-beb9-be3097aed2cf,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}
469,/Services/Project-Finance/UK,en-GB,5B5F60BA-0AC8-41D7-BAA2-3EB31C3CC786,UK,UK,International project finance lawyers with a proven track record advising on all aspects of your financing needs.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The need to invest in the UK&#39;s infrastructure is more pressing than ever before. The objective of achieving net zero by 2050 (2045 in Scotland) as well as our growing and ageing population requires increasing development and investment. As urban regeneration is decarbonised and made smart, the ability to manage the interplay between industries such as energy, transport, telecommunications and housing will become vital.</strong></p>    <p>In this changing landscape, our project finance team seamlessly brings together sector professionals and transactional finance and corporate lawyers to provide pragmatic advice built on deep experience and knowledge.</p>    <p>Our project finance lawyers act for a broad range of clients, from project sponsors, investment funds and institutional lenders to construction companies and government and public sector stakeholders at every level. We view projects from every angle and pursue the best-possible approach for the circumstances, taking the time to structure sector-focused bespoke finance solutions tailored to your specific needs.</p>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">They work as a single, joined up team which means we see seamless integration of sector specialists with the lead transactional finance and corporate lawyers. We look forward to continuing this working relationship for years to come.<cite>GCP Infrastructure Investments</cite></p>  </blockquote>    <p>Every project is different and every business is unique. We have acted on some of the most interesting and innovative projects in recent years, including:</p>    <p>{^widget|(name)FourBlockWidget|(Headline1)Energy+efficiency|(Copy1)Advising+the+lender+on+the+senior+financing+of+a+series+of+high+energy+efficiency+lighting+projects+across+the+UK.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Bushveld+Minerals|(Copy2)Advising+on+a+%2430+million+Production+Financing+Agreement+with+Orion+Mine+Finance+and+an+associated+issue+of+a+US%2435+million+Convertible+Loan+Note+Instrument.|(LinkText2)Read+more|(BgHover2)colour-darkred|(Headline3)Triple+Point+Energy|(Copy3)Advising+the+Triple+Point+Energy+Efficiency+Infrastructure+Company+PLC+as+senior+secured+lender+on+the+%c2%a320m+refinancing+of+the+Glasshouse+and+Harvest+Generation+greenhouse+CHP+project+on+the+Isle+of+Wight%2c+UK.|(LinkText3)Read+more|(BgHover3)colour-darkblue|(Headline4)GuarantCo|(Copy4)Advising+GuarantCo+in+respect+of+the+listing+by+Quantum+Terminals+Group+on+the+LSE.+Quantum+listed+its+GHS+45+million+corporate+bond%2c+guaranteed+by+GuarantCo%2c+on+the+LSE%27s+International+Securities+Market%2c+completing+a+dual+listing+of+debt+security.|(LinkText4)Read+more|(BgHover4)colour-lightred|(widget_displayname)Four+Block+Widget^}</p>    <h3>Awards and accolades</h3>    <p>We are proud to be recognised by <em>The Legal 500</em> and <em>Chambers and Partners</em> for our experience in the field. Our team is ranked in Tier 1 by <em>The Legal 500</em> for Energy, Project Finance and PFI in the West Midlands, with individuals recognised across the board in various categories. Our team in London ranks in Tier 2 for Energy and Infrastructure.</p>    <p>The team was also ranked by the <a href=""~/en/news/awards-recognition/2021/ij-global-awards-2020/"">IJ Global Awards 2020</a> across six categories, including North America Project Finance, Europe - Project Finance, Renewables Project Finance and Transport Project Finance.</p>    <h3>Contact our team</h3>    <p><a href=""~/en/people/andrew-newbery/"">Andrew Newbery</a><br />  Partner</p>    <p><a href=""~/en/people/nath-curtis/"">Nath Curtis</a><br />  Partner</p>  ",GWLG.UK,b8180d18-a523-4d12-9a03-f76949a53796;48e3e3b9-b01e-4ac5-85dc-e78eaca0468e,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{BFB5A75A-AEAF-4A97-9008-D117F3180CC3}|{F8B10F74-2DE9-42E4-8AEC-215E9AB51EC9}
470,/Services/Governance-Risk-and-Compliance-GRC/Overview,fr-CA,32F58465-4AA0-4469-B298-E3298B3520E4,Aperçu,Aperçu,"Integrated governance, risk and compliance services including ESG. International law firm with a cross-practice approach to risk management and compliance.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fGovernance-Risk-and-Compliance%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Services+du+groupe+Gouvernance%2c+gestion+des+risques+et+conformit%c3%a9|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Distinctions</h2>    <blockquote>  <p style=""text-align:center;&quot;"">C&rsquo;est notre cabinet de prédilection pour les conseils juridiques. Ils sont aussi très sympathiques et accessibles. <cite>Chambers UK</cite></p>  </blockquote>    <p>Notre équipe d&#39;avocats en gestion des risques et conformité est composée de professionnels issus de tous nos domaines de pratique dans le monde entier. Gowling WLG se classe régulièrement dans des répertoires tels que<em> The Legal&nbsp;500</em>, <em>Chambers&nbsp;UK</em>, <em>Chambers&nbsp;Canada</em>, <em>The Best Lawyers in Canada</em> et <em>The Canadian Legal Lexpert Directory</em>.</p>    <h2>Mandats clients représentatifs</h2>    <ul class=""o-3-columns is list unstyled"">   <li>   <h3>Associations d&rsquo;habitation</h3>     <p>Prestation de conseils sur la protection des données, la <em>Freedom of Information Act </em>(R.-U.) et les règlements sur l&rsquo;information environnementale. Déploiement de programmes de conformité en matière de protection des données et formation de conseillers internes en protection des données.</p>   </li>   <li>   <h3>Brexit</h3>     <p>Collaboration avec une grande entreprise pharmaceutique afin d&rsquo;évaluer le contexte réglementaire post-Brexit et en déterminer les répercussions sur le respect par l&rsquo;entreprise de ses obligations douanières. Nous avons conseillé l&rsquo;entreprise sur l&#39;entité à désigner pour légalement agir en tant qu&rsquo;importateur et exportateur officiel, ainsi que sur le processus de demande de statut d&rsquo;opérateur économique agréé.</p>   </li>   <li>   <h3>Réglementation du commerce</h3>     <p>Réalisation de l&rsquo;examen à distance paneuropéen sur emplacements multiples d&rsquo;un fournisseur de niveau 1 du secteur de la défense. Notre équipe a fourni des conseils sur les risques relatifs à la conformité à la législation de l&#39;Union européenne sur les contrôles à l&rsquo;exportation. Nous avons indiqué au chef du contentieux et de la conformité les emplacements qui nécessitaient un audit plus complet tout en veillant à éviter le plus possible la perturbation des activités.</p>   </li>  </ul>    <ul class=""o-3-columns is list unstyled"">   <li>   <h3>Banques d&rsquo;investissement</h3>     <p>Prestation de conseils sur une variété d&rsquo;enjeux réglementaires, notamment au sujet de la directive européenne MiFID II, la gouvernance d&rsquo;entreprise, le SMCR et la rémunération des administrateurs, les règles de dépôt de la FCA et le nouveau règlement européen Abus de marché (<em>Market Abuse Regulation</em> ou MAR).</p>   </li>   <li>   <h3>Automobile</h3>     <p>Prestation de conseils à un grand constructeur automobile sur la réglementation de la FCA relativement au crédit à la consommation, dans le cadre d&rsquo;un projet majeur de marketing et de distribution numérique.</p>   </li>   <li>   <h3>Fonds d&rsquo;investissement</h3>     <p>Nous avons conseillé les gestionnaires d&rsquo;un fonds d&#39;investissement sur les obligations en matière de communication annuelle de l&#39;information environnementale et de déclaration des émissions de GES. Dans le cadre de ce mandat, nous avons procédé à un audit des rapports du fonds pour en vérifier la conformité.</p>   </li>  </ul>    <h2>Membres de l&#39;équipe internationale</h2>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/fr/people/sharon-ayres/"">Sharon Ayres</a></strong><br />  Associée (Royaume-Uni)</p>    <p><strong><a href=""~/fr/people/david-lowe/"">David Lowe</a></strong><br />  Associé (Royaume-Uni)</p>    <p><strong><a href=""~/fr/people/ben-stansfield/"">Ben Stansfield</a></strong><br />  Associé (Royaume-Uni)</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/fr/people/marcus-hinkley/"">Marcus Hinkley</a></strong><br />  Avocat (Canada)</p>    <p><strong><a href=""~/fr/people/stephen-pike/"">Stephen Pike</a></strong><br />  Associé (Canada)</p>    <p><strong><a href=""~/fr/people/danhoe-reddy-girard/"">Danhoé Reddy-Girard</a></strong><br />  Associé (France)</p>  </div>  </div>  </div>  ",GWLG.Global,d7a64117-fe8d-47a0-ace6-75c8607bfcdd;ad056fcd-7211-4da7-a9e2-30612d332954;1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;03d6dce1-2df8-4f24-8e6b-d7bcda0b6509;4b827bd7-79e3-4db7-9446-950eaf10c14f;b0a7b3fc-4cb7-4be6-926c-4b5e385f1bb1,200FA82C-4BB5-48AD-BEA1-2A574DFECDAB,NULL,0,1,NULL,"<p>Afin de respecter les réglementations changeantes en matière de gouvernance, de gestion des risques et de conformité, il est nécessaire d&rsquo;adopter une approche proactive. En effet, certains enjeux de gouvernance d&rsquo;entreprise peuvent avoir des effets à long-terme sur la prospérité de vos affaires, le succès de votre marque et votre réputation.</p>    <p>Issus de l&#39;ensemble de nos services à l&rsquo;échelle internationale, nos professionnels du groupe Gouvernance, gestion des risques et conformité s&rsquo;assurent que votre entreprise est protégée sous tous les angles. Qu&#39;il soit question d&rsquo;audits internes de vos activités en cours, de rédaction de politiques ou de rapports destinés au conseil d&#39;administration, nos avocats vous offrent des conseils pratiques taillés sur mesure pour votre organisation. Notre équipe répond à tous vos besoins en matière de gestion des risques et de conformité, en tenant compte de tous les aspects d&rsquo;une saine gouvernance.</p>  ",NULL,NULL,See more articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.UK&services=43773,NULL,{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}|{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{A7B882E4-34EF-49D2-BBA0-D320669A55A8}|{B31D8398-25A1-48F2-85E2-C7E6F8F00AA3}|{DE8EAE4B-1D4C-4084-B1C9-A00852B8C205}
471,/Services/Project-Finance/Overview,fr-CA,5F70766F-176D-4B55-99CE-DC4E5EB29A06,Aperçu,Aperçu,Nos avocats ont fait leurs preuves à toutes les étapes du cycle de vie du financement de projet et peuvent vous conseiller sur tous les aspects de vos besoins de financement.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Des solutions financières créatives, innovantes et structurées sont indispensables à tout projet de grande envergure. Vous devez bénéficier de conseils juridiques fiables pour gérer les risques et les gains et garantir ainsi votre réussite. Nos avocats ont fait leurs preuves à toutes les étapes du cycle de vie du financement de projet et peuvent vous conseiller sur tous les aspects de vos besoins de financement.</strong></p>    <p>Alors que la décarbonisation, la durabilité et l&rsquo;efficacité, ainsi que la transmission et le stockage de l&#39;énergie et des données restent des priorités économiques, il est clair que les investissements dans des domaines comme la construction et les infrastructures, les télécommunications et l&#39;énergie vont croître à court, moyen et long termes. Agissant à la fois pour le compte de promoteurs et de bailleurs de fonds, nous structurons des solutions de financement dans de nombreux secteurs d&#39;activité. Qu&#39;il s&#39;agisse d&#39;aider les clients à financer des projets dans de nouveaux pays ou de sceller des opérations internationales couvrant plusieurs régions, nous offrons des conseils juridiques intégrés fondés sur des connaissances et de l&rsquo;expérience concrètes.</p>    <p>Nous sommes d&#39;avis que les clients bénéficient toujours d&rsquo;une approche pluridisciplinaire. Nos avocats chargés du financement de projets travaillent en étroite collaboration avec des professionnels d&#39;autres domaines comme les services financiers, les fusions et acquisitions, les marchés de capitaux et les marchés publics, afin de gérer de manière harmonieuse tous les aspects des opérations et de déterminer et d&#39;atténuer les risques. Nos avocats ont été à l&#39;avant-garde du regain d&rsquo;intérêt à l&rsquo;international pour les projets, les partenariats public-privé et l&rsquo;aménagement d&rsquo;infrastructures, et ont participé à certains des projets les plus importants et les plus complexes au monde.</p>    <h3>Services de financement de projets</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Facilités de crédit pour l&rsquo;acquisition de terrains et l&rsquo;aménagement de projet</li>   <li>Financement de partenariats public-privé (PPP)</li>   <li>Financement de projets autochtones</li>   <li>Financement de projets de construction</li>   <li>Financement des agences de crédit à l&rsquo;exportation</li>   <li>Financement lié à la production (redevances et flux de métaux)</li>   <li>Financement mezzanine</li>   <li>Financement par syndicat financier, par entente en circuit fermé et par co-entreprise</li>   <li>Financement subordonné et prêts de deuxième rang</li>   <li>Fonds d&rsquo;infrastructures offrant des titres de créance de premier rang</li>   <li>Prêts garantis de premier rang et prêts non garantis</li>   <li>Produits financiers islamiques</li>   <li>Solutions de financement sur mesure</li>   <li>Solutions de financement structuré</li>  </ul>    <h3>Rencontrez l&rsquo;équipe</h3>    <p>En plus de nos bureaux au Canada et au Royaume-Uni, vous pouvez nous joindre partout dans le monde grâce à notre réseau de bureaux à l&rsquo;international. En effet, nous avons agi dans le cadre du financement de projets importants en Europe, au Moyen-Orient, en Afrique, en Amérique latine et en Asie. <strong>Contactez-nous dès aujourd&rsquo;hui pour savoir comment notre équipe peut vous aider à réaliser votre tout dernier projet.</strong></p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/project-finance/canada/"">Canada</a></li>   <li><a href=""~/en/services/project-finance/uae/"">EAU</a></li>   <li><a href=""~/en/services/project-finance/uk/"">R.-U.</a></li>  </ul>  ",GWLG.Global,b8180d18-a523-4d12-9a03-f76949a53796;45042386-e87e-4fa2-8f87-101784526d0a,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{BFB5A75A-AEAF-4A97-9008-D117F3180CC3}|{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
472,/Services/Project-Finance/Canada,fr-CA,67F22F85-F3CE-43A9-B030-D514905D2CB5,Canada,Canada,Nos avocats ont fait leurs preuves à toutes les étapes du cycle de vie du financement de projet et peuvent vous conseiller sur tous les aspects de vos besoins de financement.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Pour faire passer votre projet de la vision à la réalité, vous avez besoin d&#39;un conseiller juridique ayant une connaissance approfondie des techniques de financement, de l&#39;expérience dans le secteur d&#39;activité voulu et une approche pratique, axée sur les solutions. Grâce à notre équipe d&#39;avocats chevronnés en matière de financement de projets, à l&#39;œuvre dans les principales régions du Canada, nous sommes bien outillés pour asseoir le financement du projet sur une base solide, quel que soit sa taille, sa complexité ou son emplacement.</p>    <p>En qualité de l&#39;un des plus grands cabinets d&#39;avocats spécialisé dans les projets d&rsquo;infrastructures et de construction au Canada, nos professionnels conseillent les clients tout au long du cycle de vie des projets, de la conception et de l&#39;approvisionnement à l&#39;achèvement et au règlement des différends. Notre pratique du financement de projets comprend le financement d&#39;infrastructures et de grands projets, le financement de partenariats public-privé et les facilités de crédit pour les grands projets d&#39;aménagement.</p>    <p>À titre de fournisseur de services accrédité auprès des six grandes banques canadiennes et de plusieurs banques étrangères, nous entretenons d&rsquo;excellentes relations avec d&#39;autres institutions financières d&#39;envergure. Grâce à nos conseils de pointe en matière de technologies émergentes et notre offre de services uniques, combinés à notre expérience approfondie des différents secteurs d&#39;activité, nous sommes à même de répondre à tous vos besoins en matière de financement de projets.</p>    <p>Nous sommes également fiers d&rsquo;offrir à nos clients l&#39;accès à l&#39;un des plus grands groupes de pratique du droit autochtone au Canada, et d&#39;avoir réalisé le financement de nombreux projets dans ce domaine.</p>    <h3>Mandats représentatifs</h3>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>ACCIONA</h4>     <p>Nous avons conseillé <a href=""~/en/insights-resources/client-work/2020/vancouver-broadway-subway-project-reaches-close/"">ACCIONA</a> jusqu&rsquo;à la clôture financière du contrat de 1,728 milliard de dollars pour la conception et la construction du projet Broadway Subway de Vancouver.</p>   </li>   <li>   <h4>ACCIONA et AECON</h4>     <p>Nous avons conseillé <a href=""~/en/insights-resources/client-work/2020/pattullo%C2%A0project-reaches-financial-close/"">le consortium Fraser Crossing Partners</a> jusqu&rsquo;à la clôture financière du contrat de 967,5 millions de dollars pour la conception, la construction et le financement partiel du projet complet, de la conception à l&rsquo;achèvement, du pont Pattullo.</p>   </li>   <li>   <h4>NAV CANADA</h4>     <p>Nous avons conseillé <a href=""~/en/insights-resources/client-work/2020/nav-canada-completes-issue-of-$850-million/"" target=""_blank"">NAV Canada</a> concernant l&rsquo;émission de 850 millions de dollars de billets d&#39;obligation générale en deux séries par voie de placement privé, aux termes de dispenses des exigences en matière de prospectus prévues dans la législation canadienne sur les valeurs mobilières applicable.</p>   </li>  </ul>    <h3><prix distinctions="""" et=""""></prix></h3>    <h3>Prix et distinctions</h3>    <p>L&#39;excellence du travail de l&#39;équipe a été soulignée à plusieurs reprises par divers prix et distinctions décernés par les pairs, notamment <em>Chambers and Partners</em>, <em>The Legal 500</em>, <em>Best Lawyers</em>, <em>Lexpert</em> et <em>Acritas</em>. L&#39;enquête annuelle de <em>Lexpert</em> sur les principaux cabinets disposant d&#39;expertise dans les projets d&#39;infrastructures comprend systématiquement plus d&#39;avocats de Gowling WLG que tout autre.</p>    <p>En 2020, notre cabinet a été nommé colauréat du prix Export par l&#39;Organisation des industries nucléaires canadiennes (OCNI) pour notre travail portant sur la centrale nucléaire d&amp;&#39;Al-Dabaa, en Égypte, évaluée à 35 milliards de dollars américains. Nous avons également reçu le Chairman&#39;s Award en 2020 remis par l&#39;Alberta Construction Association.</p>    <h3>Communiquez avec nous</h3>    <p><a href=""~/fr/people/christopher-n-alam/#panel-button1"">Christopher N. Alam</a><br />  Associé</p>  ",GWLG.Canada,45042386-e87e-4fa2-8f87-101784526d0a,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
473,/Services/Project-Finance/UAE,fr-CA,71DAFD72-1872-4A32-B880-C7C578333A74,EAU,EAU,Nos avocats ont fait leurs preuves à toutes les étapes du cycle de vie du financement de projet et peuvent vous conseiller sur tous les aspects de vos besoins de financement.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>S&#39;engager dans des projets énergétiques et d&#39;infrastructure vastes et complexes aux Émirats arabes unis peut être source de défis, mais aussi d&rsquo;opportunités. En matière de financement de projets, vous devez être certain de très bien comprendre l&#39;environnement concurrentiel, réglementaire et législatif de la région, ainsi que de toute tendance économique émergente.</strong></p>    <p>S&#39;appuyant sur l&#39;expérience de nos professionnels de différents secteurs d&rsquo;activité, notre équipe chargée des projets internationaux s&#39;efforce de trouver des solutions adaptées à vos objectifs commerciaux. Forts d&#39;une grande expérience dans l&#39;univers financier du Moyen-Orient, nos avocats vous conseillent sur tous les aspects du financement de projets. À chaque étape de notre collaboration avec vous, nous offrons une perspective internationale et une plateforme de services complets visant à vous fournir du soutien juridique et une gestion des risques de premier ordre.</p>    <h3>Mandats représentatifs</h3>    <ul class=""o-2-columns is-list-unstyled"">   <li>   <h4>ARMPOWER</h4>     <p>Nous avons conseillé Renco SpA et Siemens Project Ventures pour tout ce qui concerne le projet de centrale CCGT de 240 MW, évalué à 260 millions de dollars américains, qui a récemment atteint le stade de la clôture financière. Nous avons également conseillé ces dernières en ce qui concerne le financement multisource du projet réunissant la Société financière internationale (IFC), l&rsquo;Agence multilatérale de garantie des investissements. (MIGA), la Banque asiatique de développement, le Fonds de l&rsquo;OPEP pour le développement international et la Société allemande d&rsquo;investissements et de développement (DEG). <a href=""~/en/news/firm-news/2019/gowling-wlg-advises-on-armenia-greenfield-project/"">Il s&rsquo;agissait du premier projet de financement et de développement en zone verte en Arménie</a>.</p>   </li>   <li>   <h4>Société de services publics d&rsquo;Extrême-Orient</h4>     <p>Nous avons conseillé une société de services publics dans le cadre de sa proposition de nouvelle ligne de transport d&rsquo;électricité à Abu Dhabi, y compris de son financement multisource, évaluée à environ 2 milliards de dollars américains.</p>   </li>  </ul>    <h3>Prix et distinctions</h3>    <p>Jonathan Brufal, responsable des projets internationaux, s&#39;occupe du financement des projets dans les Émirats arabes unis. Jonathan est largement reconnu dans l&#39;industrie. Dans son classement, <em>The Legal 500</em> l&#39;a nommé chef de file pour les marchés émergents.</p>    <p>L&#39;équipe a également été reconnue dans six catégories par les <a href=""~/en/news/awards-recognition/2021/ij-global-awards-2020/"">IJ Global Awards 2020</a> pour son travail dans des opérations financières complexes de grande envergure.</p>    <h3>Communiquez avec nous</h3>    <p><a href=""~/en/people/jonathan-brufal/"">Jonathan Brufal</a><br />  Associé</p>  ",GWLG.UAEDubai,612ac63e-b8e8-4615-beb9-be3097aed2cf,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{4EEC0607-D478-4592-BEFC-114187A59260}
474,/Services/Project-Finance/UK,fr-CA,5B5F60BA-0AC8-41D7-BAA2-3EB31C3CC786,Royaume-Uni,Royaume-Uni,Nos avocats ont fait leurs preuves à toutes les étapes du cycle de vie du financement de projet et peuvent vous conseiller sur tous les aspects de vos besoins de financement.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Il est plus pressant que jamais d&#39;investir dans les infrastructures du Royaume-Uni. L&#39;objectif visant à atteindre la carboneutralité d&#39;ici à 2050 (2045 en Écosse) jumelé à l&#39;augmentation et le vieillissement de notre population, exigent la mise en œuvre de projets et des investissements accrus. Au fil du renouvellement urbain, les villes seront décarbonisées et de plus en plus intelligentes. De ce fait, il sera notamment essentiel de savoir gérer l&rsquo;interaction entre des secteurs de l&rsquo;énergie, des transports, des télécommunications et du logement.</strong></p>    <p>Dans ce contexte changeant, notre équipe de financement de projets réunit de manière intégrée des professionnels du secteur d&#39;activité et des avocats rompus aux opérations de financement et au droit des sociétés afin de fournir des conseils réalistes fondés sur une expérience et des connaissances approfondies.</p>    <p>Nos avocats chargés du financement de projets agissent pour le compte d&rsquo;un large éventail de clients, depuis les promoteurs de projets, les fonds d&#39;investissement et les prêteurs institutionnels jusqu&rsquo;aux entreprises de construction et aux acteurs du gouvernement et du secteur public à tous les niveaux. Nous examinons les projets sous tous les angles et recherchons la meilleure approche possible en fonction des circonstances, en prenant le temps de structurer des solutions de financement sectoriel sur mesure, adaptées à vos besoins particuliers.</p>    <h3>Mandats représentatifs</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Ils travaillent comme une seule et même équipe, ce qui signifie que nous assistons à l&rsquo;intégration harmonieuse des spécialistes du secteur et des avocats dont l&rsquo;expertise dans les opérations de financement et le droit des sociétés est reconnue. Nous tenons à maintenir cette relation de travail dans les années à venir. <cite>GCP Infrastructure Investments</cite></p>  </blockquote>    <p>Chaque projet est différent et chaque entreprise est unique. Nous avons participé à certains des projets les plus intéressants et les plus novateurs de ces dernières années, notamment :</p>    <ul class=""o-2-columns is-list-unstyled"">   <li>   <h4>Efficacité énergétique</h4>     <p>Nous avons conseillé le prêteur pour le financement de premier rang d&rsquo;une série de projets d&rsquo;éclairage à haute efficacité énergétique à travers le Royaume-Uni.</p>   </li>   <li>   <h4>Bushveld Minerals</h4>     <p>Nous avons agi à titre de conseillers juridiques pour un accord de financement de la production de 30 millions de dollars avec Orion Mine Finance et l&rsquo;émission connexe d&rsquo;un instrument de prêt convertible de 35 millions de dollars américains.</p>   </li>  </ul>    <ul class=""o-2-columns is-list-unstyled"">   <li>   <h4>Triple Point Energy</h4>     <p>Nous avons conseillé Triple Point Energy Efficiency Infrastructure Company PLC en tant que prêteur principal garanti pour le refinancement de 20 millions de livres sterling du projet de cogénération et de récolte en serre sur l&rsquo;île de Wight, au Royaume-Uni.</p>   </li>   <li>   <h4>GuarantCo</h4>     <p>Nous avons conseillé GuarantCo dans le cadre de l&rsquo;inscription de Quantum Terminals Group à la cote de la Bourse de Londres. Quantum a inscrit son obligation de société de 45 millions de dollars garantie par GuarantCo, pour financer son Système général harmonisé de classification et d&rsquo;étiquetage des produits chimiques (SGH), sur le marché international des valeurs mobilières de la Bourse de Londres, complétant ainsi une double inscription de titres de créance.</p>   </li>  </ul>    <h3>Prix et distinctions</h3>    <p>Nous sommes fiers d&#39;être reconnus par <em>The Legal&nbsp;500</em> et <em>Chambers and Partners</em> pour notre savoir juridique. <em>The Legal 500</em> a classé Gowling WLG parmi les cabinets de premier plan pour ses activités dans le secteur de l&#39;énergie, le financement de projets et de partenariat public-privé (PPP) dans le comté des Midlands de l&rsquo;Ouest, et l&rsquo;excellence du travail de plusieurs professionnels a été soulignée dans diverses catégories, tous domaines de pratique confondus. L&#39;équipe à Londres s&#39;est classée au deuxième rang pour les secteurs de l&#39;énergie et des infrastructures.</p>    <p><a href=""~/en/news/awards-recognition/2021/ij-global-awards-2020/"">IJ Global Awards&nbsp;2020</a> a souligné l&#39;excellence de notre travail dans six catégories, dont les suivantes&nbsp;: Amérique du Nord-Financement de projets, Europe-Financement de projets, Énergies renouvelables-Financement de projets et Transport-Financement de projets.</p>    <h3>Communiquez avec nous</h3>    <p><a href=""~/en/people/andrew-newbery/"">Andrew Newbery</a><br />  Associé</p>    <p><a href=""~/en/people/nath-curtis/"">Nath Curtis</a><br />  Associé</p>  ",GWLG.UK,b8180d18-a523-4d12-9a03-f76949a53796;48e3e3b9-b01e-4ac5-85dc-e78eaca0468e,FF6F4261-38FD-401C-8B13-7B9D8B137C75,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{BFB5A75A-AEAF-4A97-9008-D117F3180CC3}|{F8B10F74-2DE9-42E4-8AEC-215E9AB51EC9}
476,/Services/Cyber-Security-Data-Protection-Law/Overview,fr-CA,1CEEA5A3-800B-46DE-B329-AA1102C2E308,Aperçu,Aperçu,"Notre monde est régi par la technologie et les données, des actifs essentiels au fonctionnement et au succès des entreprises aujourd’hui.",~/getmedia/a43548c3-b2f8-438d-9f28-4896e825d1d7/cyber-security-data-protection-lawyer-desktop.jpg.xml?width=1400&height=540&ext=.jpg,NULL,"<p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fCyber-Security-and-Data-Protection%2fCyber-Security-and-Data-Protection-Services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Services+en+mati%c3%a8re+de+cybers%c3%a9curit%c3%a9+et+de+protection+des+donn%c3%a9es|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Une expérience éprouvée en matière de protection des données et de cybersécurité</h2>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Entreprise de billetterie en ligne</h3>     <p>Prestation de conseils relativement à un incident de sécurité concernant des données clients : aide relative à la violation de données et la conformité PCI et mise en œuvre d&#39;un plan d&#39;intervention en cas de violation. Envoi d&#39;avis aux clients concernés et aux autorités régissant la protection des données et liaison avec ces derniers pour le compte de notre client.</p>   </li>   <li>   <h3>Institutions financières</h3>     <p>Conseils à des institutions financières internationales en matière de gestion de crises liées à la violation de données et d&#39;utilisation de nouvelles technologies. Conseils relativement à des opérations de carte de crédit, dont l&#39;examen à l&#39;échelle du pays de protections du consommateur.</p>   </li>   <li>   <h3>Associations d&#39;habitation</h3>     <p>Conseils relatifs à la protection de données, la Freedom of information Act et les Environmental Information Regulations. Déploiement de programmes de conformité de protection des données et formation de conseillers internes en la matière.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Pertes de données</h3>     <p>Prestation de conseils à plusieurs entreprises dans le cadre de violations de données causées par la perte ou le vol de documents physiques, de paramètres de sécurité incorrects ou d&#39;erreurs administratives.</p>   </li>   <li>   <h3>Entreprises de technologie</h3>     <p>Représentation de certaines des plus importantes entreprises de technologie du monde relativement à des questions spécifiques de protection de la confidentialité liées à leurs plus récentes innovations et autres aspects de conformité en matière de protection des données, tels que les transferts internationaux de données.</p>   </li>   <li>   <h3>Lignes aériennes et aéroports</h3>     <p>Conseils à un important aéroport quant à la rédaction d&#39;ententes d&#39;approvisionnement en matière de TI essentielles à la transformation numérique de ses activités.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h3>Conseil international des Centres commerciaux</h3>     <p>Réalisation d&#39;une vérification de la protection des données, création et mise à jour de mappages de données ainsi que d&#39;avis de confidentialité, de politiques et de modalités.</p>   </li>   <li>   <h3>Entreprises de détail et en ligne</h3>     <p>Conseils quant à la conservation de données hors site, aux politiques de protection de la confidentialité, aux collectes de renseignements, données d&#39;employés et lois antipourriel.</p>   </li>   <li>   <h3>Fournisseur de soins de santé</h3>     <p>Prestation de services de formations relatives aux incidents de cybersécurité et coordination d&#39;envoi d&#39;avis après que le client ait subi une violation de son système de stockage infonuagique.</p>   </li>  </ul>    <h2>Reconnaissance dans le domaine</h2>    <blockquote style=""text-align: center"">  <p style=""text-align:center"">&laquo; C&#39;est le cabinet de référence pour les conseils juridiques... ils sont également très sympathiques et très accessibles. &raquo; <cite>Chambers UK</cite></p>  </blockquote>    <p align=""left"">Au Royaume-Uni, Gowling&nbsp;WLG obtenu le titre de &laquo;&nbsp;Cabinet de l&#39;année&nbsp;&raquo; (à l&#39;extérieur de Londres) à la remise des prix <em>Legal&nbsp;500 Awards</em> en&nbsp;2019 dans la catégorie Technologie, Médias et Télécommunications. Notre équipe canadienne a aussi été reconnue en&nbsp;2019 par les publications <em>Chambers Canada</em> et <em>Canadian Legal Lexpert Directory</em> pour son travail en technologie. En&nbsp;2019, <em>Best Lawyers in Canada</em> a souligné l&#39;excellence de l&#39;équipe en droit de la technologie et en droit de la protection de la vie privée et de la sécurité des données.</p>    <p align=""left"">Notre équipe internationale chevronnée compte des professionnels issus d&#39;une vaste gamme de domaines et propose une pratique exhaustive en matière de cybersécurité et de protection des données.</p>    <p align=""left"">Grâce à notre savoir-faire, nous sommes à même de fournir des conseils qui tiennent compte des différentes normes de protection des données au sein de chaque secteur. Notre travail transfrontalier dans différents secteurs nous confère des connaissances à la fois pointues et étendues.</p>    <h2>Secteurs</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/sectors/automotive/"" target=""_blank"">Automobile</a></li>   <li><a href=""~/fr/sectors/energy/"" target=""_blank"">Énergie</a></li>   <li><a href=""~/fr/sectors/government-contracting-public-sector/"" target=""_blank"">Relations gouvernementales et secteur public</a></li>   <li><a href=""~/fr/sectors/real-estate/"" target=""_blank"">Immobilier</a></li>   <li><a href=""~/fr/sectors/life-sciences/"" target=""_blank"">Sciences de la vie</a></li>   <li><a href=""~/fr/sectors/health-care/"" target=""_blank"">Santé et soins</a></li>   <li><a href=""~/fr/sectors/financial-institutions-services/"" target=""_blank"">Institutions financières et services financiers</a></li>   <li>Éducation/Universités</li>  </ul>    <h2>Communiquez avec notre équipe internationale</h2>    <p align=""left"">Notre équipe d&#39;avocats spécialisés en protection des données est présente dans plusieurs pays et territoires. La sécurité des informations et la confidentialité des données étant de plus en plus importantes, votre réputation et vos finances sont en jeu. Assurez-vous de disposer de conseillers proactifs et expérimentés pour assurer votre conformité et pour vous guider si le pire se produit.</p>    <p align=""left"">Besoin de conseils en matière de protection des données et de cybersécurité? Contactez notre équipe dès aujourd&#39;hui.</p>    <h3><a href=""~/fr/people/helen-davenport/"" target=""_blank"">Helen Davenport</a><br />  Associée (R.-U.)</h3>    <p>Helen dirige l&#39;équipe Protection des renseignements personnels et des données du cabinet au Royaume-Uni. Ses domaines de pratique particuliers sont la gestion des pertes de données et autres incidents de cybersécurité. Elle conseille les clients sur les droits des personnes concernées, y compris le traitement des demandes d&#39;accès aux données personnelles et les litiges relatifs à la confidentialité des données. Helen est également une avocate très expérimentée dans le domaine de la technologie, et sa pratique comprend également les conseils sur les différends découlant de contrats pour systèmes et services informatiques et de questions de licences de logiciels.</p>    <p><a class=""c-button-red"" href=""~/fr/people/?page=1&amp;services=516&amp;locations="">Découvrez toute l&#39;équipe du R.-U.</a></p>    <h3><a href=""~/fr/people/wendy-wagner/"" target=""_blank"">Wendy Wagner</a><br />  Associée (Canada)</h3>    <p>Wendy dirige le groupe Protection des renseignements personnels et des données du cabinet au Canada. Sa pratique est axée sur le droit commercial international, ainsi que sur la protection de la vie privée, l&#39;accès à l&#39;information et la diffamation. Dans le cadre de sa pratique de la protection de la vie privée, Wendy conseille les entreprises sur les questions de conformité et de protection des données.</p>    <p><a class=""c-button-red"" href=""~/fr/people/?page=1&amp;services=516&amp;locations="" target=""_blank"">Découvrez toute l&#39;équipe canadienne</a></p>    <h3><a href=""~/fr/people/danhoe-reddy-girard/"" target=""_blank"">Danhoé Reddy-Girard</a><br />  Associé (France)</h3>    <p>La pratique de Danhoé est concentrée sur la banque et la finance, l&#39;immobilier et la conformité. Dans le cadre de sa pratique liée à la conformité, il conseille les organisations relativement au RGPD. Il rédige des contrats, des politiques, des avis de confidentialité, des registres d&#39;activités de traitement et des rapports de vérification.</p>    <h3><a href=""~/en/people/le-rong/"" target=""_blank"">Le Rong</a><br />  Directeur (Chine)</h3>    <p>Rong dirige l&#39;équipe des mandats non litigieux en Chine. Elle conseille notamment des clients européens sur l&#39;acquisition de sociétés chinoises, le commerce électronique et la négociation d&#39;une vaste gamme de contrats commerciaux.</p>    <p style=""text-align:center""><a class=""c-button-red"" href=""~/fr/people/?page=1&amp;services=516&amp;locations="" target=""_blank"">Découvrez toute l&#39;équipe</a></p>  ",GWLG.Global,d3e0fa3e-1011-4fe0-b62a-88c920f62d49;afc382e9-2b75-4a26-9e20-0a8c68694164;b0a7b3fc-4cb7-4be6-926c-4b5e385f1bb1;4bcdddc1-a500-4dd4-ac52-fd05abee5ef7;c0660c2d-79e7-42d8-b553-235b03ce0d4b,2E9A87E2-3D2E-4D69-BA9C-06B4B358CA0D,NULL,0,1,NULL,"<p align=""left"">Notre monde est régi par la technologie et les données, des actifs essentiels au fonctionnement et au succès des entreprises aujourd&#39;hui. Seulement, à mesure que l&#39;innovation progresse, les défis que présentent ces actifs ne feront qu&#39;augmenter. Afin de vous aider à protéger votre monde, notre équipe d&#39;avocats chevronnées en cybersécurité et en protection des données adopte une approche proactive.</p>    <p align=""left"">Les cyberattaques, les données spéciales/sensibles et les réglementations sur la confidentialité des données telles que le <em>Règlement général sur la protection des données</em> préoccupent toutes les entreprises. En effet, les risques de perte financière et d&#39;atteinte à la réputation sont réels. Avant qu&#39;ils surviennent, nous travaillerons avec vous pour réduire les risques potentiels et les maîtriser s&#39;ils se manifestent. &nbsp;</p>    <p align=""left"">Nous possédons une riche expérience de conseils à des clients nationaux et internationaux en matière de protection des données, de confidentialité et de cybersécurité. Nos professionnels juridiques peuvent vous aider à renforcer vos défenses en la matière.</p>  ",Expertise in Cyber Security and Data Protection Law,NULL,See more articles,Gardez une longueur d'avance,"<p>Restez au fait des développements les plus récents en cybersécurité et en protection des données en vous abonnant à nos nouvelles.</p>    <p><a href=""~/fr/footer/updates/"" target=""_blank"">Inscrivez-vous à nos mises à jour</a></p>  ",Communiquez avec nous dès aujourd'hui,"<p>Pour en savoir plus, n&rsquo;hésitez pas à communiquer avec l&rsquo;un ou l&rsquo;autre membre de notre équipe.</p>    <p><a href=""~/fr/contact-us/"" target=""_blank"">Communiquez avec l&rsquo;équipe</a></p>  ",NULL,/en/insights-resources/?page=1&locations=&services=516,NULL,{590B36A4-2EFB-4089-AE05-87B9B88B0154}|{5AFA17F4-B29F-4E20-A9C6-AFD5CDAE180D}|{DE8EAE4B-1D4C-4084-B1C9-A00852B8C205}|{9CE439C1-2253-4714-81A2-A2EB6B9064A2}|{C68E493C-D649-481E-8A6A-DBC2117F96A9}
477,/Services/Artificial-Intelligence-Law/UK,fr-CA,21ED8BD6-A679-43CB-99BC-B71D12807854,Royaume-Uni,Royaume-Uni,International law firm with experience in artificial intelligence law. Our AI lawyers can support you across a multitude of practice areas related to AI law. ,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Mandats représentatifs</h3>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Stratégie en matière de propriété intellectuelle</h4>     <p>Prestation de conseils à une entreprise du FTSE 100 sur sa stratégie en matière de propriété intellectuelle pour ce qui est de l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr>, notamment ses politiques et procédures relatives aux secrets commerciaux.</p>   </li>   <li>   <h4>Droit minier</h4>     <p>Prestation de conseils sur les contrats relatifs à des systèmes de véhicules autonomes dans le secteur minier.</p>   </li>   <li>   <h4>St. Modwen</h4>     <p>Prestation de conseils à St. Modwen relativement à l&rsquo;acquisition d&rsquo;un outil reposant sur l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr> facilitant la prise de décision en matière d&rsquo;aménagement immobilier.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Sosei Heptares</h4>     <p>Prestation de conseils à Sosei Heptares relativement à une collaboration avec PharmEnable aux fins d&rsquo;un outil de découverte reposant sur l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr> tridimensionnel (3D) et permettant de déterminer des médicaments candidats afin de cibler un récepteur biologique associé à des maladies neurologiques.</p>   </li>   <li>   <h4>PeakSpan</h4>     <p>Représentation de PeakSpan, société de placement d&rsquo;actions de croissance située aux États-Unis pour ses investissements auprès de Cognism, une plateforme d&rsquo;accélération des ventes utilisant l&rsquo;<abbr title=""intelligence artificielle"">.</abbr></p>   </li>  </ul>    <h3>Distinctions</h3>    <p>Gowling&nbsp;WLG se classe régulièrement dans des répertoires tels que<em> The Legal&nbsp;500</em>, et <em>Chambers and Partners</em>. <em>JUVE Patent</em> a reconnu notre savoir-faire en IA comme l&rsquo;une des forces de notre équipe du droit de la propriété intellectuelle.</p>    <p>Nous sommes le seul cabinet d&rsquo;avocats à avoir fait partie de UK&nbsp;Autodrive, le plus grand consortium britannique de mise à l&rsquo;essai de la technologie de véhicules automatisés. Le consortium faisait partie d&rsquo;une initiative soutenue par le gouvernement en appui à l&rsquo;intégration de voitures autonomes au Royaume-Uni.</p>    <p>Dans le cadre de son travail, Matt Hervey, notre chef du groupe Droit de l&#39;intelligence artificielle au Royaume-Uni, est plongé dans les répercussions de l&#39;<abbr title=""intelligence artificielle"">IA</abbr> dans les principaux domaines de pratique, les tendances du marché et l&#39;évolution de la réglementation et des aspects juridiques. Il est co-rédacteur en chef de <em>The Law of Artificial Intelligence</em> (Sweet &amp; Maxwell), manuel de pratique de premier plan traitant de la technologie d&rsquo;IA et d&#39;enjeux éthiques, de réglementation et de droit. Il siège à des comités et à des groupes de travail relatifs à l&#39;<abbr title=""intelligence artificielle"">IA</abbr> pour l&#39;Association internationale pour la protection de la propriété intellectuelle (AIPPI), le Chartered Institute of Patent Attorneys (CIPA), l&#39;American Intellectual Property Law Association (AIPLA), la Chambre de commerce internationale (CCI), la IP Federation et le World Law Group.</p>    <h3>Communiquez avec l&rsquo;équipe du Royaume-Uni</h3>    <p><a href=""~/en/people/Matt-Hervey/"">Matt Hervey</a><br />  Associé, chef du groupe Droit de l&rsquo;intelligence artificielle (Royaume-Uni)</p>  ",GWLG.UK,a198222e-fff0-47b3-bbca-b7c042e76a69,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,"<p>La force de notre équipe d&#39;<abbr title=""intelligence artificielle"">IA</abbr> au Royaume-Uni réside dans notre approche multidisciplinaire. Nous nous appuyons sur l&#39;expérience des avocats de nos nombreux domaines de pratique, notamment le droit des sociétés, le droit commercial, le droit de la concurrence, la cybersécurité, la protection des données, l&#39;emploi, la propriété intellectuelle et la responsabilité du fait des produits, afin d&#39;offrir des conseils juridiques avisés reposant sur une compréhension approfondie des enjeux relatifs à l&#39;<abbr title=""intelligence artificielle"">IA</abbr>.</p>  ",Insight in Artificial Intelligence from the UK,NULL,View all articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.UK&services=46292,NULL,{AC4471A4-8672-459B-852B-CC43B6933D45}
478,/Services/Artificial-Intelligence-Law/Overview,fr-CA,6C884043-1F81-4312-9AB2-E6AD66C6A22D,Aperçu,Aperçu,L'intelligence artificielle (IA) crée de nouveaux débouchés et remet en question les modèles d'affaires classiques dans de nombreux secteurs,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Notre équipe internationale d&#39;avocats en <abbr title=""intelligence artificielle"">IA</abbr> chevronnés et compétents sur le plan technique peut vous aider à cerner les enjeux pratiques, juridiques, réglementaires et éthiques soulevés par l&rsquo;IA et vous guider dans vos démarches.</p>    <p>Nous maîtrisons les enjeux de l&#39;<abbr title=""intelligence artificielle"">IA</abbr> qui touchent les principaux domaines de pratique : le droit des sociétés, le droit commercial, le financement, le droit de la concurrence, la cybersécurité, la protection des données, l&#39;emploi, la propriété intellectuelle et la responsabilité du fait des produits, entre autres. Qu&#39;il s&rsquo;agisse de stratégie, d&rsquo;acquisitions, de collaborations, de protection de la propriété intellectuelle, de licences ou de litiges, nous accompagnons nos clients dans les domaines où l&#39;IA et le droit se recoupent.</p>    <p>Forts de notre connaissance approfondie de la technologie, des lois et des règlements applicables, ainsi que de l&#39;évolution du contexte réglementaire et législatif, nous vous aidons à faire de tout projet d&#39;<abbr title=""intelligence artificielle"">IA</abbr> un véritable succès. Communiquez avec nous pour en savoir plus.</p>    <h3>Qu&rsquo;est-ce que l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr>?</h3>    <p>Il n&rsquo;existe pas de définition universellement admise de l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr> mais, si on résume le concept, il s&rsquo;agit d&rsquo;une technologie qui permet d&rsquo;automatiser des tâches nécessitant habituellement une intervention intelligente.</p>    <p>Parmi les grandes percées récentes dans le domaine, on retrouve l&rsquo;apprentissage automatique, forme d&rsquo;<abbr title=""intelligence artificielle"">IA</abbr> où un système informatique suit des procédures pour apprendre à partir de données ou d&rsquo;un environnement. Les progrès spectaculaires réalisés sont généralement accompagnés de limites importantes, notamment en ce qui a trait à l&rsquo;opacité du fonctionnement de l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr>, aux risques de défaillance imprévisible et aux biais potentiels.</p>    <p>Les possibilités et les limites techniques de l&rsquo;<abbr title=""intelligence artificielle"">IA</abbr>, combinées aux préoccupations éthiques entourant l&rsquo;influence des systèmes d&rsquo;<abbr title=""intelligence artificielle"">IA</abbr>, soulèvent de nouveaux enjeux juridiques dans des domaines tels que la responsabilité du fait des produits, la négligence, la propriété intellectuelle et le droit de la concurrence. L&rsquo;<abbr title=""intelligence artificielle"">IA</abbr>, qui est dans la mire des organismes de réglementation et des législateurs du monde entier, est parmi les domaines du droit les plus complexes et les plus dynamiques.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fArtificial-Intelligence-Law%2fAI-Services-Global%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Services+juridiques|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Découvrez notre équipe mondiale</h3>    <p>Nos avocats en <abbr title=""intelligence artificielle"">IA</abbr> offrent des services-conseils touchant de nombreux secteurs et domaines de pratique dans le monde entier. Découvrez nos équipes au Canada et au Royaume-Uni.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/artificial-intelligence-law/#canada/"">Canada</a></li>   <li><a href=""~/fr/services/artificial-intelligence-law/#uk/"">UK</a></li>  </ul>  ",GWLG.Global,NULL,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,"<p>L&#39;intelligence artificielle (IA) crée de nouveaux débouchés et remet en question les modèles d&#39;affaires classiques dans de nombreux secteurs. L&#39;<abbr title=""intelligence artificielle"">IA</abbr> permet d&#39;accélérer la découverte de médicaments, de diagnostiquer des maladies, d&#39;automatiser les transports, de réduire les coûts d&#39;assurance, de personnaliser l&#39;expérience client et d&#39;améliorer l&#39;efficacité dans de nombreux secteurs.</p>  ",Expertise in Artificial Intelligence,NULL,See more AI articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=&services=46292,NULL,
479,/Services/Artificial-Intelligence-Law/Canada,fr-CA,ACC1ABA3-D27B-47AD-9E93-AE820752DB0B,Canada,Canada,International law firm with expertise in artificial intelligence law. Our AI lawyers can support you across a multitude of practice areas related to AI law. ,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h3>Mandats représentatifs</h3>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Alectra Energy Solutions</h4>     <p>Prestation de conseils relativement à l&#39;investissement de 5 millions de dollars américains dans Grid4C, chef de file mondial de solutions d&#39;<abbr title=""intelligence artificielle"">IA</abbr> et d&#39;apprentissage automatique pour le secteur de l&#39;énergie.</p>   </li>   <li>   <h4>Datametrex AI Limited</h4>     <p>Prestation de conseils relativement à un placement privé de parts sans courtier, pour un produit brut total de 1 202 000 $.</p>   </li>   <li>   <h4>McRock Fund II LLP</h4>     <p>Prestation de conseils sur des questions de droit des fonds et des valeurs mobilières dans le cadre d&#39;un placement de 10 millions de dollars américains dans ThoughtTrace Inc , une plateforme de gestion documentaire reposant sur l&#39;<abbr title=""intelligence artificielle"">IA</abbr>.</p>   </li>  </ul>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Podium Advertising Technologies Ltd</h4>     <p>Prestation de conseils auprès de Podium Advertising Technologies Ltd., faisant des affaires sous le nom de ADCORE, dans le cadre de l&#39;acquisition par ADCORE de tous les titres émis et en circulation de la société (auparavant County Capital One Ltd.), à titre d&#39;opération admissible de County Capital, et relativement au placement privé avec courtier de reçus de souscription par ADCORE.</p>   </li>   <li>   <h4>SafeToNet Limited</h4>     <p>Prestation de conseils auprès de l&#39;entreprise de cybersécurité britannique SafeToNet Limited dans le cadre de son acquisition transfrontalière de la totalité du capital-actions émis de VISR Inc., entreprise spécialisée de premier plan qui utilise l&rsquo;IA pour détecter automatiquement le bien-être émotionnel des enfants en ligne.</p>   </li>   <li>   <h4>Miovision Technologies Inc</h4>     <p>Prestation de conseils sur la réalisation d&#39;un tour de financement minoritaire de 120 millions de dollars. L&#39;entreprise utilise l&#39;<abbr title=""intelligence artificielle"">IA</abbr> et la modélisation avancée pour aider les villes à moderniser leur approche en matière de gestion de la circulation.</p>   </li>  </ul>    <h3>Prix et distinctions</h3>    <p>Nos avocats en <abbr title=""intelligence artificielle"">IA</abbr> œuvrent dans nos nombreux domaines de pratique et dans diverses régions, et bon nombre d&#39;entre eux se démarquent dans plusieurs répertoires juridiques prestigieux tels que <em>The Legal&nbsp;500</em>, <em>Chambers &amp; Partners</em>, <em>Canadian Legal Lexpert</em> et <em>Best Lawyers</em>. Notre équipe a également été classée dans le guide <em>Lexpert Special Edition:</em> <em>Technology</em>.</p>    <p>Gowling WLG a reçu le titre de cabinet d&#39;avocats de l&#39;année à l&#39;occasion de la 4<sup>e</sup> édition annuelle de la remise des prix Canadian FinTech &amp; AI Awards, qui récompensent les meilleures innovations en matière de technologie financière et d&#39;<abbr title=""intelligence artificielle"">IA</abbr> au Canada.</p>    <h3>Communiquez avec notre équipe au Canada</h3>    <p><a href=""~/fr/people/naim-antaki/"">Naïm Antaki</a><br />  Associé, co-chef du groupe Droit de l&#39;intelligence artificielle (Canada)</p>    <p><a href=""~/fr/people/christopher-n-alam/"">Christopher Alam</a><br />  Associé, co-chef du groupe Droit de l&#39;intelligence artificielle (Canada)</p>  ",GWLG.Canada,7fb29160-44a7-4f27-b030-99ef5d9941cf;45042386-e87e-4fa2-8f87-101784526d0a,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,"<p>Notre équipe canadienne d&rsquo;avocats en <abbr title=""intelligence artificielle"">IA</abbr> offre une vaste gamme de services juridiques à un large éventail de secteurs. L&#39;équipe met son excellence technique et sa polyvalence au service des entreprises de toutes sortes, qu&#39;il s&#39;agisse de jeunes pousses, de petites entreprises ou de grandes institutions.</p>  ",Expertise in AI from our Canadian team,NULL,View all articles,NULL,NULL,NULL,NULL,NULL,/en/insights-resources/?page=1&locations=GWLG.Canada&services=46292,NULL,{22CC6655-0A11-4BA3-8A6A-FA1D6F639642}|{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
480,/Services/Financial-Services-Regulation/Overview,en-GB,1248D477-2DCB-4632-8107-677B68E10A2C,Overview,Overview,International law firm with technical excellence in financial services regulation. Contact our financial regulation lawyers for more information.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Our global team brings together professionals with many years of previous work experience as regulators or in-house counsel, offering key market insight paired with technically excellent legal advice. We take a pro-active approach by anticipating changes in the sector in several international markets and understanding how they may affect you. Collaborating with lawyers from our multitude of practice areas, we offer the financial services sector full-service legal support coupled with a deep understanding of the industry.</p>    <p>The global financial services sector is accelerating, with emerging technologies having a massive impact. Disruptors such as crypto-platforms, open banking APIs and other FinTechs are transforming the way banks, insurance companies, alternative lenders, start-ups and tech companies deliver their services and structure their organisations. As regulation evolves to meet this revolution, our financial services regulatory lawyers are committed to helping you redefine your place in the landscape.</p>    <h3>Financial Services Regulation services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Anti-money laundering</li>   <li>Authorisations and approvals</li>   <li>Blockchain and smart contracts</li>   <li>Brexit and passporting</li>   <li>CASS compliance</li>   <li>Consumer credit</li>   <li>Crowd funding and initial coin offering (ICO)</li>   <li>Data privacy and cyber security</li>   <li>Decentralized finance (DeFi)</li>   <li>Enforcement investigations</li>   <li>ESG &amp; sustainable finance</li>   <li>Financial promotions</li>   <li>FinTech</li>   <li>Governance and risk management (including SMCR)</li>   <li>Investment funds</li>   <li>Insurance regulation</li>   <li>InsurTech</li>   <li>Market abuse and insider dealing</li>   <li>Mortgage regulation</li>   <li>Open banking and consumer directed finance</li>   <li>Outsourcing and technology law</li>   <li>Payment services and e-money</li>   <li>Whistleblowing</li>  </ul>    <div>  <h3>Meet our international team</h3>    <p>With offices in major jurisdictions across the world, our core teams in Canada and the UK offer comprehensive global legal advice across the financial services spectrum. For more information on how we can help you, contact one of our teams.</p>  </div>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/financial-services-regulation/#canada"">Canada</a></li>   <li><a href=""~/en/services/financial-services-regulation/#uk"">UK</a></li>  </ul>  ",GWLG.Global,5ae5a269-9c5f-4332-920e-28b31ec9066e;6aaeb7d9-c65e-4c77-aa4d-2cf35e32c38c;0ccc4841-f8a1-4356-853e-e2ad6f7e230c,AA5DCCE5-FBE3-48B0-8A5C-B653C134F240,NULL,0,1,NULL,"<p>The world of financial services regulation is becoming increasingly globalized and complex. As regulators collaborate to develop international and local standards, exchange information and co-operate on investigations, you need to be sure your financial regulatory lawyers can meet the challenge.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C0C757A8-E589-459A-B574-1E3C3FF83EBD}|{7FD50B05-0CA7-43E6-B11F-B63EC34397C9}|{9B40E9F4-4CA7-42F5-ACBF-F64D334E4377}
481,/Services/Financial-Services-Regulation/Canada,en-GB,CDC827E5-DFD3-47B4-B672-883C1C217E7E,Canada,Canada,International law firm with technical excellence in financial services regulation. Contact our financial regulation lawyers for more information.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Our financial services regulation lawyers offer strategic and practical assistance in the development and implementation of key corporate and product design plans with a regulatory component. Our team works across a range of practice areas to help you tackle complex, multi-faceted issues, including technology, securities, competition and antitrust, restructuring and insolvency and tax. We also advise on cross-Canada legislation (and provincial differences) and can provide you with regularly updated regulatory compliance management matrices tailored to your individual customer service models.</p>    <p>We are highly experienced in assisting domestic and foreign banks and insurance companies on a variety of regulatory matters. We regularly pursue applications with OSFI for approvals and orders, provide technical opinions with respect to the Bank Act and the Insurance Companies&#39; Act, assist entities with alleged compliance deficiencies and advise on the implementation of new federal consumer regulations. We also support organizations with the development of new financial tools and products, including providing regulatory advice on peer-to-peer lending, mobile wallets and blockchain technology.</p>    <h3>Client work</h3>    <p>We advise a wide range of financial services industry participants, including domestic and foreign banks, trust companies, insurance companies, insurance intermediaries, payments companies, securities dealers and advisers, pension funds, government departments, regulators, and industry associations. Our past work includes:</p>    <h4>Complex transactions</h4>    <p>We were Canadian counsel to State Farm in Desjardins Group&#39;s acquisition of State Farm Canada&#39;s businesses in property and casualty life insurance as well as its Canadian mutual fund loan and living benefits companies. We also advised on Canadian bank, insurance company and pension plan regulatory requirements applicable to a bank and a reinsurance company in a multi-billion dollar off-shore longevity swap/reinsurance transaction for a large Canadian pension plan.</p>    <h4>Advising and supporting FinTech</h4>    <p>We routinely provide in-depth regulatory advice to FinTechs seeking to launch innovative financial products and services in Canada. We help these businesses navigate the challenges of regimes in securities, banking, AML, payments, privacy and others. We advised and represented a foreign MSB in its launch of a funds transmission, foreign exchange and financial services platform in Canada and negotiated its agreements with a payment network and payment card issuer.</p>    <h4>Regulatory compliance</h4>    <p>We review and draft compliance policies and procedures for FIs and non-FIs including internal control manuals, AML and sanctions compliance programs and legislative compliance management tools. We advised an online Canadian bank and credit union in developing a legislative compliance management matrix, which included a review of client on-boarding procedures and we are chief agent for foreign insurers in Canada and act as representative for foreign MSBs for their registration with FINTRAC.</p>    <h3>Recognition</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The team adapts as the case progresses, is proactive, efficient, timely and well-versed in recent case law. <cite>Chambers Canada</cite></p>  </blockquote>    <p>We are consistently recognised in the industry for our work in the financial services sector. <em>Chambers and Partners Canada</em> recognises Gowling WLG as a leading law firm in 27 categories, including Banking &amp; Finance and Insurance, the team also ranks in Band 2 in its <em>FinTech Legal</em> rankings. In 2020, we achieved 357 rankings across 57 areas of law in <em>Best Lawyers in Canada</em>, including Banking &amp; Finance, Corporate and Securities.</p>  ",GWLG.Canada,5ae5a269-9c5f-4332-920e-28b31ec9066e,AA5DCCE5-FBE3-48B0-8A5C-B653C134F240,NULL,0,1,NULL,"<p>Whether you are securing regulatory approvals or advising on the development of new financial services products, it is critical that you have trusted advice on-hand as you navigate today&#39;s regulatory environment.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{C0C757A8-E589-459A-B574-1E3C3FF83EBD}
482,/Services/Financial-Services-Regulation/Overview,fr-CA,1248D477-2DCB-4632-8107-677B68E10A2C,Aperçu,Aperçu,"De plus en plus mondialisé, le domaine de la réglementation des services financiers ne cesse de gagner en complexité. Alors que les autorités réglementaires collaborent pour élaborer des normes internationales et locales, échanger des informations et coopérer dans le cadre d’enquêtes, vous devez pouvoir compter sur des avocats chevronnés en réglementation financière pour en relever les défis. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Notre équipe internationale est composée de professionnels comptant de nombreuses années d&#39;expérience au sein d&#39;organismes de réglementation ou à titre de juristes d&rsquo;entreprise, ce qui leur permet d&#39;offrir une vision clé du marché associée à d&rsquo;excellents conseils juridiques sur le plan technique. Notre approche proactive anticipe les changements sectoriels sur plusieurs marchés internationaux et la manière dont ils peuvent vous affecter. De concert avec des avocats provenant d&#39;une multitude de domaines de pratique, nous offrons au secteur des services financiers un soutien juridique complet doublé de connaissances approfondies de l&rsquo;industrie.</p>    <p>Le secteur des services financiers mondial est en pleine accélération, les technologies émergentes y jouant un rôle considérable. Les perturbateurs tels que les cryptoplateformes, les API bancaires ouvertes et autres entreprises de technologie financières transforment la manière dont les banques, les compagnies d&#39;assurance, les prêteurs non traditionnels, les entreprises en démarrage et technologiques fournissent leurs services et structurent leurs organisations. Alors que la réglementation évolue pour répondre à cette révolution, nos avocats spécialisés en réglementation des services financiers s&#39;engagent à vous aider à redéfinir votre position sur l&#39;échiquier mondial.</p>    <h3>Réglementation des services financiers</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Assurtech</li>   <li>Autorisations et approbations</li>   <li>Brexit et mécanismes de passeport</li>   <li>Chaînes de blocs et contrats intelligents</li>   <li>Conformité au CASS</li>   <li>Crédit à la consommation</li>   <li>Cybersécurité et protection de la confidentialité</li>   <li>Enquêtes policières</li>   <li>Finance décentralisée (DeFi)</li>   <li>Fonds de placement</li>   <li>Gouvernance et gestion des risques (y compris le SMCR)</li>   <li>Impartition et droit de la technologie</li>   <li>Lutte contre le recyclage des produits de la criminalité</li>   <li>Normes ESG et finances durables</li>   <li>Promotions financières</li>   <li>Protection contre les abus de marchés et délits d&rsquo;initiés</li>   <li>Réglementation des assurances</li>   <li>Réglementation hypothécaire</li>   <li>Services de paiement et paiement électronique</li>   <li>Sociofinancement et première émission d&rsquo;une cryptomonnaie (PEC)</li>   <li>Système bancaire ouvert et financement axé sur le consommateur</li>   <li>Technologie financière</li>  </ul>    <h3>Découvrez notre équipe internationale</h3>    <p>Grâce à nos bureaux répartis dans les principales juridictions du monde, nos équipes principales du Canada et du Royaume-Uni offrent des conseils juridiques couvrant toutes les facettes des services financiers à l&rsquo;échelle internationale. Pour faire progresser vos affaires, communiquez avec l&rsquo;une de nos équipes.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/financial-services-regulation/#canada"">Canada</a></li>   <li><a href=""~/en/services/financial-services-regulation/#uk"">R.-U.</a></li>  </ul>  ",GWLG.Global,3464c653-fa4d-43dd-99c9-db0a2dd57faf;af5005a2-4ec9-49ba-b7bd-262bb191b111,AA5DCCE5-FBE3-48B0-8A5C-B653C134F240,NULL,0,1,NULL,"<p>De plus en plus mondialisé, le domaine de la réglementation des services financiers ne cesse de gagner en complexité. Alors que les autorités réglementaires collaborent pour élaborer des normes internationales et locales, échanger des informations et coopérer dans le cadre d&rsquo;enquêtes, vous devez pouvoir compter sur des avocats chevronnés en réglementation financière pour en relever les défis.&nbsp;</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{7C2CA6F8-1321-40DF-A3BF-63A7F877EE95}|af5005a2-4ec9-49ba-b7bd-262bb191b111
483,/Services/Financial-Services-Regulation/Canada,fr-CA,CDC827E5-DFD3-47B4-B672-883C1C217E7E,Canada,Canada,Vous souhaitez obtenir des approbations réglementaires ou des conseils sur la conception de nouveaux produits financiers? Il vous faut compter sur des conseillers fiables pour vous y retrouver dans l’environnement réglementaire actuel.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Nos avocats spécialisés en réglementation des services financiers proposent une aide stratégique et pratique dans l&#39;élaboration et la mise en œuvre de plans d&#39;entreprise et de conception de produits clés comprenant un volet réglementaire. Notre équipe vous aide à traiter des enjeux diversifiés et complexes dans divers domaines de pratique : technologie, valeurs mobilières, concurrence/antitrust, restructuration et insolvabilité, et fiscalité. Nous offrons aussi des conseils sur la législation fédérale et sur les particularités provinciales, et fournissons des plans de conformité réglementaire, lesquels sont régulièrement actualisés et adaptés à votre modèle de service à la clientèle.</p>    <p>Notre équipe chevronnée aide les banques et les sociétés d&rsquo;assurance nationales et étrangères quant à une variété d&#39;enjeux réglementaires. Nous nous chargeons régulièrement des demandes d&rsquo;approbations et d&#39;ordonnances auprès du BSIF, fournissons des avis techniques sur la <em>Loi sur les banques</em> et la <em>Loi sur les sociétés d&#39;assurances</em>, aidons les entités aux prises avec des allégations de non-conformité et conseillons nos clients sur l&#39;application de nouveaux règlements fédéraux visant les consommateurs. Nous aidons aussi les organisations à concevoir de nouveaux outils et produits financiers, notamment en fournissant des conseils sur la réglementation des prêts entre particuliers, des portefeuilles mobiles et de la technologie blockchain.</p>    <h3>Mandats représentatifs</h3>    <p>Nous offrons des conseils à divers intervenants du secteur des services financiers, y compris des banques nationales et étrangères, des sociétés de fiducie, des sociétés d&rsquo;assurance, des intermédiaires en assurance, des entreprises de paiement, des conseillers et des courtiers en valeurs mobilières, des régimes de retraite, des ministères gouvernementaux, des organismes de réglementation et des associations industrielles. Voici quelques-uns de nos récents mandats ::</p>    <h4>Opérations complexes</h4>    <p>Nous avons agi à titre de principaux conseillers canadiens dans le cadre de certaines des opérations de F&amp;A les plus importantes et les plus complexes au Canada dans le secteur des assurances et d&#39;autres services financiers. À titre de conseillers canadiens, nous avons guidé un assureur étranger dans le cadre de l&#39;acquisition de son entreprise canadienne par un grand groupe financier du Québec ainsi que de la vente de ses autres entreprises de services financiers au Canada. Nous avons fourni des conseils portant sur les exigences réglementaires des banques, des sociétés d&#39;assurance et des régimes de retraite du Canada applicables à une banque et à une société de réassurance pour le compte d&rsquo;un important régime de retraite canadien dans le cadre d&#39;une opération extraterritoriale de réassurance/swap de longévité de plusieurs milliards de dollars.</p>    <h4>Conseils et soutien en matière de FinTech</h4>    <p>Nous fournissons régulièrement des conseils réglementaires ciblés aux entreprises de technologie financière qui cherchent à lancer des produits et services financiers innovants au Canada. Nous aidons ces entreprises à relever les défis des régimes en matière de valeurs mobilières, de services bancaires, de lutte contre le recyclage des produits de la criminalité (LRPC), de paiements, de protection de la vie privée et autres. Nous avons conseillé et représenté une ESM étrangère dans son lancement d&rsquo;une plateforme de transmission de fonds, de change et de services financiers au Canada et avons négocié ses accords avec un réseau de paiement et un émetteur de cartes de paiement.</p>    <h4>Conformité réglementaire</h4>    <p>Nous révisons et rédigeons des politiques et des procédures de conformité pour les institutions financières et autres entreprises, y compris des manuels de contrôle interne, des programmes de conformité en matière de LRPC et de sanctions et des outils de gestion de la conformité législative. Nous avons conseillé une banque et une coopérative de crédit canadiennes en ligne dans l&rsquo;élaboration d&rsquo;une matrice de gestion de la conformité législative, qui comprenait un examen des procédures d&rsquo;intégration des clients. Nous sommes aussi l&rsquo;agent principal d&rsquo;assureurs étrangers au Canada et agissons en tant que représentant d&rsquo;ESM étrangères pour leur enregistrement auprès du CANAFE.</p>    <h3>Reconnaissance</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">L&rsquo;équipe s&rsquo;adapte au fur et à mesure que l&rsquo;affaire avance; proactive et efficace, elle agit dans les temps et connaît bien la jurisprudence récente.<cite>Chambers Canada</cite></p>  </blockquote>    <p>Notre travail dans le secteur des services financiers nous vaut une reconnaissance constante au sein de l&#39;industrie. La publication <em>Chambers and Partners Canada</em> a classé Gowling WLG cabinet juridique chef de file dans 27&nbsp;catégories, y compris le droit bancaire et la finance ainsi que le droit des assurances, et l&#39;équipe a également obtenu un classement de niveau 2 dans <em>FinTech Legal</em>. En 2020, nous avons obtenu 357&nbsp;classements dans 57 domaines du droit dans la publication <em>Best Lawyers in Canada</em>, y compris le droit bancaire et le financement, le droit des sociétés et les valeurs mobilières.</p>  ",GWLG.Canada,3464c653-fa4d-43dd-99c9-db0a2dd57faf,AA5DCCE5-FBE3-48B0-8A5C-B653C134F240,NULL,0,1,NULL,<p>Vous souhaitez obtenir des approbations réglementaires ou des conseils sur la conception de nouveaux produits financiers? Il vous faut compter sur des conseillers fiables pour vous y retrouver dans l&rsquo;environnement réglementaire actuel.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{7C2CA6F8-1321-40DF-A3BF-63A7F877EE95}
484,/Services/Financial-Services-Regulation/UK,fr-CA,79D617C6-6EC1-4B1A-A248-95759FC4385E,Royaume-Uni,Royaume-Uni,"De plus en plus mondialisé, le domaine de la réglementation des services financiers ne cesse de gagner en complexité. Alors que les autorités réglementaires collaborent pour élaborer des normes internationales et locales, échanger des informations et coopérer dans le cadre d’enquêtes, vous devez pouvoir compter sur des avocats chevronnés en réglementation financière pour en relever les défis. ",NULL,NULL,"<p>Quel que soit le problème - qu&rsquo;il s&#39;agisse du développement de votre activité de services financiers, d&#39;une demande d&#39;autorisation, de la supervision continue de questions de conformité, d&#39;enquêtes et d&rsquo;application de la loi, de la participation active au changement et à la consolidation du secteur ou de la gestion de l&rsquo;examen réglementaire, le service personnalisé de bout en bout de notre équipe Réglementation des services financiers est entièrement axée sur l&rsquo;atteinte de vos objectifs.</p>    <p>Dirigée par l&rsquo;ancien chef du service de la mise en application de l&#39;organisme de réglementation du Royaume-Uni (la FCA, anciennement la FSA), notre équipe est composée d&#39;avocats ayant œuvré dans des organismes de réglementation ainsi qu&#39;à titre de juristes d&#39;entreprise au sein d&rsquo;organisations de services financiers de premier plan. Nous offrons des perspectives éclairées quant à l&#39;organisme de réglementation financier britannique, ainsi qu&#39;une compréhension approfondie des défis auxquels vous devez faire face.</p>    <p>Notre approche pluridisciplinaire vous garantit un service complet : nos conseils pratiques et de pointe sont combinés à notre attitude réactive et efficace. Notre expérience en matière de réglementation couvre une multitude de domaines, notamment les projets thématiques de la FCA, les enquêtes, les mesures coercitives, les examens de personnes qualifiées au titre de l&rsquo;article&nbsp;166 et les exercices de recours de haut niveau découlant des examens de la FCA.</p>    <p>Nous sommes particulièrement compétents en matière d&rsquo;enquêtes réglementaires, notamment en ce qui a trait à la défense des sociétés cotées, des cadres supérieurs, des responsables de la conformité et des responsables de la communication des informations relatives au blanchiment d&rsquo;argent (MLRO) dans le cadre des enquêtes et des procédures d&rsquo;application de la FCA. Nous donnons également des conseils sur les rapports de personnes qualifiées à l&rsquo;organisme de réglementation. Nous adoptons une approche proactive pour nous assurer que les enquêtes réglementaires sont résolues rapidement et efficacement.</p>    <h3>Mandats représentatifs</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;""><i>Gowling WLG offre un niveau d&rsquo;engagement, de compréhension et d&rsquo;innovation hors pair : exactement ce dont nous avons besoin de la part de nos conseillers externes.</i><cite>- Entreprise de technologie financière du secteur du commerce électronique de 10 G$ </cite></p>  </blockquote>    <p>Nous avons participé aux groupes de conseillers juridiques de certains des plus grands organismes de réglementation, institutions financières, marques automobiles et de détail du monde, et nous sommes également particulièrement réputés pour notre expérience en conseils aux entreprises de fintech. Voici quelques mandats récents :</p>    <div>  <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Entreprises en technologie financière chefs de file de l&rsquo;Europe</h4>     <p>Participation au groupe de conseillers britanniques de l&rsquo;une des plus importantes entreprises fintech du monde. Nous les conseillons régulièrement sur l&rsquo;impact des régimes réglementaires britanniques en matière de services de paiement et de crédit à la consommation relativement au lancement de produits nouveaux et innovants.</p>   </li>   <li>   <h4>Soutien aux entreprises de technologie financière</h4>     <p>Nous fournissons régulièrement des conseils aux entreprises de fintech qui cherchent à lancer des produits et services financiers innovants au Royaume-Uni. Nous les aidons à déterminer l&rsquo;envergure des activités réglementées qu&rsquo;elles veulent y exercer, et nous les guidons ensuite tout au long du processus d&rsquo;autorisation de la FCA.</p>   </li>   <li>   <h4>Fonds d&rsquo;investissement</h4>     <p>Nous sommes présents depuis longtemps dans le secteur des fonds d&rsquo;investissement et conseillons tous les types de fonds investis dans un large éventail de catégories d&rsquo;actifs, au Royaume-Uni et dans le monde entier. Nous soutenons nos clients sur les aspects réglementaires du lancement, de la création et de l&rsquo;acquisition de fonds.</p>   </li>  </ul>    <h3>Reconnaissance au Royaume-Uni</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Leur connaissance et leur expérience relatives aux organismes de réglementation font la force du cabinet. <cite>The Legal 500</cite></p>  </blockquote>    <p>Notre équipe intervient fréquemment lors de conférences, séminaires et webinaires sur des sujets liés aux services financiers, notamment l&#39;application des règles de la FCA, les abus de marché et les technologies financières.</p>    <p>Nous sommes également classés par <em>The Legal 500</em> pour les services financiers dans les catégories : non litigieux/réglementaire et services financiers&nbsp;: litigieux, et nos avocats sont également nommés dans les catégories fintech&nbsp;: non litigieux/réglementaire.</p>    <p>En outre, Ian Mason, chef du groupe Réglementation des services financiers ainsi que cochef du groupe sectoriel Services financiers du Royaume-Uni est également l&rsquo;auteur de plusieurs livres et articles sur les services financiers. Il tient sa propre chronique sur les pratiques du marché et est membre du <em>Practical Law Financial Services Consultation Board</em>. Ian est membre du groupe de travail sur les abus de marché de l&rsquo;AIMA et du sous-comité sur la réglementation des services financiers de la <em>Society of Pension Practitioners</em>.</p>    <h3>Communiquez avec notre équipe du Royaume-Uni</h3>    <p><a href=""~/en/people/kam-dhillon/"">Kam Dhillon</a><br />  Principal Associate</p>    <p><a href=""~/en/people/sushil-kuner/"">Sushil Kuner</a><br />  Principal Associate</p>  </div>  ",GWLG.UK,6aaeb7d9-c65e-4c77-aa4d-2cf35e32c38c;0ccc4841-f8a1-4356-853e-e2ad6f7e230c,AA5DCCE5-FBE3-48B0-8A5C-B653C134F240,NULL,0,0,t-white,"<p>Les changements réglementaires continuent d&rsquo;occuper le devant de la scène et la tendance devrait se maintenir pendant un certain temps. D&#39;autres mesures se profilent à l&rsquo;horizon, apportant de nouvelles exigences réglementaires et un contrôle plus strict. Ces défis, ainsi que les développements techniques, présentent également de nombreuses opportunités pour ceux qui sont prêts à embrasser ce nouvel environnement. Dans la foulée du Brexit, le gouvernement du Royaume-Uni est à réviser l&rsquo;environnement et l&#39;infrastructure réglementaires, et cherche à stimuler les investissements au Royaume-Uni dans des domaines comme la technologie financière.</p>  ",Expertise in Financial Services Regulation,NULL,See more articles,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{7FD50B05-0CA7-43E6-B11F-B63EC34397C9}|{9B40E9F4-4CA7-42F5-ACBF-F64D334E4377}
485,/Services/Environmental-Social-and-Governance-ESG/UK,en-GB,DD5CFBF8-B1D4-413E-957A-39135DAE1042,UK,UK,"The focus on Environmental, Social and Governance (ESG) continues to grow. Find out more about our ESG law firm.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>In the UK, we take a cross-firm approach, pairing in-depth sector experience with vast practice area knowledge to provide advice on <abbr title=""environmental, social and governance"">ESG</abbr> regulation and best practice. Our core team brings together lead professionals from each of the main areas that support <abbr title=""environmental, social and governance"">ESG</abbr> matters: environment and sustainability, business and human rights, corporate governance, employment law and commercial contracts.</p>    <h2><abbr title=""environmental, social and governance"">ESG</abbr> services</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Carbon usage</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#uk"">Employment</a> and <a href=""~/en/services/pensions/#uk"">pensions</a> issues</li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Energy usage</a></li>   <li><a href=""~/en/services/governance-risk-and-compliance-grc/#global"">Governance, Risk and Compliance</a></li>   <li><a href=""~/en/services/commercial/#global"">Greening commercial contracts and supply chain</a></li>   <li><a href=""~/en/services/banking-finance/#uk"">Green Lending and Finance</a></li>   <li><a href=""~/en/services/international-trade-and-customs/#global"">Green barriers to trade</a></li>   <li><a href=""~/en/services/governance-risk-and-compliance-grc/#global"">Human rights</a></li>   <li><a href=""~/en/services/governance-risk-and-compliance-grc/#global"">Operational measures</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Sustainable footprints</a></li>   <li><a href=""~/en/services/climate-change-and-environmental-law/#global"">Strategic thinking</a></li>  </ul>    <h2>Client Work</h2>    <p>{^widget|(copy1)Advised+the+managers+of+an+investment+fund+on+its+annual+environmental+report+and+GHG+emissions+reporting+duties.+This+included+undertaking+an+audit+of+its+reports+to+ensure+compliance.|(bghover2)colour-darkblue|(copy3)Advised+Thakeham+Homes+on+the+development+of+the+UK%27s+first+zero-carbon+community%2c+covering+all+legal+aspects+of+the+site+assembly+of+the+sustainability-led+project.|(copy2)Provided+training+to+Thales+UK+Pension+Scheme+on+the+implementation+of+ESG+into+the+scheme%27s+investment+approach.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)Environment+reporting|(headline3)Real+estate|(headline2)Pensions+investment|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-darkred|(width)|(height)^}</p>    <h2>Awards &amp; Recognition</h2>    <p>Our <abbr title=""environmental, social and governance"">ESG</abbr> team combines the knowledge and experience of lawyers from across our different practice-areas. We were proud to be recognised across 12 categories in <em>Chambers Global</em> for 2021. In the UK, we were praised for our &quot;hugely respected&quot; and &quot;outstanding&quot; legal prowess by <em>Chambers &amp; Partners</em>, securing 44 leading rankings in 2021 including the Energy &amp; Natural Resources, Environment, Employment , Pensions and Real Estate categories. In addition, we were recognised by <em>The Legal 500</em> in 68 practice area rankings, with marked success in service lines such as Projects, Energy &amp; Infrastructure, Pensions and Finance.</p>    <h2>Contact our UK team</h2>    <p><strong><a href=""~/en/people/ben-stansfield/"">Ben Stansfield</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/kieran-laird/"">Kieran Laird</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/sharon-ayres/"">Sharon Ayres</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/david-lowe/"">David Lowe</a></strong><br />  Partner</p>  ",GWLG.UK,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;a1a4c901-7400-490f-8357-9db439f7dfee;d7a64117-fe8d-47a0-ace6-75c8607bfcdd;ad056fcd-7211-4da7-a9e2-30612d332954,B305A1B6-D0BA-41DC-8E53-579FD077B871,NULL,0,1,NULL,"<p>As the focus on Environmental, Social and Governance (ESG) continues to grow, the priorities of businesses and their stakeholders will need to shift to ensure strategies minimise risk and meet increasing expectations. Your approach to <abbr title=""environmental, social and governance"">ESG</abbr> is ultimately a reflection on your accountability and standards that can make or break your value.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,4fece204-ba3c-4f6f-a416-359cac0d10f9,NULL,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{55081D04-3BD8-4E64-A752-137A9B30CE9D}|{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}
486,/Services/Environmental-Social-and-Governance-ESG/UK,fr-CA,DD5CFBF8-B1D4-413E-957A-39135DAE1042,Royaume-Uni,Royaume-Uni,"Alors que le monde entier accorde de plus en plus d’importance aux facteurs environnementaux, sociaux et de gouvernance (ESG), les entreprises et leurs parties prenantes doivent adapter leurs priorités de manière à ce que leurs stratégies minimisent les risques et répondent aux attentes grandissantes. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Au Royaume-Uni, nous adoptons une approche collaborative, alliant une expérience sectorielle approfondie à une vaste connaissance des domaines d&#39;activité pour fournir des conseils sur la réglementation et les meilleures pratiques en matière de facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>. Notre équipe est composée de professionnels de premier plan dans chacun des principaux domaines qui les touchent : environnement et durabilité, affaires et droits de l&#39;homme, gouvernance d&#39;entreprise, droit du travail et contrats commerciaux.</p>    <h2>Services relatifs aux facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr></h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/climate-change-and-environmental-law/#global"">Utilisation du carbone </a></li>   <li>Questions liées à <a href=""~/en/services/employment-labour-equalities/#uk"">l&rsquo;emploi</a> et aux régimes de <a href=""~/en/services/pensions/#uk"">retraite</a></li>   <li><a href=""~/fr/services/climate-change-and-environmental-law/#global"">Utilisation de l&rsquo;énergie</a></li>   <li><a href=""~/fr/services/governance-risk-and-compliance-grc/#global"">Gouvernance, gestions des risques et conformité</a></li>   <li><a href=""~/fr/services/commercial/#global"">Écologisation des contrats commerciaux et des chaînes d&rsquo;approvisionnement</a></li>   <li><a href=""~/en/services/banking-finance/#uk"">Prêts verts et finance verte</a></li>   <li><a href=""~/fr/services/international-trade-and-customs/#global"">Obstacles verts au commerce</a></li>   <li><a href=""~/fr/services/governance-risk-and-compliance-grc/#global"">Droits de la personne</a></li>   <li><a href=""~/fr/services/governance-risk-and-compliance-grc/#global"">Mesures opérationnelles </a></li>   <li><a href=""~/fr/services/climate-change-and-environmental-law/#global"">Empreintes durables</a></li>   <li><a href=""~/fr/services/climate-change-and-environmental-law/#global"">Raisonnement stratégique</a></li>  </ul>    <h2>Mandats représentatifs</h2>    <ul class=""o-3-columns is-list-unstyled"">   <li>   <h4>Immobilier</h4>     <p>Nous avons conseillé Thakeham Homes sur le développement de la première communauté à zéro carbone du Royaume-Uni, en couvrant tous les aspects juridiques de l&rsquo;assemblage du site du projet axé sur la durabilité.</p>   </li>   <li>   <h4>Investissement dans des régimes de retraite</h4>     <p>Nous avons dispensé une formation au régime de retraite Thales UK sur la mise en œuvre de normes ESG dans l&rsquo;approche d&rsquo;investissement du régime.</p>   </li>   <li>   <h4>Production de rapports environnementaux</h4>     <p>Nous avons conseillé les gestionnaires d&rsquo;un fonds d&rsquo;investissement sur leurs obligations en matière de production de son rapport annuel sur l&rsquo;environnement et de déclaration des émissions de gaz à effet de serre, et nous avons notamment effectué une vérification de ses rapports pour en assurer la conformité.</p>   </li>  </ul>    <h2>Prix et distinctions</h2>    <p>Notre équipe responsable de la valorisation des facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> met à profit les connaissances et l&rsquo;expérience d&#39;avocats d&rsquo;une diversité de domaines de pratique. Nous sommes fiers d&rsquo;être reconnus dans 12&nbsp;catégories dans la publication <em>Chambers Global</em> de 2021. Au Royaume-Uni, notre excellence juridique nous a valu les mentions &laquo; grandement respecté&nbsp;&raquo; et &laquo; extraordinaire&nbsp;&raquo; selon <em>Chambers &amp; Partners</em>, dont 44&nbsp;classements de premier rang en&nbsp;2021, y compris dans les catégories Énergie et ressources naturelles, Environnement, Emploi, Régimes de retraite et immobilier. De plus, nous figurons dans le guide <em>The Legal 500</em> dans 68&nbsp;domaines de pratique, notamment en matière de Projets, énergie et infrastructure, Régimes de retraite et Financement.</p>    <h2>Communiquez avec notre équipe du Royaume-Uni</h2>    <p><strong><a href=""~/en/people/ben-stansfield/"">Ben Stansfield</a></strong><br />  Associée</p>    <p><strong><a href=""~/en/people/kieran-laird/"">Kieran Laird</a></strong><br />  Associée</p>    <p><strong><a href=""~/en/people/sharon-ayres/"">Sharon Ayres</a></strong><br />  Associée</p>    <p><strong><a href=""~/en/people/david-lowe/"">David Lowe</a></strong><br />  Associée</p>  ",GWLG.UK,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;a1a4c901-7400-490f-8357-9db439f7dfee;d7a64117-fe8d-47a0-ace6-75c8607bfcdd;ad056fcd-7211-4da7-a9e2-30612d332954,B305A1B6-D0BA-41DC-8E53-579FD077B871,NULL,0,1,NULL,"<p>Alors que le monde entier accorde de plus en plus d&rsquo;importance aux facteurs environnementaux, sociaux et de gouvernance (ESG), les entreprises et leurs parties prenantes doivent adapter leurs priorités de manière à ce que leurs stratégies minimisent les risques et répondent aux attentes grandissantes. En effet, la façon dont vous abordez les facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> reflètent les normes qui vous régissent et vos mécanismes de reddition de compte, ce qui en bout de ligne peut avoir une incidence sur votre réputation et la valeur de votre entreprise.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{55081D04-3BD8-4E64-A752-137A9B30CE9D}|{C458B6D1-76A9-432B-951A-CCDEA056F28C}|{2904F3E0-58D5-4E7C-BEEB-97B001DE8B76}
487,/Services/Environmental-Social-and-Governance-ESG/Canada,fr-CA,CD5121A5-5950-4624-9883-8272CEAE1B9A,Canada,Canada,"De nouveaux enjeux, les facteurs environnementaux, sociaux et de gouvernance (ESG), se retrouvent de plus en plus au cœur des priorités des entreprises. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Entreprises et facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr></h2>    <p>Les entreprises examinent de très près certains facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> déterminants qui représentent des risques et nécessitent d&#39;être gérés et surveillés de près, mais qui peuvent aussi déboucher sur des occasions uniques à explorer et exploiter.</p>    <p>En plus d&#39;avoir à traiter des exigences et des enjeux relatifs à leur structure interne, et à se conformer à des obligations de déclaration, les entreprises subissent des pressions externes de plus en plus fortes. En effet, les défenseurs de l&#39;investissement responsable, de l&#39;investissement durable et de l&#39;investissement d&#39;impact se font de plus en plus insistants pour qu&#39;elles mettent en œuvre des normes accrues et améliorées de déclaration quant aux facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> canadiens. En outre, on remarque au sein des gouvernements du monde entier qu&#39;une forme de droit plus contraignant est à supplanter une législation moins restrictive, ce qui se traduit par des programmes réglementaires et de conformité plus complexes, et, bien entendu, par des risques et des obligations augmentées pour les entreprises.</p>    <p>Les recours collectifs et les poursuites intentées par un seul demandeur ont pavé la voie à une jurisprudence plus percutante et de plus grande portée, autant de raisons qui font ressortir la nécessité d&#39;adopter des mesures de gestion des risques.</p>    <p>L&#39;adoption et l&#39;application de normes, principes, lignes directrices et objectifs internationaux qui pourraient avoir des répercussions sur les stratégies et les opérations d&#39;une entreprise, et ce, dans plus d&#39;un pays ou territoire, forcent bon nombre d&#39;entreprises à faire preuve de prudence et à œuvrer avec diligence en terrain inconnu.</p>    <h2>Nous pouvons vous aider</h2>    <p>Notre équipe de conseillers en matière de facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr> possède une longue feuille de route en la matière et est en mesure d&#39;aider les clients à comprendre leurs responsabilités et les risques ainsi que les occasions qui peuvent en découler.</p>    <p>Nos services-conseils portent notamment sur la gouvernance, la gestion du risque, la vérification diligente, les options de financement et d&#39;investissement ainsi que sur la conformité et l&#39;obligation de déclaration en lien avec les domaines suivants&nbsp;:</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fEnvironmental-Social-and-Governance%2fCanada-ESG-advisory-services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Services+de+consultation+en+mati%c3%a8re+de+facteurs+ESG|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Communiquez avec notre équipe canadienne</h2>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-4 cell"">  <p><a href=""~/fr/people/elizabeth-burton/"">Elizabeth (Beth) Burton</a></p>    <p>Associée et chef du groupe de pratique Services financiers (Calgary)</p>  </div>    <div class=""small-12 medium-4 cell"">  <p><a href=""~/fr/people/stephen-pike/"">Stephen Pike</a></p>    <p>Associé</p>    <p><a href=""~/fr/people/maya-stano/"">Maya Stano</a><br />  Associée</p>  </div>  </div>  </div>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-4 cell"">  <p><a href=""~/fr/people/jennifer-king/"">Jennifer King</a></p>    <p>Associée</p>  </div>  </div>  </div>  ",GWLG.Canada,e1fcdf49-26d1-491c-8fd4-d7cc34fdcfb8;03d6dce1-2df8-4f24-8e6b-d7bcda0b6509;6ed517b8-3709-4234-8c1b-a66d3f7e6080;f63465af-154c-4d26-b2ab-6bc7cc79f913,B305A1B6-D0BA-41DC-8E53-579FD077B871,NULL,0,1,NULL,"<h2>Conseils sur l&#39;intégration des facteurs ESG</h2>    <p>De nouveaux enjeux, les facteurs environnementaux, sociaux et de gouvernance (ESG), se retrouvent de plus en plus au cœur des priorités des entreprises. En effet, bon nombre réfléchissent aux manières de composer avec la demande croissante des marchés qui s&#39;attendent à ce qu&#39;elles fassent de l&#39;activisme environnemental et du développement durable accru, qu&#39;elles s&#39;attaquent aux problèmes sociaux, et qu&#39;elles améliorent la gestion des maillons de leurs chaînes d&#39;approvisionnement. Dans ce contexte, il est primordial que les entreprises comprennent les risques et les avantages liés aux facteurs <abbr title=""environnementaux, sociaux et de gouvernance"">ESG</abbr>.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D70D8CA-CF7C-4153-874D-C164399C6B5F}|{A7B882E4-34EF-49D2-BBA0-D320669A55A8}|{04845612-0BAA-49B6-832B-70C585175F10}|{5B635900-49C8-4921-A179-D6EAB83D1146}
488,/Services/Climate-Change-and-Environmental-Law/UK,en-GB,D543D5CA-68F6-4F07-965C-6838EABEBEB3,UK,UK,Law firm with experienced environmental lawyers providing advice on climate change and environmental law.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Our UK team has the insight and sector experience to guide you through the complexity of local and international environmental laws and best practices.</strong></p>    <p>We aim to deliver practical, user-friendly advice that you can quickly understand and implement. Drawing on experience from a wide range of sectors, our advice is timely, on point and strategic in the context of complex litigation, environmental emergencies and interventions, business transactions, development projects and compliance matters, as well as day-to-day commercial operations.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fEnvironmental-Law%2fEnvironmental-Law-Services%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Climate+change+and+environmental+law+services|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h3>Recognition in the UK</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Provides succinct and accurate advice in a timely manner. <cite>Chambers and Partners</cite></p>  </blockquote>    <p>Our environmental lawyers are consistently recognised by both <em>The Legal 500</em> and <em>Chambers and Partners</em> for their work in the field.</p>    <p><em>The Legal 500</em> ranks the team as a Tier 1 environmental law firm for the Midlands. The guide also notes Andrew Litchfield as a Leading Individual.</p>    <p><em>Chambers and Partners</em> ranks the team in Band 1 for the Midlands. Ben Stansfield&#39;s approach is described as &quot;very commercial and pragmatic&quot;, while Andrew Litchfield&#39;s &quot;excellent reputation&quot; in the market is recognised.</p>    <p>Ben Stansfield is also featured in <em>Who&#39;s Who Legal for Environmental Law.</em></p>    <h3>Client work</h3>    <p>Due to the nature of our work, the clients involved in the following examples of our work are confidential.</p>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkblue|(headline1)US+AUTOMOTIVE+MANUFACTURER|(headline3)PEAKING+POWER+PLANTS+PORTFOLIO|(headline2)INFRASTRUCTURE+ASSETS|(copy1)We+advised+a+car+accessories+manufacturer+on+complying+with+product+stewardship+regulations+when+importing+its+products+into+the+EU.|(copy3)We+acted+as+counsel+on+the+environmental+and+consenting+aspects+for+a+US+law+firm.+Their+client+was+bidding+for+a+portfolio+of+peaking+power+plants+across+the+UK.|(copy2)We+acted+as+the+environmental+local+counsel+for+a+US+law+firm+when+a+US-based+client+sold+oil%2fgas+storage+assets+in+the+UK.+We+advised+on+pre-sale+processes+and+negotiated+environmental+indemnities.|(bghover2)colour-lightred|(name)ThreeBlockWidget|(width)|(height)^}{^widget|(headline3)INVESTMENT+FUNDS|(bghover1)colour-darkblue|(name)ThreeBlockWidget|(headline2)LOGISTICS+DEVELOPER|(copy1)We+acted+for+a+quarry+operator+under+investigation+by+the+Environment+Agency+due+to+their+ownership+of+contaminated+land%2c+helping+our+client+avoid+formal+enforcement+action.|(headline1)WASTE|(copy3)We+advised+the+managers+of+an+investment+fund+on+its+annual+environmental+report+and+green+house+gas+emissions+reporting+duties.+This+included+undertaking+an+audit+of+its+reports+to+ensure+compliance.|(bghover3)colour-darkred|(copy2)We+advised+an+industrial+and+logistics+facilities+developer+on+the+acquisition+of+a+heavily+contaminated+site.|(bghover2)colour-aubergine|(widget_displayname)Three+Block+Widget|(width)|(height)^}</p>    <h3>Contact our environmental lawyers in the UK</h3>    <p><a href=""~/en/people/ben-stansfield/""><strong>Ben Stansfield</strong></a><br />  Partner</p>    <p><a href=""~/en/people/andrew-litchfield/""><strong>Andrew Litchfield</strong></a><br />  Partner</p>  ",GWLG.UK,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;3d0d2ba1-fe4c-43cd-81d1-f7265baecea0,064C02F0-FF64-42F8-8A71-C8DECE3600FD,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}
489,/Services/Climate-Change-and-Environmental-Law/UK,fr-CA,D543D5CA-68F6-4F07-965C-6838EABEBEB3,Royaume-Uni,Royaume-Uni,"Notre équipe du Royaume-Uni possède l'expérience et les connaissances qui lui permettent de vous guider dans la complexité des lois et pratiques exemplaires en matière d'environnement, à l'échelle tant locale qu'internationale.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>Ce que nous voulons offrir à nos clients : des conseils pratiques et faciles à suivre, qu&rsquo;ils comprendront rapidement et pourront mettre en œuvre aisément. La vaste expérience de notre équipe dans divers secteurs de ce domaine nous permet de fournir en temps opportun des conseils pertinents et stratégiques portant sur les cas complexes de litige, les urgences et interventions environnementales, les opérations commerciales, les projets de développement et les questions de conformité, ainsi que sur l&rsquo;exploitation commerciale quotidienne.</p>    <p>{^widget|(name)GWLG.Widgets.FAQList|(HeadingText)Services+li%c3%a9s+%c3%a0+l%e2%80%99environnement+et+aux+changements+climatiques|(Path)%2fGlobal-Objects%2fCTAs%2fServices%2fEnvironmental-Law%2fEnvironmental-Law-Services%2f%2525|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(widget_displayname)FAQ+List^}</p>    <h2>Reconnaissance au Royaume-Uni</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">...fournit des conseils précis et succincts au moment approprié. <cite>Chambers and Partners</cite></p>  </blockquote>    <p>Nos avocats en droit de l&rsquo;environnement sont régulièrement reconnus par <em>The Legal 500</em> et <em>Chambers and Partners</em> pour leur savoir-faire dans ce domaine.</p>    <p>Selon <em>The Legal 500</em>, notre équipe se classe parmi les cabinets en droit de l&rsquo;environnement de premier niveau pour les Midlands. Le guide mentionne également qu&rsquo;Andrew Litchfield est un chef de file.</p>    <p>Selon <em>Chambers and Partners</em>, le cabinet se classe dans le groupe de tête pour les Midlands, et le guide caractérise l&rsquo;approche de Ben Stansfield comme étant &laquo; très commerciale et pragmatique &raquo; et reconnaît l&rsquo;&laquo; excellente réputation &raquo; d&rsquo;Andrew Litchfield dans le marché.</p>    <p>Ben Stansfield figure également aux classements de <em>Who&rsquo;s Who Legal for Environmental Law</em>.</p>    <h2>Mandats de nos clients</h2>    <p>En raison de la nature de notre travail, les noms des clients visés par les exemples de mandats qui suivent sont confidentiels.</p>  <style type=""text/css"">.btn-gc{font-size:1em;display:inline-block;cursor:pointer;min-width:100px;margin-bottom:20px;border-radius:25px;text-align:center;padding:15px 30px;text-decoration:none;transition:all .3s ease;font-weight:700px}.btn-small{padding:8px 15px}.btn-gc+.btn-gc{margin-left:20px}.btn-quaternary{background-color:#fff;color:#000}.btn-quaternary.btn-reverse,.btn-quaternary:hover{background-color:#000;color:#fff}.btn-quaternary.btn-reverse:hover{background-color:#fff;color:#000}                .gc-three-block-panel{display:block}.gc-three-block-panel.centered-blocks{-ms-flex-pack:center;justify-content:center}@media (min-width:768px){.gc-three-block-panel{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;max-width:1130px;margin:0 auto}}.gc-three-block-panel h3{width:100%;text-align:center}.gc-three-block-panel-noresults{display:block;width:100%;background-color:#f0efec;text-decoration:none;margin:3px}.gc-three-block-panel-button{margin-top:20px}.gc-three-block-link{display:block;position:relative;width:100%;background-color:#f0efec;text-decoration:none;margin:3px}.gc-three-block-link:nth-child(2n){background-color:#e9e8e3}@media (min-width:768px){.gc-three-block-link{width:calc(50% - 6px)}}@media (min-width:1180px){.gc-three-block-link{width:calc(33% - 6px)}}.gc-three-block-link:hover{background-color:#401c42}.gc-three-block-link:hover .gc-three-block-content h4,.gc-three-block-link:hover .gc-three-block-content p{color:#fff}.gc-three-block-link.gc-hover-black:hover{background:#000}.gc-three-block-link.gc-hover-white:hover{background:#fff}.gc-three-block-link.gc-hover-lightblue:hover{background:#00baf2}.gc-three-block-link.gc-hover-aubergine:hover{background:#401c42}.gc-three-block-link.gc-hover-darkblue:hover{background:#005aa9}.gc-three-block-link.gc-hover-lightred:hover{background:#e41822}.gc-three-block-link.gc-hover-darkred:hover{background:#8f2457}.gc-three-block-link.gc-hover-darkgrey:hover{background:#404041}.gc-three-block-link.gc-hover-medgrey:hover{background:#999085}.gc-three-block-link.gc-hover-lightgrey:hover{background:#f0efec}.gc-three-block-panel-noresults{padding:20px;position:relative}.gc-three-block-panel-noresults h4{text-align:center;font-weight:700;text-transform:uppercase;color:#000;padding:10px}.gc-three-block-content{padding:20px;min-height:auto;position:relative;margin:3px;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center}@media (min-width:1180px){.gc-three-block-content{min-height:160px}}.gc-three-block-content h4{font-weight:700;text-transform:uppercase;color:#000;padding:10px}.gc-three-block-content p{padding:10px}  </style>  <div class=""gc-three-block-panel"">  <div class=""gc-three-block-link gc-hover-aubergine"" id=""pnlFourBlock1"">  <div class=""gc-three-block-content"">  <h4>Fabricant automobile américain</h4>    <p>Nous avons conseillé un fabricant d&rsquo;accessoires automobiles quant à la conformité à la réglementation en matière de gestion responsable des produits relativement à l&rsquo;importation de ses produits dans l&rsquo;UE.</p>  </div>  </div>    <div class=""gc-three-block-link gc-hover-lightred"" id=""pnlFourBlock3"">  <div class=""gc-three-block-content"">  <h4>Actifs d&rsquo;infrastructure</h4>    <p>Nous avons agi à titre de conseillers juridiques locaux en matière d&rsquo;environnement pour un cabinet d&rsquo;avocats des États-Unis lorsqu&rsquo;un client établi dans ce pays a vendu des actifs de stockage de pétrole et gaz naturel au Royaume-Uni. Nos conseils ont porté sur les processus de prévente, et nous avons négocié des indemnités environnementales.</p>  </div>  </div>    <div class=""gc-three-block-link gc-hover-darkblue"" id=""pnlFourBlock4"">  <div class=""gc-three-block-content"">  <h4>Portefeuille de centrales électriques de pointe/h4&gt;</h4>    <p>Nous avons agi à titre de conseillers juridiques relativement aux volets de consentement et d&rsquo;environnement pour un cabinet d&rsquo;avocats des États-Unis. Le client de ce cabinet répondait à une demande de propositions visant un portefeuille de centrales électriques de pointe situées partout au Royaume-Uni.</p>  </div>  </div>  </div>    <div class=""gc-three-block-panel"">  <div class=""gc-three-block-link gc-hover-darkblue"" id=""pnlFourBlock5"">  <div class=""gc-three-block-content"">  <h4>Déchets</h4>    <p>Nous avons représenté un exploitant de carrière visé par une enquête de l&rsquo;Agence de l&rsquo;environnement en raison de la possession de terrains contaminés. Nous avons aidé notre client à éviter des mesures formelles d&rsquo;action coercitive et à rejeter la responsabilité sur d&rsquo;autres pollueurs.</p>  </div>  </div>    <div class=""gc-three-block-link gc-hover-aubergine"" id=""pnlFourBlock7"">  <div class=""gc-three-block-content"">  <h4>Promoteur logistique</h4>    <p>Nous avons conseillé un promoteur d&rsquo;installations industrielles et logistiques dans le cadre de l&rsquo;acquisition d&rsquo;un site fortement contaminé.</p>  </div>  </div>    <div class=""gc-three-block-link gc-hover-darkred"" id=""pnlFourBlock8"">  <div class=""gc-three-block-content"">  <h4>Fonds d&rsquo;investissement</h4>    <p>Nous avons conseillé les gestionnaires d&rsquo;un fonds d&rsquo;investissement sur leurs obligations en matière de production d&rsquo;un rapport annuel sur l&rsquo;environnement et de déclaration des émissions de gaz à effet de serre, et nous avons notamment effectué une vérification des rapports pour en assurer la conformité.</p>  </div>  </div>  </div>    <h2>Communiquez avec nos avocats en droit de l&rsquo;environnement au Royaume-Uni</h2>    <p><a href=""~/en/people/ben-stansfield/""><strong>Ben Stansfield</strong></a><br />  Associé</p>    <p><a href=""~/en/people/andrew-litchfield/""><strong>Andrew Litchfield</strong></a><br />  Associé</p>  ",GWLG.UK,1a0f69ce-d1e7-42e2-96d6-0dbdd570161e;3d0d2ba1-fe4c-43cd-81d1-f7265baecea0,064C02F0-FF64-42F8-8A71-C8DECE3600FD,NULL,0,1,NULL,"<p>Notre équipe du Royaume-Uni possède l&#39;expérience et les connaissances qui lui permettent de vous guider dans la complexité des lois et pratiques exemplaires en matière d&#39;environnement, à l&#39;échelle tant locale qu&#39;internationale.</p>  ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{090BDDCD-5C27-43A8-92CE-E53B8D46D789}|{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}
490,/Services/Patents/France,en-GB,6E7E9D72-F7BA-485F-BA57-0D11E63D93DD,France,France,Patent lawyers working across contentious and non-contentious matters in France.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Our team in France has a broad range of legal experience in all fields of intellectual property (IP). We work across a wide range of sectors including technology, luxury goods and retail, health and pharmaceuticals, automotive, and manufacturing.</strong></p>    <p>Appearing regularly before the French courts, we have a reputation for excellence, speed, and determination. With deep knowledge of French patent litigation procedures, we are recognised as a major player in the French market for patents and handling complex pan-European litigation and disputes, particularly those concerning the internet.</p>    <p>Our extensive experience in the management and enforcement of IP rights also allows us to support our clients in all aspects of non-contentious IP.</p>    <h3>Client work</h3>    <p>Some of our past projects include:</p>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Major+manufacturer|(headline3)US+biotechnology+company|(headline2)Pharmaceutical+companies|(copy1)Successfully+representing+a+major+French+manufacturer+of+professional+electrical+equipment+in+high+value+patent+litigation+before+the+French+courts.|(copy3)Representing+a+US+biotechnology+company+in+litigation+regarding+patented+software.|(copy2)Advising+pharmaceutical+on+multi-jurisdictional+regulatory+issues+and+patent+litigation.|(bghover2)colour-darkblue|(name)ThreeBlockWidget|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The French base of Gowling WLG repeatedly proves its might on knotty contentious and transactional briefs for first movers in the worlds of biotechnology, optical devices, telecommunications and blockchain. <cite>IAM Patent 1000</cite></p>  </blockquote>    <p>Céline Bey is consistently recognised in the market, with <em>IAM Patent 1000</em>&nbsp;naming her as one of the world&#39;s leading patent professionals. The team also ranks in <em>IAM Patent 1000</em> for litigation and transactions.</p>    <h3>Contact our team in France</h3>    <p>For further information on how we can help you with patents and IP&nbsp;please contact our team.</p>    <p><a href=""~/en/people/celine-bey/""><strong>Céline Bey</strong></a><br />  Partner</p>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}
491,/Services/Intellectual-Property-Law/France,fr-CA,A94B283C-5769-4B17-87BC-AA9AE56CB05E,France,France,"Our Paris IP team offers advice on litigation as well as a holistic service with pragmatic solutions for every sector. We can handle questions relating to competition and tax, and our advice often goes well beyond traditional IP issues.",NULL,NULL,"<p>We have a deep knowledge of French litigation procedures and the ability to handle complex Pan-European litigation and disputes. We take a pragmatic and strategic approach that pairs tailored legal solutions with commercially focused advice.</p>    <p>We have renowned experience in both contentious and non-contentious matters, both before the French courts and in the drafting and negotiating of contracts. Our team also has expertise in enforcing <abbr title=""intellectual property"">IP</abbr> rights worldwide, in particular in customs procedures. We offer a fully integrated service to assist you with all your <abbr title=""intellectual property"">IP</abbr> matters.</p>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The French base of Gowling WLG repeatedly proves its might on knotty contentious and transactional briefs... It considers itself akin to a boutique within a global law firm, leveraging international expertise while retaining flexibility and adapting to clients&#39; needs in real-time.<cite>IAM Patent 1000</cite></p>  </blockquote>    <h2>Awards and accolades in France</h2>    <ul>   <li>&#39;Litigation&#39;, <em>IAM Patent 1000 2020</em></li>   <li>&#39;Transactions&#39;, <em>IAM Patent 1000 2020</em></li>   <li>Trademarks (Céline Bey), <em>Managing IP Stars 2020</em></li>   <li>Silver Tier (Céline Bey), <em>IAM Patent 1000&nbsp;2020</em></li>  </ul>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3;c7845de1-72de-4e9d-bad4-859a8d00311c,08B9A44C-BB26-4255-9779-296A124FCBEE,NULL,0,1,t-white,<p>Your priorities and objectives are essential when it comes to protecting your intellectual property (IP) portfolio.</p>  ,NULL,NULL,NULL,NULL,NULL,NULL,NULL,34e72ec6-f31b-4dc7-9739-743b455f36a1;534b988b-50d8-4f76-b8eb-78e06461bb3a;8d059378-6b75-4105-b57d-3bafa12bb15d,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}|{405A6882-3B8C-40C3-9AB6-FDB671BF9A98}
492,/Services/FinTech-Law/Overview,en-GB,E5DB3F8E-848D-4328-8702-370D79EF3B9D,Overview,Overview,Experienced professionals in FinTech law. FinTech lawyers providing advice across a wide range of services.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The financial services industry is undergoing significant digital transformation. Constant innovation to meet rapidly changing customer demand has its challenges, but it also presents considerable opportunities. Our international cross-practice team has significant experience in the FinTech law space and has a spectrum of solutions to support your next enterprise.</strong></p>    <p>Our FinTech lawyers operate at the forefront of this evolving business landscape, helping companies - customers and service providers - understand and navigate the complex regulatory and operational challenges. Our team offers creative legal solutions paired with deep market knowledge, working with you to understand what you really need.</p>    <h2>What is FinTech?</h2>    <p>FinTech is financial technology or technology used specifically within the financial services sector. It can also describe businesses that provide financial services through technology or are technology providers to the financial services players, such as&nbsp;software, cloud services and mobile technology. Many products are designed to provide consumers with ease of use but FinTech also includes technologies for businesses as well.</p>    <p>We know that your business objectives will not stop at the border so neither do we. Our team operates internationally, spending significant time in both New York and Silicon Valley. We have deep experience advising companies of all sizes, whether financial institutions or technology providers. We also have experience in mentoring FinTech companies at accelerators and within shared workspaces like the FinTech Innovation Lab.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fFinTech%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Key+areas+in+FinTech+law|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>FinTech legal services</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Anti-money laundering</li>   <li><a href=""~/en/services/banking-finance/#overview"">Banking &amp; Finance</a></li>   <li><a href=""~/en/services/competition-law-antitrust/#overview"">Competition and antitrust</a></li>   <li>Crypto disputes</li>   <li><a href=""~/en/services/cyber-security-data-protection-law/"">Data protection and cyber security</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#overview"">Employment</a></li>   <li><a href=""~/en/services/financial-services-regulation/#overview"">Financial Services Regulation</a></li>   <li>Fraud detection and deterrence</li>   <li><a href=""~/en/services/intellectual-property-law/#overview"">Intellectual property</a></li>   <li><a href=""~/en/services/mergers-acquisitions/#overview"">M&amp;A</a></li>   <li><a href=""~/en/services/pensions/#overview"">Pensions</a></li>   <li>Platform structuring</li>   <li>Scale ups</li>   <li><a href=""~/en/services/financial-services-regulation/#overview"">Securities Regulation</a></li>   <li>Start ups</li>   <li>Supply chain</li>   <li><a href=""~/en/services/tax/#overview"">Tax</a></li>  </ul>    <h2>Meet our international team</h2>    <p>With offices in major jurisdictions across the world, our core teams in Canada and the UK offer comprehensive global legal advice across the FinTech space. For more information on how we can help you, contact one of our teams.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/fintech-law/#canada"">Canada</a></li>   <li><a href=""~/en/services/fintech-law/#uk"">UK</a></li>  </ul>  ",GWLG.Global,3eea8a58-b3f2-4e3c-87f4-8853720e2a67;3cb7b903-24be-4d44-b671-e9e9bb0f7efd,714E9C25-3DCE-4DAC-89A9-DD1D02F0EDA6,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D891B4E-1F61-437D-9FF8-FADA32E6C073}|{0B61C4E2-94F7-42B9-8D45-2C16D5C0CA19}
493,/Services/FinTech-Law/UK,en-GB,B10CD168-207F-4CFC-BFA8-F5A4A1564155,UK,UK,Experienced UK solicitors in FinTech law. FinTech lawyers providing advice across a wide range of services in the UK.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>In the UK, the very highest quality legal advice delivered through a partner-led service makes our FinTech team a popular choice with clients ranging from the world&#39;s leading financial institutions and public companies to private businesses and entrepreneurs.</strong></p>    <p>In a rapidly changing environment, you need the benefit of experience but also need a team with the breadth and depth to offer a fresh approach. Our lawyers are at the cutting edge of new and emerging opportunities with considerable market knowledge gained through an early and sustained presence in the FinTech sector.</p>    <p>From our platform structuring service (including investment, regulatory and tax support) to advice on employment issues and intellectual property (IP) matters, we provide joined-up support from every angle, giving you the time and freedom to focus on your enterprise.</p>    <p>We also have a dedicated Financial Services Regulatory team, which includes lawyers who have worked as regulators and in-house at financial firms &ndash; acting for a broad range of clients, from banks and asset managers, to brokers and corporates.</p>    <h2>Client work</h2>    <p>Some of our projects in the FinTech space include:</p>    <p>{^widget|(copy1)Trusted+adviser+to+Klarna+Bank+AB%2c+Europe%27s+highest-valued+private+FinTech+in+the+e-commerce+space%2c+regularly+advising+on+a+broad+range+of+regulatory+issues.|(bghover2)colour-darkblue|(copy3)Challenger+bank++Advised+a+challenger+bank+on+regulatory+aspects+of+the+launch+of+new+products+targeted+to+the+SME+market.|(copy2)Advised+on+the+structure+and+launch+of+a+new+FinTech+business+in+the+UK+whose+business+model+was+predicated+on+lending+fiat+money+to+cryptoasset+users%2c+using+their+cryptoassets+as+leverage.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)Klarna+Bank+AB|(headline3)Challenger+bank|(headline2)FinTech+start+up|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-lightred|(width)|(height)^}{^widget|(bghover1)colour-grey|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)TransferGo|(headline3)Milo+Croton+Limited|(headline2)Molten+Ventures+plc|(copy1)Advised+TransferGo%2c+the+payment+services+provider%2c+to+obtain+permission+from+the+Financial+Conduct+Authority+to+carry+on+business+as+a+payment+services+institution+in+the+UK.|(copy3)Advised+Milo+Croton+Limited+(t%2fa+HistoryMakr)%2c+a+UK+based+NFT+artwork+provider%2c+on+the+current+and+future+applicability+of+the+UK+AML+Regime+to+its+business+and+FCA+Registration+requirements.|(copy2)Advised+investment+company+Molten+Ventures+plc+in+relation+to+a+fundraise+conducted+by+way+of+placing+for+a+target+issue+of+%c2%a3100+million.+The+placing+was+oversubscribed+and+commitments+were+honoured.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightblue|(width)|(height)^}</p>    <h2>Awards and recognition</h2>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Working regularly with [the firm], we knew it understood our business and had the right blend of sector know-how and M&amp;A expertise to support us. <cite>- CEO, tech company</cite></p>  </blockquote>    <p>We are proud to be ranked by both <em>The Legal 500 </em>and<em> Chambers and Partners</em> for our work in the financial services sector.<em> The Legal 500</em> recognises our work in FinTech with David Brennan, Ian Mason, Jocelyn Paulley and Sushil Kuner named as key lawyers in the space.</p>    <p>We also frequently provide insight at seminars, webinars and industry conferences on financial services and FinTech topics.</p>    <h2>Contact our UK team</h2>    <p>Find out more about how we support our FinTech clients with the wide-ranging legal issues and opportunities in the sector.</p>    <p><a href=""~/en/people/david-brennan/#panel-button1""><strong>David Brennan</strong></a><br />  Partner, Co-Chair of Global Tech</p>    <p><a href=""~/en/people/alasdair-mckenzie/#panel-button1""><strong>Alasdair McKenzie</strong></a><br />  Partner</p>    <p><strong><a href=""~/en/people/kam-dhillon/"">Kam Dhillon</a></strong><br />  Principal Associate</p>    <p><a href=""~/en/people/sushil-kuner/#panel-button1""><strong>Sushil Kuner</strong></a><br />  Principal Associate</p>  ",GWLG.UK,3eea8a58-b3f2-4e3c-87f4-8853720e2a67;18f2c7d9-63ca-4a51-86f6-b722e3b2d834;6aaeb7d9-c65e-4c77-aa4d-2cf35e32c38c;0ccc4841-f8a1-4356-853e-e2ad6f7e230c,714E9C25-3DCE-4DAC-89A9-DD1D02F0EDA6,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D891B4E-1F61-437D-9FF8-FADA32E6C073}|{667DCF59-80C0-41BC-8DC0-E0DEA65B7E44}|{7FD50B05-0CA7-43E6-B11F-B63EC34397C9}|{9B40E9F4-4CA7-42F5-ACBF-F64D334E4377}
494,/Services/Artificial-Intelligence-Law/UAE,en-GB,CAE1C573-586C-4D34-B734-B5608501A475,UAE,UAE,insert,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,<p>insert</p>  ,GWLG.UAEDubai,NULL,09EF8B8D-EBB3-4643-89B1-7781CC96A384,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
495,/Services/FinTech-Law/Overview,fr-CA,E5DB3F8E-848D-4328-8702-370D79EF3B9D,Survol,Survol,"Le secteur des services financiers connaît un virage numérique important et s’il est vrai qu’innover afin de répondre aux demandes croissantes des clients peut poser des défis, cela peut aussi créer des possibilités dans ce domaine.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Le secteur des services financiers connaît un virage numérique important et s&rsquo;il est vrai qu&rsquo;innover afin de répondre aux demandes croissantes des clients peut poser des défis, cela peut aussi créer des possibilités dans ce domaine. Pour soutenir vos projets à venir, les avocats de notre équipe internationale et intersectorielle possèdent une vaste expérience de l&rsquo;espace juridique des technologies financière ou Fintech, et vous proposent tout un éventail de solutions.</strong></p>    <p>À l&rsquo;avant-garde même de ce paysage d&rsquo;affaires émergent, notre groupe FinTech aide les sociétés, les clients et les fournisseurs de services à naviguer dans les méandres réglementaires et opérationnels complexes du secteur des technologies financières. Les membres de notre équipe offrent des solutions juridiques innovantes grâce à leurs connaissances exhaustives du marché, et ils sont à vos côtés pour saisir vos besoins réels.</p>    <p>Alors que vos visées commerciales vont au-delà des frontières, il en va de même pour nos services. En effet, notre équipe agit à l&rsquo;échelle internationale, et passe autant de temps à New&nbsp;York que dans la Silicon Valley. Qu&rsquo;il s&rsquo;agisse d&rsquo;institutions financières ou de fournisseurs de technologies, nous avons une longue feuille de route en matière de services-conseils auprès de sociétés, petites et grandes. Notre expérience couvre également le mentorat des sociétés de FinTech dans les accélérateurs et dans les espaces de travail partagés comme le <em>FinTech Innovation Lab</em>.</p>    <h2>Que signifie FinTech?</h2>    <p>Il s&rsquo;agit des technologies financières utilisées au sein du secteur des services financiers. Le mot peut également décrire les entreprises qui fournissent des services financiers au moyen de technologies, ou qui fournissent, à l&rsquo;intention des acteurs des services financiers, des technologies comme l&rsquo;Internet, des logiciels, des services d&rsquo;infonuagique ou la mobilité. De nombreux produits sont conçus de façon que les consommateurs puissent les utiliser facilement; toutefois, la FinTech inclut également des technologies pour les entreprises.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fFinTech%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)Nos+services+juridiques+dans+le+domaine+des+FinTech+|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Volets juridiques des FinTech</h2>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Chaîne d&rsquo;approvisionnement</li>   <li><a href=""~/fr/services/competition-law-antitrust/#overview"">Concurrence et lois antitrust</a></li>   <li>Détection des fraudes et dissuasion</li>   <li>Différends liés à la cryptomonnaie</li>   <li><a href=""~/fr/services/banking-finance/#overview"">Droit bancaire et finance</a></li>   <li><a href=""~/fr/services/commercial/#overview"">Droit commercial</a></li>   <li><a href=""~/fr/services/employment-labour-equalities/#overview"">Droit de l&rsquo;emploi</a></li>   <li><a href=""~/fr/services/tax/#overview"">Fiscalité</a></li>   <li><a href=""~/fr/services/mergers-acquisitions/#overview"">Fusions et acquisitions</a></li>   <li>Lutte contre le recyclage des produits de la criminalité</li>   <li><a href=""~/fr/services/intellectual-property-law/#overview"">Propriété intellectuelle</a></li>   <li><a href=""~/fr/services/cyber-security-data-protection-law/"">Protection des données et cybersécurité</a></li>   <li><a href=""~/fr/services/pensions/#overview"">Régimes de retraite</a></li>   <li>Réglementation</li>   <li><a href=""~/fr/services/financial-services-regulation/#overview"">Services financiers et réglementation des valeurs mobilières</a></li>   <li>Sociétés en démarrage</li>   <li>Sociétés en expansion</li>   <li>Structuration de plateformes</li>  </ul>  ",GWLG.Global,3464c653-fa4d-43dd-99c9-db0a2dd57faf;af5005a2-4ec9-49ba-b7bd-262bb191b111,714E9C25-3DCE-4DAC-89A9-DD1D02F0EDA6,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{7C2CA6F8-1321-40DF-A3BF-63A7F877EE95}|af5005a2-4ec9-49ba-b7bd-262bb191b111
496,/Services/FinTech-Law/UK,fr-CA,B10CD168-207F-4CFC-BFA8-F5A4A1564155,Royaume-Uni,Royaume-Uni,"Au Royaume-Uni, la très haute qualité des conseils juridiques fournis par un service dirigé par des associés fait de notre équipe FinTech un choix populaire auprès de clients allant des principales institutions financières et sociétés ouvertes du monde aux entreprises privées et aux entrepreneurs.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Au Royaume-Uni, la très haute qualité des conseils juridiques fournis par un service dirigé par des associés fait de notre équipe FinTech un choix populaire auprès de clients allant des principales institutions financières et sociétés ouvertes du monde aux entreprises privées et aux entrepreneurs.</strong></p>    <p>Dans un environnement en évolution rapide, il vous faut non seulement compter sur l&rsquo;expérience, mais aussi vous fier à une équipe dotée de l&rsquo;envergure et de la profondeur nécessaires pour vous offrir une approche nouvelle. Nos avocats sont à l&rsquo;affût d&rsquo;occasions nouvelles et émergentes et, grâce à leur présence précoce et continue dans le secteur des FinTech, ils ont acquis une connaissance exhaustive du marché.</p>    <p>Depuis notre service de structuration de plateforme (comprenant l&rsquo;investissement ainsi que le soutien réglementaire et fiscal) jusqu&rsquo;aux conseils sur les questions d&rsquo;emploi et de propriété intellectuelle (PI), nous fournissons un soutien cohérent sous tous les angles, ce qui vous donne le temps et la liberté de vous concentrer sur vos affaires.</p>    <p>Nous disposons également d&rsquo;une équipe consacrée à tous les volets de la réglementation des services financiers, et certains de ses membres ont travaillé à titre d&rsquo;autorités chargées de la réglementation ainsi qu&rsquo;au sein d&rsquo;entreprises financières. Ils ont notamment agi pour le compte d&rsquo;un vaste éventail de clients&nbsp;: des banques, des gestionnaires d&rsquo;actifs, des courtiers et des entreprises.</p>    <h2>Mandats représentatifs</h2>    <p align=""left"">Voici certains de nos projets dans le secteur des FinTech&nbsp;:</p>    <p align=""left"">{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Klarna+Bank+AB|(headline3)Petite+banque+de+d%c3%a9tail+|(headline2)+Soci%c3%a9t%c3%a9+en+d%c3%a9marrage+du+secteur+FinTech+|(copy1)Conseillers+juridiques+de+Klarna+Bank+AB%2c+soci%c3%a9t%c3%a9+ferm%c3%a9e+de+FinTech+la+plus+valoris%c3%a9e+d%e2%80%99Europe+dans+le+domaine+du+commerce+%c3%a9lectronique%2c+quant+%c3%a0+un+large+%c3%a9ventail+de+questions+r%c3%a9glementaires.|(copy3)Conseillers+juridiques+d%e2%80%99une+petite+banque+de+d%c3%a9tail+relativement+aux+aspects+r%c3%a9glementaires+li%c3%a9s+au+lancement+de+nouveaux+produits+ciblant+le+march%c3%a9+des+PME.|(copy2)Conseillers+juridiques+(structuration+et+lancement)+d%e2%80%99une+nouvelle+entreprise+de+FinTech+au+R.-U.%2c+dont+le+mod%c3%a8le+d%e2%80%99affaires+reposait+sur+le+pr%c3%aat+de+monnaie+%c3%a0+cours+forc%c3%a9+aux+utilisateurs+de+cryptoactifs+et+l%e2%80%99utilisation+de+ses+cryptoactifs+comme+levier%2c+y+compris+le+soutien+r%c3%a9glementaire.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-grey|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)TransferGo|(headline3)Milo+Croton+Limited|(headline2)Molten+Ventures+plc|(copy1)Conseillers+juridiques+de+TransferGo%2c+fournisseur+de+services+de+paiement%2c+visant+l%e2%80%99obtention+de+l%e2%80%99autorisation+de+faire+affaire+en+tant+qu%e2%80%99institution+de+services+de+paiement+au+Royaume-Uni+de+la+part+de+la+Financial+Conduct+Authority.|(copy3)Conseillers+juridiques+de+Milo+Croton+Limited+(sous+le+nom+de+HistoryMakr)%2c+fournisseur+au+Royaume-Uni+d%e2%80%99%c5%93uvres+d%e2%80%99art+sous+forme+de+jetons+non+fongibles%2c+quant+%c3%a0+l%e2%80%99applicabilit%c3%a9+actuelle+et+future+du+r%c3%a9gime+AML+du+R.-U.+sur+ses+activit%c3%a9s+et+sur+les+exigences+d%e2%80%99inscription+%c3%a0+la+FCA.|(copy2)Conseillers+juridiques+de+Molten+Ventures+plc%2c+soci%c3%a9t%c3%a9+d%e2%80%99investissement%2c+dans+le+cadre+d%e2%80%99une+lev%c3%a9e+de+fonds+par+voie+de+placement+visant+une+%c3%a9mission+cible+de+100+M%c2%a3.+Les+engagements+relatifs+%c3%a0+ce+placement+sursouscrit+ont+%c3%a9t%c3%a9+honor%c3%a9s%2c+ce+qui+a+permis+de+lever+110+M%c2%a3.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightblue|(width)|(height)^}</p>    <h2>Prix et distinctions</h2>    <p align=""center"">&laquo;&nbsp;Nous travaillons régulièrement avec le cabinet, et nous savons que ses avocats comprennent nos activités et qu&rsquo;ils ont le savoir-faire sectoriel et les connaissances en F&amp;A pour nous aider.&nbsp;&raquo;</p>    <p style=""text-align: center;""><em>- Chef de la direction, société technologique</em></p>    <p>Nous sommes fiers de figurer aux classements de <em>The Legal 500 </em>et de<em> Chambers and Partners</em> pour notre travail dans le secteur des services financiers. De plus, <em>The Legal 500</em> reconnaît notre savoir-faire en FinTech, en classant notamment David Brennan, Ian Mason, Jocelyn Paulley et Sushil Kuner dans cette catégorie.</p>    <p>Par ailleurs, nous abordons fréquemment des sujets portant sur la FinTech et les services financiers dans le cadre de séminaires, de webinaires et de conférences de l&rsquo;industrie.</p>    <h2>Communiquez avec notre équipe du Royaume-Uni</h2>    <p>Pour en savoir plus sur la façon dont nous appuyons nos clients du secteur de la FinTech quant aux aspects juridiques et aux occasions d&rsquo;affaires dans ce secteur, communiquez avec l&rsquo;une des personnes suivantes&nbsp;:</p>    <p><a href=""~/fr/people/david-brennan/#panel-button1""><strong>David Brennan</strong></a><br />  Associé, co-chef du groupe mondial de technologie</p>    <p><a href=""~/fr/people/alasdair-mckenzie/#panel-button1""><strong>Alasdair McKenzie</strong></a><br />  Associé</p>    <p><a href=""~/fr/people/sushil-kuner/#panel-button1""><strong>Sushil Kuner</strong></a><br />  Avocate principale</p>    <p><a href=""~/fr/people/kam-dhillon/#panel-button1""><strong>Kam Dhillon</strong></a><br />  Avocate principale</p>  ",GWLG.UK,3eea8a58-b3f2-4e3c-87f4-8853720e2a67;18f2c7d9-63ca-4a51-86f6-b722e3b2d834;6aaeb7d9-c65e-4c77-aa4d-2cf35e32c38c;0ccc4841-f8a1-4356-853e-e2ad6f7e230c,714E9C25-3DCE-4DAC-89A9-DD1D02F0EDA6,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D891B4E-1F61-437D-9FF8-FADA32E6C073}|{667DCF59-80C0-41BC-8DC0-E0DEA65B7E44}|{7FD50B05-0CA7-43E6-B11F-B63EC34397C9}|{9B40E9F4-4CA7-42F5-ACBF-F64D334E4377}
497,/Services/Employment-Labour-Equalities/China,en-GB,328C39F9-C0A8-4A96-B270-C69CC4F56D25,China,China,"Employment lawyers operating in China, advising across a wide variety of matters. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>The Corporate and Commercial Team in China specialises in various non-contentious matters including employment law. We advise clients in a variety of regulated industries including life sciences, advanced manufacturing, automotive, food and beverage, cosmetics and the Internet. Clients value the team&#39;s commitment to providing solutions that are not only practical but also commercial, as well as its extensive local knowledge and sensitivity to constantly changing rules. The team&nbsp;is fluent in English, French, Mandarin, and Cantonese.</p>    <h3>Our employment law services in China</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Drafting and negotiating employment contracts</li>   <li>Preparing internal policies and HR documentation</li>   <li>Business as usual HR issues</li>   <li>Employment contracts</li>   <li>Employment litigation</li>   <li>Immigration assistance for expatriates</li>  </ul>    <h3>Client work</h3>    <p>Some of our past and current projects include:</p>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Luxury+car+manufacturer|(headline3)Chemical+company|(headline2)Advanced+material+manufacturer|(copy1)Assisting+a+luxury+car+manufacturer+in+drafting+employment+contracts+for+the+hiring+of+its+senior+officials%2c+as+well+as+preparing+documentation+for+its+expatriates+to+obtain+Chinese+work+permit+and+resident+permit.+|(copy3)Carrying+out+internal+investigations+for+an+international+chemical+company+with+regard+to+a+whistle+blower%27s+reporting+of+company+officials%27+corruption+issues.|(copy2)Assisting+an+advanced+material+manufacturer+in+preparing+its+set+of+employment+documentation+including+offer+letter%2c+employment+contract%2c+termination+letter+and+internal+policies%2c+etc.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(name)ThreeBlockWidget|(Headline1)Audio+equipment+brand|(Copy1)Assisting+a+large+audio+equipment+brand+in+establishing+its+internal+IT+policy+to+regulate+employees+in+order+for+the+client+to+comply+with+China%27s+cyber+security+and+data+protection+laws.|(LinkText1)Read+more|(BgHover1)colour-darkblue|(Headline2)European+motorcycle+brand|(Copy2)Assisting+a+leading+European+motorcycle+brand+in+drafting+its+employment+handbook+in+order+to+establish+internal+employment+policies+and+facilitate+employee+management+in+accordance+with+Chinese+laws+and+local+labour+rules.|(LinkText2)Read+more|(BgHover2)colour-darkred|(Headline3)Architecture+firm|(Copy3)Assisting+a+global+architecture+firm+to+negotiate+and+to+provide+practical+solutions+in+a+ultra-difficult+senior+staff+employment+contract+termination.+|(LinkText3)Read+more|(BgHover3)colour-aubergine|(widget_displayname)Three+Block+Widget^}</p>    <h3>Contact our team in China</h3>    <p>For further advice on employment and HR matters, please contact our team.</p>    <p><a href=""~/en/people/le-rong/""><strong>Le Rong</strong></a><br />  Legal Director</p>  ",GWLG.China,4bcdddc1-a500-4dd4-ac52-fd05abee5ef7,D8837737-40D2-4472-8A9E-BA4101EC2105,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{9CE439C1-2253-4714-81A2-A2EB6B9064A2}
498,/Services/Trade-Secrets-Law/Overview,en-GB,A223BB64-D418-4F00-8F32-02055578364A,Overview,Overview,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Developing a trade secrets policy is an essential aspect of creating effective protection and providing the necessary platform for enforcement, if the need arises.</strong></p>    <p>Our international cross-disciplinary team of trade secrets lawyers provide a seamless bundle of services meeting your needs for the protection of your sensitive business information - from the creation and implementation of trade secrets policies to global enforcement.</p>    <p>The success of any business depends on its ability to distinguish itself from the competition through the value or individuality of its ideas. Amid the frenetic pace of innovation in today&#39;s global economy, the protection of such ideas is as critical as ever. Indeed, trade secrets have become <a href=""~/en/insights-resources/podcasts/2020/blowing-away-the-competition-ip-at-dyson/"">an executive-level priority for companies across all sectors</a>.</p>    <p>A trade secrets strategy should be a critical part of any IP and business plan. It allows you to identify and develop valuable and confidential information relating to your business offering and effectively implement the policies and processes, and deploy the required resources, needed to maintain and extract value from it. Having a robust trade secrets policy also allows you to identify and enforce any misappropriation or misuse of those trade secrets.</p>    <p>Whether you are looking to protect your own trade secrets from being stolen, if your secrets have been misused or if someone else is bringing a trade secret claim against you, we can help guide you through trade secrets law around the world and across a number of key sectors. Our trade secrets lawyers will help you put a trade secrets policy at the heart of your organisation&#39;s overall IP strategy enabling you to fully profit from your innovations.</p>    <h3>Trade secrets legal services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Contract management and employee agreements</li>   <li><a href=""~/en/services/cyber-security-data-protection-law/#overview"">Data privacy and cyber security</a></li>   <li><a href=""~/en/services/employment-labour-equalities/#overview"">Employment</a></li>   <li><a href=""~/en/services/intellectual-property-law/overview/#global"">Intellectual property</a></li>   <li>NDAs and confidential agreements</li>   <li>Trade secret litigation, enforcement and recovery</li>   <li>Trade secrets policies, audits and training</li>   <li>Trade secrets transaction&nbsp;and licensing</li>   <li>Relationship management</li>  </ul>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Gowling WLG&#39;s global IP team is a &quot;finely tuned machine&quot; for its strength and ability to collaborate across the firm&#39;s offices and provide a &quot;joined-up global service&quot; for its clients.<cite>IAM Patent 1000</cite></p>  </blockquote>    <p>Some of our past and current projects include:</p>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)Global+pharmaceutical+company|(Copy1)Advising+a+major+global+pharmaceutical+company+on+its+strategy+for+trade+secrets+for+artificial+intelligence%2c+best+practice+for+the+protection+of+trade+secrets+and+related+contractual+terms.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Clinical+stage+gene+therapy+company|(Copy2)Advising+a+clinical+stage+gene+therapy+company+on+trade+secrets+protection%2c+including+preparation+of+a+comprehensive+corporate+trade+secrets+policy+and+a+training+module+in+order+to+roll+out+the+policy+with+employees.|(LinkText2)Read+more|(BgHover2)colour-darkblue|(Headline3)Global+bank|(Copy3)Advising+a+global+bank+on+protection+of+trade+secrets+and+on+various+regulatory+issues+that+can+arise+upon+breach+of+a+bank%27s+trade+secrets+information+and+on+steps+to+mitigate+potential+breaches.|(LinkText3)Read+more|(BgHover3)colour-lightred|(widget_displayname)Three+Block+Widget^}{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Audio+technology+business|(headline3)Spray+nozzle+technology|(headline2)Technologies+conglomerate|(copy1)Advising+a+highly+innovative+audio+technology+business+on+its+corporate+trade+secrets+policy+and+related+policies+(data+privacy%3b+information+security)+for+its+staff+handbook.|(copy3)Advising+a+division+of+a+world+leader+in+spray+nozzle+technology+on+protection+of+trade+secrets+in+Europe+and+France+in+connection+with+the+development+of+its+innovative+technology+for+a+drying+process+with+uses+in+various+fields+ranging+from+food+and+chemicals+to+pharmaceuticals.|(copy2)Advising+a+major+technologies+conglomerate+on+structuring+a+trade+secrets+audit+and+trade+secrets+management+over+a+newly+acquired+business.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkred|(width)|(height)^}</p>    <h3>Meet our international team</h3>    <p>Our Trade Secrets team forms part of our world-leading IP group to create a holistic service for clients in every sector and jurisdiction. From the creation to the exploitation of inventions, designs, brands and all manner of creative assets. Find out more about our trade secrets work in our key jurisdictions.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/trade-secrets-law/#canada"">Canada</a></li>   <li><a href=""~/en/services/trade-secrets-law/#china"">China</a></li>   <li><a href=""~/en/services/trade-secrets-law/#france"">France</a></li>   <li><a href=""~/en/services/trade-secrets-law/#germany"">Germany</a></li>   <li><a href=""~/en/services/trade-secrets-law/#uae"">UAE</a></li>   <li><a href=""~/en/services/trade-secrets-law/#uk"">UK</a></li>  </ul>  ",GWLG.Global,a198222e-fff0-47b3-bbca-b7c042e76a69;a422060d-6f9d-4027-8e91-d7badbd87370,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{AC4471A4-8672-459B-852B-CC43B6933D45}|{E889ADA3-B953-4566-93A9-7544DE6172B7}
499,/Services/Trade-Secrets-Law/Canada,en-GB,9323F96E-A4DA-4401-8EF8-6464F287D8B9,Canada,Canada,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The success of a business depends on it distinguishing itself from the competition. Giving that value or having that edge that others do not possess. This includes know-how, trade secrets, patents and other forms of IP. Especially in Canada, where trade secrets law and protection is based on common law and civil law principles, companies need to know how best to secure protection. And without a formal process to protect trade secrets, you need to consider different ways to keep sensitive business information confidential.</strong></p>    <p>Our team of professionals in Canada are highly experienced in guiding clients in protecting company secrets and creating trade secrets policies that are right for your business strategy. To help our clients of all sizes manage the growing risks we offer a package of services and tools to help readily identify, track, maintain, and extract value from their trade secrets and other proprietary information. Our services also help to identify and enforce any misappropriation or mis-use of such information.</p>    <h3>Awards and recognition</h3>    <p>We are proud to be recognised by an array of legal directories in the IP space. <em>IAM Patent 1000</em> names our team across litigation, transactions and prosecutions categories, with 13 of our professionals also named as Leading Patent Professionals. <em>Chambers and Partners</em> ranks us in Band 1<em> in the </em>&quot;Intellectual Property&quot; and &quot;Intellectual Property Litigation&quot; categories in Canada. <em>The Canadian Legal Lexpert Directory</em> ranks our team across regional firm rankings for &quot;Intellectual Property&quot; as well as 34 of our professionals in the individual rankings.</p>    <h3>Contact our team in Canada</h3>    <p><strong><a href=""~/en/people/anita-nador/"" target=""_blank"">Anita Nador</a></strong><br />  Partner</p>  ",GWLG.Canada,a422060d-6f9d-4027-8e91-d7badbd87370,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E889ADA3-B953-4566-93A9-7544DE6172B7}
500,/Services/Entertainment-Sports-Law/Overview,en-GB,CC1C3A06-D6EF-4A05-A33E-9570E5DCDF27,Overview,Overview,"The entertainment and sports industries continue to evolve at a rapid pace, with artists, talent, athletes and the companies that interact with them facing unprecedented challenges and exploring new possibilities every day. ",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>The entertainment and sports industries continue to evolve at a rapid pace, with artists, talent, athletes and the companies that interact with them facing unprecedented challenges and exploring new possibilities every day. With one of the world&#39;s leading entertainment and sports law groups, we offer a tailored, comprehensive full suite of legal services to clients doing business in the entertainment and sports industries.</p>    <p>Whether we are providing strategic advice on business deal terms or counsel on ever-changing industry standards, we have the specific skills, resources and contacts to protect your interests. Whether your business focus is directly or indirectly related to the entertainment and sports industries, you can count on us to help you tackle any legal issue that comes your way.</p>    <p>From innovative technologies and platforms to new regulations and industry players, the Gowling WLG team is here to help you navigate complex legal issues, negotiate and draft your deals and maximize your success.</p>    <h3>Entertainment and sports law services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Advising on deal terms and structures</li>   <li><a href=""~/en/services/commercial/#overview"">Commercial</a></li>   <li>Counselling on industry standards worldwide</li>   <li>Drafting and negotiating agreements</li>   <li><a href=""~/en/services/employment-labour-equalities/#overview"">Employment law</a></li>   <li>Estate planning</li>   <li><a href=""~/en/services/banking-finance/#overview"">Finance</a>, <a href=""~/en/services/tax/#overview"">tax</a> and insolvency</li>   <li>Health &amp; safety</li>   <li><a href=""~/en/services/intellectual-property-law/overview/#global"">Intellectual property</a>, including <a href=""~/en/services/trademarks-brands-designs/#overview"">copyright, trademarks</a> and <a href=""~/en/services/patents/#overview"">patents</a></li>   <li><a href=""~/en/services/litigation-dispute-resolution/#overview"">Litigation &amp; dispute resolution</a></li>   <li>M&amp;A, joint ventures and restructuring</li>   <li>Managing rights acquisitions and dispositions</li>   <li>Media and advertising</li>   <li>Metaverse issues/<a href=""~/en/services/fintech-law/#overview"">Non-fungible tokens (NFTs)</a></li>   <li>Public-private partnerships relating to sports infrastructure</li>   <li><a href=""~/en/services/real-estate/#overview"">Real estate</a></li>   <li>Regulatory issues</li>   <li>Sponsorship and marketing</li>  </ul>    <h3>Meet our international team</h3>    <p>As entertainment and sports business is often global in nature, we are able to leverage our extensive network of professionals across Canada, Europe, Asia and the Middle East, applying local legal knowledge to deliver innovative and commercial solutions quickly and efficiently.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/entertainment-sports-law/#canada"">Canada</a></li>   <li><a href=""~/en/services/entertainment-sports-law/#uk"">UK</a></li>  </ul>  ",GWLG.Global,38313a1e-07be-4fe8-b61e-008316e36186;334a7f26-44f4-4a26-9d0d-0ddd5e499b12;04b8437f-d586-44f4-be8e-17baff70c905,1262C308-04FD-4608-835B-A7950ABA17BE,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{01F3B48C-972C-434D-B7E2-6EDED2EA05AC}|{509B877A-7C43-4EB2-B646-43EFBAA46FA0}|{3789FBDD-B2CF-407D-92F8-845281F23788}
501,/Services/Entertainment-Sports-Law/UK,en-GB,36D00123-800F-49F1-8BB6-5FFD3715B867,UK,UK,"International full-service law firm advising on entertainment and sports law, including the delivery of the Birmingham 2022 Commonwealth Games.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The commercial value of sports clubs, persons and brands is ever increasing meaning day-to-day commercial and strategic arrangements like image rights, events and brand protection need managing alongside the delivery of ambitious projects such as sponsorships and stadia developments.</strong></p>    <p>You need a trusted legal adviser to help you achieve these goals and navigate the legal challenges (old and new) faced by the sports sector. We have the sector experience and global network to support your business in doing this and to help you achieve commercial success.</p>    <p>Success in sport is achieved with a high-performing team, with those taking centre stage supported by technical excellence behind the scenes. Our team of proactive, commercially focussed lawyers regularly advise sports agencies, clubs, teams, governing bodies, regulators, sponsors, sportspeople, investors and wider stakeholders, using our sector insight and pragmatic approach to become a trusted and valued part of their team.</p>    <p>We are proud to have sports lawyers on our team well versed in matters such as stadium redevelopment, sponsorship, naming rights, regulatory compliance, funding, brand protection, mergers and acquisitions, group reorganisations, joint ventures, employment and disputes. We are able to offer a comprehensive sports law service, using our experience to anticipate challenges and provide clear advice and solutions.</p>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">We&#39;ve used Gowling WLG for a number of projects &hellip;every time we have received nothing but a slick, detailed and professional service. <cite>James Williamson, The Sport Partnership</cite></p>  </blockquote>    <p>We are proud to advise some of the biggest brands, teams and organisations in the global sport business. Some of our past and current projects include:</p>    <p>{^widget|(copy1)We+are+the+exclusive+Official+Legal+Advisers+to+the+Birmingham+2022+Commonwealth+Games%2c+advising+the+Organising+Committee+on+a+range+of+services+including+corporate+governance%2c+procurement%2c+brand+protection+and+general+commercial+matters.|(bghover2)colour-darkblue|(copy3)Advising+FIFA+World+Cup+on+IP+clearance%2c+registration+and+enforcement+surrounding+the+World+Cup+tournaments.|(copy2)Acting+for+E20+Stadium+LLP+on+a+dispute+brought+by+West+Ham+United+Football+Club+in+relation+to+the+number+of+seats+WHU+claimed+it+was+entitled+to+at+the+former+Olympic+Stadium%2c+under+the+terms+of+a+99+year+Concession+Agreement.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)Birmingham+2022+Commonwealth+Games|(headline3)FIFA+World+Cup|(headline2)E20+Stadium|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-darkred|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <p>As a full-service law firm, we are frequently recognised in the market for our experience and knowledge. We are ranked across multiple categories by the legal directories, including Band 1 for Corporate/M&amp;A and Intellectual Property by <em>Chambers &amp; Partners</em>.</p>    <p>We are proud to be the Official Legal Advisers and first sponsor for the Birmingham 2022 Commonwealth Games, as well as first sponsor for Team England and Official Legal Advisers to Commonwealth Games England.</p>    <h3>Contact our team in the UK</h3>    <p><strong><a href=""~/en/people/sarah-riding/"">Sarah Riding</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/anurag-ragi-singh/"">Ragi Singh</a></strong><br />  Partner</p>  ",GWLG.UK,334a7f26-44f4-4a26-9d0d-0ddd5e499b12;04b8437f-d586-44f4-be8e-17baff70c905,1262C308-04FD-4608-835B-A7950ABA17BE,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{509B877A-7C43-4EB2-B646-43EFBAA46FA0}|{3789FBDD-B2CF-407D-92F8-845281F23788}
502,/Services/Trade-Secrets-Law/China,en-GB,A0EE5F3B-CE65-4ADA-B956-924F6B7E407D,China,China,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>As your company grows, it can be difficult to identify and manage the distinguishing factors that set your business apart from the competition.</strong></p>    <p>As stated in the China Civil Code, which came into force on 1 January 2021, trade secrets are a type of intellectual property right and shall therefore be protected by intellectual property laws. But the current China&#39;s legal system of trade secrets consists of various laws, local regulations and court interpretation.</p>    <p>Our IP team in China is here to help you navigate through to protect your trade secrets and &quot;know how&quot; to ensure you sustain your edge in the marketplace. Our&nbsp;Beijing and Shanghai filing and prosecution practices are backed by the systems and experience that comes with managing IP portfolios for some of the largest companies in the world. Our corporate/commercial lawyers based in Guangzhou, work together with our IP professionals to overcome the challenges of doing business in China and achieve your business goals.</p>    <h3>Awards and recognition</h3>    <p>Our team in China is ranked by <em>IAM Patent 1000</em> in the firm rankings for the region with Elliot Papageorgiou also recognised as a Leading Patent Professional for litigation.</p>    <h3>Contact our team in China</h3>    <p><strong><a href=""~/en/people/ivy-liang/"">Ivy Liang</a></strong><br />  Legal Director</p>  ",GWLG.China,49370d7b-1121-45da-90e6-96dcc50c1710,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A57A1C6B-A0A8-42B1-A486-547F584C5F82}
503,/Services/Trade-Secrets-Law/France,en-GB,78A2613C-03C2-487F-92BF-D63F33848C78,France,France,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>While trade secrets are valuable assets for your business, if they are not appropriately protected their value can quickly vanish. France has implemented the Trade Secrets Directive (EU Directive 2016/943) and provides legislation for the protection of undisclosed know-how and business information.</strong></p>    <p>Our team of lawyers in France are highly experienced in helping businesses navigate the complex landscape of trade secrets law to create effective protection and provide a platform for enforcement.</p>    <h3>Awards and recognition</h3>    <p>Our team is consistently ranked by <em>IAM Patent 1000 </em>in the litigation and transactions categories.</p>    <p>Céline Bey, head of our IP practice in France, is also regularly recognised by the IP directories for her experience and is named as a Leading Patent Professional by <em>IAM Patent 1000 </em>for both litigation and transactions.</p>    <h3>Contact our team in France</h3>    <p><strong><a href=""~/en/people/celine-bey/"">Céline Bey</a></strong><br />  Partner</p>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}
504,/Services/Trade-Secrets-Law/UAE,en-GB,F405F67F-2580-452E-8070-55A03A7ED5F3,UAE,UAE,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>There are many ways and laws for trade secret protection in the UAE, though there is no specific nor comprehensive trade secrets law.</strong></p>    <p>Our UAE team, based in Dubai, offers advanced trade secrets solutions throughout the Middle East with a service tailored to your needs.</p>    <p>With extensive knowledge across a wide range of sectors, our team will help you to overcome the complex obstacles by delivering practical, cost-effective legal advice focused on growing and protecting your business.</p>    <h2>Awards and recognition</h2>    <p><em>IAM Patent 1000</em> names our team in the UAE in its firm rankings, as well as Jon Parker and Tamara El Shibib as Leading Patent Professionals. Jon Parker is consistently ranked in the leading IP directories including <em>MIP</em>'s &quot;IP Stars&quot; and <em>IAM Global Leaders</em>. In its global edition, <em>Chambers &amp; Partners</em> ranks him in Band 1 for &quot;Intellectual Property&quot;, describing him as &quot;distinguished name in the market&quot;.</p>    <p>Managing Intellectual Property named the team as the &quot;Middle East Firm to watch&quot; in 2019</p>    <h3>Contact our team in the UAE</h3>    <p><a href=""~/en/people/jon-parker/""><strong>Jon Parker</strong></a><br />  Partner</p>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}
505,/Services/Trade-Secrets-Law/UK,en-GB,84E5E8D1-1DD9-4031-8E6B-FFB05179FDFB,UK,UK,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Trade secrets have become an increasing focal point in the innovation ecosystem. Businesses across sectors need to take a hard look at their existing trade secret management and protection policies. This includes adapting to evolving best practice and case law following implementation of the EU Trade Secrets Directive and Brexit, ensuring maximum protection for newly important assets: data and data analysis (such as AI).</strong></p>    <p>A robust trade secrets strategy, enables your business to identify and manage your most valuable intangible assets and protect them from both internal and external threats of misappropriation . Our team of trade secrets lawyers in the UK will help you to create and implement the policies and processes needed to protect all forms of your IP.</p>    <p>We have a deep understanding of what it takes to protect your trade secrets, offering a tailored suite of services, including audits and advice, drafting of policies, NDA and other agreements, training of your teams, enforcement and crisis response &ndash; all supported by multi-disciplinary teams from across our full-service law firm.</p>    <h3>Awards and recognition</h3>    <p><em>IAM Patent 1000</em> regularly recognises our team in the litigation and transactions categories, as well as naming several of our lawyers as Leading Patent Professionals. <em>The Legal 500</em> ranks our team in Band 1 for &quot;Intellectual Property&quot; in the West Midlands and Band 2 for &quot;Intellectual Property: Patents (Contentious and Non-Contentious)&quot; in London. <em>Chambers and Partners</em> ranks the team in Band 2 for &quot;Intellectual Property&quot; and &quot;Patent Litigation&quot; in London and Band 1 for &quot;Intellectual Property&quot; in National Leaders and Midlands.</p>    <h3>Contact our team in UK</h3>    <p><strong><a href=""~/en/people/huw-evans/"">Huw Evans</a></strong><br />  Partner, Head of Patent Litigation (UK)</p>    <p><strong><a href=""~/en/people/matt-hervey/#panel-button1"">Matt Hervey</a></strong><br />  Partner, Head of Artificial Intelligence (UK)</p>  ",GWLG.UK,a21f77d5-b08e-4dac-9b34-efe5dddc9db1;a198222e-fff0-47b3-bbca-b7c042e76a69,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}|{AC4471A4-8672-459B-852B-CC43B6933D45}
506,/Services/Trade-Secrets-Law/Germany,en-GB,4958E118-FBB1-4AF2-B3A6-CF33E8F22481,Germany,Germany,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>The German Trade Secrets Act came into force in 2019, providing legal grounds for the protection and enforcement of undisclosed know-how and business information, defining &#39;What is a trade secret&#39;. It covers the unauthorised acquisition, use or disclosure of business and trade secrets. While offering new opportunities, the trade secret law comes with high demands for trade secret owners and a need for action to ensure trade secret protection with appropriate confidentially measures - within a company and with third parties as well as during litigation.</strong></p>    <p>Recognising the complexity that comes with protecting trade secrets, we can guide you through the key stages to ensuring your secrets are safe and have recognised value within your business. Offering a full package of services to meet your needs, we have a high level of experience in helping all kinds of businesses, from start-ups to household names; protect their IP and trade secrets.</p>    <h3>Contact our team in Germany</h3>    <p><strong><a href=""~/en/people/inga-marlene-pietsch/#panel-button1"">Dr Inga-Marlene Pietsch</a></strong><br />  Principal Associate</p>  ",GWLG.Germany,0fbd7919-93e2-4e83-a2bc-5a8d07e93c64,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{8E1988C4-7F8F-4F7C-9B12-5DE4E84FE5FE}
507,/Services/Trade-Secrets-Law/Overview,fr-CA,A223BB64-D418-4F00-8F32-02055578364A,Vue d’ensemble,Vue d’ensemble,"Pour que les meilleures idées de votre entreprise ne s’envolent pas et pour savoir ce qu’il faut faire au cas où cela se produirait, vous devez adopter la bonne stratégie en ce qui a trait à vos secrets commerciaux.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Pour que les meilleures idées de votre entreprise ne s&rsquo;envolent pas et pour savoir ce qu&rsquo;il faut faire au cas où cela se produirait, vous devez adopter la bonne stratégie en ce qui a trait à vos secrets commerciaux.</strong></p>    <p>Notre équipe internationale pluridisciplinaire de juristes possède un savoir-faire éprouvé dans les secrets commerciaux et fournit un ensemble de services répondant à vos besoins en matière de protection de vos renseignements commerciaux sensibles, depuis la création et la mise en œuvre de politiques en matière de secrets commerciaux jusqu&rsquo;au respect de vos droits à l&rsquo;échelle mondiale.</p>    <p>Le succès de toute entreprise dépend de sa capacité à se distinguer de la concurrence par la valeur ou l&rsquo;individualité de ses idées. Compte tenu du rythme trépidant de l&rsquo;innovation dans l&rsquo;économie mondiale actuelle, la protection de ces idées est plus importante que jamais. En effet, les secrets commerciaux sont désormais <a href=""~/fr/insights-resources/podcasts/2020/blowing-away-the-competition-ip-at-dyson/"">la priorité pour les membres de la direction d&rsquo;entreprises de tous les secteurs</a>.</p>    <p>Tout plan relatif à l&rsquo;exploitation d&rsquo;une entreprise et à sa propriété intellectuelle doit comporter une stratégie en matière de secrets commerciaux, ce qui vous permettra de cerner et de développer des informations confidentielles et précieuses relatives à votre offre commerciale, ainsi que de mettre en œuvre les politiques et les processus de manière efficace et de déployer les ressources nécessaires pour les conserver et en extraire la valeur. Le fait de disposer d&rsquo;une politique bien établie en matière de secrets commerciaux permettra également de déterminer les cas d&rsquo;appropriation illicite ou d&rsquo;utilisation abusive de ces secrets commerciaux et de faire respecter vos droits à cet égard.</p>    <p>Si vous cherchez à protéger vos propres secrets commerciaux contre le vol, ou que vos secrets ont été usurpés, ou encore que quelqu&rsquo;un vous accuse de violation du secret commercial, nous pouvons vous guider dans les lois à ce sujet, où que vous soyez dans le monde et quel que soit votre secteur d&rsquo;activités. Nos juristes connaissent tous les rouages des mesures de protection du secret commercial et vous aideront à mettre en place une politique de secrets commerciaux au cœur de la stratégie globale de votre organisation en matière de propriété intellectuelle, ce qui vous permettra de tirer pleinement profit de vos innovations.</p>    <h3>Services juridiques relatifs aux secrets commerciaux</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Gestion des contrats et ententes d&rsquo;emploi</li>   <li><a href=""~/fr/services/cyber-security-data-protection-law/#overview"">Confidentialité des données et cybersécurité</a></li>   <li><a href=""~/fr/services/employment-labour-equalities/#overview"">Emploi</a></li>   <li><a href=""~/fr/services/intellectual-property-law/overview/#global"">Propriété intellectuelle</a></li>   <li>Ententes et conventions de confidentialité</li>   <li>Litiges en matière de secrets commerciaux, respect et récupération des droits</li>   <li>Politiques, audits et formations en matière de secrets commerciaux</li>   <li>Opérations et octroi de licences en matière de secrets commerciaux</li>   <li>Gestion des relations</li>  </ul>    <h3>Mandats représentatifs</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">Les membres de l&rsquo;équipe mondiale de propriété intellectuelle de Gowling WLG forment une &laquo; machine bien huilée &raquo; grâce à leur force et à leur capacité de collaborer entre les différents bureaux et d&rsquo;offrir un &laquo; service mondial consolidé &raquo; aux clients du cabinet.<br />  <cite>IAM Patent 1000</cite></p>  </blockquote>    <p>Voici quelques-uns des nos mandats passés et actuels :</p>    <p>{^widget|(copy1)Conseils+portant+sur+la+strat%c3%a9gie+de+la+soci%c3%a9t%c3%a9+en+mati%c3%a8re+de+secrets+commerciaux+relatifs+%c3%a0+l%e2%80%99intelligence+artificielle%2c+de+pratiques+exemplaires+pour+prot%c3%a9ger+les+secrets+commerciaux+et+de+modalit%c3%a9s+contractuelles+connexes.|(bghover2)colour-darkblue|(copy3)Conseils+portant+sur+la+protection+des+secrets+commerciaux+et+sur+les+divers+probl%c3%a8mes+de+nature+r%c3%a9glementaire+pouvant+survenir+en+cas+de+violation+des+secrets+commerciaux+d%e2%80%99une+banque+et+sur+les+mesures+%c3%a0+prendre+pour+att%c3%a9nuer+les+violations+possibles.|(copy2)Conseils+portant+sur+la+protection+des+secrets+commerciaux%2c+y+compris+la+pr%c3%a9paration+d%e2%80%99une+politique+d%e2%80%99entreprise+exhaustive+et+d%e2%80%99un+module+de+formation+en+mati%c3%a8re+de+secrets+commerciaux+afin+de+d%c3%a9ployer+la+politique+aupr%c3%a8s+des+employ%c3%a9s.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(widget_displayname)Three+Block+Widget|(headline1)SOCI%c3%89T%c3%89+PHARMACEUTIQUE+INTERNATIONALE|(headline3)BANQUE+MONDIALE|(headline2)SOCI%c3%89T%c3%89+DE+TH%c3%89RAPIE+G%c3%89NIQUE+EN+PHASE+CLINIQUE|(name)ThreeBlockWidget|(bghover1)colour-aubergine|(bghover3)colour-lightred|(width)|(height)^}{^widget|(name)ThreeBlockWidget|(Headline1)SOCI%c3%89T%c3%89+DE+TECHNOLOGIE+AUDIO|(Copy1)Conseils+%c3%a0+une+soci%c3%a9t%c3%a9+hautement+novatrice+portant+sur+sa+politique+en+mati%c3%a8re+de+secrets+commerciaux+et+sur+les+politiques+connexes+(confidentialit%c3%a9+des+donn%c3%a9es%2c+s%c3%a9curit%c3%a9+de+l%e2%80%99information)+pour+son+manuel+%c3%a0+l%e2%80%99intention+du+personnel.|(LinkText1)Read+more|(BgHover1)colour-darkblue|(Headline2)CONGLOM%c3%89RAT+DE+SOCI%c3%89T%c3%89S+TECHNOLOGIQUES|(Copy2)Conseils+%c3%a0+un+vaste+conglom%c3%a9rat+portant+sur+la+structuration+d%e2%80%99un+audit+de+secrets+commerciaux+et+sur+la+gestion+des+secrets+commerciaux+relativement+%c3%a0+une+soci%c3%a9t%c3%a9+nouvellement+acquise.|(LinkText2)Read+more|(BgHover2)colour-darkred|(Headline3)TECHNOLOGIE+DES+BUSES+DE+PULV%c3%89RISATION|(Copy3)Conseils+%c3%a0+la+division+d%e2%80%99un+leader+mondial+de+cette+technologie%2c+portant+sur+la+protection+des+secrets+commerciaux+en+Europe+et+en+France+dans+le+cadre+du+d%c3%a9veloppement+de+sa+technologie+innovante.|(LinkText3)Read+more|(BgHover3)colour-aubergine|(widget_displayname)Three+Block+Widget^}</p>    <h3>Notre équipe internationale</h3>    <p>Notre équipe des secrets commerciaux fait partie de notre groupe de propriété intellectuelle de calibre mondial, qui offre des services diversifiés à nos clients de tous les secteurs et de tous les pays, depuis la création jusqu&rsquo;à l&rsquo;exploitation d&rsquo;inventions, de dessins et modèles, de marques et de toutes sortes d&rsquo;actifs créatifs. Pour en savoir plus sur notre travail en matière de secrets commerciaux dans les pays où nous faisons affaire, cliquez sur le lien approprié ci-dessous.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/trade-secrets-law/#canada"">Canada</a></li>   <li><a href=""~/fr/services/trade-secrets-law/#china"">Chine</a></li>   <li><a href=""~/fr/services/trade-secrets-law/#france"">France</a></li>   <li><a href=""~/fr/services/trade-secrets-law/#germany"">Allemagne</a></li>   <li><a href=""~/fr/services/trade-secrets-law/#uae"">Émirats arabes unis</a></li>   <li><a href=""~/fr/services/trade-secrets-law/#uk"">Royaume-Uni</a></li>  </ul>  ",GWLG.Global,a198222e-fff0-47b3-bbca-b7c042e76a69;a422060d-6f9d-4027-8e91-d7badbd87370,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{AC4471A4-8672-459B-852B-CC43B6933D45}|{E889ADA3-B953-4566-93A9-7544DE6172B7}
508,/Services/Trade-Secrets-Law/Germany,fr-CA,4958E118-FBB1-4AF2-B3A6-CF33E8F22481,Allemagne,Allemagne,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>La loi allemande sur les secrets commerciaux est entrée en vigueur en 2019, fournissant des bases juridiques pour la protection des savoir-faire et des informations commerciales non divulgués ainsi que pour le respect des droits à cet égard, définissant &laquo;&nbsp;en quoi consiste un secret commercial&nbsp;&raquo;, et elle couvre l&rsquo;acquisition, l&rsquo;utilisation ou la divulgation non autorisées de secrets d&rsquo;affaires et commerciaux. Bien qu&rsquo;elle offre de nouvelles perspectives, la loi sur les secrets commerciaux présente des exigences élevées pour les détenteurs de secrets commerciaux et un besoin d&rsquo;action pour assurer la protection des secrets commerciaux au moyen des mesures de confidentialité appropriées, que ce soit au sein d&rsquo;une société que chez des tiers ou dans le cadre d&rsquo;un litige.</strong></p>    <p>Nous sommes conscients de la complexité de la protection des secrets commerciaux, et c&rsquo;est pourquoi nous pouvons vous guider dans les étapes clés afin de garantir la protection de vos secrets commerciaux et la reconnaissance de leur valeur au sein de votre entreprise. Notre ensemble complet de services répondra à vos besoins, et la grande qualité de l&rsquo;aide que notre vaste expérience nous permet d&rsquo;offrir à tout type d&rsquo;entreprise (sociétés en démarrage ou multinationales renommées), assurera la protection de sa propriété intellectuelle et de ses secrets commerciaux.</p>    <h3>Communiquez avec notre équipe en Allemagne</h3>    <p><a href=""~/fr/people/inga-marlene-pietsch/"">Inga-Marlene Pietsch</a>, Ph. D.<br />  Avocate principale</p>  ",GWLG.Germany,0fbd7919-93e2-4e83-a2bc-5a8d07e93c64,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{8E1988C4-7F8F-4F7C-9B12-5DE4E84FE5FE}
509,/Services/Trade-Secrets-Law/Canada,fr-CA,9323F96E-A4DA-4401-8EF8-6464F287D8B9,Canada,Canada,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Le succès commercial d&rsquo;une entreprise dépend de sa capacité à se démarquer de la concurrence, à offrir une valeur ou à donner un avantage que d&rsquo;autres ne possèdent pas. Cela inclut le savoir-faire, les secrets commerciaux, les brevets et d&rsquo;autres formes de PI. Au Canada, où la législation portant sur les secrets commerciaux et la protection à cet égard reposent sur des principes de common law et de droit civil, les entreprises doivent savoir comment assurer leur protection de manière optimale et, en l&rsquo;absence d&rsquo;un processus officiel de protection des secrets commerciaux, il vous faut envisager différents moyens de préserver la confidentialité des renseignements commerciaux sensibles.</strong></p>    <p>Notre équipe de professionnels au Canada possède toute l&rsquo;expérience de pointe pour guider les clients dans la protection des secrets d&rsquo;affaires et la création de politiques sur les secrets commerciaux adaptées à la stratégie commerciale. Pour aider nos clients de toutes tailles à gérer les risques croissants, nous offrons un ensemble de services et d&rsquo;outils pour les aider à déterminer, à maintenir et à extraire la valeur de leurs secrets commerciaux et autres renseignements exclusifs et à en faire le suivi. Nos services permettent également de déterminer l&rsquo;appropriation illicite ou l&rsquo;utilisation abusive de cette information et de faire respecter les droits à cet égard.</p>    <h3>Prix et reconnaissance</h3>    <p>Nous sommes fiers de figurer aux classements d&rsquo;un vaste éventail de répertoires et de magazines juridiques dans le domaine de la propriété intellectuelle. Le répertoire <em>IAM&nbsp;Patent&nbsp;1000</em> reconnaît notre équipe dans les catégories Litige, Opérations et Poursuites, et 13 de nos professionnels figurent également parmi les chefs de file mondiaux en brevets. Le magazine <em>Chambers and Partners</em> nous classe au niveau 1 au Canada dans les catégories Propriété intellectuelle et Litige en matière de propriété intellectuelle. Le répertoire <em>Canadian Legal Lexpert Directory</em> place notre équipe dans les classements des cabinets régionaux dans la catégorie Propriété intellectuelle, et 34 de nos professionnels figurent dans les classements individuels.</p>    <h3>Communiquez avec notre équipe au Canada</h3>    <p><a href=""~/fr/people/anita-nador/"">Anita Nador</a><br />  Associée</p>  ",GWLG.Canada,a422060d-6f9d-4027-8e91-d7badbd87370,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{E889ADA3-B953-4566-93A9-7544DE6172B7}
510,/Services/Trade-Secrets-Law/China,fr-CA,A0EE5F3B-CE65-4ADA-B956-924F6B7E407D,Chine,Chine,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Au fil de la croissance de votre société, il peut s&rsquo;avérer difficile de déterminer et de gérer les facteurs distinctifs qui la distinguent de la concurrence.</strong></p>    <p>Le Code civil chinois, qui est entré en vigueur le 1<sup>er</sup>&nbsp;janvier&nbsp;2021, stipule que les secrets commerciaux constituent un type de droit de propriété intellectuelle et, par conséquent, doivent être protégés par les lois sur la propriété intellectuelle. Toutefois, le système juridique actuel de la Chine en matière de secrets commerciaux se compose de diverses lois et de règlements locaux et fait l&rsquo;objet d&rsquo;interprétation devant les tribunaux.</p>    <p>Notre équipe de la PI en Chine est là pour vous aider à protéger vos secrets commerciaux et votre &laquo;&nbsp;savoir-faire&nbsp;&raquo; afin que vous conserviez votre avantage concurrentiel sur le marché.&nbsp;Nos pratiques de dépôts et de poursuites de demandes à Pékin et à Shanghai s&rsquo;appuient sur les systèmes et l&rsquo;expérience de la gestion de portefeuilles de PI pour certaines des plus grandes sociétés du monde. Nos avocats en droit des sociétés et en droit commercial basés à Guangzhou travaillent en collaboration avec nos professionnels de la PI pour surmonter les difficultés liées à la pratique des affaires en Chine et vous aider à atteindre vos objectifs commerciaux.</p>    <h3>Prix et reconnaissance</h3>    <p>Notre équipe en Chine figure aux classements établis par <em>IAM Patent&nbsp;1000</em> pour les cabinets de la région, et Elliot Papageorgiou est également reconnu comme un chef de file mondial en brevets dans le domaine du litige.</p>    <h3>Communiquez avec notre équipe en Chine</h3>    <p><a href=""~/fr/people/ivy-liang/"">Ivy Liang</a><br />  Directrice juridique</p>  ",GWLG.China,49370d7b-1121-45da-90e6-96dcc50c1710,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{A57A1C6B-A0A8-42B1-A486-547F584C5F82}
511,/Services/Trade-Secrets-Law/UAE,fr-CA,F405F67F-2580-452E-8070-55A03A7ED5F3,Émirats arabes unis,Émirats arabes unis,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Les moyens et les lois qui permettent de protéger les secrets commerciaux sont nombreux aux Émirats arabes unis, bien qu&rsquo;il n&rsquo;y ait pas de loi spécifique ou exhaustive visant les secrets commerciaux.</strong></p>    <p>Notre équipe basée à Dubaï propose des solutions avancées en matière de secrets commerciaux dans tout le Moyen-Orient, avec un service adapté à vos besoins.</p>    <p>Forts de leurs connaissances approfondies dans un vaste éventail de secteurs, les membres de notre équipe vous aideront à surmonter les difficultés complexes en vous fournissant des conseils juridiques efficients et pratiques axés sur la croissance et sur la protection de vos affaires.</p>    <h3>Prix et reconnaissance</h3>    <p>Notre équipe des Émirats arabes unis figure aux classements établis par <em>IAM Patent&nbsp;1000</em> pour les cabinets, et Jon Parker et Tamara El Shibib y sont également reconnus comme des chefs de file mondiaux en brevets. Jon Parker figure régulièrement aux classements des principaux répertoires de PI, notamment parmi les &laquo;&nbsp;étoiles de la PI&nbsp;&raquo; de MIP et dans <em>IAM Global Leaders</em>. Dans son édition mondiale, <em>Chambers and Partners</em> hisse Jon Parker au niveau&nbsp;1 pour la PI et le décrit comme un &laquo;&nbsp;nom éminent sur le marché&nbsp;&raquo;.</p>    <p>En 2019, le répertoire <em>Managing Intellectual Property</em> a désigné cette équipe comme le &laquo;&nbsp;cabinet à surveiller au Moyen-Orient&nbsp;&raquo;.</p>    <h3>Communiquez avec notre équipe des Émirats arabes unis</h3>    <p><a href=""~/fr/people/jon-parker/"">Jon Parker</a><br />  Associé</p>  ",GWLG.UAEDubai,3fd4913d-3096-46ba-93b4-f365a5b14944,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{1F056C95-3A1E-4F01-BD32-0D488C66101C}
512,/Services/Trade-Secrets-Law/France,fr-CA,78A2613C-03C2-487F-92BF-D63F33848C78,France,France,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Oui, les secrets commerciaux sont des actifs précieux pour votre entreprise, mais s&rsquo;ils ne sont pas protégés de manière appropriée, leur valeur peut décroître très rapidement. La France a mis en œuvre la Directive sur la protection des savoir-faire et des informations commerciales non divulgués (Directive&nbsp;UE&nbsp;2016/943) et s&rsquo;est dotée d&rsquo;une législation à cet égard.</strong></p>    <p>Notre équipe d&rsquo;avocat.e.s en France possède toute l&rsquo;expérience nécessaire pour aider les entreprises à naviguer dans les méandres complexes des lois sur les secrets commerciaux afin de créer une protection efficace et de fournir une plateforme pour le respect des droits.</p>    <h3>Prix et reconnaissance</h3>    <p>Notre équipe figure régulièrement aux classements du répertoire <em>IAM Patent 1000</em> dans les catégories Litige et Opérations.</p>    <p>Céline Bey, chef de notre groupe Propriété intellectuelle en France, est également reconnue régulièrement pour son expérience par les répertoires et magazines de propriété intellectuelle et, selon <em>IAM Patent&nbsp;1000</em>, fait partie des chefs de file mondiaux en brevets tant dans le domaine du litige que dans celui des opérations.</p>    <h3>Communiquez avec notre équipe en France</h3>    <p><a href=""~/fr/people/celine-bey/"">Céline Bey</a><br />  Associée</p>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}
513,/Services/Trade-Secrets-Law/UK,fr-CA,84E5E8D1-1DD9-4031-8E6B-FFB05179FDFB,Royaume-Uni,Royaume-Uni,International trade secrets lawyers providing businesses with advice on trade secrets law and policies.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Les secrets commerciaux sont devenus un point de convergence de plus en plus important dans l&#39;écosystème de l&#39;innovation. Les entreprises de tous les secteurs doivent examiner de près leurs politiques actuelles de protection et de gestion des secrets commerciaux. Il s&#39;agit notamment de s&#39;adapter à l&#39;évolution des pratiques exemplaires et de la jurisprudence à la suite de la mise en œuvre de la Directive européenne sur les secrets commerciaux, ainsi que du Brexit, et de garantir une protection maximale des nouveaux actifs importants&nbsp;: les données et l&#39;analyse des données (comme l&#39;IA).</strong></p>    <p>Une stratégie bien établie en matière de secrets commerciaux vous permettra de déterminer et de gérer vos actifs intangibles les plus précieux et de les protéger contre les menaces d&rsquo;appropriation illicite internes ou externes. Notre équipe d&rsquo;avocats chevronnés dans les secrets commerciaux au Royaume-Uni vous aidera à créer et à mettre en œuvre les politiques et les mécanismes nécessaires pour protéger toutes les formes de votre propriété intellectuelle.</p>    <p>Nous savons parfaitement ce qu&rsquo;il faut faire pour protéger vos secrets commerciaux et nous vous offrons un ensemble de services sur mesure, dont des audits et des conseils, la rédaction de politiques, les ententes de confidentialité et autres conventions, la formation de vos équipes, l&rsquo;application des lois et un processus d&rsquo;intervention de crise, qu&rsquo;appuient les équipes multidisciplinaires de notre cabinet juridique à service complet.</p>    <h3>Prix et reconnaissance</h3>    <p>Notre équipe est régulièrement reconnue par <em>IAM Patent&nbsp;1000</em> dans les catégories Litige et Opérations, et plusieurs de nos professionnels figurent parmi les chefs de file en brevets. Le répertoire <em>Legal&nbsp;500</em> classe notre équipe au premier niveau pour la PI dans les West Midlands et au deuxième niveau pour la PI à Londres en ce qui a trait aux brevets (litigieux et non litigieux). Quant à <em>Chambers and Partners</em>, notre équipe figure au deuxième niveau pour la PI et le litige en matière de brevets à Londres, et au premier niveau pour la PI dans la catégorie des chefs de file nationaux et aussi pour les Midlands.</p>    <h3>Communiquez avec notre équipe au Royaume-Uni</h3>    <p><a href=""~/fr/people/huw-evans/"">Huw Evans</a><br />  Associé, chef du groupe Litige en matière de brevets (Royaume-Uni)</p>  ",GWLG.UK,a21f77d5-b08e-4dac-9b34-efe5dddc9db1;a198222e-fff0-47b3-bbca-b7c042e76a69,7E5CC100-41F8-49AD-9286-B51E6DA41373,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}|{AC4471A4-8672-459B-852B-CC43B6933D45}
514,/Services/Entertainment-Sports-Law/Overview,fr-CA,CC1C3A06-D6EF-4A05-A33E-9570E5DCDF27,Overview,Overview,"À l’échelle mondiale, les domaines du sport et du divertissement continuent d’évoluer à toute allure, ce qui force artistes, talents, athlètes et entreprises à relever de nouveaux défis et à explorer de nouvelles possibilités au quotidien.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>À l&#39;échelle mondiale, les domaines du sport et du divertissement continuent d&#39;évoluer à toute allure, ce qui force artistes, talents, athlètes et entreprises à relever de nouveaux défis et à explorer de nouvelles possibilités au quotidien. Doté de l&#39;un des groupes les plus réputés en droit du sport et du divertissement au monde, notre cabinet offre une gamme complète et adaptée de services juridiques aux clients de ces secteurs.</p>    <p>Que ce soit pour fournir des conseils stratégiques quant à des modalités de transactions d&#39;affaires ou sur les normes de l&#39;industrie en constante évolution, nous disposons des compétences, des ressources et des contacts spécifiques pour protéger vos intérêts. Que vos activités d&#39;affaires soient liées directement ou indirectement au sport ou au divertissement, vous pouvez compter sur nous pour vous aider à relever tous vos défis juridiques.</p>    <p>Pour aborder les questions juridiques complexes pouvant découler des technologies et des plateformes novatrices, ou encore des nouveaux règlements ou acteurs de l&#39;industrie, l&#39;équipe Gowling WLG vous guide avec doigté et finesse dans le labyrinthe juridique de ces secteurs, que ce soit pour négocier ou rédiger des ententes pour vos transactions, le tout de manière à maximiser votre succès.</p>    <h3>Services en matière de droit du divertissement et du sport</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Commandites et marketing</li>   <li>Conseils quant à des modalités et des structures de contrats</li>   <li>Conseils relativement aux normes internationales de l&#39;industrie</li>   <li>Droit commercial</li>   <li>Droit de l&#39;emploi</li>   <li>Enjeux liés au métavers/jetons non fongibles (NFT)</li>   <li>F&amp;A, coentreprises et restructuration</li>   <li>Financement, droit fiscal et insolvabilité</li>   <li>Gestion de l&#39;acquisition et de la cession de droits</li>   <li>Immobilier</li>   <li>Litige et règlements de différends</li>   <li>Médias et publicité</li>   <li>Partenariats public-privé liés à des infrastructures sportives</li>   <li>Planification successorale</li>   <li>Propriété intellectuelle (droit d&#39;auteur, marques de commerce et brevets)</li>   <li>Questions de réglementation</li>   <li>Rédaction et négociation d&#39;accords</li>   <li>Santé et sécurité</li>  </ul>    <h3>Découvrez notre équipe internationale</h3>    <p>Le divertissement et les sports transcendent souvent les frontières et comme nous sommes actifs au Canada, en Europe, en Asie et au Moyen-Orient, nous pouvons tirer parti de notre vaste réseau de professionnels en appliquant les connaissances juridiques locales nécessaires pour fournir des solutions commerciales novatrices rapidement et efficacement.</p>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/fr/services/entertainment-sports-law/#canada"">Canada</a></li>   <li><a href=""~/fr/services/entertainment-sports-law/#uk"">UK</a></li>  </ul>  ",GWLG.Global,38313a1e-07be-4fe8-b61e-008316e36186;334a7f26-44f4-4a26-9d0d-0ddd5e499b12;04b8437f-d586-44f4-be8e-17baff70c905,1262C308-04FD-4608-835B-A7950ABA17BE,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{01F3B48C-972C-434D-B7E2-6EDED2EA05AC}|{509B877A-7C43-4EB2-B646-43EFBAA46FA0}|{3789FBDD-B2CF-407D-92F8-845281F23788}
515,/Services/Entertainment-Sports-Law/UK,fr-CA,36D00123-800F-49F1-8BB6-5FFD3715B867,UK,UK,"International full-service law firm advising on entertainment and sports law, including the delivery of the Birmingham 2022 Commonwealth Games.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>La valeur commerciale des clubs sportifs, des personnes et des marques ne cesse de croître, ce qui signifie que les accords commerciaux et stratégiques quotidiens comme les droits de l&#39;image, les événements et la protection de la marque doivent être gérés parallèlement à la réalisation de projets ambitieux tels que les parrainages et l&#39;aménagement de stades.</strong></p>    <p>Il vous faut compter sur un conseiller juridique de confiance pour vous aider à atteindre ces objectifs et à relever les défis juridiques (anciens et nouveaux) du secteur du sport. Notre connaissance du domaine et notre réseau mondial nous permettent de soutenir votre entreprise et de vous aider à atteindre le succès commercial.</p>    <p>Le succès dans le sport est le fruit d&#39;une équipe performante, dont les membres sont sur le devant de la scène et soutenus par l&#39;excellence technique dans les coulisses. Notre équipe d&#39;avocats proactifs axés sur les affaires conseille régulièrement des agences sportives, des clubs, des équipes, des organes directeurs, des organismes de réglementation, des commanditaires, des sportifs, des investisseurs et d&#39;autres parties prenantes, en mettant à profit sa connaissance du secteur et son approche pragmatique, et ce, afin de devenir un joueur fiable et apprécié.</p>    <p>Nous sommes fiers de pouvoir compter sur des avocats spécialisés dans le droit du sport qui connaissent bien les questions comme le réaménagement de stades, les commandites, les droits de dénomination, la conformité réglementaire, le financement, la protection des marques, les fusions-acquisitions, les réorganisations de groupes, les coentreprises, l&#39;emploi et résolution de litiges. Nous sommes en mesure d&#39;offrir un service complet en droit du sport, en nous fiant à notre expérience pour anticiper les défis et fournir des solutions et conseils clairs.</p>    <h3>Mandats représentatifs</h3>    <p>&laquo; Nous avons fait appel à Gowling WLG dans le cadre de plusieurs projets&hellip; et chaque fois, nous avons reçu un service minutieux, professionnel, absolument impeccable. &raquo;<br />  James Williamson, The Sport Partnership</p>    <p>Nous sommes fiers de conseiller les marques, équipes et organisations les plus réputées du secteur sportif mondial. Voici quelques-uns de nos mandats passés et actuels :</p>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)Jeux+du+Commonwealth+de+2022+%c3%a0+Birmingham|(Copy1)Nous+sommes+conseillers+exclusifs+des+Jeux+du+Commonwealth+de+2022+%c3%a0+Birmingham.+Nous+conseillons+le+comit%c3%a9+organisateur+quant+%c3%a0+un+%c3%a9ventail+de+services+%3a+gouvernance+d%e2%80%99entreprise%2c+approvisionnement%2c+protection+de+la+marque+et+dossiers+commerciaux+g%c3%a9n%c3%a9raux.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)E20+Stadium|(Copy2)Repr%c3%a9sentation+de+E20+Stadium+LLP+dans+le+cadre+d%e2%80%99un+diff%c3%a9rend+intent%c3%a9+par+West+Ham+United+Football+Club+relativement+au+nombre+de+si%c3%a8ges+revendiqu%c3%a9+par+l%e2%80%99%c3%a9quipe+%c3%a0+l%e2%80%99ancien+stade+olympique%2c+en+vertu+d%e2%80%99un+accord+de+concession+de+99+ans.|(LinkText2)Read+more|(BgHover2)colour-darkblue|(Headline3)Coupe+du+Monde+de+la+FIFA|(Copy3)Repr%c3%a9sentation+de+la+Coupe+du+monde+de+la+FIFA+relativement+%c3%a0+la+recherche+en+disponibilit%c3%a9%2c+l%e2%80%99enregistrement+et+la+protection+de+la+propri%c3%a9t%c3%a9+intellectuelle+dans+le+cadre+des+tournois+de+la+Coupe+du+monde.|(LinkText3)Read+more|(BgHover3)colour-darkred|(widget_displayname)Three+Block+Widget^}</p>    <h3>Prix et distinctions</h3>    <p>En tant que cabinet juridique multiservice, nous sommes fréquemment reconnus sur le marché pour notre expérience et nos connaissances. Nous figurons d&#39;ailleurs dans de nombreuses catégories dans les guides juridiques, y compris au niveau 1 en matière de droit des sociétés, de fusions-acquisitions et de propriété intellectuelle (<em>Chambers &amp; Partners)</em>.</p>    <p>Nous sommes fiers d&#39;être les conseillers juridiques officiels et premiers commanditaires des Jeux du Commonwealth de 2022 à Birmingham, ainsi que premier commanditaire d&#39;Équipe Angleterre et conseillers officiels des Jeux du Commonwealth en Angleterre.</p>    <h3>Communiquez avec notre équipe du Royaume-Uni</h3>    <p><strong><a href=""~/fr/people/sarah-riding/"">Sarah Riding</a></strong><br />  Associée</p>    <p><strong><a href=""~/fr/people/anurag-ragi-singh/"">Ragi Singh</a></strong><br />  Associé</p>  ",GWLG.UK,334a7f26-44f4-4a26-9d0d-0ddd5e499b12;04b8437f-d586-44f4-be8e-17baff70c905,1262C308-04FD-4608-835B-A7950ABA17BE,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{509B877A-7C43-4EB2-B646-43EFBAA46FA0}|{3789FBDD-B2CF-407D-92F8-845281F23788}
516,/Services/Capital-Markets/UK,en-GB,106D4B8E-7042-4C40-B49D-7DA40880329B,UK,UK,"International capital markets law firm with an established track record advising issuers and their sponsors, financial advisers, nominated advisers and brokers.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Capital markets transactions can be a key development in how a public company operates and raises new capital for growth; in-depth legal knowledge and experience of the capital markets are vital components in managing your requirements in going public and securing future funding and getting this transformation right. Our long-established capital markets law firm has an extensive track record advising issuers and their sponsors, financial advisers, nominated advisers and brokers on IPOs and secondary fundraises. Always considering key commercial issues important to our clients, we are well versed in navigating potential issues in any transaction.</strong></p>    <p>We rank among the top-tier law firms for total number of stock market clients (Main Market and AIM), and have consistently been ranked as a leading AIM market adviser, both by a number of clients and market capitalisation, (<em>Advisers Rankings Guide</em>). We are particularly noted for our international experience and our comprehensive capital markets offering.</p>    <p>Our team of capital markets lawyers is recognised as one of the most active and successful in stock exchange and equity transactions, having vast experience advising issuers, sponsors, brokers and nomads on IPOs on the Main Market (Premium and Standard listing segments), AIM and AQSE. We have also advised numerous clients on migrations from, or dual listings, on the Toronto Stock Exchange, the TSX Venture Exchange, the Canadian Securities Exchange and&nbsp;the Australian Securities Exchange.</p>    <p>Our Equity Capital Markets team has an established track record. We acted on the first AIM IPO 25 years ago, have acted on over 450 AIM deals, with total funds raised being over &pound;7 billion, and currently act for over 86 Main Market and AIM listed companies. Since 2015, we have been involved in more Main Market IPOs than any other law firm.</p>    <p>We handle transactions on behalf of companies operating in over 60 jurisdictions, in addition to the UK, with particular experience in North and South America, Australia, South-East Asia, Sub-Saharan Africa, the Middle East and India.</p>    <h3>Capital markets services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Capital reconstructions</li>   <li>Continuing obligations</li>   <li>Corporate governance</li>   <li>Dual listings (TSX / ASX)</li>   <li>Due diligence</li>   <li>Equity offerings</li>   <li>Exchangeable or convertible bonds</li>   <li>IPOs, secondaries, introductions, reverse takeovers</li>   <li>Listed bonds</li>   <li>Listed investment funds</li>   <li>Pre-IPO structuring &amp; fundraising</li>   <li>Regulatory advice including MAR</li>   <li>Shareholder activism</li>  </ul>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">We were thrilled to have Gowling WLG by our side on this deal. The team&#39;s M&amp;A and capital markets experience is extremely valuable to us.<cite>Frank Sagnier, CEO of Codemasters Group</cite></p>  </blockquote>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Bancora+Lithium|(headline3)Forward+Partners+Group|(headline2)Revolution+Bars+Group|(copy1)Advising+on+its+redomicile+from+Canada+to+the+UK%2c+by+way+of+plan+of+arrangement+and+its+US%2465+million+placing%2c+to+fully+fund+its+Mexican+lithium+project+and+its+%c2%a3282+million+takeover+by+Ganfeng+Lithium.|(copy3)Advising+the+London-based+venture+capital+group+on+its+oversubscribed+fundraise+and+admission+to+AIM.|(copy2)Advising+on+its+transfer+from+the+Main+Market+to+AIM+and+associated+%c2%a315+million+equity+fundraising%2c+and+advising+on+its+further+%c2%a321+million+fundraising+the+following+year.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}{^widget|(bghover1)colour-darkred|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Codemasters|(headline3)Urban+Logistics+REIT|(headline2)Cenkos+Securities|(copy1)Advising+the+video+games+maker+on+its+%c2%a3280+million+AIM+IPO+and+the+review+of+the+licences+in+and+out+of+rights+for+its+portfolio+of+motor+racing+games.|(copy3)Advising+on+its+admission+to+AIM+and+over+%c2%a3300+million+worth+of+placings+to+date.|(copy2)Advising+the+Nomad+and+broker+to+MJ+Hudson+Group+on+its+placing%2c+raising+%c2%a329.5+million+and+admission+to+trading+on+AIM.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkblue|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <p>The legal directories consistently recognise us for our work in the market, with <em>The Legal 500</em> ranking our team in Tier 1 for Listed Funds and Tier 2 for Equity Capital Markets: Small Mid-cap. <em>Chambers UK</em> also rank the team in Band 2 for Capital Markets: AIM and Investment Funds: Closed-ended Listed Funds. We were pleased to rank 1st, 2nd or 3rd for the AIM market in every quarter in the <em>Advisers Ranking Guide 2021</em>.</p>    <p>In a crowded marketplace, industry insight can be key to completing a deal. Our Annual Nomad Conference is recognised as the premier event for nominated advisers. We also produce an AIM Handbook each year, which is coveted by Nomads for companies considering a listing on AIM. Likewise, our strong presence in the <a href=""~/en/services/investment-funds/#uk"">investment funds</a> sector means we can offer a comprehensive advisory service to clients, based on a deep knowledge of market norms and practice.</p>    <h3>Contact our team</h3>    <p>For further advice on how we can help you with your capital markets transactions, contact a member of our team today.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/charles-bond/"">Charles Bond</a></strong><br />  Partner, Head of Capital Markets and Natural Resources (UK)</p>    <p><strong><a href=""~/en/people/hugh-maule/"">Hugh Maule</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/david-brennan/"">David Brennan</a></strong><br />  Partner, Co-Chair of Global Tech</p>    <p><strong><a href=""~/en/people/samantha-myers/"">Samantha Myers</a></strong><br />  Partner, Head of UK Cannabis Group</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/jeffrey-elway/"">Jeffrey Elway</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/sunil-kakkad/"">Sunil Kakkad</a></strong><br />  Consultant</p>    <p><strong><a href=""~/en/people/andrew-wright/"">Andrew Wright</a></strong><br />  Consultant</p>  </div>  </div>  </div>  ",GWLG.UK,6535cd7a-0e8e-447a-bc96-cec1df267dfe;f89a86e5-3692-4b8b-bd85-218e13eee56f;3eea8a58-b3f2-4e3c-87f4-8853720e2a67;c2d606a0-c969-45ae-ac29-89c4cdc04c9d;560ad50f-968c-482f-a71a-4e95b4ae2dd6;e296f021-59e1-410e-a0ad-0626e49ce506;a9a5ce3c-c45a-42bb-899e-3c3bc68ff634,60BB1A30-82DE-4038-AA38-9B01A87215C6,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{D90F7586-6027-47DF-A932-6B91349F4DA2}|{3D891B4E-1F61-437D-9FF8-FADA32E6C073}|{FDDC4B94-7CA9-4265-AAD2-B1573B9C797F}|{693CA866-0222-4074-9E9A-6336BFAE9C3D}|{783579A7-C423-44B6-AC93-3C05ADB31EBC}|{FCFF77C0-9D47-40F3-8A44-C0391D1DC575}
517,/Services/Public-Inquiries-Investigations-and-Inquests/UK,en-GB,B77E6324-CE3D-4EE3-8DF8-5102589B920B,UK,UK,Our Public Inquiries and Investigations team provides strategic legal advice and experienced guidance across the full lifecycle of a public inquiry.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Inquiries, reviews and investigations can be high profile, raising issues of significant importance leading to intense public and media scrutiny and reputational risk. Whether you are leading an inquiry or review, providing evidence, or facing or conducting an investigation, our specialist Public Inquiries and Investigations team can support you through these challenging times with sensitivity and carefully balanced judgment as well as strategic legal advice.</strong></p>    <p>We can provide you with advice, support and guidance at all stages of inquiries, both statutory and non-statutory, reviews, investigations and inquests. Our team&#39;s breadth and depth of experience is rooted in many years of supporting local and central government (including government ministers and officials), private sector organisations, regulatory bodies and high profile individuals in inquisitorial processes.</p>    <p>Working on some of the most high profile and complex matters for a wide range of clients, our team provides targeted legal and strategic advice and engages collaboratively across a wide spectrum of stakeholders whilst protecting the interests of those we support. We are an agile, responsive team and can mobilise quickly where required.</p>    <h2>Why choose us?</h2>    <p>Additional to the extensive services we offer, our dedicated team has unique experience gained at the very centre of government in high profile investigations and policy as well as supporting high profile corporate organisations in inquiries. We are able to provide wider perspectives, handle multiple and competing interests successfully and deliver workable strategies in complex, political and challenging circumstances.</p>    <p>We conduct investigations with a high level of integrity leading to robust and credible findings, which withstand board, public and media scrutiny. Recognising that not every inquiry, review or investigation requires the same approach we adapt our services to your requirements. Offering a combination of technical excellence with effective project management skills, we draw on a wealth of knowledge across practice areas as a full service law firm.</p>    <p>We appreciate that decision making in inquisitorial processes must be in accordance with public law principles and, with a depth of knowledge and experience of public law and judicial review in these contexts, we can help you to navigate around such challenges. We have broad experience of drafting terms of reference and high profile reports, including lessons learned, as well as assisting with cultural change implementation following internal investigations and reviews.</p>    <p>Members of our team have supported the Financial Reporting Council, British Bankers Association, the Cabinet Office, the Home Office, the Ministry of Defence, Department for Health &amp; Social Security, Ofqual, large housing associations, care home providers, local authorities and non-departmental public bodies. Our team also has a depth of experience in regulatory investigations and has investigated and supported listed companies, banks, insurance companies, investment managers, senior directors, Heads of Compliance and MLROs in FCA investigations and enforcement proceedings.</p>    <p>{^widget|(path)%2fGlobal-Objects%2fCTAs%2fServices%2fPublic-Inquiries-and-Investigations%2fServices%2f%2525|(name)GWLG.Widgets.FAQList|(image_guid)884cd42b-93de-40b9-9f7f-cf7e3608a676|(headingtext)What+services+can+we+provide+for+you%3f|(widget_displayname)FAQ+List|(width)|(height)^}</p>    <h2>Client work examples</h2>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Grenfell+Tower+statutory+Inquiry|(headline3)COVID-19+statutory+Inquiry|(headline2)Healthcare+non-statutory+Inquiry|(copy1)Providing+advice+and+ongoing+in-depth+support+to+a+high+profile+core+participant+organisation+in+the+Grenfell+Inquiry.+|(copy3)Retained+by+the+Department+for+International+Trade+(%22DIT%22)+to+provide+support+during+the+COVID-19+Inquiry.|(copy2)Advising+the+Chair+of+the+largest+independent+non-statutory+inquiry+into+the+provision+of+maternity+services+under+the+Shrewsbury+and+Telford+Hospital+NHS+Trust.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkred|(width)|(height)^}{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-aubergine|(headline1)Financial+services+investigations|(headline3)Housing+Association+investigations|(headline2)Local+authority+investigations|(copy1)Acting+for+the+Financial+Reporting+Council+in+relation+to+its+investigations+and+enforcement+action+concerning+the+collapse+of+Carillion+plc.|(copy3)Conducting+an+investigation+on+behalf+of+one+of+the+UK%27s+largest+housing+associations+into+financial+collapse+of+a+Housing+Association+that+it+rescued+through+acquisition.|(copy2)Reviewing+and+advising+a+local+authority+on+investigation+policy.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightblue|(width)|(height)^}{^widget|(bghover1)colour-darkred|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkblue|(headline1)BEIS+investigation|(headline3)Private+sector+and+living+sector+inquests|(headline2)Hillsborough+Stadium+Inquest|(copy1)Investigating+allegations+of+company%2fDirector+fraud+and+misconduct+for+BEIS.+|(copy3)Advising+and+representing+registered+the+private+sector%2c+social+housing+and+care+home+providers+in+a+number+of+inquests.+|(copy2)Advising+Sheffield+City+Council+in+relation+to+the+Hillsborough+Stadium+disaster+inquest.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-lightred|(width)|(height)^}</p>    <h2>Contact our team</h2>    <p>For strategic legal advice and experienced guidance across the full lifecycle of public inquiries, investigations and inquests, contact a member of our team.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/andrea-mcmahon/"">Andrea McMahon</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/andrew-litchfield/"">Andrew Litchfield</a></strong><br />  Partner</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strrong><strong><a href=""~/en/people/patrick-arben/"">Patrick Arben</a></strong><br />  Partner</strrong></p>    <p><strong><a href=""~/en/people/james-sidwell/"">James Sidwell</a></strong><br />  Partner</p>  </div>  </div>  </div>  ",GWLG.UK,eb2302bd-02df-4612-be27-133a63c5995a;3d0d2ba1-fe4c-43cd-81d1-f7265baecea0;fdb31259-dc1d-4722-ad16-6401036a1ddb;18c972b4-6383-49da-8645-30a3b18621a5,0341457F-07AF-439F-9D1E-74559CCAFD65,NULL,0,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{65279A30-71F0-44B3-84C4-663C1745039F}|{A6721AFA-6B4F-4DB3-B6EB-BA956EE3FBDB}|{2E342839-C11F-41E8-9244-0971BDED3553}|{38984250-866F-40B0-B3EB-85AEED73805A}
518,/Services/Mergers-Acquisitions/UK,en-GB,2AC9D0E8-936F-41EB-916A-E51E5C5776AE,UK,UK,International M&A law firm advising on complex corporate transactions. M&A lawyers highly experienced in global mergers and acquisitions.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Mergers and acquisitions provide a whole host of opportunities for your organisation, from increasing market share to diversifying your portfolio, but in today&#39;s economic climate they also come with a range of risks. Whether you require legal advice on domestic, international or cross-border deals, our M&amp;A lawyers can work with you long term to guide you through the most complex corporate transactions with ease.&nbsp;</strong></p>    <p>As an established M&amp;A law firm in the region, our lawyers in the UK have the knowledge and experience to advise on a full range of corporate transactions, including mergers, acquisitions and disposals, strategic investments and joint ventures.&nbsp;</p>    <p>We act across a wide spectrum of transaction size with particular experience in mid-market M&amp;A (transaction value up to &pound;500 million). Our significant experience in the market, and processes utilised on larger transactions, also allow us to cost-effectively advise on smaller (sub &pound;3 million) transactions.</p>    <p>Our multi-disciplinary team of corporate lawyers work seamlessly across a range of practice areas including real estate, public sector, and energy.&nbsp;</p>    <h3>Mergers and acquisition services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li>Buy and sell due diligence reporting</li>   <li>Data room services</li>   <li>Share and assets sales and purchases</li>   <li>Joint ventures</li>   <li>Management incentive plans</li>   <li>Warranty and indemnity insurance</li>   <li>Private equity investments</li>   <li>Solvent group reorganisations</li>   <li>Post-completion integration</li>  </ul>    <h3>Client work</h3>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)Management+buyouts|(headline3)FTSE-listed+company+|(headline2)Health+and+technology+space|(copy1)Acting+for+UK+SME+investor+Mobeus+on+its+%c2%a317.7+million+investment+in+relation+to+the+management+buyout+of+B2B+marketing+company+Inbox+Insight.|(copy3)Acting+for+Financial+Times+Stock+Exchange-listed+electronic+components+provider+TT+Electronics+plc+on+the+acquisition+of+Ferranti+Technologies+Limited%27s+defence+sector+power+and+control+business.|(copy2)Advising+health+and+tech+company+Nordic+Consulting+on+its+acquisition+of+Hygeian%2c+a+healthcare+consulting+company+with+clients+across+the+UK+and+the+Middle+East.+|(bghover2)colour-darkblue|(name)ThreeBlockWidget|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <p>We are consistently recognised as a leading global firm for our M&amp;A practice in the top legal directory rankings.</p>    <p>For our mid-market M&amp;A work (deal value up to $500 million), both <em>Bloomberg</em> and <em>Refinitiv</em> ranks us within the top five in the UK and top 10 in the world rankings.</p>    <h3>Learn more</h3>    <p>To find out more about how we can guide your company through the complex field of mergers and acquisitions, contact a member of our team.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/gareth-baker/"">Gareth Baker</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/chris-towle/"">Chris Towle</a></strong><br />  Partner</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/sunil-kakkad/"">Sunil Kakkad</a></strong><br />  Consultant</p>  </div>  </div>  </div>  ",GWLG.UK,532e53ff-a7e9-451d-ad5d-5dfdfc681712;414ac382-6045-48c9-8797-b778fbe6164d;e296f021-59e1-410e-a0ad-0626e49ce506,56646CDA-20D7-43D4-B13C-886E1CD90C52,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{DBEEA1B1-FBD9-41CC-A2EA-39D36CC3DB0E}|{0A35E7F0-4054-4828-AEAE-E83D218832CF}|{783579A7-C423-44B6-AC93-3C05ADB31EBC}
519,/Services/Corporate/UK,en-GB,008F0FA2-64E1-4D08-BD7C-7B9C2EDBEA3C,UK,UK,"Corporate law firm with corporate lawyers providing a wide range of legal services including private equity, M&A and investment funds.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>In a world where businesses should never stand still, corporate activity drives growth and success behind the scenes. Ambitious businesses need corporate lawyers that can provide seamless legal advice drawing upon deep experience across the full spectrum of corporate legal services.</strong></p>    <p>As a sector-focussed full-service law firm, we have everything you need in one place, creating efficiencies and connecting strategies to ensure your success. With offices across the world in Canada, Europe, the Middle East and Asia, we offer you both the depth and geography you may require as your business evolves, and our service can be tailored to your changing needs every step of the way.</p>    <p>Our technically excellent legal advice delivered through a partner-led service makes our team of corporate solicitors a popular choice with clients ranging from the world's leading financial institutions and public companies to private businesses and entrepreneurs.</p>    <p>The 200-strong team has extensive experience across the full range of corporate advice including equity capital markets on AIM and the Main Market, investment funds, private equity and both public and private mergers and acquisitions.</p>    <p>We combine our transactional knowledge with vast experience across a range of sectors including <a href=""~/en/sectors/energy/"">energy</a>, renewables and natural resources, <a href=""~/en/sectors/financial-institutions-services/global/"">financial institutions</a>, advanced engineering, health and <a href=""~/en/sectors/life-sciences/global/"">life sciences</a> (including pharmaceutical <a href=""~/en/sectors/cannabis/global/"">cannabis</a>), <a href=""~/en/sectors/tech/global/"">technology</a>, <a href=""~/en/sectors/infrastructure/global/"">infrastructure</a>, <a href=""~/en/services/indirect-real-estate/#uk"">indirect real estate</a>, <a href=""~/en/sectors/government-contracting-public-sector/global/"">government</a>, and <a href=""~/en/services/insurance-and-reinsurance/#uk"">insurance</a> and <a href=""~/en/services/investment-funds/#uk"">funds</a>.</p>    <h3>Corporate legal services</h3>    <ul class=""o-lined-list is-list-unstyled list-of-links o-2-columns"">   <li><a href=""~/en/services/capital-markets/#uk"">Equity capital markets</a></li>   <li><a href=""~/en/services/investment-funds/#uk"">Investment funds</a></li>   <li><a href=""~/en/services/private-equity/#uk"">Private equity</a></li>   <li>Joint ventures</li>   <li><a href=""~/en/services/mergers-acquisitions/#uk"">Mergers &amp; acquisitions</a></li>   <li><a href=""~/en/services/mergers-acquisitions/#uk"">Takeovers</a></li>  </ul>    <h3>Client work</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The team at Gowling WLG have provided critical, clear and commercial advice and round the clock support to the Williams team through an intense transaction process.<cite>General Counsel, Williams F1, Mark Biddle</cite></p>  </blockquote>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightblue|(headline1)Cenkos+Securities+plc|(headline3)Aurrigo+International+plc|(headline2)Brockwell+Energy+Limited|(copy1)Advising+Cenkos+Securities+plc+as+bookrunner+and+broker+on+a+conditional+placing+to+raise+%c2%a39+million+for+the+specialist+service+provider+MJ+Hudson+Group+plc.|(copy3)Advising+Aurrigo+International+plc%2c+a+leading+international+provider+of+transport+technology+solutions%2c+on+its+successful+placing+and+admission+to+trading+on+the+AIM+market+of+the+London+Stock+Exchange.|(copy2)Advising+Brockwell+Energy+Limited+on+the+sale+of+Westfield+Energy+Recovery+Limited+to+Equitix%2c+a+global+investor%2c+developer+and+long-term+fund+manager+of+core+infrastructure+assets.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-darkred|(width)|(height)^}{^widget|(bghover1)colour-darkblue|(widget_displayname)Three+Block+Widget|(bghover3)colour-lightred|(headline1)HydrogenOne+Capital+Growth+plc|(headline3)Urban+Logistics+REIT|(headline2)Cordiant+Digital|(copy1)Advising+HydrogenOne+Capital+Growth+Plc+on+a+%e2%82%ac6+million+investment+in+HH2E+AG%2c+to+fund+the+development+of+new+green+hydrogen+projects+in+Germany.|(copy3)Acting+for+Urban+Logistics+REIT+on+its+%c2%a3108.3+million+fundraising+by+way+of+a+placing+and+PrimaryBid+offer.|(copy2)Acting+for+Cordiant+Digital+Infrastructure+Limited+on+its+Initial+Public+Offering+(IPO)+which+raised+gross+proceeds+of+%c2%a3370+million.|(linktext1)Read+more|(linktext2)Read+more|(linktext3)Read+more|(name)ThreeBlockWidget|(bghover2)colour-grey|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <p>We are proud to be consistently recognised by the legal directories in corporate rankings, with <em>The Legal 500 </em>ranking our team in Tier 2 for Equity Capital Markets: Small Mid-cap and Tier 1 for Listed Funds and Corporate and Commercial: Birmingham. <em>Chambers UK</em> also ranks the team in Band 2 for Capital Markets: AIM and Investment Funds: Closed-ended Listed Funds.</p>    <p>We consistently perform strongly in the global M&amp;A and Private Equity legal advisory tables published by <em>Bloomberg</em> and <em>Refinitiv</em>. Our activity consistently contributes to us featuring in the top 20 law firms advising on global mid-market M&amp;A deals.</p>    <h3>Contact our team</h3>    <p>For more advice on how we can help you with your corporate activity, contact a member of our team today.</p>    <div class=""grid-container grid-container-inline"">  <div class=""grid-x"">  <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/gareth-baker/"">Gareth Baker</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/charles-bond/"">Charles Bond</a></strong><br />  Partner, head of Capital Markets and Natural Resources (UK)</p>    <p><strong><a href=""~/en/people/kristian-rogers/"">Kristian Rogers</a></strong><br />  Partner</p>  </div>    <div class=""small-12 medium-6 cell"">  <p><strong><a href=""~/en/people/chris-towle/"">Chris Towle</a></strong><br />  Partner</p>    <p><strong><a href=""~/en/people/sunil-kakkad/"">Sunil Kakkad</a></strong><br />  Consultant</p>    <p><strong><a href=""~/en/people/stuart-young/"">Stuart Young</a></strong><br />  Partner, chair of Automotive group</p>  </div>  </div>  </div>  ",GWLG.UK,532e53ff-a7e9-451d-ad5d-5dfdfc681712;6535cd7a-0e8e-447a-bc96-cec1df267dfe;faf162a4-9002-4c9b-abb0-1b7d67160d73;414ac382-6045-48c9-8797-b778fbe6164d;e296f021-59e1-410e-a0ad-0626e49ce506;5f2d3429-54fb-4005-99bf-68f77fe81428,CA126CE8-3692-45E8-A1BE-AA0808B0C37E,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{DBEEA1B1-FBD9-41CC-A2EA-39D36CC3DB0E}|{3D896E8A-1B5E-4EDC-BBF3-0C42EE1FA540}|{E827C458-41A6-4E35-8824-80282331C490}|{0A35E7F0-4054-4828-AEAE-E83D218832CF}|{783579A7-C423-44B6-AC93-3C05ADB31EBC}|{A48180A6-54EA-4F4E-847C-35E399EB739D}
520,/Services/Patents/China,en-GB,2FEB2D8D-1848-4A31-9F6F-FDAA6868F07D,China,China,"Our Patent team in China are at the forefront of high-tech and life sciences matters. We serve global clients in these sectors, advising on patent filing and prosecution. Contact our team to find out more.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p>China is the world&rsquo;s fastest growing marketplace for IP filing and protection. Our Chinese patent lawyers assist international clients doing business inside China as well as Chinese businesses pursuing investment opportunities outside of China (e.g. Canada, the UK, Europe, Africa, Singapore, Latin America).</p>    <p>Members of our team are fluent in English, German, French, Mandarin and Cantonese. We have experience in all aspects of IP matters across diverse sectors spanning manufacturing, tech, engineering, aviation, automotive, fast-moving consumer goods and more.</p>    <p>With many years of experience working with China National Intellectual Property Administration (CNIPA) our IP team will support you throughout the lifecycle of your IP portfolio, from evaluating the right protection strategy (patents vs. utility models vs. trade secret and others) over search reports and freedom to operate opinions, to IP filing and prosecution.</p>    <p>We are at the forefront of high-tech and life sciences matters. We serve global clients in these sectors, advising on patent filing and prosecution. Familiar with the business aspect of IP exploitation, we also regularly conduct IP transactional works including licensing, assignment, and pledges. We have experience working with local counsel and investigative agents in China, both on the prosecution and enforcement of IP rights.</p>    <h2>Client work&nbsp;</h2>    <p>{^widget|(name)ThreeBlockWidget|(Headline1)Patents+and+utility+model+filing|(Copy1)Counsel+to+a+market+leader+in+milling+technology+on+all+their+China+IP+prosecution.+Work+included+utility+model+filing+and+enforcement+strategies%2c+as+well+as+trademark+filing+strategies.|(LinkText1)Read+more|(BgHover1)colour-aubergine|(Headline2)Patent+litigation|(Copy2)Advising+a+US+manufacturer+of+robotic+systems+on+its+patent+litigation+strategy%2c+including+advocacy.|(LinkText2)Read+more|(BgHover2)colour-lightblue|(Headline3)IP+strategy|(Copy3)Advising+a+world+leader+in+machinery+and+equipment+for+advanced+semiconductor+lithography+on+developing+its+China+IP+strategy%2c+as+well+as+advising+on+the+restructuring+of+its+China+patent+and+trade+secret+protection+strategies.|(LinkText3)Read+more|(BgHover3)colour-darkred|(widget_displayname)Three+Block+Widget^}</p>    <h2>Awards and recognition</h2>    <blockquote>  <p align=""center"">The whole Gowling WLG team feels like an &lsquo;extension of our in-house team.</p>  </blockquote>    <p align=""center"">IAM Patent 1000 2022</p>    <p>We are proud to be recognised by a number of global IP awards including <em>MIP Stars</em>, <em>IAM</em> and <em>World Trademark Review</em>.</p>    <h2>Contact our team</h2>    <p>To find out more about how we can support you with your cross-border patent strategy, contact us.</p>  ",GWLG.China,NULL,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
521,/Services/IP-Litigation-Strategy/Germany,fr-CA,2C9BE22F-6049-4A6A-ABB1-F1330D7239FE,Allemagne,Allemagne,"Across the full range of IP rights, our team in Munich advises both domestic and international clients.",NULL,NULL,"<p>Munich is a hub for the high tech and life sciences industries&nbsp;in Germany, with our IP/IT/Commercial team providing leading edge advice. Across the full range of IP rights, our team in Munich advises both domestic and international clients. We are passionate about making sure our clients use their intellectual property in a way that adds value to their businesses. This involves both developing intellectual property exploitation strategies and successfully enforcing rights against infringers.</p>  ",GWLG.Germany,a21f77d5-b08e-4dac-9b34-efe5dddc9db1,82F237A8-0DA3-46F1-86B5-4392A020F41A,NULL,0,0,t-white,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{B25FA868-A5C7-42D7-8E6E-4EBFBA8AD047}
522,/Services/Patents/France,fr-CA,6E7E9D72-F7BA-485F-BA57-0D11E63D93DD,France,France,Patent lawyers working across contentious and non-contentious matters in France.,~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<p><strong>Our team in France has a broad range of legal experience in all fields of intellectual property (IP). We work across a wide range of sectors including technology, luxury goods and retail, health and pharmaceuticals, automotive, and manufacturing.</strong></p>    <p>Appearing regularly before the French courts, we have a reputation for excellence, speed, and determination. With deep knowledge of French patent litigation procedures, we are recognised as a major player in the French market for patents and handling complex pan-European litigation and disputes, particularly those concerning the internet.</p>    <p>Our extensive experience in the management and enforcement of IP rights also allows us to support our clients in all aspects of non-contentious IP.</p>    <h3>Client work</h3>    <p>Some of our past projects include:</p>    <p>{^widget|(bghover1)colour-aubergine|(widget_displayname)Three+Block+Widget|(bghover3)colour-darkred|(headline1)Major+manufacturer|(headline3)US+biotechnology+company|(headline2)Pharmaceutical+companies|(copy1)Successfully+representing+a+major+French+manufacturer+of+professional+electrical+equipment+in+high+value+patent+litigation+before+the+French+courts.|(copy3)Representing+a+US+biotechnology+company+in+litigation+regarding+patented+software.|(copy2)Advising+pharmaceutical+on+multi-jurisdictional+regulatory+issues+and+patent+litigation.|(bghover2)colour-darkblue|(name)ThreeBlockWidget|(width)|(height)^}</p>    <h3>Awards and recognition</h3>    <blockquote style=""text-align: center;"">  <p style=""text-align:center;"">The French base of Gowling WLG repeatedly proves its might on knotty contentious and transactional briefs for first movers in the worlds of biotechnology, optical devices, telecommunications and blockchain. <cite>IAM Patent 1000</cite></p>  </blockquote>    <p>Céline Bey is consistently recognised in the market, with <em>IAM Patent 1000</em>&nbsp;naming her as one of the world&#39;s leading patent professionals. The team also ranks in <em>IAM Patent 1000</em> for litigation and transactions.</p>    <h3>Contact our team in France</h3>    <p>For further information on how we can help you with patents and IP&nbsp;please contact our team.</p>    <p><a href=""~/en/people/celine-bey/""><strong>Céline Bey</strong></a><br />  Partner</p>  ",GWLG.France,ad4cc2a0-5825-4d92-930d-64226a7659b3,85764222-DB69-43CF-AF79-2C6FCBDA9589,NULL,0,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,{F75F55C8-B8D1-4FA5-9396-AFE78A3B844C}
523,/Services/Lending-and-Borrowing/Canada,en-GB,BE170F98-DA27-4047-B23B-ACC1CB854BA5,Canada,Canada,"For creditors and borrowers alike, efficiency and predictability are vital to the success of any lending transaction. Harnessing sophisticated experience across the full lending lifecycle, our team delivers just that – helping clients navigate, simplify and de-risk transactions of all sizes and types.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>An extension of your team</h2>    <p>We strive to integrate seamlessly with your organization, developing a complete understanding of your goals, opportunities and obstacles. Working in client-dedicated teams, we shape our services to meet your unique needs.</p>    <h2>Borderless lending solutions</h2>    <p>We represent many of the world&#39;s largest financial institutions on complex cross-border lending transactions, coordinating closely with our colleagues overseas whenever required. For global clients, our team in Canada is well-positioned to offer insight and advice on the Canadian financial marketplace and the evolving regulatory, legislative and market forces that shape it.</p>    <h2>360-degree approach</h2>    <p>Lending frequently converges with other legal areas, adding nuance and complexity to transactions. We have you covered. Our practice is backed by the strength of a full-service firm, with broad capabilities in banking &amp; finance, corporate law, M&amp;A, restructuring &amp; insolvency, recovery services, regulatory, FinTech and consumer finance.</p>  ",GWLG.Canada,45042386-e87e-4fa2-8f87-101784526d0a,5B0D38F3-85B5-4AB9-91EA-166DB1D89EDD,NULL,0,1,NULL,"<p class=""has-text-large"">For creditors and borrowers alike, efficiency and predictability are vital to the success of any lending transaction. Harnessing sophisticated experience across the full lending lifecycle, our team helps clients navigate, simplify and de-risk transactions of all sizes and types.</p>    <p class=""has-text-large"">Our practice is built on trust, collaboration and enduring client relationships. We are proud to be a qualified service provider to all six of the major domestic banks in Canada. We are also a firm of choice for a number of foreign banks, domestic and foreign insurers, and non-traditional and specialty lenders.</p>    <p class=""has-text-large"">Again and again, clients turn to us for tailored solutions in relation to a variety of loan products and structures, including: senior secured, mezzanine, sub-debt and second-lien financing; asset based lending; equipment financing; and DIP financing. This advice is underpinned by broad sector-based knowledge in real estate, natural resources, energy, and construction, among many other areas.</p>  ",Current insights,cc1edd55-12d2-455d-b3f6-517f69f71d71;b2482e0b-00cc-4920-a0d6-7a7700195b28;ab7001ba-e690-4ea9-8bd2-bc65ee20331c;71d5dab4-84b5-45cc-9dc9-af1b59d49c15;ee1babc5-0951-415c-9761-08ccb5fb20a4,Browse all related insights,How can we help you?,"<p>Contact one of our lending professionals today to learn more about our services and solutions.</p>    <p><a class=""c-button"" href=""~/en/people/?page=1&amp;services=59039&amp;locations=GWLG.Canada"">View the team</a></p>  ",Stay connected,"<p>Subscribe to our Financial Services &amp; Secured Lending newsletter to receive our latest insights straight to your inbox.</p>    <p><a class=""c-button"" href=""https://sites-gowlingwlg.vuturevx.com/6/4899/newsletter-sign-ups/subscribe---fully-secured.asp"" target=""_blank"">Subscribe</a></p>  ",0005d063-9d08-49f2-8dd7-5223804c4988,~/en/insights-resources/?page=1&locations=GWLG.Canada&services=274,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
524,/Services/Lending-and-Borrowing/Canada,fr-CA,BE170F98-DA27-4047-B23B-ACC1CB854BA5,Canada,Canada,"Pour les créanciers comme pour les emprunteurs, l’efficacité et la prévisibilité sont essentielles au bon déroulement de toute transaction de crédit. Notre pratique repose sur la confiance, la collaboration et les relations durables avec nos clients.",~/getmedia/f98364e4-b284-4d9c-8dd2-c08b1692796a/Gowling-WLG-Default-Page-Image.jpg.xml?width=930&amp;height=450&amp;ext=.jpg,NULL,"<h2>Une extension de votre équipe</h2>    <p>Nos équipes dédiées aux clients veillent à s&rsquo;intégrer parfaitement à votre organisation, de manière à analyser en profondeur vos objectifs, ainsi que les enjeux et les possibilités qui peuvent se présenter à vous. Ainsi, nous sommes en mesure de proposer des services adaptés à vos besoins précis.</p>    <h2>Des solutions de prêt sans frontières</h2>    <p>Nous représentons un grand nombre des plus importantes institutions financières du monde dans le cadre d&rsquo;opérations de prêt transfrontalières complexes, en étroite coordination avec nos collègues à l&rsquo;étranger lorsque cela est nécessaire. Pour les clients internationaux, notre équipe au Canada est bien placée pour offrir un aperçu et des conseils sur le marché financier canadien et les tendances réglementaires, législatives et commerciales qui le façonnent.</p>    <h2>Une approche globale</h2>    <p>Le secteur des prêts converge souvent avec d&#39;autres sphères juridiques, ce qui ajoute nuance et complexité aux opérations. C&rsquo;est là que nous pouvons vous offrir une plus-value, car notre pratique s&rsquo;appuie sur la force d&rsquo;un cabinet multiservice fort de vastes capacités en matière de droit bancaire et de finance, de droit des sociétés, de fusions et d&rsquo;acquisitions, de restructuration et d&rsquo;insolvabilité, de services de recouvrement, de réglementation, de fintech et de droit du crédit à la consommation.</p>  ",GWLG.Canada,45042386-e87e-4fa2-8f87-101784526d0a,5B0D38F3-85B5-4AB9-91EA-166DB1D89EDD,NULL,0,1,NULL,"<p>Pour les créanciers comme pour les emprunteurs, l&#39;efficacité et la prévisibilité sont essentielles au bon déroulement de toute transaction de crédit (emprunt ou prêt). Grâce à son expérience approfondie du cycle de vie complet des prêts, notre équipe guide adroitement les clients dans les opérations de toutes tailles et de tout type, tout en les simplifiant et maîtrisant les risques.</p>    <p>Notre pratique repose sur la confiance, la collaboration et les relations durables avec nos clients. Fiers d&#39;être un prestataire de services qualifié auprès des six principales banques nationales du Canada, nous sommes également un cabinet de choix pour plusieurs banques étrangères, assureurs nationaux et étrangers, et prêteurs non traditionnels et spécialisés.</p>    <p>Les clients se tournent fréquemment vers nous pour obtenir des solutions sur mesure quant à une variété de produits et de structures de prêt, y compris&nbsp;: le financement garanti de premier rang, le financement mezzanine, le financement par créance subordonnée, le prêt de deuxième rang; le prêt reposant sur l&rsquo;actif; le financement d&#39;équipement; et le financement du débiteur-exploitant (DIP). Ces conseils sont en outre étayés par une vaste connaissance sectorielle de l&#39;immobilier, des ressources naturelles, de l&#39;énergie et de la construction, entre autres domaines.</p>  ",Ressources actuelles,cc1edd55-12d2-455d-b3f6-517f69f71d71;b2482e0b-00cc-4920-a0d6-7a7700195b28;ab7001ba-e690-4ea9-8bd2-bc65ee20331c;ee1babc5-0951-415c-9761-08ccb5fb20a4,Découvrez toutes les autres ressources,Découvrez notre plus-value,"<p>Pour en savoir plus à propos de nos services et de nos solutions, n&rsquo;hésitez pas à communiquer avec l&rsquo;un ou l&rsquo;autre de nos professionnels des prêts.</p>    <p><a class=""c-button"" href=""~/fr/people/?page=1&amp;services=59039&amp;locations=GWLG.Canada"">Notre équipe</a></p>  ",Restez branchés,"<p>Abonnez-vous à notre bulletin Services financiers et prêts garantis pour obtenir nos plus récentes perspectives en la matière, directement dans votre boîte de réception (disponible en anglais seulement).</p>    <p><a class=""c-button"" href=""https://sites-gowlingwlg.vuturevx.com/6/4899/newsletter-sign-ups/subscribe---fully-secured.asp"" target=""_blank"">S&#39;abonner</a></p>  ",NULL,~/fr/insights-resources/?page=1&locations=GWLG.Canada&services=274,NULL,{150EC8C1-D547-4C2E-982A-E33F90E5AB3E}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,

- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 1562237
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: text/csv
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: csv
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20230828T124323Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "56a2c6b9-f2dd-4392-9d9d-90865e050704"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\mahesh.kambhampati@altudo.co
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20230926T054331Z
