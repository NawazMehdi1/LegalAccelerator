---
ID: "e794a6b9-3724-4c9d-8627-4689b044afd9"
Parent: "a00bbd34-02b4-49d3-931d-237fbd236396"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/GowlingWLG Scripts/ContentMigration/Global Reach/City-Migration-Script"
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    $LandingPageItemPath = '/sitecore/content/GowlingWLG/GowlingWLG/Home/Global Reach'
    $PageTemplateID = '{9CCF0733-B88D-4E51-B377-15936C8F60DB}'
    $CountryTemplateID = '{FE3ED608-1AE2-43FC-8D2B-24D173D9A56C}'
    $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Office/Offices_CMSTree'
    $DataFolderPath = '/sitecore/content/GowlingWLG/GowlingWLG/Data'
    $StartItemPath = '/sitecore/content/GowlingWLG/GowlingWLG/Home'
    $LocationsPath = '/sitecore/content/GowlingWLG/GowlingWLG/Data/Tags/Locations'
    $TagTemplateID = '{6B40E84C-8785-49FC-8A10-6BCA862FF7EA}'
    $OfficesTemplateID = '{6D35D469-9E90-4D14-B1A9-B675FE74B532}'
    $AuthorsRenderingID = '{10351392-40DB-4A8A-A9EA-CC8EDEC0AF0F}'
    $MediaContactTempID = '{2984BB6F-8203-4EF9-A0EE-257BA70E9BE7}'
    
    function ImportList($csvFilePath){
        $media = Get-Item -Path $csvFilePath
        # get stream and save content to variable $content
        [System.IO.Stream]$body = $media.Fields["Blob"].GetBlobStream()
        try    
        {
            $contents = New-Object byte[] $body.Length
            $body.Read($contents, 0, $body.Length) | Out-Null
        } 
        finally 
        {
            $body.Close()    
        }
        
        # convert to dynamic object
        $importList = [System.Text.Encoding]::Default.GetString($contents) | ConvertFrom-Csv -Delimiter ","
        return $importList;
    }
    
    function CreateItem{
        [cmdletbinding()]
        param ( 
                $name, $id=0, $language, $template, $parentItem, $createItem=$true, $srcLang='', $isRecurse = $false
            )
            write-host('CreateItem $name=' + $name + ' $id='+$id+' $language='+$language+ ' $template='+$template+' $parentItem='+$parentItem+' $createItem='+$createItem)
            if($isRecurse){
                if(gci -path $parentItem -language $language -recurse | where-object{$_.'TemplateID' -eq $template -and ($_.Name -eq $name -or $_.ID -eq $id)} -ErrorAction SilentlyContinue){
                    write-host('existing language')
                    $Item = gci -path $parentItem -language $language | where-object{$_.Name -eq $name -or $_.ID -eq $id}
                    
                }
                #if the Item is present but not with the particular language
                elseif(gci -path $parentItem -recurse | where-object{$_.'TemplateID' -eq $template -and ($_.Name -eq $name -or $_.ID -eq $id)} -ErrorAction SilentlyContinue){ 
                    if($srcLang -eq ''){
                       $languageVersions = gci -path $parentItem -language * | where-object{$_.'TemplateID' -eq $template -and ($_.Name -eq $name -or $_.ID -eq $id)}
                       $existingLanguage = ''
                       foreach($languageVersion in $languageVersions){
                           $existingLanguage = $languageVersion.Language
                           break
                       }
                       
                       $Item = gci -path $parentItem -recurse | where-object{$_.'TemplateID' -eq $template -and $_.Name -eq $name -or $_.ID -eq $id} | Add-ItemLanguage -Language $existingLanguage -TargetLanguage $language
                    }
                    else{
                        $Item = gi -path $id | Add-ItemLanguage -Language $srcLang -TargetLanguage $language
                    }
                }
                elseif($createItem){
                    if($id -ne 0){ 
                        write-host('Force id')
                        $Item = ni -Path $parentItem -ItemType $template -Name $name -ForceId $id -language $language
        
                    }
                    else{
                        write-host('path')
                        $Item = ni -Path $parentItem -Name $name -ItemType $template -language $language 
                        write-host($Item.fullpath)
                    }
                    
                }
            }
            else{
                if(gci -path $parentItem -language $language | where-object{$_.Name -eq $name -or $_.ID -eq $id} -ErrorAction SilentlyContinue){
                    write-host('existing language')
                    $Item = gci -path $parentItem -language $language | where-object{$_.Name -eq $name -or $_.ID -eq $id}
                    
                }
                #if the Item is present but not with the particular language
                elseif(gci -path $parentItem | where-object{$_.Name -eq $name -or $_.ID -eq $id} -ErrorAction SilentlyContinue){ 
                    if($srcLang -eq ''){
                       $languageVersions = gci -path $parentItem -language * | where-object{$_.Name -eq $name -or $_.ID -eq $id}
                       $existingLanguage = ''
                       foreach($languageVersion in $languageVersions){
                           $existingLanguage = $languageVersion.Language
                           break
                       }
                       
                       $Item = gci -path $parentItem | where-object{$_.Name -eq $name -or $_.ID -eq $id} | Add-ItemLanguage -Language $existingLanguage -TargetLanguage $language
                    }
                    else{
                        $Item = gi -path $id | Add-ItemLanguage -Language $srcLang -TargetLanguage $language
                    }
                }
                #if the id is a path and not an GUID
                elseif($createItem){
                    if($id -ne 0){ 
                        write-host('Force id')
                        $Item = ni -Path $parentItem -ItemType $template -Name $name -ForceId $id -language $language
        
                    }
                    else{
                        write-host('path')
                        $Item = ni -Path $parentItem -Name $name -ItemType $template -language $language 
                        write-host($Item.fullpath)
                    }
                    
                }
            }
            return $Item
    }
    
    function NullCheck($value){
            
            $val = if($value -eq 'NULL' -or $value -eq 'null' -or [string]::IsNullOrEmpty($value) -or $value -eq '0' -or $value -eq 0){''}else{$value}
            return $val
    }
    
    function DataItemsMapping{
        [cmdletbinding()]
        param (
            $CurrItem, $ItemName, $ItemTempID, $FieldValue, $fieldName, $ifCurrItem=$false
            )
            if($ifCurrItem){
                $Item = gi -path $CurrItem.ID -language $language
            }
            else{
                $Item = $CurrItem | get-childitem -recurse | where {$_.Name -eq $ItemName -and $_.'TemplateID' -eq $ItemTempID}
            }
            $Item.Editing.BeginEdit()
                $Item[$fieldName] = $FieldValue
            $Item.Editing.EndEdit()
            return $Item
        }
        
    function DataMapping{
            [cmdletbinding()]
        param ( 
                $value, $parentPath, $template
            )
            if($value.contains('GWLG')){
                $valArr = $value.replace('.','').replace('GWLG','').split(';')
            }
            else{
                $valArr = $value.split(';')
            }
    
            if($value.contains('GWLG.')){
                $keyArr = $value.replace('GWLG.','').replace('.','-').replace(',',' ').split(';')
            }
            else{
                $keyArr = $value.replace('.','_').replace(',',' ').split(';')
            }
    
    
            $ids=''
            for ($i = 1; $i -le $valArr.length; $i++) {
    
    
                    $Item = CreateItem -name $keyArr[$i-1] -language $row.DocumentCulture -template $template -parentItem $parentPath
    
                    $ids += $Item.ID
    
                    if($i -lt $valArr.length){
                    $ids += '|'
                    }
    
                    if($template -eq $DictionaryEntryTemplate){
                        $x= DataItemsMapping -CurrItem $Item -fieldName $dict[0] -FieldValue $keyArr[$i-1] -ifCurrItem $true
                        $x= DataItemsMapping -CurrItem $Item -fieldName $dict[1] -FieldValue $valArr[$i-1] -ifCurrItem $true
                    }   
                    if($template -eq $TagTemplateID){
                        $x= DataItemsMapping -CurrItem $Item -fieldName 'Title' -FieldValue $valArr[$i-1] -ifCurrItem $true
                    }
                    write-host($ids)
                    return $ids
    
    
            }
    
        }
    
    function DataFormatting($value){
            $val = $value.toLower().replace('sitecore.data.items.item','').replace('false','').replace('true','').replace(' ','').toupper()
            return $val
    }
    
    function PageName($pageName){
        
        $pageName = $pageName.substring($pageName.lastIndexOf('/')+1);
        $pageName = $pageName.trim();
        
        return $pageName
    }
    
    function GeneralLinkFieldMapping{
            [cmdletbinding()]
        param (
                $text,$url,$type
            )
            $fieldValue = ''
            if($type -eq 'external' -or (-not $url.contains('gowlingwlg.com')))
            {
                write-host($url)
               $fieldValue = '<link text="' + $text + '" linktype="external" url="' + $url + '" anchor="" target="_blank" />'
               write-host('after' + $fieldValue)
            }
            if($type -eq 'internal' -or $url.contains('gowlingwlg.com'))
            {
                if($url){}
        		$fieldValue = '<link text="' + $text + '" anchor="" linktype="internal" class="" title="" target="" querystring="" id="'+ $id +'" />'
            }
            if($type -eq 'media')
            {
                
            }
            return $fieldValue
    }
    
    function ItemMappingWithGuid{
            [cmdletbinding()]
            param (
                $Values, $type
                )
                $fieldValue = ""
                if(NullCheck($Values)){
                    $items = $Values.split(';');
                    
                    for ($i = 1; $i -le $items.length; $i++) {
                        
                        if($type -eq 'Offices'){
                            $fieldValue +=  RelatedOffices -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'Sectors'){
                            $fieldValue +=  RelatedSectors -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'Services'){
                            $fieldValue+=  RelatedServices -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'People'){
                            $fieldValue+=  RelatedContacts -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'Topics'){
                            $fieldValue +=  RelatedTopics -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        if($type -eq 'MediaContact'){
                            $fieldValue +=  RelatedMediaContacts -newItem $newItem -GUID $items[$i-1] -language $row.DocumentCulture 
                        }
                        
                       if($i -lt $items.length){
                            $fieldValue += '|'
                        }
                    }
                    
                }
                return $fieldValue;
        }    
        
    function RelatedOffices{
        [cmdletbinding()]
        param (
            $newItem, $GUID, $language
            )
        
        $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Office/Offices_CMSTree'
        $importList = ImportList($csvFilePath);
        
        foreach($row in $importList){
            if($row.TreeNodeGUID -eq $GUID){
                
                $OfficeName = PageName($row.NodeAliasPath)
    			$CountryName = CountryName($row.NodeAliasPath)
    			
    			$language = $row.DocumentCulture 
                $CountryPath = GetCountryItem($CountryName)
                
                $OfficeItem = CreateItem -name $OfficeName -id $row.TreeNodeGUID -language $language -template $OfficesTemplateID -parentItem $CountryPath -createItem $false
                
                return $OfficeItem.ID
                    
            }
        }
    }
    
    function CountryName($pageName){
        
        $pageName = $pageName.split('/')[2];
        $pageName = $pageName.trim();
        
        return $pageName
    }
    
    function GetCountryItem($CountryName){
        $items = Get-ChildItem -Path ($StartItemPath + '/Global Reach') | Where-Object { $_.Name -eq $CountryName -and $_.TemplateID -eq $CountryTemplateID}
        foreach ($item in $items) {
        	return $item.fullpath
        }
    }
    
    function RelatedSectors{
        [cmdletbinding()]
        param (
            $newItem, $GUID, $language
            )
        
        $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Sectors/Sectors_CMSTree'
        $importList = ImportList($csvFilePath);
        
        foreach($row in $importList){
            if($row.TreeNodeGUID -eq $GUID){
                $pageName = PageName($row.NodeAliasPath)
                $SectorItem = CreateItem -name $pageName -id $row.TreeNodeGUID -language $row.DocumentCulture -template $SectorsTemplateID -parentItem ($StartItemPath + '/Sectors') -createItem $false
                return $SectorItem.ID
            }
        }
            
    }
    
    function RelatedServices{
        [cmdletbinding()]
        param (
            $newItem, $GUID, $language
            )
        
        $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Services/Services_CMSTree'
        $importList = ImportList($csvFilePath);
        
        foreach($row in $importList){
            if($row.TreeNodeGUID -eq $GUID){
                $pageName = PageName($row.NodeAliasPath)
                $ServiceItem = CreateItem -name $pageName -id $row.TreeNodeGUID -language $row.DocumentCulture -template $ServicesTemplateID -parentItem ($StartItemPath + '/Services') -createItem $false
                return $ServiceItem.ID
            }
        }
            
    }
    
    function RelatedContacts{
        [cmdletbinding()]
        param (
            $newItem, $GUID, $language
            )
        
        $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/People/PeopleCMSTree'
        $importList = ImportList($csvFilePath);
        
        foreach($row in $importList){
            if($row.TreeNodeGUID -eq $GUID){
                $pageName = PageName($row.NodeAliasPath)
                $PeopleItem = CreateItem -name $pageName -id $row.TreeNodeGUID -language $row.DocumentCulture -template $PeoplePageTempID -parentItem ($StartItemPath + '/People') -isRecurse $true -createItem $false
                return $PeopleItem.ID
            }
        }
            
    }
    
    function PageDisplayName($pageName){
        
        $normalizationForm = [System.Text.NormalizationForm]::FormD
        $normalizedString = $pageName.Normalize($normalizationForm)
        $normalizedString = $normalizedString -replace '[^\p{L}\s]', ' '
        $normalizedString = $normalizedString -replace '\s+', ' '
        return $normalizedString
    }
    
    function RelatedMediaContacts{
        [cmdletbinding()]
        param (
            $newItem, $GUID, $language
            )
        
        $csvFilePath = '/sitecore/media library/Project/GowlingWLG/GowlingWLG/ContentMigration/Common/MediaContact_CMSTree'
        $importList = ImportList($csvFilePath);
        
        foreach($row in $importList){
            if($row.TreeNodeGUID -eq $GUID){
                $pageName = PageDisplayName($row.Title)
                $ContactItem = CreateItem -name $pageName -language 'en' -template $MediaContactTempID -parentItem '/sitecore/content/GowlingWLG/GowlingWLG/Data/Global Objects/Event Contacts' -createItem $false
                return $ContactItem.ID
            }
        }
            
    }
    
    function KeyContactsHeading{
        [cmdletbinding()]
        param ( 
                $value, $DynamicPlaceHolder
            )
        $AuthorsRendering = $newItem | get-Rendering -Parameter @{DynamicPlaceholderId =$DynamicPlaceHolder} | where{($_.ItemId -eq $AuthorsRenderingID)}
        $queryString = $AuthorsRendering.Parameters
        $queryParams = [System.Web.HttpUtility]::ParseQueryString($queryString)
        $queryParams["OverrideTitle"] = $value
        $updatedQueryString = $queryParams.ToString()
        $AuthorsRendering.Parameters = $updatedQueryString
        Set-Rendering -Item $newItem -Instance $AuthorsRendering
    }
    
    function PresentationLayerCopy{
        [cmdletbinding()]
        param (
            $newItem, $template
            )
            $isPageBranch = (gi -path $template).fullpath.contains('/Presentation/Page Branches/')
            if($isPageBranch){
                $SourceItem = gci -path $template | where-object{$_.name -eq '$name'}
            }
            else{
                $SourceItem = gi -path $template
            }
            
             $newItem.Editing.BeginEdit()
                
                $newItem['__Renderings'] = $SourceItem['__Renderings']
                #$CurrentItem['__Final Renderings'] = $SourceItem['__Final Renderings']
                
            $newItem.Editing.EndEdit()
            
    }
    
    function RichTextComponents{
        [cmdletbinding()]
        param (
                $Text, $TagList
            )
            $count = 1;
            foreach($Item in $TagList){
                $Text = RichTextClipTag -Text $Text -startTag $Item.startTag -endTag $Item.endTag -count $count
                
                $count++;
            }
            return $Text;
    }
    
    function RichTextClipTag{
        [cmdletbinding()]
        param (
                $Text, $count, $startTag, $endTag
            )
            
            if($Text.indexof($startTag) -eq -1){
                return $Text
            }
            write-host 'startTag=' + $startTag + ' endTag=' + $endTag
            $totalStartIndex = $Text.indexOf($startTag)
            $TempString = $Text.substring(0,$totalStartIndex)
            $stringWidget = $Text.substring($Text.indexOf($startTag))
            $stringWidget = $stringWidget.substring(0,$stringWidget.indexOf($endTag)+($endTag).length)
            $totalStartIndex+=$stringWidget.indexOf($endTag)+($endTag).length;
            $TempString +=  $Text.substring($totalStartIndex);
            $Text = $TempString
            if(-not (gi -path ($newItem.fullpath + '/Data') -ErrorAction SilentlyContinue)){
                CreateItem -name 'Data' -language $language -template $PageDataTempID -parentItem $newItem.fullpath
            }
            $Componentitem = CreateItem -name ('Component-'+ $count) -language $language -template $RichTextTemplateID -parentItem ($newItem.fullpath + '/Data')
            $x = DataItemsMapping -CurrItem $Componentitem -fieldName 'Text' -ItemTempID $RichTextTemplateID -FieldValue $stringWidget -ifCurrItem $true
            
            if($Text.indexof($startTag) -ne -1){
                $count++;
                RichTextClipTag -Text $Text -count $count -startTag $startTag -endTag $endTag
            }
            else{
               
                return $Text.ToString()
            }
    }
    
    function OfficeData($count){
        
        $importList = ImportList($csvFilePath);
        foreach($row in $importList)
        {
            
            if($count -gt 0){
                $OfficeName = PageName($row.NodeAliasPath)
    			$CountryName = CountryName($row.NodeAliasPath)
    			$language = $row.DocumentCulture 
                $CountryPath = GetCountryItem($CountryName)
                $newItem = CreateItem -name $OfficeName -id $row.TreeNodeGUID -language $language -template $PageTemplateID -parentItem $CountryPath
                $newItem.editing.beginedit()  
    			#Content
                    $newItem['Title'] = NullCheck($row.Title)
    				$newItem['Content'] = NullCheck($row.MainContent)
    				$newItem['SubTitle'] = NullCheck($row.Summary)			
                    $newItem['Building Name'] = NullCheck($row.BuildingName)
                    $newItem['Address 1'] = NullCheck($row.Address1)
    				$newItem['Address 2'] = NullCheck($row.Address2)
    				$newItem['Address 3'] = NullCheck($row.Address3)
    				$newItem['City'] = NullCheck($row.City)
    				$newItem['State'] = NullCheck($row.ProvinceState)
    				$newItem['Postal Code'] = NullCheck($row.PostalCode)
    				$newItem['Country'] = NullCheck($row.Country)
    				$newItem['Geographical Latitude'] = NullCheck($row.GeoLatitude)
    				$newItem['Geographical Longitude'] = NullCheck($row.GeoLongitude)
    				$newItem['Map URL'] = NullCheck($row.GoogleMapURL)
    				
    			#Content
    			
    			#Contact Details
    			    $newItem['Phone'] = NullCheck($row.Phone)
    				$newItem['Mobile'] = NullCheck($row.Mobile)
    				$newItem['Fax'] = NullCheck($row.Fax)
    				$newItem['Office Email'] = NullCheck($row.OfficeEmail)								
    				$newItem['Recruitment Contact Email'] = NullCheck($row.RecruitmentContact)
    			#Contact Details				
    				
    				                
                #Start DataMapping#                
                  
                    $newItem['Jurisdictions'] = if(NullCheck($row.Locations)){DataMapping -value $row.Location -parentPath $LocationsPath -template $TagTemplateID }else{''}
                    $newItem['Jurisdictions'] = DataFormatting($newItem['Jurisdictions'])
    				$newItem['KenticoGUID']=$row.TreeNodeGUID
    				
    		        if($mapRelated){     
    				    
    				    if(NullCheck($row.MediaContact)){
    				       $newItem['Media Contact'] = ItemMappingWithGuid -Values $row.MediaContact -type 'MediaContact'
    				    }
    				    
    					if(NullCheck($row.KeyContacts)){
                            $newItem['Key Contacts'] = ItemMappingWithGuid -Values $row.KeyContacts -type 'People'
                        }
                        
                        if(NullCheck($row.KeyContactsHeading)){
                            #KeyContactsHeading -value $row.KeyContactsHeading -DynamicPlaceHolder '3'
                        }
    				    
    		        }
                    
                #End DataMapping#             
                 $newItem.editing.endedit() 
    
    			#PresentationLayerCopy -newItem $newItem -template $PageTemplateID
            }
    		
            else{
                break;
            }
            $count--;
        }
    }
    $count = 50
    
    #$mapRelated = $true
    $mapRelated = $false
    OfficeData($count)
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20230818T172602Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "79ce9133-ef82-4521-8f66-02c50d937eff"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\sanjeevi.ram@altudo.co
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20230828T184534Z
